
ESE516_Retro_stat_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c01c  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  0001001c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000620  200001dc  000101f8  000201dc  2**2
                  ALLOC
  3 .stack        00002004  200007fc  00010818  000201dc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .debug_info   000775ec  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000a355  00000000  00000000  00097849  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001b193  00000000  00000000  000a1b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001118  00000000  00000000  000bcd31  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001de8  00000000  00000000  000bde49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00025ef0  00000000  00000000  000bfc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002468c  00000000  00000000  000e5b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000978d8  00000000  00000000  0010a1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003ae4  00000000  00000000  001a1a88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <exception_table>:
    4000:	00 28 00 20 81 b3 00 00 7d b3 00 00 7d b3 00 00     .(. ....}...}...
	...
    402c:	7d b3 00 00 00 00 00 00 00 00 00 00 7d b3 00 00     }...........}...
    403c:	7d b3 00 00 7d b3 00 00 7d b3 00 00 7d b3 00 00     }...}...}...}...
    404c:	e1 92 00 00 59 91 00 00 7d b3 00 00 7d b3 00 00     ....Y...}...}...
    405c:	7d b3 00 00 7d b3 00 00 09 97 00 00 19 97 00 00     }...}...........
    406c:	29 97 00 00 39 97 00 00 49 97 00 00 59 97 00 00     )...9...I...Y...
    407c:	4d b3 00 00 5d b3 00 00 6d b3 00 00 7d b3 00 00     M...]...m...}...
    408c:	7d b3 00 00 7d b3 00 00 00 00 00 00 00 00 00 00     }...}...........
    409c:	7d b3 00 00 7d b3 00 00 7d b3 00 00 7d b3 00 00     }...}...}...}...
    40ac:	7d b3 00 00 00 00 00 00                             }.......

000040b4 <__do_global_dtors_aux>:
    40b4:	b510      	push	{r4, lr}
    40b6:	4c06      	ldr	r4, [pc, #24]	; (40d0 <__do_global_dtors_aux+0x1c>)
    40b8:	7823      	ldrb	r3, [r4, #0]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d107      	bne.n	40ce <__do_global_dtors_aux+0x1a>
    40be:	4b05      	ldr	r3, [pc, #20]	; (40d4 <__do_global_dtors_aux+0x20>)
    40c0:	2b00      	cmp	r3, #0
    40c2:	d002      	beq.n	40ca <__do_global_dtors_aux+0x16>
    40c4:	4804      	ldr	r0, [pc, #16]	; (40d8 <__do_global_dtors_aux+0x24>)
    40c6:	e000      	b.n	40ca <__do_global_dtors_aux+0x16>
    40c8:	bf00      	nop
    40ca:	2301      	movs	r3, #1
    40cc:	7023      	strb	r3, [r4, #0]
    40ce:	bd10      	pop	{r4, pc}
    40d0:	200001dc 	.word	0x200001dc
    40d4:	00000000 	.word	0x00000000
    40d8:	0001001c 	.word	0x0001001c

000040dc <frame_dummy>:
    40dc:	4b08      	ldr	r3, [pc, #32]	; (4100 <frame_dummy+0x24>)
    40de:	b510      	push	{r4, lr}
    40e0:	2b00      	cmp	r3, #0
    40e2:	d003      	beq.n	40ec <frame_dummy+0x10>
    40e4:	4907      	ldr	r1, [pc, #28]	; (4104 <frame_dummy+0x28>)
    40e6:	4808      	ldr	r0, [pc, #32]	; (4108 <frame_dummy+0x2c>)
    40e8:	e000      	b.n	40ec <frame_dummy+0x10>
    40ea:	bf00      	nop
    40ec:	4807      	ldr	r0, [pc, #28]	; (410c <frame_dummy+0x30>)
    40ee:	6803      	ldr	r3, [r0, #0]
    40f0:	2b00      	cmp	r3, #0
    40f2:	d100      	bne.n	40f6 <frame_dummy+0x1a>
    40f4:	bd10      	pop	{r4, pc}
    40f6:	4b06      	ldr	r3, [pc, #24]	; (4110 <frame_dummy+0x34>)
    40f8:	2b00      	cmp	r3, #0
    40fa:	d0fb      	beq.n	40f4 <frame_dummy+0x18>
    40fc:	4798      	blx	r3
    40fe:	e7f9      	b.n	40f4 <frame_dummy+0x18>
    4100:	00000000 	.word	0x00000000
    4104:	200001e0 	.word	0x200001e0
    4108:	0001001c 	.word	0x0001001c
    410c:	0001001c 	.word	0x0001001c
    4110:	00000000 	.word	0x00000000

00004114 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
    4114:	b5f0      	push	{r4, r5, r6, r7, lr}
    4116:	46c6      	mov	lr, r8
    4118:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
    411a:	2303      	movs	r3, #3
    411c:	0007      	movs	r7, r0
    411e:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
    4120:	6813      	ldr	r3, [r2, #0]
    4122:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
    4124:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
    4126:	2903      	cmp	r1, #3
    4128:	d902      	bls.n	4130 <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
    412a:	4244      	negs	r4, r0
    412c:	2003      	movs	r0, #3
    412e:	4004      	ands	r4, r0
	}

	if (temp_length) {
    4130:	2c00      	cmp	r4, #0
    4132:	d016      	beq.n	4162 <crc32_recalculate+0x4e>
		length -= temp_length;
    4134:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
    4136:	1d3e      	adds	r6, r7, #4
    4138:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
    413a:	00e0      	lsls	r0, r4, #3
    413c:	4240      	negs	r0, r0
    413e:	3020      	adds	r0, #32
    4140:	40c5      	lsrs	r5, r0
	crc ^= data;
    4142:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
    4144:	00e0      	lsls	r0, r4, #3
    4146:	d019      	beq.n	417c <crc32_recalculate+0x68>
		if (crc & 1) {
    4148:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    414a:	4d27      	ldr	r5, [pc, #156]	; (41e8 <crc32_recalculate+0xd4>)
    414c:	e003      	b.n	4156 <crc32_recalculate+0x42>
			crc >>= 1;
    414e:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    4150:	3801      	subs	r0, #1
    4152:	2800      	cmp	r0, #0
    4154:	d004      	beq.n	4160 <crc32_recalculate+0x4c>
		if (crc & 1) {
    4156:	421c      	tst	r4, r3
    4158:	d0f9      	beq.n	414e <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    415a:	085b      	lsrs	r3, r3, #1
    415c:	406b      	eors	r3, r5
    415e:	e7f7      	b.n	4150 <crc32_recalculate+0x3c>
		word = *(word_ptr++);
    4160:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
    4162:	2003      	movs	r0, #3
    4164:	000c      	movs	r4, r1
    4166:	4384      	bics	r4, r0

	if (temp_length) {
    4168:	d01e      	beq.n	41a8 <crc32_recalculate+0x94>
		length -= temp_length;
    416a:	1b08      	subs	r0, r1, r4
    416c:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
    416e:	0889      	lsrs	r1, r1, #2
    4170:	4688      	mov	r8, r1
    4172:	003e      	movs	r6, r7
    4174:	000d      	movs	r5, r1
		if (crc & 1) {
    4176:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    4178:	4c1b      	ldr	r4, [pc, #108]	; (41e8 <crc32_recalculate+0xd4>)

		while (temp_length--) {
    417a:	e00b      	b.n	4194 <crc32_recalculate+0x80>
		word = *(word_ptr++);
    417c:	0037      	movs	r7, r6
    417e:	e7f0      	b.n	4162 <crc32_recalculate+0x4e>
			crc >>= 1;
    4180:	085b      	lsrs	r3, r3, #1
    4182:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    4184:	2900      	cmp	r1, #0
    4186:	d004      	beq.n	4192 <crc32_recalculate+0x7e>
		if (crc & 1) {
    4188:	4218      	tst	r0, r3
    418a:	d0f9      	beq.n	4180 <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    418c:	085b      	lsrs	r3, r3, #1
    418e:	4063      	eors	r3, r4
    4190:	e7f7      	b.n	4182 <crc32_recalculate+0x6e>
    4192:	3604      	adds	r6, #4
		while (temp_length--) {
    4194:	3d01      	subs	r5, #1
    4196:	d303      	bcc.n	41a0 <crc32_recalculate+0x8c>
	crc ^= data;
    4198:	6831      	ldr	r1, [r6, #0]
    419a:	404b      	eors	r3, r1
    419c:	2120      	movs	r1, #32
    419e:	e7f3      	b.n	4188 <crc32_recalculate+0x74>
    41a0:	4641      	mov	r1, r8
    41a2:	0089      	lsls	r1, r1, #2
    41a4:	187f      	adds	r7, r7, r1
		length -= temp_length;
    41a6:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
    41a8:	2900      	cmp	r1, #0
    41aa:	d017      	beq.n	41dc <crc32_recalculate+0xc8>
		word = *word_ptr;
    41ac:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
    41ae:	00c8      	lsls	r0, r1, #3
    41b0:	4240      	negs	r0, r0
    41b2:	3020      	adds	r0, #32
    41b4:	2501      	movs	r5, #1
    41b6:	426d      	negs	r5, r5
    41b8:	40c5      	lsrs	r5, r0
    41ba:	0028      	movs	r0, r5
    41bc:	4020      	ands	r0, r4
	crc ^= data;
    41be:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
    41c0:	00c9      	lsls	r1, r1, #3
    41c2:	d00b      	beq.n	41dc <crc32_recalculate+0xc8>
		if (crc & 1) {
    41c4:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    41c6:	4c08      	ldr	r4, [pc, #32]	; (41e8 <crc32_recalculate+0xd4>)
    41c8:	e003      	b.n	41d2 <crc32_recalculate+0xbe>
			crc >>= 1;
    41ca:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
    41cc:	3901      	subs	r1, #1
    41ce:	2900      	cmp	r1, #0
    41d0:	d004      	beq.n	41dc <crc32_recalculate+0xc8>
		if (crc & 1) {
    41d2:	4218      	tst	r0, r3
    41d4:	d0f9      	beq.n	41ca <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
    41d6:	085b      	lsrs	r3, r3, #1
    41d8:	4063      	eors	r3, r4
    41da:	e7f7      	b.n	41cc <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
    41dc:	43db      	mvns	r3, r3
    41de:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
    41e0:	2000      	movs	r0, #0
    41e2:	bc04      	pop	{r2}
    41e4:	4690      	mov	r8, r2
    41e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41e8:	edb88320 	.word	0xedb88320

000041ec <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    41ec:	b510      	push	{r4, lr}
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    41ee:	4a1e      	ldr	r2, [pc, #120]	; (4268 <nvm_set_config+0x7c>)
    41f0:	69d3      	ldr	r3, [r2, #28]
    41f2:	2104      	movs	r1, #4
    41f4:	430b      	orrs	r3, r1
    41f6:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    41f8:	4b1c      	ldr	r3, [pc, #112]	; (426c <nvm_set_config+0x80>)
    41fa:	2220      	movs	r2, #32
    41fc:	32ff      	adds	r2, #255	; 0xff
    41fe:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4200:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    4202:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    4204:	07d2      	lsls	r2, r2, #31
    4206:	d401      	bmi.n	420c <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    4208:	0018      	movs	r0, r3
    420a:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    420c:	7803      	ldrb	r3, [r0, #0]
    420e:	021b      	lsls	r3, r3, #8
    4210:	22c0      	movs	r2, #192	; 0xc0
    4212:	0092      	lsls	r2, r2, #2
    4214:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4216:	7841      	ldrb	r1, [r0, #1]
    4218:	01c9      	lsls	r1, r1, #7
    421a:	22ff      	movs	r2, #255	; 0xff
    421c:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    421e:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4220:	7881      	ldrb	r1, [r0, #2]
    4222:	0049      	lsls	r1, r1, #1
    4224:	221e      	movs	r2, #30
    4226:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4228:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    422a:	78c2      	ldrb	r2, [r0, #3]
    422c:	0492      	lsls	r2, r2, #18
    422e:	2180      	movs	r1, #128	; 0x80
    4230:	02c9      	lsls	r1, r1, #11
    4232:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4234:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    4236:	7902      	ldrb	r2, [r0, #4]
    4238:	0412      	lsls	r2, r2, #16
    423a:	21c0      	movs	r1, #192	; 0xc0
    423c:	0289      	lsls	r1, r1, #10
    423e:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4240:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    4242:	4a0a      	ldr	r2, [pc, #40]	; (426c <nvm_set_config+0x80>)
    4244:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4246:	6893      	ldr	r3, [r2, #8]
    4248:	035b      	lsls	r3, r3, #13
    424a:	0f5b      	lsrs	r3, r3, #29
    424c:	4908      	ldr	r1, [pc, #32]	; (4270 <nvm_set_config+0x84>)
    424e:	2408      	movs	r4, #8
    4250:	409c      	lsls	r4, r3
    4252:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    4254:	6893      	ldr	r3, [r2, #8]
    4256:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    4258:	7843      	ldrb	r3, [r0, #1]
    425a:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    425c:	8b13      	ldrh	r3, [r2, #24]
    425e:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    4260:	0fdb      	lsrs	r3, r3, #31
    4262:	011b      	lsls	r3, r3, #4
    4264:	e7d0      	b.n	4208 <nvm_set_config+0x1c>
    4266:	46c0      	nop			; (mov r8, r8)
    4268:	40000400 	.word	0x40000400
    426c:	41004000 	.word	0x41004000
    4270:	200001f8 	.word	0x200001f8

00004274 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4274:	b530      	push	{r4, r5, lr}
    4276:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4278:	4a22      	ldr	r2, [pc, #136]	; (4304 <nvm_execute_command+0x90>)
    427a:	8810      	ldrh	r0, [r2, #0]
    427c:	8853      	ldrh	r3, [r2, #2]
    427e:	4343      	muls	r3, r0
    4280:	428b      	cmp	r3, r1
    4282:	d206      	bcs.n	4292 <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4284:	2280      	movs	r2, #128	; 0x80
    4286:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    4288:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    428a:	4b1f      	ldr	r3, [pc, #124]	; (4308 <nvm_execute_command+0x94>)
    428c:	18cb      	adds	r3, r1, r3
    428e:	4293      	cmp	r3, r2
    4290:	d80e      	bhi.n	42b0 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4292:	4b1e      	ldr	r3, [pc, #120]	; (430c <nvm_execute_command+0x98>)
    4294:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4296:	2280      	movs	r2, #128	; 0x80
    4298:	02d2      	lsls	r2, r2, #11
    429a:	432a      	orrs	r2, r5
    429c:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    429e:	2220      	movs	r2, #32
    42a0:	32ff      	adds	r2, #255	; 0xff
    42a2:	831a      	strh	r2, [r3, #24]
    42a4:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    42a6:	07db      	lsls	r3, r3, #31
    42a8:	d403      	bmi.n	42b2 <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    42aa:	4b18      	ldr	r3, [pc, #96]	; (430c <nvm_execute_command+0x98>)
    42ac:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    42ae:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    42b0:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    42b2:	2c45      	cmp	r4, #69	; 0x45
    42b4:	d822      	bhi.n	42fc <nvm_execute_command+0x88>
    42b6:	00a3      	lsls	r3, r4, #2
    42b8:	4a15      	ldr	r2, [pc, #84]	; (4310 <nvm_execute_command+0x9c>)
    42ba:	58d3      	ldr	r3, [r2, r3]
    42bc:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    42be:	4b13      	ldr	r3, [pc, #76]	; (430c <nvm_execute_command+0x98>)
    42c0:	8b1b      	ldrh	r3, [r3, #24]
    42c2:	05db      	lsls	r3, r3, #23
    42c4:	d503      	bpl.n	42ce <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
    42c6:	4b11      	ldr	r3, [pc, #68]	; (430c <nvm_execute_command+0x98>)
    42c8:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    42ca:	2010      	movs	r0, #16
    42cc:	e7f0      	b.n	42b0 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    42ce:	0889      	lsrs	r1, r1, #2
    42d0:	0049      	lsls	r1, r1, #1
    42d2:	4b0e      	ldr	r3, [pc, #56]	; (430c <nvm_execute_command+0x98>)
    42d4:	61d9      	str	r1, [r3, #28]
			break;
    42d6:	e003      	b.n	42e0 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    42d8:	0889      	lsrs	r1, r1, #2
    42da:	0049      	lsls	r1, r1, #1
    42dc:	4b0b      	ldr	r3, [pc, #44]	; (430c <nvm_execute_command+0x98>)
    42de:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    42e0:	20a5      	movs	r0, #165	; 0xa5
    42e2:	0200      	lsls	r0, r0, #8
    42e4:	4304      	orrs	r4, r0
    42e6:	4b09      	ldr	r3, [pc, #36]	; (430c <nvm_execute_command+0x98>)
    42e8:	801c      	strh	r4, [r3, #0]
    42ea:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    42ec:	2201      	movs	r2, #1
    42ee:	7d0b      	ldrb	r3, [r1, #20]
    42f0:	4213      	tst	r3, r2
    42f2:	d0fc      	beq.n	42ee <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
    42f4:	4b05      	ldr	r3, [pc, #20]	; (430c <nvm_execute_command+0x98>)
    42f6:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    42f8:	2000      	movs	r0, #0
    42fa:	e7d9      	b.n	42b0 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
    42fc:	4b03      	ldr	r3, [pc, #12]	; (430c <nvm_execute_command+0x98>)
    42fe:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4300:	2017      	movs	r0, #23
    4302:	e7d5      	b.n	42b0 <nvm_execute_command+0x3c>
    4304:	200001f8 	.word	0x200001f8
    4308:	ff7fc000 	.word	0xff7fc000
    430c:	41004000 	.word	0x41004000
    4310:	0000e3a4 	.word	0x0000e3a4

00004314 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4316:	4b25      	ldr	r3, [pc, #148]	; (43ac <nvm_write_buffer+0x98>)
    4318:	881d      	ldrh	r5, [r3, #0]
    431a:	885b      	ldrh	r3, [r3, #2]
    431c:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    431e:	2418      	movs	r4, #24
	if (destination_address >
    4320:	4283      	cmp	r3, r0
    4322:	d201      	bcs.n	4328 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4324:	0020      	movs	r0, r4
    4326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4328:	1e6b      	subs	r3, r5, #1
    432a:	4218      	tst	r0, r3
    432c:	d1fa      	bne.n	4324 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
    432e:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
    4330:	4295      	cmp	r5, r2
    4332:	d3f7      	bcc.n	4324 <nvm_write_buffer+0x10>
    4334:	4b1e      	ldr	r3, [pc, #120]	; (43b0 <nvm_write_buffer+0x9c>)
    4336:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4338:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
    433a:	07db      	lsls	r3, r3, #31
    433c:	d5f2      	bpl.n	4324 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    433e:	4c1d      	ldr	r4, [pc, #116]	; (43b4 <nvm_write_buffer+0xa0>)
    4340:	4b1b      	ldr	r3, [pc, #108]	; (43b0 <nvm_write_buffer+0x9c>)
    4342:	801c      	strh	r4, [r3, #0]
    4344:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4346:	2401      	movs	r4, #1
    4348:	7d2b      	ldrb	r3, [r5, #20]
    434a:	4223      	tst	r3, r4
    434c:	d0fc      	beq.n	4348 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    434e:	2420      	movs	r4, #32
    4350:	34ff      	adds	r4, #255	; 0xff
    4352:	4b17      	ldr	r3, [pc, #92]	; (43b0 <nvm_write_buffer+0x9c>)
    4354:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4356:	2a00      	cmp	r2, #0
    4358:	d022      	beq.n	43a0 <nvm_write_buffer+0x8c>
    435a:	2301      	movs	r3, #1
    435c:	0005      	movs	r5, r0
    435e:	439d      	bics	r5, r3
    4360:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4362:	1e57      	subs	r7, r2, #1
    4364:	e009      	b.n	437a <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
    4366:	18ce      	adds	r6, r1, r3
    4368:	7876      	ldrb	r6, [r6, #1]
    436a:	0236      	lsls	r6, r6, #8
    436c:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
    436e:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4370:	3302      	adds	r3, #2
    4372:	b29b      	uxth	r3, r3
    4374:	3502      	adds	r5, #2
    4376:	429a      	cmp	r2, r3
    4378:	d904      	bls.n	4384 <nvm_write_buffer+0x70>
		data = buffer[i];
    437a:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    437c:	42bb      	cmp	r3, r7
    437e:	dbf2      	blt.n	4366 <nvm_write_buffer+0x52>
		data = buffer[i];
    4380:	b2a4      	uxth	r4, r4
    4382:	e7f4      	b.n	436e <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4384:	4b09      	ldr	r3, [pc, #36]	; (43ac <nvm_write_buffer+0x98>)
    4386:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4388:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    438a:	2b00      	cmp	r3, #0
    438c:	d1ca      	bne.n	4324 <nvm_write_buffer+0x10>
    438e:	2a3f      	cmp	r2, #63	; 0x3f
    4390:	d8c8      	bhi.n	4324 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    4392:	2200      	movs	r2, #0
    4394:	0001      	movs	r1, r0
    4396:	2004      	movs	r0, #4
    4398:	4b07      	ldr	r3, [pc, #28]	; (43b8 <nvm_write_buffer+0xa4>)
    439a:	4798      	blx	r3
    439c:	0004      	movs	r4, r0
    439e:	e7c1      	b.n	4324 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    43a0:	4b02      	ldr	r3, [pc, #8]	; (43ac <nvm_write_buffer+0x98>)
    43a2:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    43a4:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    43a6:	2b00      	cmp	r3, #0
    43a8:	d0f3      	beq.n	4392 <nvm_write_buffer+0x7e>
    43aa:	e7bb      	b.n	4324 <nvm_write_buffer+0x10>
    43ac:	200001f8 	.word	0x200001f8
    43b0:	41004000 	.word	0x41004000
    43b4:	ffffa544 	.word	0xffffa544
    43b8:	00004275 	.word	0x00004275

000043bc <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    43bc:	4b13      	ldr	r3, [pc, #76]	; (440c <nvm_erase_row+0x50>)
    43be:	881a      	ldrh	r2, [r3, #0]
    43c0:	885b      	ldrh	r3, [r3, #2]
    43c2:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    43c4:	2118      	movs	r1, #24
	if (row_address >
    43c6:	4283      	cmp	r3, r0
    43c8:	d201      	bcs.n	43ce <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    43ca:	0008      	movs	r0, r1
    43cc:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    43ce:	0092      	lsls	r2, r2, #2
    43d0:	3a01      	subs	r2, #1
    43d2:	4210      	tst	r0, r2
    43d4:	d1f9      	bne.n	43ca <nvm_erase_row+0xe>
    43d6:	4b0e      	ldr	r3, [pc, #56]	; (4410 <nvm_erase_row+0x54>)
    43d8:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    43da:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
    43dc:	07db      	lsls	r3, r3, #31
    43de:	d5f4      	bpl.n	43ca <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    43e0:	4b0b      	ldr	r3, [pc, #44]	; (4410 <nvm_erase_row+0x54>)
    43e2:	2220      	movs	r2, #32
    43e4:	32ff      	adds	r2, #255	; 0xff
    43e6:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    43e8:	0880      	lsrs	r0, r0, #2
    43ea:	0040      	lsls	r0, r0, #1
    43ec:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    43ee:	4a09      	ldr	r2, [pc, #36]	; (4414 <nvm_erase_row+0x58>)
    43f0:	801a      	strh	r2, [r3, #0]
    43f2:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    43f4:	2201      	movs	r2, #1
    43f6:	7d0b      	ldrb	r3, [r1, #20]
    43f8:	4213      	tst	r3, r2
    43fa:	d0fc      	beq.n	43f6 <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    43fc:	4b04      	ldr	r3, [pc, #16]	; (4410 <nvm_erase_row+0x54>)
    43fe:	8b19      	ldrh	r1, [r3, #24]
    4400:	201c      	movs	r0, #28
    4402:	4001      	ands	r1, r0
	return STATUS_OK;
    4404:	1e48      	subs	r0, r1, #1
    4406:	4181      	sbcs	r1, r0
    4408:	0089      	lsls	r1, r1, #2
    440a:	e7de      	b.n	43ca <nvm_erase_row+0xe>
    440c:	200001f8 	.word	0x200001f8
    4410:	41004000 	.word	0x41004000
    4414:	ffffa502 	.word	0xffffa502

00004418 <finish_write_flash>:
}

/**
 * \brief Finish flash write.
 */
static void finish_write_flash(void){
    4418:	b510      	push	{r4, lr}
	if (at25dfx_chip_check_presence(&at25dfx_chip) == STATUS_OK) {
    441a:	4829      	ldr	r0, [pc, #164]	; (44c0 <finish_write_flash+0xa8>)
    441c:	4b29      	ldr	r3, [pc, #164]	; (44c4 <finish_write_flash+0xac>)
    441e:	4798      	blx	r3
    4420:	2800      	cmp	r0, #0
    4422:	d13d      	bne.n	44a0 <finish_write_flash+0x88>
		enum status_code status =STATUS_OK;
		if(now_downloading == IMAGE){
    4424:	4b28      	ldr	r3, [pc, #160]	; (44c8 <finish_write_flash+0xb0>)
    4426:	781b      	ldrb	r3, [r3, #0]
    4428:	2b01      	cmp	r3, #1
    442a:	d011      	beq.n	4450 <finish_write_flash+0x38>
			if(status == STATUS_ERR_IO){
				printf("AT25DX sector erase failed\r\n");
				while(1);
			}
		}
		else if(now_downloading == METADATA){
    442c:	2b00      	cmp	r3, #0
    442e:	d106      	bne.n	443e <finish_write_flash+0x26>
			if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_STATUS_ADDR, true) != STATUS_OK)	status = STATUS_ERR_IO;
    4430:	2201      	movs	r2, #1
    4432:	2100      	movs	r1, #0
    4434:	4822      	ldr	r0, [pc, #136]	; (44c0 <finish_write_flash+0xa8>)
    4436:	4b25      	ldr	r3, [pc, #148]	; (44cc <finish_write_flash+0xb4>)
    4438:	4798      	blx	r3
    443a:	2800      	cmp	r0, #0
    443c:	d134      	bne.n	44a8 <finish_write_flash+0x90>
	}
	else{
		printf("AT25DX check presence failed\r\n");
		while(1);
	}
	if(at25dfx_chip_sleep(&at25dfx_chip) != STATUS_OK){
    443e:	4820      	ldr	r0, [pc, #128]	; (44c0 <finish_write_flash+0xa8>)
    4440:	4b23      	ldr	r3, [pc, #140]	; (44d0 <finish_write_flash+0xb8>)
    4442:	4798      	blx	r3
    4444:	2800      	cmp	r0, #0
    4446:	d03a      	beq.n	44be <finish_write_flash+0xa6>
		printf("AT25DX sleep failed\r\n");
    4448:	4822      	ldr	r0, [pc, #136]	; (44d4 <finish_write_flash+0xbc>)
    444a:	4b23      	ldr	r3, [pc, #140]	; (44d8 <finish_write_flash+0xc0>)
    444c:	4798      	blx	r3
    444e:	e7fe      	b.n	444e <finish_write_flash+0x36>
			if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_IMAGE1_ADDR, true) != STATUS_OK)	status = STATUS_ERR_IO;
    4450:	2201      	movs	r2, #1
    4452:	2180      	movs	r1, #128	; 0x80
    4454:	0249      	lsls	r1, r1, #9
    4456:	481a      	ldr	r0, [pc, #104]	; (44c0 <finish_write_flash+0xa8>)
    4458:	4b1c      	ldr	r3, [pc, #112]	; (44cc <finish_write_flash+0xb4>)
    445a:	4798      	blx	r3
    445c:	1e04      	subs	r4, r0, #0
    445e:	d000      	beq.n	4462 <finish_write_flash+0x4a>
    4460:	2410      	movs	r4, #16
			if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_IMAGE1_ADDR + (1 * AT25DFX_SECTOR_SIZE), true) != STATUS_OK)	status = STATUS_ERR_IO;
    4462:	2201      	movs	r2, #1
    4464:	2180      	movs	r1, #128	; 0x80
    4466:	0289      	lsls	r1, r1, #10
    4468:	4815      	ldr	r0, [pc, #84]	; (44c0 <finish_write_flash+0xa8>)
    446a:	4b18      	ldr	r3, [pc, #96]	; (44cc <finish_write_flash+0xb4>)
    446c:	4798      	blx	r3
    446e:	2800      	cmp	r0, #0
    4470:	d000      	beq.n	4474 <finish_write_flash+0x5c>
    4472:	2410      	movs	r4, #16
			if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_IMAGE1_ADDR + (2 * AT25DFX_SECTOR_SIZE), true) != STATUS_OK)	status = STATUS_ERR_IO;
    4474:	2201      	movs	r2, #1
    4476:	21c0      	movs	r1, #192	; 0xc0
    4478:	0289      	lsls	r1, r1, #10
    447a:	4811      	ldr	r0, [pc, #68]	; (44c0 <finish_write_flash+0xa8>)
    447c:	4b13      	ldr	r3, [pc, #76]	; (44cc <finish_write_flash+0xb4>)
    447e:	4798      	blx	r3
    4480:	2800      	cmp	r0, #0
    4482:	d115      	bne.n	44b0 <finish_write_flash+0x98>
			if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_IMAGE1_ADDR + (3 * AT25DFX_SECTOR_SIZE), true) != STATUS_OK)	status = STATUS_ERR_IO;
    4484:	2201      	movs	r2, #1
    4486:	2180      	movs	r1, #128	; 0x80
    4488:	02c9      	lsls	r1, r1, #11
    448a:	480d      	ldr	r0, [pc, #52]	; (44c0 <finish_write_flash+0xa8>)
    448c:	4b0f      	ldr	r3, [pc, #60]	; (44cc <finish_write_flash+0xb4>)
    448e:	4798      	blx	r3
    4490:	2800      	cmp	r0, #0
    4492:	d101      	bne.n	4498 <finish_write_flash+0x80>
			if(status == STATUS_ERR_IO){
    4494:	2c10      	cmp	r4, #16
    4496:	d1d2      	bne.n	443e <finish_write_flash+0x26>
				printf("AT25DX sector erase failed\r\n");
    4498:	4810      	ldr	r0, [pc, #64]	; (44dc <finish_write_flash+0xc4>)
    449a:	4b0f      	ldr	r3, [pc, #60]	; (44d8 <finish_write_flash+0xc0>)
    449c:	4798      	blx	r3
    449e:	e7fe      	b.n	449e <finish_write_flash+0x86>
		printf("AT25DX check presence failed\r\n");
    44a0:	480f      	ldr	r0, [pc, #60]	; (44e0 <finish_write_flash+0xc8>)
    44a2:	4b0d      	ldr	r3, [pc, #52]	; (44d8 <finish_write_flash+0xc0>)
    44a4:	4798      	blx	r3
    44a6:	e7fe      	b.n	44a6 <finish_write_flash+0x8e>
				printf("AT25DX sector erase failed\r\n");
    44a8:	480c      	ldr	r0, [pc, #48]	; (44dc <finish_write_flash+0xc4>)
    44aa:	4b0b      	ldr	r3, [pc, #44]	; (44d8 <finish_write_flash+0xc0>)
    44ac:	4798      	blx	r3
    44ae:	e7fe      	b.n	44ae <finish_write_flash+0x96>
			if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_IMAGE1_ADDR + (3 * AT25DFX_SECTOR_SIZE), true) != STATUS_OK)	status = STATUS_ERR_IO;
    44b0:	2201      	movs	r2, #1
    44b2:	2180      	movs	r1, #128	; 0x80
    44b4:	02c9      	lsls	r1, r1, #11
    44b6:	4802      	ldr	r0, [pc, #8]	; (44c0 <finish_write_flash+0xa8>)
    44b8:	4b04      	ldr	r3, [pc, #16]	; (44cc <finish_write_flash+0xb4>)
    44ba:	4798      	blx	r3
    44bc:	e7ec      	b.n	4498 <finish_write_flash+0x80>
		while(1);
	}
}
    44be:	bd10      	pop	{r4, pc}
    44c0:	200004d8 	.word	0x200004d8
    44c4:	00005391 	.word	0x00005391
    44c8:	20000410 	.word	0x20000410
    44cc:	00005bb9 	.word	0x00005bb9
    44d0:	00005d15 	.word	0x00005d15
    44d4:	0000e4f8 	.word	0x0000e4f8
    44d8:	0000cf45 	.word	0x0000cf45
    44dc:	0000e4bc 	.word	0x0000e4bc
    44e0:	0000e4d8 	.word	0x0000e4d8

000044e4 <start_write_flash>:
static void start_write_flash(void){
    44e4:	b510      	push	{r4, lr}
	if(at25dfx_chip_wake(&at25dfx_chip) != STATUS_OK){
    44e6:	4848      	ldr	r0, [pc, #288]	; (4608 <start_write_flash+0x124>)
    44e8:	4b48      	ldr	r3, [pc, #288]	; (460c <start_write_flash+0x128>)
    44ea:	4798      	blx	r3
    44ec:	2800      	cmp	r0, #0
    44ee:	d003      	beq.n	44f8 <start_write_flash+0x14>
		printf("AT25DX wake failed\r\n");
    44f0:	4847      	ldr	r0, [pc, #284]	; (4610 <start_write_flash+0x12c>)
    44f2:	4b48      	ldr	r3, [pc, #288]	; (4614 <start_write_flash+0x130>)
    44f4:	4798      	blx	r3
    44f6:	e7fe      	b.n	44f6 <start_write_flash+0x12>
	if (at25dfx_chip_check_presence(&at25dfx_chip) == STATUS_OK) {
    44f8:	4843      	ldr	r0, [pc, #268]	; (4608 <start_write_flash+0x124>)
    44fa:	4b47      	ldr	r3, [pc, #284]	; (4618 <start_write_flash+0x134>)
    44fc:	4798      	blx	r3
    44fe:	2800      	cmp	r0, #0
    4500:	d000      	beq.n	4504 <start_write_flash+0x20>
    4502:	e06b      	b.n	45dc <start_write_flash+0xf8>
		if(now_downloading == IMAGE){
    4504:	4b45      	ldr	r3, [pc, #276]	; (461c <start_write_flash+0x138>)
    4506:	781b      	ldrb	r3, [r3, #0]
    4508:	2b01      	cmp	r3, #1
    450a:	d002      	beq.n	4512 <start_write_flash+0x2e>
		else if(now_downloading == METADATA){
    450c:	2b00      	cmp	r3, #0
    450e:	d051      	beq.n	45b4 <start_write_flash+0xd0>
}
    4510:	bd10      	pop	{r4, pc}
			if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_IMAGE1_ADDR, false) != STATUS_OK)	status = STATUS_ERR_IO;
    4512:	2200      	movs	r2, #0
    4514:	2180      	movs	r1, #128	; 0x80
    4516:	0249      	lsls	r1, r1, #9
    4518:	483b      	ldr	r0, [pc, #236]	; (4608 <start_write_flash+0x124>)
    451a:	4b41      	ldr	r3, [pc, #260]	; (4620 <start_write_flash+0x13c>)
    451c:	4798      	blx	r3
    451e:	1e04      	subs	r4, r0, #0
    4520:	d000      	beq.n	4524 <start_write_flash+0x40>
    4522:	2410      	movs	r4, #16
			if(at25dfx_chip_erase_block(&at25dfx_chip, AT25DFX_IMAGE1_ADDR,  AT25DFX_BLOCK_SIZE_64KB) != STATUS_OK)	status = STATUS_ERR_IO;
    4524:	2202      	movs	r2, #2
    4526:	2180      	movs	r1, #128	; 0x80
    4528:	0249      	lsls	r1, r1, #9
    452a:	4837      	ldr	r0, [pc, #220]	; (4608 <start_write_flash+0x124>)
    452c:	4b3d      	ldr	r3, [pc, #244]	; (4624 <start_write_flash+0x140>)
    452e:	4798      	blx	r3
    4530:	2800      	cmp	r0, #0
    4532:	d000      	beq.n	4536 <start_write_flash+0x52>
    4534:	2410      	movs	r4, #16
			if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_IMAGE1_ADDR + (1 * AT25DFX_SECTOR_SIZE), false) != STATUS_OK)	status = STATUS_ERR_IO;
    4536:	2200      	movs	r2, #0
    4538:	2180      	movs	r1, #128	; 0x80
    453a:	0289      	lsls	r1, r1, #10
    453c:	4832      	ldr	r0, [pc, #200]	; (4608 <start_write_flash+0x124>)
    453e:	4b38      	ldr	r3, [pc, #224]	; (4620 <start_write_flash+0x13c>)
    4540:	4798      	blx	r3
    4542:	2800      	cmp	r0, #0
    4544:	d000      	beq.n	4548 <start_write_flash+0x64>
    4546:	2410      	movs	r4, #16
			if(at25dfx_chip_erase_block(&at25dfx_chip, AT25DFX_IMAGE1_ADDR + (1 * AT25DFX_SECTOR_SIZE), AT25DFX_BLOCK_SIZE_64KB) != STATUS_OK)	status = STATUS_ERR_IO;
    4548:	2202      	movs	r2, #2
    454a:	2180      	movs	r1, #128	; 0x80
    454c:	0289      	lsls	r1, r1, #10
    454e:	482e      	ldr	r0, [pc, #184]	; (4608 <start_write_flash+0x124>)
    4550:	4b34      	ldr	r3, [pc, #208]	; (4624 <start_write_flash+0x140>)
    4552:	4798      	blx	r3
    4554:	2800      	cmp	r0, #0
    4556:	d000      	beq.n	455a <start_write_flash+0x76>
    4558:	2410      	movs	r4, #16
			if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_IMAGE1_ADDR + (2 * AT25DFX_SECTOR_SIZE), false) != STATUS_OK)	status = STATUS_ERR_IO;
    455a:	2200      	movs	r2, #0
    455c:	21c0      	movs	r1, #192	; 0xc0
    455e:	0289      	lsls	r1, r1, #10
    4560:	4829      	ldr	r0, [pc, #164]	; (4608 <start_write_flash+0x124>)
    4562:	4b2f      	ldr	r3, [pc, #188]	; (4620 <start_write_flash+0x13c>)
    4564:	4798      	blx	r3
    4566:	2800      	cmp	r0, #0
    4568:	d000      	beq.n	456c <start_write_flash+0x88>
    456a:	2410      	movs	r4, #16
			if(at25dfx_chip_erase_block(&at25dfx_chip, AT25DFX_IMAGE1_ADDR + (2 * AT25DFX_SECTOR_SIZE), AT25DFX_BLOCK_SIZE_64KB) != STATUS_OK)	status = STATUS_ERR_IO;
    456c:	2202      	movs	r2, #2
    456e:	21c0      	movs	r1, #192	; 0xc0
    4570:	0289      	lsls	r1, r1, #10
    4572:	4825      	ldr	r0, [pc, #148]	; (4608 <start_write_flash+0x124>)
    4574:	4b2b      	ldr	r3, [pc, #172]	; (4624 <start_write_flash+0x140>)
    4576:	4798      	blx	r3
    4578:	2800      	cmp	r0, #0
    457a:	d000      	beq.n	457e <start_write_flash+0x9a>
    457c:	2410      	movs	r4, #16
			if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_IMAGE1_ADDR + (3 * AT25DFX_SECTOR_SIZE), false) != STATUS_OK)	status = STATUS_ERR_IO;
    457e:	2200      	movs	r2, #0
    4580:	2180      	movs	r1, #128	; 0x80
    4582:	02c9      	lsls	r1, r1, #11
    4584:	4820      	ldr	r0, [pc, #128]	; (4608 <start_write_flash+0x124>)
    4586:	4b26      	ldr	r3, [pc, #152]	; (4620 <start_write_flash+0x13c>)
    4588:	4798      	blx	r3
    458a:	2800      	cmp	r0, #0
    458c:	d12a      	bne.n	45e4 <start_write_flash+0x100>
			if(at25dfx_chip_erase_block(&at25dfx_chip, AT25DFX_IMAGE1_ADDR + (3 * AT25DFX_SECTOR_SIZE), AT25DFX_BLOCK_SIZE_64KB) != STATUS_OK)	status = STATUS_ERR_IO;
    458e:	2202      	movs	r2, #2
    4590:	2180      	movs	r1, #128	; 0x80
    4592:	02c9      	lsls	r1, r1, #11
    4594:	481c      	ldr	r0, [pc, #112]	; (4608 <start_write_flash+0x124>)
    4596:	4b23      	ldr	r3, [pc, #140]	; (4624 <start_write_flash+0x140>)
    4598:	4798      	blx	r3
    459a:	2800      	cmp	r0, #0
    459c:	d101      	bne.n	45a2 <start_write_flash+0xbe>
			if(status == STATUS_ERR_IO){
    459e:	2c10      	cmp	r4, #16
    45a0:	d103      	bne.n	45aa <start_write_flash+0xc6>
				printf("AT25DX sector erase failed\r\n");
    45a2:	4821      	ldr	r0, [pc, #132]	; (4628 <start_write_flash+0x144>)
    45a4:	4b1b      	ldr	r3, [pc, #108]	; (4614 <start_write_flash+0x130>)
    45a6:	4798      	blx	r3
    45a8:	e7fe      	b.n	45a8 <start_write_flash+0xc4>
			now_writing = AT25DFX_IMAGE1_ADDR;
    45aa:	2280      	movs	r2, #128	; 0x80
    45ac:	0252      	lsls	r2, r2, #9
    45ae:	4b1f      	ldr	r3, [pc, #124]	; (462c <start_write_flash+0x148>)
    45b0:	601a      	str	r2, [r3, #0]
    45b2:	e7ad      	b.n	4510 <start_write_flash+0x2c>
			if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_STATUS_ADDR, false) != STATUS_OK)	status = STATUS_ERR_IO;
    45b4:	2200      	movs	r2, #0
    45b6:	2100      	movs	r1, #0
    45b8:	4813      	ldr	r0, [pc, #76]	; (4608 <start_write_flash+0x124>)
    45ba:	4b19      	ldr	r3, [pc, #100]	; (4620 <start_write_flash+0x13c>)
    45bc:	4798      	blx	r3
    45be:	2800      	cmp	r0, #0
    45c0:	d117      	bne.n	45f2 <start_write_flash+0x10e>
			if(at25dfx_chip_erase_block(&at25dfx_chip, AT25DFX_IMAGE1_HEADER,  AT25DFX_BLOCK_SIZE_4KB) != STATUS_OK)	status = STATUS_ERR_IO;
    45c2:	2200      	movs	r2, #0
    45c4:	2180      	movs	r1, #128	; 0x80
    45c6:	0149      	lsls	r1, r1, #5
    45c8:	480f      	ldr	r0, [pc, #60]	; (4608 <start_write_flash+0x124>)
    45ca:	4b16      	ldr	r3, [pc, #88]	; (4624 <start_write_flash+0x140>)
    45cc:	4798      	blx	r3
    45ce:	2800      	cmp	r0, #0
    45d0:	d115      	bne.n	45fe <start_write_flash+0x11a>
			now_writing = AT25DFX_IMAGE1_HEADER;
    45d2:	2280      	movs	r2, #128	; 0x80
    45d4:	0152      	lsls	r2, r2, #5
    45d6:	4b15      	ldr	r3, [pc, #84]	; (462c <start_write_flash+0x148>)
    45d8:	601a      	str	r2, [r3, #0]
    45da:	e799      	b.n	4510 <start_write_flash+0x2c>
		printf("AT25DX check presence failed\r\n");
    45dc:	4814      	ldr	r0, [pc, #80]	; (4630 <start_write_flash+0x14c>)
    45de:	4b0d      	ldr	r3, [pc, #52]	; (4614 <start_write_flash+0x130>)
    45e0:	4798      	blx	r3
    45e2:	e7fe      	b.n	45e2 <start_write_flash+0xfe>
			if(at25dfx_chip_erase_block(&at25dfx_chip, AT25DFX_IMAGE1_ADDR + (3 * AT25DFX_SECTOR_SIZE), AT25DFX_BLOCK_SIZE_64KB) != STATUS_OK)	status = STATUS_ERR_IO;
    45e4:	2202      	movs	r2, #2
    45e6:	2180      	movs	r1, #128	; 0x80
    45e8:	02c9      	lsls	r1, r1, #11
    45ea:	4807      	ldr	r0, [pc, #28]	; (4608 <start_write_flash+0x124>)
    45ec:	4b0d      	ldr	r3, [pc, #52]	; (4624 <start_write_flash+0x140>)
    45ee:	4798      	blx	r3
    45f0:	e7d7      	b.n	45a2 <start_write_flash+0xbe>
			if(at25dfx_chip_erase_block(&at25dfx_chip, AT25DFX_IMAGE1_HEADER,  AT25DFX_BLOCK_SIZE_4KB) != STATUS_OK)	status = STATUS_ERR_IO;
    45f2:	2200      	movs	r2, #0
    45f4:	2180      	movs	r1, #128	; 0x80
    45f6:	0149      	lsls	r1, r1, #5
    45f8:	4803      	ldr	r0, [pc, #12]	; (4608 <start_write_flash+0x124>)
    45fa:	4b0a      	ldr	r3, [pc, #40]	; (4624 <start_write_flash+0x140>)
    45fc:	4798      	blx	r3
				printf("AT25DX sector erase failed\r\n");
    45fe:	480a      	ldr	r0, [pc, #40]	; (4628 <start_write_flash+0x144>)
    4600:	4b04      	ldr	r3, [pc, #16]	; (4614 <start_write_flash+0x130>)
    4602:	4798      	blx	r3
    4604:	e7fe      	b.n	4604 <start_write_flash+0x120>
    4606:	46c0      	nop			; (mov r8, r8)
    4608:	200004d8 	.word	0x200004d8
    460c:	00005db5 	.word	0x00005db5
    4610:	0000e628 	.word	0x0000e628
    4614:	0000cf45 	.word	0x0000cf45
    4618:	00005391 	.word	0x00005391
    461c:	20000410 	.word	0x20000410
    4620:	00005bb9 	.word	0x00005bb9
    4624:	000059cd 	.word	0x000059cd
    4628:	0000e4bc 	.word	0x0000e4bc
    462c:	20000204 	.word	0x20000204
    4630:	0000e4d8 	.word	0x0000e4d8

00004634 <verify_checksum>:
uint8_t verify_checksum(image_t image){
    4634:	b5f0      	push	{r4, r5, r6, r7, lr}
    4636:	46de      	mov	lr, fp
    4638:	4657      	mov	r7, sl
    463a:	4646      	mov	r6, r8
    463c:	b5c0      	push	{r6, r7, lr}
    463e:	b082      	sub	sp, #8
    4640:	1e07      	subs	r7, r0, #0
	uint32_t read_from = (image == IMAGE1) ? AT25DFX_IMAGE1_ADDR : AT25DFX_IMAGE2_ADDR;
    4642:	d03b      	beq.n	46bc <verify_checksum+0x88>
    4644:	23a0      	movs	r3, #160	; 0xa0
    4646:	02db      	lsls	r3, r3, #11
    4648:	4698      	mov	r8, r3
	int blocks = http_file_size / AT25DFX_BUFFER_SIZE;
    464a:	4b3a      	ldr	r3, [pc, #232]	; (4734 <verify_checksum+0x100>)
    464c:	681b      	ldr	r3, [r3, #0]
    464e:	469a      	mov	sl, r3
	uint32_t checksum = 0;
    4650:	2300      	movs	r3, #0
    4652:	9301      	str	r3, [sp, #4]
	if(at25dfx_chip_wake(&at25dfx_chip) != STATUS_OK){
    4654:	4838      	ldr	r0, [pc, #224]	; (4738 <verify_checksum+0x104>)
    4656:	4b39      	ldr	r3, [pc, #228]	; (473c <verify_checksum+0x108>)
    4658:	4798      	blx	r3
    465a:	2800      	cmp	r0, #0
    465c:	d134      	bne.n	46c8 <verify_checksum+0x94>
	int blocks = http_file_size / AT25DFX_BUFFER_SIZE;
    465e:	4653      	mov	r3, sl
    4660:	0a1c      	lsrs	r4, r3, #8
	for(blk = 0; blk < blocks; blk++){
    4662:	4646      	mov	r6, r8
    4664:	2500      	movs	r5, #0
    4666:	2c00      	cmp	r4, #0
    4668:	dd2c      	ble.n	46c4 <verify_checksum+0x90>
		if(at25dfx_chip_read_buffer(&at25dfx_chip, read_from + (blk * AT25DFX_BUFFER_SIZE), read_buffer, AT25DFX_BUFFER_SIZE) != STATUS_OK){
    466a:	4b35      	ldr	r3, [pc, #212]	; (4740 <verify_checksum+0x10c>)
    466c:	469b      	mov	fp, r3
    466e:	2380      	movs	r3, #128	; 0x80
    4670:	005b      	lsls	r3, r3, #1
    4672:	4a34      	ldr	r2, [pc, #208]	; (4744 <verify_checksum+0x110>)
    4674:	0031      	movs	r1, r6
    4676:	4830      	ldr	r0, [pc, #192]	; (4738 <verify_checksum+0x104>)
    4678:	47d8      	blx	fp
    467a:	2800      	cmp	r0, #0
    467c:	d128      	bne.n	46d0 <verify_checksum+0x9c>
		if(!blk)
    467e:	2d00      	cmp	r5, #0
    4680:	d02b      	beq.n	46da <verify_checksum+0xa6>
		crc32_recalculate(read_buffer, AT25DFX_BUFFER_SIZE, &checksum);
    4682:	aa01      	add	r2, sp, #4
    4684:	2180      	movs	r1, #128	; 0x80
    4686:	0049      	lsls	r1, r1, #1
    4688:	482e      	ldr	r0, [pc, #184]	; (4744 <verify_checksum+0x110>)
    468a:	4b2f      	ldr	r3, [pc, #188]	; (4748 <verify_checksum+0x114>)
    468c:	4798      	blx	r3
	for(blk = 0; blk < blocks; blk++){
    468e:	3501      	adds	r5, #1
    4690:	3601      	adds	r6, #1
    4692:	36ff      	adds	r6, #255	; 0xff
    4694:	42ac      	cmp	r4, r5
    4696:	d1ea      	bne.n	466e <verify_checksum+0x3a>
	int bytes = http_file_size % AT25DFX_BUFFER_SIZE;
    4698:	25ff      	movs	r5, #255	; 0xff
    469a:	4653      	mov	r3, sl
    469c:	401d      	ands	r5, r3
	if(at25dfx_chip_read_buffer(&at25dfx_chip, read_from + (blk * AT25DFX_BUFFER_SIZE), read_buffer, bytes) != STATUS_OK){
    469e:	0224      	lsls	r4, r4, #8
    46a0:	4444      	add	r4, r8
    46a2:	b2ab      	uxth	r3, r5
    46a4:	4a27      	ldr	r2, [pc, #156]	; (4744 <verify_checksum+0x110>)
    46a6:	0021      	movs	r1, r4
    46a8:	4823      	ldr	r0, [pc, #140]	; (4738 <verify_checksum+0x104>)
    46aa:	4e25      	ldr	r6, [pc, #148]	; (4740 <verify_checksum+0x10c>)
    46ac:	47b0      	blx	r6
    46ae:	2800      	cmp	r0, #0
    46b0:	d01c      	beq.n	46ec <verify_checksum+0xb8>
		printf("AT25DX read failed at page 0x%lx\r\n", read_from + (blk * AT25DFX_BUFFER_SIZE));
    46b2:	0021      	movs	r1, r4
    46b4:	4825      	ldr	r0, [pc, #148]	; (474c <verify_checksum+0x118>)
    46b6:	4b26      	ldr	r3, [pc, #152]	; (4750 <verify_checksum+0x11c>)
    46b8:	4798      	blx	r3
    46ba:	e7fe      	b.n	46ba <verify_checksum+0x86>
	uint32_t read_from = (image == IMAGE1) ? AT25DFX_IMAGE1_ADDR : AT25DFX_IMAGE2_ADDR;
    46bc:	2380      	movs	r3, #128	; 0x80
    46be:	025b      	lsls	r3, r3, #9
    46c0:	4698      	mov	r8, r3
    46c2:	e7c2      	b.n	464a <verify_checksum+0x16>
	for(blk = 0; blk < blocks; blk++){
    46c4:	2400      	movs	r4, #0
    46c6:	e7e7      	b.n	4698 <verify_checksum+0x64>
		printf("AT25DX wake failed\r\n");
    46c8:	4822      	ldr	r0, [pc, #136]	; (4754 <verify_checksum+0x120>)
    46ca:	4b23      	ldr	r3, [pc, #140]	; (4758 <verify_checksum+0x124>)
    46cc:	4798      	blx	r3
    46ce:	e7fe      	b.n	46ce <verify_checksum+0x9a>
			printf("AT25DX read failed at page 0x%lx\r\n", read_from + (blk * AT25DFX_BUFFER_SIZE));
    46d0:	0031      	movs	r1, r6
    46d2:	481e      	ldr	r0, [pc, #120]	; (474c <verify_checksum+0x118>)
    46d4:	4b1e      	ldr	r3, [pc, #120]	; (4750 <verify_checksum+0x11c>)
    46d6:	4798      	blx	r3
    46d8:	e7fe      	b.n	46d8 <verify_checksum+0xa4>
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;
    46da:	2300      	movs	r3, #0
    46dc:	9301      	str	r3, [sp, #4]

	return crc32_recalculate(data, length, crc);
    46de:	aa01      	add	r2, sp, #4
    46e0:	2180      	movs	r1, #128	; 0x80
    46e2:	0049      	lsls	r1, r1, #1
    46e4:	4817      	ldr	r0, [pc, #92]	; (4744 <verify_checksum+0x110>)
    46e6:	4b18      	ldr	r3, [pc, #96]	; (4748 <verify_checksum+0x114>)
    46e8:	4798      	blx	r3
    46ea:	e7d0      	b.n	468e <verify_checksum+0x5a>
	crc32_recalculate(read_buffer, bytes, &checksum);
    46ec:	aa01      	add	r2, sp, #4
    46ee:	0029      	movs	r1, r5
    46f0:	4814      	ldr	r0, [pc, #80]	; (4744 <verify_checksum+0x110>)
    46f2:	4b15      	ldr	r3, [pc, #84]	; (4748 <verify_checksum+0x114>)
    46f4:	4798      	blx	r3
	if(at25dfx_chip_sleep(&at25dfx_chip) != STATUS_OK){
    46f6:	4810      	ldr	r0, [pc, #64]	; (4738 <verify_checksum+0x104>)
    46f8:	4b18      	ldr	r3, [pc, #96]	; (475c <verify_checksum+0x128>)
    46fa:	4798      	blx	r3
    46fc:	2800      	cmp	r0, #0
    46fe:	d003      	beq.n	4708 <verify_checksum+0xd4>
		printf("AT25DX sleep failed\r\n");
    4700:	4817      	ldr	r0, [pc, #92]	; (4760 <verify_checksum+0x12c>)
    4702:	4b15      	ldr	r3, [pc, #84]	; (4758 <verify_checksum+0x124>)
    4704:	4798      	blx	r3
    4706:	e7fe      	b.n	4706 <verify_checksum+0xd2>
	printf("New image Checksum: %lx\r\n", checksum);
    4708:	9901      	ldr	r1, [sp, #4]
    470a:	4816      	ldr	r0, [pc, #88]	; (4764 <verify_checksum+0x130>)
    470c:	4b10      	ldr	r3, [pc, #64]	; (4750 <verify_checksum+0x11c>)
    470e:	4798      	blx	r3
	if(((image == IMAGE1) ? image1_metadata.checksum : image2_metadata.checksum) == checksum)
    4710:	2f00      	cmp	r7, #0
    4712:	d10c      	bne.n	472e <verify_checksum+0xfa>
    4714:	4b14      	ldr	r3, [pc, #80]	; (4768 <verify_checksum+0x134>)
    4716:	6858      	ldr	r0, [r3, #4]
    4718:	9b01      	ldr	r3, [sp, #4]
    471a:	1a18      	subs	r0, r3, r0
    471c:	4243      	negs	r3, r0
    471e:	4158      	adcs	r0, r3
		return 1;
    4720:	b2c0      	uxtb	r0, r0
}
    4722:	b002      	add	sp, #8
    4724:	bc1c      	pop	{r2, r3, r4}
    4726:	4690      	mov	r8, r2
    4728:	469a      	mov	sl, r3
    472a:	46a3      	mov	fp, r4
    472c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((image == IMAGE1) ? image1_metadata.checksum : image2_metadata.checksum) == checksum)
    472e:	4b0f      	ldr	r3, [pc, #60]	; (476c <verify_checksum+0x138>)
    4730:	6858      	ldr	r0, [r3, #4]
    4732:	e7f1      	b.n	4718 <verify_checksum+0xe4>
    4734:	2000040c 	.word	0x2000040c
    4738:	200004d8 	.word	0x200004d8
    473c:	00005db5 	.word	0x00005db5
    4740:	000054b9 	.word	0x000054b9
    4744:	20000208 	.word	0x20000208
    4748:	00004115 	.word	0x00004115
    474c:	0000e6d0 	.word	0x0000e6d0
    4750:	0000ce29 	.word	0x0000ce29
    4754:	0000e628 	.word	0x0000e628
    4758:	0000cf45 	.word	0x0000cf45
    475c:	00005d15 	.word	0x00005d15
    4760:	0000e4f8 	.word	0x0000e4f8
    4764:	0000e6f4 	.word	0x0000e6f4
    4768:	200004cc 	.word	0x200004cc
    476c:	20000504 	.word	0x20000504

00004770 <update_metadata>:
void update_metadata(image_t image){
    4770:	b510      	push	{r4, lr}
    4772:	0004      	movs	r4, r0
	if(at25dfx_chip_wake(&at25dfx_chip) != STATUS_OK){
    4774:	4820      	ldr	r0, [pc, #128]	; (47f8 <update_metadata+0x88>)
    4776:	4b21      	ldr	r3, [pc, #132]	; (47fc <update_metadata+0x8c>)
    4778:	4798      	blx	r3
    477a:	2800      	cmp	r0, #0
    477c:	d110      	bne.n	47a0 <update_metadata+0x30>
	if(image == IMAGE1){
    477e:	2c00      	cmp	r4, #0
    4780:	d11f      	bne.n	47c2 <update_metadata+0x52>
		if(at25dfx_chip_read_buffer(&at25dfx_chip, AT25DFX_IMAGE1_HEADER, &image1_metadata, sizeof(image1_meta_t)) != STATUS_OK){
    4782:	2308      	movs	r3, #8
    4784:	4a1e      	ldr	r2, [pc, #120]	; (4800 <update_metadata+0x90>)
    4786:	2180      	movs	r1, #128	; 0x80
    4788:	0149      	lsls	r1, r1, #5
    478a:	481b      	ldr	r0, [pc, #108]	; (47f8 <update_metadata+0x88>)
    478c:	4c1d      	ldr	r4, [pc, #116]	; (4804 <update_metadata+0x94>)
    478e:	47a0      	blx	r4
    4790:	2800      	cmp	r0, #0
    4792:	d009      	beq.n	47a8 <update_metadata+0x38>
			printf("AT25DX read failed at page 0x%x\r\n", AT25DFX_IMAGE1_HEADER);
    4794:	2180      	movs	r1, #128	; 0x80
    4796:	0149      	lsls	r1, r1, #5
    4798:	481b      	ldr	r0, [pc, #108]	; (4808 <update_metadata+0x98>)
    479a:	4b1c      	ldr	r3, [pc, #112]	; (480c <update_metadata+0x9c>)
    479c:	4798      	blx	r3
    479e:	e7fe      	b.n	479e <update_metadata+0x2e>
		printf("AT25DX wake failed\r\n");
    47a0:	481b      	ldr	r0, [pc, #108]	; (4810 <update_metadata+0xa0>)
    47a2:	4b1c      	ldr	r3, [pc, #112]	; (4814 <update_metadata+0xa4>)
    47a4:	4798      	blx	r3
    47a6:	e7fe      	b.n	47a6 <update_metadata+0x36>
		printf("Current Image Version: %d, Size: %d, Checksum: %lx\r\n", image1_metadata.version, image1_metadata.size, image1_metadata.checksum);
    47a8:	4915      	ldr	r1, [pc, #84]	; (4800 <update_metadata+0x90>)
    47aa:	684b      	ldr	r3, [r1, #4]
    47ac:	884a      	ldrh	r2, [r1, #2]
    47ae:	8809      	ldrh	r1, [r1, #0]
    47b0:	4819      	ldr	r0, [pc, #100]	; (4818 <update_metadata+0xa8>)
    47b2:	4c16      	ldr	r4, [pc, #88]	; (480c <update_metadata+0x9c>)
    47b4:	47a0      	blx	r4
	if(at25dfx_chip_sleep(&at25dfx_chip) != STATUS_OK){
    47b6:	4810      	ldr	r0, [pc, #64]	; (47f8 <update_metadata+0x88>)
    47b8:	4b18      	ldr	r3, [pc, #96]	; (481c <update_metadata+0xac>)
    47ba:	4798      	blx	r3
    47bc:	2800      	cmp	r0, #0
    47be:	d117      	bne.n	47f0 <update_metadata+0x80>
}
    47c0:	bd10      	pop	{r4, pc}
		if(at25dfx_chip_read_buffer(&at25dfx_chip, AT25DFX_IMAGE2_HEADER, &image2_metadata, sizeof(image2_meta_t)) != STATUS_OK){
    47c2:	2308      	movs	r3, #8
    47c4:	4a16      	ldr	r2, [pc, #88]	; (4820 <update_metadata+0xb0>)
    47c6:	2180      	movs	r1, #128	; 0x80
    47c8:	0189      	lsls	r1, r1, #6
    47ca:	480b      	ldr	r0, [pc, #44]	; (47f8 <update_metadata+0x88>)
    47cc:	4c0d      	ldr	r4, [pc, #52]	; (4804 <update_metadata+0x94>)
    47ce:	47a0      	blx	r4
    47d0:	2800      	cmp	r0, #0
    47d2:	d005      	beq.n	47e0 <update_metadata+0x70>
			printf("AT25DX read failed at page 0x%x\r\n", AT25DFX_IMAGE2_HEADER);
    47d4:	2180      	movs	r1, #128	; 0x80
    47d6:	0189      	lsls	r1, r1, #6
    47d8:	480b      	ldr	r0, [pc, #44]	; (4808 <update_metadata+0x98>)
    47da:	4b0c      	ldr	r3, [pc, #48]	; (480c <update_metadata+0x9c>)
    47dc:	4798      	blx	r3
    47de:	e7fe      	b.n	47de <update_metadata+0x6e>
		printf("Current Image Version: %d, Size: %d, Checksum: %lx\r\n", image2_metadata.version, image2_metadata.size, image2_metadata.checksum);
    47e0:	490f      	ldr	r1, [pc, #60]	; (4820 <update_metadata+0xb0>)
    47e2:	684b      	ldr	r3, [r1, #4]
    47e4:	884a      	ldrh	r2, [r1, #2]
    47e6:	8809      	ldrh	r1, [r1, #0]
    47e8:	480b      	ldr	r0, [pc, #44]	; (4818 <update_metadata+0xa8>)
    47ea:	4c08      	ldr	r4, [pc, #32]	; (480c <update_metadata+0x9c>)
    47ec:	47a0      	blx	r4
    47ee:	e7e2      	b.n	47b6 <update_metadata+0x46>
		printf("AT25DX sleep failed\r\n");
    47f0:	480c      	ldr	r0, [pc, #48]	; (4824 <update_metadata+0xb4>)
    47f2:	4b08      	ldr	r3, [pc, #32]	; (4814 <update_metadata+0xa4>)
    47f4:	4798      	blx	r3
    47f6:	e7fe      	b.n	47f6 <update_metadata+0x86>
    47f8:	200004d8 	.word	0x200004d8
    47fc:	00005db5 	.word	0x00005db5
    4800:	200004cc 	.word	0x200004cc
    4804:	000054b9 	.word	0x000054b9
    4808:	0000e674 	.word	0x0000e674
    480c:	0000ce29 	.word	0x0000ce29
    4810:	0000e628 	.word	0x0000e628
    4814:	0000cf45 	.word	0x0000cf45
    4818:	0000e698 	.word	0x0000e698
    481c:	00005d15 	.word	0x00005d15
    4820:	20000504 	.word	0x20000504
    4824:	0000e4f8 	.word	0x0000e4f8

00004828 <update_image_status>:
void update_image_status(void){
    4828:	b510      	push	{r4, lr}
	if(at25dfx_chip_wake(&at25dfx_chip) != STATUS_OK){
    482a:	4818      	ldr	r0, [pc, #96]	; (488c <update_image_status+0x64>)
    482c:	4b18      	ldr	r3, [pc, #96]	; (4890 <update_image_status+0x68>)
    482e:	4798      	blx	r3
    4830:	2800      	cmp	r0, #0
    4832:	d003      	beq.n	483c <update_image_status+0x14>
		printf("AT25DX wake failed\r\n");
    4834:	4817      	ldr	r0, [pc, #92]	; (4894 <update_image_status+0x6c>)
    4836:	4b18      	ldr	r3, [pc, #96]	; (4898 <update_image_status+0x70>)
    4838:	4798      	blx	r3
    483a:	e7fe      	b.n	483a <update_image_status+0x12>
	if(at25dfx_chip_read_buffer(&at25dfx_chip, AT25DFX_STATUS_ADDR, &flash_status, sizeof(flash_status)) != STATUS_OK){
    483c:	2302      	movs	r3, #2
    483e:	4a17      	ldr	r2, [pc, #92]	; (489c <update_image_status+0x74>)
    4840:	2100      	movs	r1, #0
    4842:	4812      	ldr	r0, [pc, #72]	; (488c <update_image_status+0x64>)
    4844:	4c16      	ldr	r4, [pc, #88]	; (48a0 <update_image_status+0x78>)
    4846:	47a0      	blx	r4
    4848:	2800      	cmp	r0, #0
    484a:	d112      	bne.n	4872 <update_image_status+0x4a>
	printf("Flash status: Image1: %s, Image2: %s\r\n", flash_status.image1_valid ? "valid" : "invalid", flash_status.image2_valid ? "valid" : "invalid");
    484c:	4b13      	ldr	r3, [pc, #76]	; (489c <update_image_status+0x74>)
    484e:	781b      	ldrb	r3, [r3, #0]
    4850:	2b00      	cmp	r3, #0
    4852:	d113      	bne.n	487c <update_image_status+0x54>
    4854:	4913      	ldr	r1, [pc, #76]	; (48a4 <update_image_status+0x7c>)
    4856:	4b11      	ldr	r3, [pc, #68]	; (489c <update_image_status+0x74>)
    4858:	785b      	ldrb	r3, [r3, #1]
    485a:	2b00      	cmp	r3, #0
    485c:	d110      	bne.n	4880 <update_image_status+0x58>
    485e:	4a11      	ldr	r2, [pc, #68]	; (48a4 <update_image_status+0x7c>)
    4860:	4811      	ldr	r0, [pc, #68]	; (48a8 <update_image_status+0x80>)
    4862:	4b12      	ldr	r3, [pc, #72]	; (48ac <update_image_status+0x84>)
    4864:	4798      	blx	r3
	if(at25dfx_chip_sleep(&at25dfx_chip) != STATUS_OK){
    4866:	4809      	ldr	r0, [pc, #36]	; (488c <update_image_status+0x64>)
    4868:	4b11      	ldr	r3, [pc, #68]	; (48b0 <update_image_status+0x88>)
    486a:	4798      	blx	r3
    486c:	2800      	cmp	r0, #0
    486e:	d109      	bne.n	4884 <update_image_status+0x5c>
}
    4870:	bd10      	pop	{r4, pc}
		printf("AT25DX read failed at page 0x%x\r\n", AT25DFX_STATUS_ADDR);
    4872:	2100      	movs	r1, #0
    4874:	480f      	ldr	r0, [pc, #60]	; (48b4 <update_image_status+0x8c>)
    4876:	4b0d      	ldr	r3, [pc, #52]	; (48ac <update_image_status+0x84>)
    4878:	4798      	blx	r3
    487a:	e7fe      	b.n	487a <update_image_status+0x52>
	printf("Flash status: Image1: %s, Image2: %s\r\n", flash_status.image1_valid ? "valid" : "invalid", flash_status.image2_valid ? "valid" : "invalid");
    487c:	490e      	ldr	r1, [pc, #56]	; (48b8 <update_image_status+0x90>)
    487e:	e7ea      	b.n	4856 <update_image_status+0x2e>
    4880:	4a0d      	ldr	r2, [pc, #52]	; (48b8 <update_image_status+0x90>)
    4882:	e7ed      	b.n	4860 <update_image_status+0x38>
		printf("AT25DX sleep failed\r\n");
    4884:	480d      	ldr	r0, [pc, #52]	; (48bc <update_image_status+0x94>)
    4886:	4b04      	ldr	r3, [pc, #16]	; (4898 <update_image_status+0x70>)
    4888:	4798      	blx	r3
    488a:	e7fe      	b.n	488a <update_image_status+0x62>
    488c:	200004d8 	.word	0x200004d8
    4890:	00005db5 	.word	0x00005db5
    4894:	0000e628 	.word	0x0000e628
    4898:	0000cf45 	.word	0x0000cf45
    489c:	200004e0 	.word	0x200004e0
    48a0:	000054b9 	.word	0x000054b9
    48a4:	0000e644 	.word	0x0000e644
    48a8:	0000e64c 	.word	0x0000e64c
    48ac:	0000ce29 	.word	0x0000ce29
    48b0:	00005d15 	.word	0x00005d15
    48b4:	0000e674 	.word	0x0000e674
    48b8:	0000e63c 	.word	0x0000e63c
    48bc:	0000e4f8 	.word	0x0000e4f8

000048c0 <write_image_state>:
void write_image_state(image_valid_t validity){
    48c0:	b570      	push	{r4, r5, r6, lr}
    48c2:	0004      	movs	r4, r0
	if(at25dfx_chip_wake(&at25dfx_chip) != STATUS_OK){
    48c4:	4833      	ldr	r0, [pc, #204]	; (4994 <write_image_state+0xd4>)
    48c6:	4b34      	ldr	r3, [pc, #208]	; (4998 <write_image_state+0xd8>)
    48c8:	4798      	blx	r3
    48ca:	2800      	cmp	r0, #0
    48cc:	d003      	beq.n	48d6 <write_image_state+0x16>
		printf("AT25DX wake failed\r\n");
    48ce:	4833      	ldr	r0, [pc, #204]	; (499c <write_image_state+0xdc>)
    48d0:	4b33      	ldr	r3, [pc, #204]	; (49a0 <write_image_state+0xe0>)
    48d2:	4798      	blx	r3
    48d4:	e7fe      	b.n	48d4 <write_image_state+0x14>
	if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_STATUS_ADDR, false) != STATUS_OK){
    48d6:	2200      	movs	r2, #0
    48d8:	2100      	movs	r1, #0
    48da:	482e      	ldr	r0, [pc, #184]	; (4994 <write_image_state+0xd4>)
    48dc:	4b31      	ldr	r3, [pc, #196]	; (49a4 <write_image_state+0xe4>)
    48de:	4798      	blx	r3
    48e0:	2800      	cmp	r0, #0
    48e2:	d003      	beq.n	48ec <write_image_state+0x2c>
		printf("AT25DX sector protect failed\r\n");
    48e4:	4830      	ldr	r0, [pc, #192]	; (49a8 <write_image_state+0xe8>)
    48e6:	4b2e      	ldr	r3, [pc, #184]	; (49a0 <write_image_state+0xe0>)
    48e8:	4798      	blx	r3
    48ea:	e7fe      	b.n	48ea <write_image_state+0x2a>
	if(at25dfx_chip_read_buffer(&at25dfx_chip, AT25DFX_STATUS_ADDR, &flash_status, sizeof(flash_status)) != STATUS_OK){
    48ec:	2302      	movs	r3, #2
    48ee:	4a2f      	ldr	r2, [pc, #188]	; (49ac <write_image_state+0xec>)
    48f0:	2100      	movs	r1, #0
    48f2:	4828      	ldr	r0, [pc, #160]	; (4994 <write_image_state+0xd4>)
    48f4:	4d2e      	ldr	r5, [pc, #184]	; (49b0 <write_image_state+0xf0>)
    48f6:	47a8      	blx	r5
    48f8:	2800      	cmp	r0, #0
    48fa:	d004      	beq.n	4906 <write_image_state+0x46>
		printf("AT25DX read failed at page 0x%x\r\n", AT25DFX_STATUS_ADDR);
    48fc:	2100      	movs	r1, #0
    48fe:	482d      	ldr	r0, [pc, #180]	; (49b4 <write_image_state+0xf4>)
    4900:	4b2d      	ldr	r3, [pc, #180]	; (49b8 <write_image_state+0xf8>)
    4902:	4798      	blx	r3
    4904:	e7fe      	b.n	4904 <write_image_state+0x44>
	switch(validity){
    4906:	2c01      	cmp	r4, #1
    4908:	d015      	beq.n	4936 <write_image_state+0x76>
    490a:	2c00      	cmp	r4, #0
    490c:	d00f      	beq.n	492e <write_image_state+0x6e>
    490e:	2c02      	cmp	r4, #2
    4910:	d015      	beq.n	493e <write_image_state+0x7e>
    4912:	2c03      	cmp	r4, #3
    4914:	d017      	beq.n	4946 <write_image_state+0x86>
	if(at25dfx_chip_erase_block(&at25dfx_chip, AT25DFX_STATUS_ADDR,  AT25DFX_BLOCK_SIZE_4KB) != STATUS_OK){
    4916:	2200      	movs	r2, #0
    4918:	2100      	movs	r1, #0
    491a:	481e      	ldr	r0, [pc, #120]	; (4994 <write_image_state+0xd4>)
    491c:	4b27      	ldr	r3, [pc, #156]	; (49bc <write_image_state+0xfc>)
    491e:	4798      	blx	r3
    4920:	2800      	cmp	r0, #0
    4922:	d014      	beq.n	494e <write_image_state+0x8e>
		printf("AT25DX sector erase failed at page 0x%x\r\n", AT25DFX_STATUS_ADDR);
    4924:	2100      	movs	r1, #0
    4926:	4826      	ldr	r0, [pc, #152]	; (49c0 <write_image_state+0x100>)
    4928:	4b23      	ldr	r3, [pc, #140]	; (49b8 <write_image_state+0xf8>)
    492a:	4798      	blx	r3
    492c:	e7fe      	b.n	492c <write_image_state+0x6c>
			flash_status.image1_valid = 1;
    492e:	2201      	movs	r2, #1
    4930:	4b1e      	ldr	r3, [pc, #120]	; (49ac <write_image_state+0xec>)
    4932:	701a      	strb	r2, [r3, #0]
			break;
    4934:	e7ef      	b.n	4916 <write_image_state+0x56>
			flash_status.image1_valid = 0;
    4936:	2200      	movs	r2, #0
    4938:	4b1c      	ldr	r3, [pc, #112]	; (49ac <write_image_state+0xec>)
    493a:	701a      	strb	r2, [r3, #0]
			break;
    493c:	e7eb      	b.n	4916 <write_image_state+0x56>
			flash_status.image2_valid = 1;
    493e:	2201      	movs	r2, #1
    4940:	4b1a      	ldr	r3, [pc, #104]	; (49ac <write_image_state+0xec>)
    4942:	705a      	strb	r2, [r3, #1]
			break;
    4944:	e7e7      	b.n	4916 <write_image_state+0x56>
			flash_status.image2_valid = 0;
    4946:	2200      	movs	r2, #0
    4948:	4b18      	ldr	r3, [pc, #96]	; (49ac <write_image_state+0xec>)
    494a:	705a      	strb	r2, [r3, #1]
    494c:	e7e3      	b.n	4916 <write_image_state+0x56>
	if(at25dfx_chip_write_buffer(&at25dfx_chip, AT25DFX_STATUS_ADDR, &flash_status, sizeof(flash_status)) != STATUS_OK){
    494e:	2302      	movs	r3, #2
    4950:	4a16      	ldr	r2, [pc, #88]	; (49ac <write_image_state+0xec>)
    4952:	2100      	movs	r1, #0
    4954:	480f      	ldr	r0, [pc, #60]	; (4994 <write_image_state+0xd4>)
    4956:	4c1b      	ldr	r4, [pc, #108]	; (49c4 <write_image_state+0x104>)
    4958:	47a0      	blx	r4
    495a:	2800      	cmp	r0, #0
    495c:	d004      	beq.n	4968 <write_image_state+0xa8>
		printf("AT25DX write failed at page 0x%x\r\n", AT25DFX_STATUS_ADDR);
    495e:	2100      	movs	r1, #0
    4960:	4819      	ldr	r0, [pc, #100]	; (49c8 <write_image_state+0x108>)
    4962:	4b15      	ldr	r3, [pc, #84]	; (49b8 <write_image_state+0xf8>)
    4964:	4798      	blx	r3
    4966:	e7fe      	b.n	4966 <write_image_state+0xa6>
	if(at25dfx_chip_set_sector_protect(&at25dfx_chip, AT25DFX_STATUS_ADDR, true) != STATUS_OK){
    4968:	2201      	movs	r2, #1
    496a:	2100      	movs	r1, #0
    496c:	4809      	ldr	r0, [pc, #36]	; (4994 <write_image_state+0xd4>)
    496e:	4b0d      	ldr	r3, [pc, #52]	; (49a4 <write_image_state+0xe4>)
    4970:	4798      	blx	r3
    4972:	2800      	cmp	r0, #0
    4974:	d003      	beq.n	497e <write_image_state+0xbe>
		printf("AT25DX sector protect failed\r\n");
    4976:	480c      	ldr	r0, [pc, #48]	; (49a8 <write_image_state+0xe8>)
    4978:	4b09      	ldr	r3, [pc, #36]	; (49a0 <write_image_state+0xe0>)
    497a:	4798      	blx	r3
    497c:	e7fe      	b.n	497c <write_image_state+0xbc>
	if(at25dfx_chip_sleep(&at25dfx_chip) != STATUS_OK){
    497e:	4805      	ldr	r0, [pc, #20]	; (4994 <write_image_state+0xd4>)
    4980:	4b12      	ldr	r3, [pc, #72]	; (49cc <write_image_state+0x10c>)
    4982:	4798      	blx	r3
    4984:	2800      	cmp	r0, #0
    4986:	d003      	beq.n	4990 <write_image_state+0xd0>
		printf("AT25DX sleep failed\r\n");
    4988:	4811      	ldr	r0, [pc, #68]	; (49d0 <write_image_state+0x110>)
    498a:	4b05      	ldr	r3, [pc, #20]	; (49a0 <write_image_state+0xe0>)
    498c:	4798      	blx	r3
    498e:	e7fe      	b.n	498e <write_image_state+0xce>
}
    4990:	bd70      	pop	{r4, r5, r6, pc}
    4992:	46c0      	nop			; (mov r8, r8)
    4994:	200004d8 	.word	0x200004d8
    4998:	00005db5 	.word	0x00005db5
    499c:	0000e628 	.word	0x0000e628
    49a0:	0000cf45 	.word	0x0000cf45
    49a4:	00005bb9 	.word	0x00005bb9
    49a8:	0000e710 	.word	0x0000e710
    49ac:	200004e0 	.word	0x200004e0
    49b0:	000054b9 	.word	0x000054b9
    49b4:	0000e674 	.word	0x0000e674
    49b8:	0000ce29 	.word	0x0000ce29
    49bc:	000059cd 	.word	0x000059cd
    49c0:	0000e730 	.word	0x0000e730
    49c4:	000055cd 	.word	0x000055cd
    49c8:	0000e75c 	.word	0x0000e75c
    49cc:	00005d15 	.word	0x00005d15
    49d0:	0000e4f8 	.word	0x0000e4f8

000049d4 <save_data_to_flash>:

/**
 * \brief Write data to flash.
 */
void save_data_to_flash(char *data, uint32_t length){
    49d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49d6:	46de      	mov	lr, fp
    49d8:	464f      	mov	r7, r9
    49da:	4646      	mov	r6, r8
    49dc:	b5c0      	push	{r6, r7, lr}
    49de:	b082      	sub	sp, #8
    49e0:	1e07      	subs	r7, r0, #0
    49e2:	9101      	str	r1, [sp, #4]
		// Flash storage
		if ((data == NULL) || (length < 1)) {
    49e4:	d001      	beq.n	49ea <save_data_to_flash+0x16>
    49e6:	2900      	cmp	r1, #0
    49e8:	d108      	bne.n	49fc <save_data_to_flash+0x28>
			printf("store_file_packet: empty data.\r\n");
    49ea:	486f      	ldr	r0, [pc, #444]	; (4ba8 <save_data_to_flash+0x1d4>)
    49ec:	4b6f      	ldr	r3, [pc, #444]	; (4bac <save_data_to_flash+0x1d8>)
    49ee:	4798      	blx	r3
				finish_write_flash();
				return;
			}
			printf("store_file_packet: chunk size[%lu], received[%lu], file size[%lu]\r", (unsigned long)length, (unsigned long)received_file_size, (unsigned long)http_file_size);
		}
}
    49f0:	b002      	add	sp, #8
    49f2:	bc1c      	pop	{r2, r3, r4}
    49f4:	4690      	mov	r8, r2
    49f6:	4699      	mov	r9, r3
    49f8:	46a3      	mov	fp, r4
    49fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!is_state_set(DOWNLOADING)) {
    49fc:	2008      	movs	r0, #8
    49fe:	4b6c      	ldr	r3, [pc, #432]	; (4bb0 <save_data_to_flash+0x1dc>)
    4a00:	4798      	blx	r3
    4a02:	2800      	cmp	r0, #0
    4a04:	d00e      	beq.n	4a24 <save_data_to_flash+0x50>
		uint32_t bytes_to_write = (length + flash_byte_ptr), data_ptr = 0;
    4a06:	4b6b      	ldr	r3, [pc, #428]	; (4bb4 <save_data_to_flash+0x1e0>)
    4a08:	781c      	ldrb	r4, [r3, #0]
			if (at25dfx_chip_check_presence(&at25dfx_chip) == STATUS_OK) {
    4a0a:	486b      	ldr	r0, [pc, #428]	; (4bb8 <save_data_to_flash+0x1e4>)
    4a0c:	4b6b      	ldr	r3, [pc, #428]	; (4bbc <save_data_to_flash+0x1e8>)
    4a0e:	4798      	blx	r3
    4a10:	2800      	cmp	r0, #0
    4a12:	d000      	beq.n	4a16 <save_data_to_flash+0x42>
    4a14:	e0ae      	b.n	4b74 <save_data_to_flash+0x1a0>
		uint32_t bytes_to_write = (length + flash_byte_ptr), data_ptr = 0;
    4a16:	9b01      	ldr	r3, [sp, #4]
    4a18:	469c      	mov	ip, r3
    4a1a:	4464      	add	r4, ip
				while(bytes_to_write != 0){
    4a1c:	2c00      	cmp	r4, #0
    4a1e:	d06a      	beq.n	4af6 <save_data_to_flash+0x122>
    4a20:	2500      	movs	r5, #0
    4a22:	e055      	b.n	4ad0 <save_data_to_flash+0xfc>
			memset((uint8_t *)&read_buffer, 0, AT25DFX_BUFFER_SIZE);
    4a24:	2680      	movs	r6, #128	; 0x80
    4a26:	0076      	lsls	r6, r6, #1
    4a28:	0032      	movs	r2, r6
    4a2a:	2100      	movs	r1, #0
    4a2c:	4864      	ldr	r0, [pc, #400]	; (4bc0 <save_data_to_flash+0x1ec>)
    4a2e:	4c65      	ldr	r4, [pc, #404]	; (4bc4 <save_data_to_flash+0x1f0>)
    4a30:	47a0      	blx	r4
			memset((uint8_t *)&write_buffer, 0, AT25DFX_BUFFER_SIZE);
    4a32:	0032      	movs	r2, r6
    4a34:	2100      	movs	r1, #0
    4a36:	4864      	ldr	r0, [pc, #400]	; (4bc8 <save_data_to_flash+0x1f4>)
    4a38:	47a0      	blx	r4
			flash_byte_ptr = 0;
    4a3a:	2400      	movs	r4, #0
    4a3c:	4b5d      	ldr	r3, [pc, #372]	; (4bb4 <save_data_to_flash+0x1e0>)
    4a3e:	701c      	strb	r4, [r3, #0]
			flash_page_ptr = 0;
    4a40:	4b62      	ldr	r3, [pc, #392]	; (4bcc <save_data_to_flash+0x1f8>)
    4a42:	801c      	strh	r4, [r3, #0]
			flash_sector_ptr = 0;
    4a44:	4b62      	ldr	r3, [pc, #392]	; (4bd0 <save_data_to_flash+0x1fc>)
    4a46:	2200      	movs	r2, #0
    4a48:	701a      	strb	r2, [r3, #0]
void init_storage(void){
	init_flash_storage();
}

void start_write(void){
	start_write_flash();
    4a4a:	4b62      	ldr	r3, [pc, #392]	; (4bd4 <save_data_to_flash+0x200>)
    4a4c:	4798      	blx	r3
			received_file_size = 0;
    4a4e:	4b62      	ldr	r3, [pc, #392]	; (4bd8 <save_data_to_flash+0x204>)
    4a50:	601c      	str	r4, [r3, #0]
			add_state(DOWNLOADING);
    4a52:	2008      	movs	r0, #8
    4a54:	4b61      	ldr	r3, [pc, #388]	; (4bdc <save_data_to_flash+0x208>)
    4a56:	4798      	blx	r3
    4a58:	e7d5      	b.n	4a06 <save_data_to_flash+0x32>
						memcpy(&write_buffer[flash_byte_ptr], (uint8_t *)&data[data_ptr], (AT25DFX_BUFFER_SIZE - flash_byte_ptr));
    4a5a:	4b56      	ldr	r3, [pc, #344]	; (4bb4 <save_data_to_flash+0x1e0>)
    4a5c:	781e      	ldrb	r6, [r3, #0]
    4a5e:	4b5a      	ldr	r3, [pc, #360]	; (4bc8 <save_data_to_flash+0x1f4>)
    4a60:	1998      	adds	r0, r3, r6
    4a62:	2380      	movs	r3, #128	; 0x80
    4a64:	005b      	lsls	r3, r3, #1
    4a66:	4698      	mov	r8, r3
    4a68:	1b9b      	subs	r3, r3, r6
    4a6a:	469b      	mov	fp, r3
    4a6c:	1979      	adds	r1, r7, r5
    4a6e:	001a      	movs	r2, r3
    4a70:	4b5b      	ldr	r3, [pc, #364]	; (4be0 <save_data_to_flash+0x20c>)
    4a72:	4798      	blx	r3
						data_ptr += (AT25DFX_BUFFER_SIZE - flash_byte_ptr);
    4a74:	445d      	add	r5, fp
						received_file_size += (AT25DFX_BUFFER_SIZE - flash_byte_ptr);
    4a76:	4a58      	ldr	r2, [pc, #352]	; (4bd8 <save_data_to_flash+0x204>)
    4a78:	6813      	ldr	r3, [r2, #0]
    4a7a:	4443      	add	r3, r8
    4a7c:	1b9b      	subs	r3, r3, r6
    4a7e:	6013      	str	r3, [r2, #0]
						flash_byte_ptr = 0;
    4a80:	2300      	movs	r3, #0
    4a82:	4a4c      	ldr	r2, [pc, #304]	; (4bb4 <save_data_to_flash+0x1e0>)
    4a84:	7013      	strb	r3, [r2, #0]
						bytes_to_write -= AT25DFX_BUFFER_SIZE;
    4a86:	3c01      	subs	r4, #1
    4a88:	3cff      	subs	r4, #255	; 0xff
						if(at25dfx_chip_write_buffer(&at25dfx_chip, now_writing + (flash_sector_ptr * AT25DFX_SECTOR_SIZE)
    4a8a:	4b51      	ldr	r3, [pc, #324]	; (4bd0 <save_data_to_flash+0x1fc>)
    4a8c:	7819      	ldrb	r1, [r3, #0]
    4a8e:	0409      	lsls	r1, r1, #16
						+ (flash_page_ptr * AT25DFX_BUFFER_SIZE), write_buffer, AT25DFX_BUFFER_SIZE) != STATUS_OK){
    4a90:	4b4e      	ldr	r3, [pc, #312]	; (4bcc <save_data_to_flash+0x1f8>)
    4a92:	881b      	ldrh	r3, [r3, #0]
    4a94:	021b      	lsls	r3, r3, #8
    4a96:	18c9      	adds	r1, r1, r3
    4a98:	4b52      	ldr	r3, [pc, #328]	; (4be4 <save_data_to_flash+0x210>)
						if(at25dfx_chip_write_buffer(&at25dfx_chip, now_writing + (flash_sector_ptr * AT25DFX_SECTOR_SIZE)
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	18c9      	adds	r1, r1, r3
    4a9e:	4643      	mov	r3, r8
    4aa0:	4a49      	ldr	r2, [pc, #292]	; (4bc8 <save_data_to_flash+0x1f4>)
    4aa2:	4845      	ldr	r0, [pc, #276]	; (4bb8 <save_data_to_flash+0x1e4>)
    4aa4:	4e50      	ldr	r6, [pc, #320]	; (4be8 <save_data_to_flash+0x214>)
    4aa6:	47b0      	blx	r6
    4aa8:	2800      	cmp	r0, #0
    4aaa:	d155      	bne.n	4b58 <save_data_to_flash+0x184>
						flash_page_ptr++;
    4aac:	4a47      	ldr	r2, [pc, #284]	; (4bcc <save_data_to_flash+0x1f8>)
    4aae:	8813      	ldrh	r3, [r2, #0]
    4ab0:	3301      	adds	r3, #1
    4ab2:	b29b      	uxth	r3, r3
    4ab4:	8013      	strh	r3, [r2, #0]
						if((flash_page_ptr * AT25DFX_BUFFER_SIZE) >= AT25DFX_SECTOR_SIZE){
    4ab6:	021b      	lsls	r3, r3, #8
    4ab8:	4a4c      	ldr	r2, [pc, #304]	; (4bec <save_data_to_flash+0x218>)
    4aba:	4293      	cmp	r3, r2
    4abc:	dd06      	ble.n	4acc <save_data_to_flash+0xf8>
							flash_sector_ptr++;
    4abe:	4a44      	ldr	r2, [pc, #272]	; (4bd0 <save_data_to_flash+0x1fc>)
    4ac0:	7813      	ldrb	r3, [r2, #0]
    4ac2:	3301      	adds	r3, #1
    4ac4:	7013      	strb	r3, [r2, #0]
							flash_page_ptr = 0;
    4ac6:	2200      	movs	r2, #0
    4ac8:	4b40      	ldr	r3, [pc, #256]	; (4bcc <save_data_to_flash+0x1f8>)
    4aca:	801a      	strh	r2, [r3, #0]
				while(bytes_to_write != 0){
    4acc:	2c00      	cmp	r4, #0
    4ace:	d012      	beq.n	4af6 <save_data_to_flash+0x122>
					if(bytes_to_write < AT25DFX_BUFFER_SIZE){
    4ad0:	2cff      	cmp	r4, #255	; 0xff
    4ad2:	d8c2      	bhi.n	4a5a <save_data_to_flash+0x86>
						memcpy(&write_buffer[flash_byte_ptr], (uint8_t *)&data[data_ptr], bytes_to_write);
    4ad4:	4b37      	ldr	r3, [pc, #220]	; (4bb4 <save_data_to_flash+0x1e0>)
    4ad6:	4699      	mov	r9, r3
    4ad8:	781e      	ldrb	r6, [r3, #0]
    4ada:	483b      	ldr	r0, [pc, #236]	; (4bc8 <save_data_to_flash+0x1f4>)
    4adc:	1980      	adds	r0, r0, r6
    4ade:	1979      	adds	r1, r7, r5
    4ae0:	0022      	movs	r2, r4
    4ae2:	4b3f      	ldr	r3, [pc, #252]	; (4be0 <save_data_to_flash+0x20c>)
    4ae4:	4798      	blx	r3
						flash_byte_ptr += bytes_to_write;
    4ae6:	1936      	adds	r6, r6, r4
    4ae8:	464b      	mov	r3, r9
    4aea:	701e      	strb	r6, [r3, #0]
						received_file_size += bytes_to_write;
    4aec:	4b3a      	ldr	r3, [pc, #232]	; (4bd8 <save_data_to_flash+0x204>)
    4aee:	681a      	ldr	r2, [r3, #0]
    4af0:	4694      	mov	ip, r2
    4af2:	4464      	add	r4, ip
    4af4:	601c      	str	r4, [r3, #0]
			if (received_file_size >= http_file_size) {
    4af6:	4b38      	ldr	r3, [pc, #224]	; (4bd8 <save_data_to_flash+0x204>)
    4af8:	681a      	ldr	r2, [r3, #0]
    4afa:	4b3d      	ldr	r3, [pc, #244]	; (4bf0 <save_data_to_flash+0x21c>)
    4afc:	681b      	ldr	r3, [r3, #0]
    4afe:	429a      	cmp	r2, r3
    4b00:	d34c      	bcc.n	4b9c <save_data_to_flash+0x1c8>
				if(flash_byte_ptr){
    4b02:	4b2c      	ldr	r3, [pc, #176]	; (4bb4 <save_data_to_flash+0x1e0>)
    4b04:	781b      	ldrb	r3, [r3, #0]
    4b06:	2b00      	cmp	r3, #0
    4b08:	d010      	beq.n	4b2c <save_data_to_flash+0x158>
					if(at25dfx_chip_write_buffer(&at25dfx_chip, now_writing + (flash_sector_ptr * AT25DFX_SECTOR_SIZE)
    4b0a:	b29b      	uxth	r3, r3
    4b0c:	4a30      	ldr	r2, [pc, #192]	; (4bd0 <save_data_to_flash+0x1fc>)
    4b0e:	7811      	ldrb	r1, [r2, #0]
    4b10:	0409      	lsls	r1, r1, #16
					+ (flash_page_ptr * AT25DFX_BUFFER_SIZE), write_buffer, flash_byte_ptr) != STATUS_OK){
    4b12:	4a2e      	ldr	r2, [pc, #184]	; (4bcc <save_data_to_flash+0x1f8>)
    4b14:	8812      	ldrh	r2, [r2, #0]
    4b16:	0212      	lsls	r2, r2, #8
    4b18:	1889      	adds	r1, r1, r2
    4b1a:	4a32      	ldr	r2, [pc, #200]	; (4be4 <save_data_to_flash+0x210>)
					if(at25dfx_chip_write_buffer(&at25dfx_chip, now_writing + (flash_sector_ptr * AT25DFX_SECTOR_SIZE)
    4b1c:	6812      	ldr	r2, [r2, #0]
    4b1e:	1889      	adds	r1, r1, r2
    4b20:	4a29      	ldr	r2, [pc, #164]	; (4bc8 <save_data_to_flash+0x1f4>)
    4b22:	4825      	ldr	r0, [pc, #148]	; (4bb8 <save_data_to_flash+0x1e4>)
    4b24:	4c30      	ldr	r4, [pc, #192]	; (4be8 <save_data_to_flash+0x214>)
    4b26:	47a0      	blx	r4
    4b28:	2800      	cmp	r0, #0
    4b2a:	d127      	bne.n	4b7c <save_data_to_flash+0x1a8>
				printf("store_file_packet: chunk size[%lu], received[%lu], file size[%lu]\r\n", (unsigned long)length, (unsigned long)received_file_size, (unsigned long)http_file_size);
    4b2c:	4b30      	ldr	r3, [pc, #192]	; (4bf0 <save_data_to_flash+0x21c>)
    4b2e:	681b      	ldr	r3, [r3, #0]
    4b30:	4a29      	ldr	r2, [pc, #164]	; (4bd8 <save_data_to_flash+0x204>)
    4b32:	6812      	ldr	r2, [r2, #0]
    4b34:	9901      	ldr	r1, [sp, #4]
    4b36:	482f      	ldr	r0, [pc, #188]	; (4bf4 <save_data_to_flash+0x220>)
    4b38:	4c2f      	ldr	r4, [pc, #188]	; (4bf8 <save_data_to_flash+0x224>)
    4b3a:	47a0      	blx	r4
				printf("store_file_packet: %s file saved successfully.\r\n", (now_downloading == IMAGE) ? "Firmware" : "Metadata");
    4b3c:	4b2f      	ldr	r3, [pc, #188]	; (4bfc <save_data_to_flash+0x228>)
    4b3e:	781b      	ldrb	r3, [r3, #0]
    4b40:	2b01      	cmp	r3, #1
    4b42:	d029      	beq.n	4b98 <save_data_to_flash+0x1c4>
    4b44:	492e      	ldr	r1, [pc, #184]	; (4c00 <save_data_to_flash+0x22c>)
    4b46:	482f      	ldr	r0, [pc, #188]	; (4c04 <save_data_to_flash+0x230>)
    4b48:	4b2b      	ldr	r3, [pc, #172]	; (4bf8 <save_data_to_flash+0x224>)
    4b4a:	4798      	blx	r3
				add_state(COMPLETED);
    4b4c:	2010      	movs	r0, #16
    4b4e:	4b23      	ldr	r3, [pc, #140]	; (4bdc <save_data_to_flash+0x208>)
    4b50:	4798      	blx	r3
				finish_write_flash();
    4b52:	4b2d      	ldr	r3, [pc, #180]	; (4c08 <save_data_to_flash+0x234>)
    4b54:	4798      	blx	r3
				return;
    4b56:	e74b      	b.n	49f0 <save_data_to_flash+0x1c>
							printf("AT25DX write failed at page 0x%lx\r\n", now_writing + (flash_sector_ptr * AT25DFX_SECTOR_SIZE)
    4b58:	4b1d      	ldr	r3, [pc, #116]	; (4bd0 <save_data_to_flash+0x1fc>)
    4b5a:	7819      	ldrb	r1, [r3, #0]
    4b5c:	0409      	lsls	r1, r1, #16
							+ (flash_page_ptr * AT25DFX_BUFFER_SIZE));
    4b5e:	4b1b      	ldr	r3, [pc, #108]	; (4bcc <save_data_to_flash+0x1f8>)
    4b60:	881b      	ldrh	r3, [r3, #0]
    4b62:	021b      	lsls	r3, r3, #8
    4b64:	18c9      	adds	r1, r1, r3
    4b66:	4b1f      	ldr	r3, [pc, #124]	; (4be4 <save_data_to_flash+0x210>)
							printf("AT25DX write failed at page 0x%lx\r\n", now_writing + (flash_sector_ptr * AT25DFX_SECTOR_SIZE)
    4b68:	681b      	ldr	r3, [r3, #0]
    4b6a:	18c9      	adds	r1, r1, r3
    4b6c:	4827      	ldr	r0, [pc, #156]	; (4c0c <save_data_to_flash+0x238>)
    4b6e:	4b22      	ldr	r3, [pc, #136]	; (4bf8 <save_data_to_flash+0x224>)
    4b70:	4798      	blx	r3
    4b72:	e7fe      	b.n	4b72 <save_data_to_flash+0x19e>
				printf("AT25DX check presence failed\r\n");
    4b74:	4826      	ldr	r0, [pc, #152]	; (4c10 <save_data_to_flash+0x23c>)
    4b76:	4b0d      	ldr	r3, [pc, #52]	; (4bac <save_data_to_flash+0x1d8>)
    4b78:	4798      	blx	r3
    4b7a:	e7fe      	b.n	4b7a <save_data_to_flash+0x1a6>
						printf("AT25DX write failed at page 0x%lx\r\n", now_writing + (flash_sector_ptr * AT25DFX_SECTOR_SIZE)
    4b7c:	4b14      	ldr	r3, [pc, #80]	; (4bd0 <save_data_to_flash+0x1fc>)
    4b7e:	7819      	ldrb	r1, [r3, #0]
    4b80:	0409      	lsls	r1, r1, #16
						+ (flash_page_ptr * AT25DFX_BUFFER_SIZE));
    4b82:	4b12      	ldr	r3, [pc, #72]	; (4bcc <save_data_to_flash+0x1f8>)
    4b84:	881b      	ldrh	r3, [r3, #0]
    4b86:	021b      	lsls	r3, r3, #8
    4b88:	18c9      	adds	r1, r1, r3
    4b8a:	4b16      	ldr	r3, [pc, #88]	; (4be4 <save_data_to_flash+0x210>)
						printf("AT25DX write failed at page 0x%lx\r\n", now_writing + (flash_sector_ptr * AT25DFX_SECTOR_SIZE)
    4b8c:	681b      	ldr	r3, [r3, #0]
    4b8e:	18c9      	adds	r1, r1, r3
    4b90:	481e      	ldr	r0, [pc, #120]	; (4c0c <save_data_to_flash+0x238>)
    4b92:	4b19      	ldr	r3, [pc, #100]	; (4bf8 <save_data_to_flash+0x224>)
    4b94:	4798      	blx	r3
    4b96:	e7fe      	b.n	4b96 <save_data_to_flash+0x1c2>
				printf("store_file_packet: %s file saved successfully.\r\n", (now_downloading == IMAGE) ? "Firmware" : "Metadata");
    4b98:	491e      	ldr	r1, [pc, #120]	; (4c14 <save_data_to_flash+0x240>)
    4b9a:	e7d4      	b.n	4b46 <save_data_to_flash+0x172>
			printf("store_file_packet: chunk size[%lu], received[%lu], file size[%lu]\r", (unsigned long)length, (unsigned long)received_file_size, (unsigned long)http_file_size);
    4b9c:	9901      	ldr	r1, [sp, #4]
    4b9e:	481e      	ldr	r0, [pc, #120]	; (4c18 <save_data_to_flash+0x244>)
    4ba0:	4c15      	ldr	r4, [pc, #84]	; (4bf8 <save_data_to_flash+0x224>)
    4ba2:	47a0      	blx	r4
    4ba4:	e724      	b.n	49f0 <save_data_to_flash+0x1c>
    4ba6:	46c0      	nop			; (mov r8, r8)
    4ba8:	0000e528 	.word	0x0000e528
    4bac:	0000cf45 	.word	0x0000cf45
    4bb0:	00005079 	.word	0x00005079
    4bb4:	200001fe 	.word	0x200001fe
    4bb8:	200004d8 	.word	0x200004d8
    4bbc:	00005391 	.word	0x00005391
    4bc0:	20000208 	.word	0x20000208
    4bc4:	0000ccc7 	.word	0x0000ccc7
    4bc8:	20000308 	.word	0x20000308
    4bcc:	20000200 	.word	0x20000200
    4bd0:	20000202 	.word	0x20000202
    4bd4:	000044e5 	.word	0x000044e5
    4bd8:	20000414 	.word	0x20000414
    4bdc:	00004ec5 	.word	0x00004ec5
    4be0:	0000cc91 	.word	0x0000cc91
    4be4:	20000204 	.word	0x20000204
    4be8:	000055cd 	.word	0x000055cd
    4bec:	0000ffff 	.word	0x0000ffff
    4bf0:	2000040c 	.word	0x2000040c
    4bf4:	0000e56c 	.word	0x0000e56c
    4bf8:	0000ce29 	.word	0x0000ce29
    4bfc:	20000410 	.word	0x20000410
    4c00:	0000e51c 	.word	0x0000e51c
    4c04:	0000e5b0 	.word	0x0000e5b0
    4c08:	00004419 	.word	0x00004419
    4c0c:	0000e548 	.word	0x0000e548
    4c10:	0000e4d8 	.word	0x0000e4d8
    4c14:	0000e510 	.word	0x0000e510
    4c18:	0000e5e4 	.word	0x0000e5e4

00004c1c <init_storage>:
void init_storage(void){
    4c1c:	b570      	push	{r4, r5, r6, lr}
    4c1e:	b08a      	sub	sp, #40	; 0x28
 */
static inline void spi_master_vec_get_config_defaults(
		struct spi_master_vec_config *const config)
{
	config->baudrate = 100000;
	config->gclk_generator = GCLK_GENERATOR_0;
    4c20:	aa01      	add	r2, sp, #4
    4c22:	2400      	movs	r4, #0
    4c24:	7114      	strb	r4, [r2, #4]
	config->run_in_standby = false;
    4c26:	7154      	strb	r4, [r2, #5]
	config->mux_setting = SPI_SIGNAL_MUX_SETTING_D;
	config->transfer_mode = SPI_TRANSFER_MODE_0;
    4c28:	60d4      	str	r4, [r2, #12]
	config->data_order = SPI_DATA_ORDER_MSB;
    4c2a:	6114      	str	r4, [r2, #16]
	at25dfx_spi_config.baudrate = 12000000;
    4c2c:	4b2b      	ldr	r3, [pc, #172]	; (4cdc <init_storage+0xc0>)
    4c2e:	9301      	str	r3, [sp, #4]
	at25dfx_spi_config.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
    4c30:	2380      	movs	r3, #128	; 0x80
    4c32:	025b      	lsls	r3, r3, #9
    4c34:	6093      	str	r3, [r2, #8]
	at25dfx_spi_config.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    4c36:	4b2a      	ldr	r3, [pc, #168]	; (4ce0 <init_storage+0xc4>)
    4c38:	6153      	str	r3, [r2, #20]
	at25dfx_spi_config.pinmux_pad1 = PINMUX_UNUSED;
    4c3a:	2301      	movs	r3, #1
    4c3c:	425b      	negs	r3, r3
    4c3e:	6193      	str	r3, [r2, #24]
	at25dfx_spi_config.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
    4c40:	4b28      	ldr	r3, [pc, #160]	; (4ce4 <init_storage+0xc8>)
    4c42:	61d3      	str	r3, [r2, #28]
	at25dfx_spi_config.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    4c44:	4b28      	ldr	r3, [pc, #160]	; (4ce8 <init_storage+0xcc>)
    4c46:	6213      	str	r3, [r2, #32]
	spi_master_vec_init(&at25dfx_spi, SERCOM1, &at25dfx_spi_config);
    4c48:	4e28      	ldr	r6, [pc, #160]	; (4cec <init_storage+0xd0>)
    4c4a:	4929      	ldr	r1, [pc, #164]	; (4cf0 <init_storage+0xd4>)
    4c4c:	0030      	movs	r0, r6
    4c4e:	4b29      	ldr	r3, [pc, #164]	; (4cf4 <init_storage+0xd8>)
    4c50:	4798      	blx	r3
	spi_master_vec_enable(&at25dfx_spi);
    4c52:	0030      	movs	r0, r6
    4c54:	4b28      	ldr	r3, [pc, #160]	; (4cf8 <init_storage+0xdc>)
    4c56:	4798      	blx	r3
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    4c58:	4d28      	ldr	r5, [pc, #160]	; (4cfc <init_storage+0xe0>)
    4c5a:	2304      	movs	r3, #4
    4c5c:	712b      	strb	r3, [r5, #4]
	module->cs_pin = config->cs_pin;
    4c5e:	3303      	adds	r3, #3
    4c60:	716b      	strb	r3, [r5, #5]
	module->spi = spi_module;
    4c62:	602e      	str	r6, [r5, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    4c64:	3b06      	subs	r3, #6
    4c66:	466a      	mov	r2, sp
    4c68:	7053      	strb	r3, [r2, #1]
	config->powersave  = false;
    4c6a:	7094      	strb	r4, [r2, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    4c6c:	7013      	strb	r3, [r2, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    4c6e:	4669      	mov	r1, sp
    4c70:	2007      	movs	r0, #7
    4c72:	4b23      	ldr	r3, [pc, #140]	; (4d00 <init_storage+0xe4>)
    4c74:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    4c76:	796a      	ldrb	r2, [r5, #5]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4c78:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4c7a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4c7c:	2900      	cmp	r1, #0
    4c7e:	d104      	bne.n	4c8a <init_storage+0x6e>
		return &(ports[port_index]->Group[group_index]);
    4c80:	0953      	lsrs	r3, r2, #5
    4c82:	01db      	lsls	r3, r3, #7
    4c84:	491f      	ldr	r1, [pc, #124]	; (4d04 <init_storage+0xe8>)
    4c86:	468c      	mov	ip, r1
    4c88:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4c8a:	211f      	movs	r1, #31
    4c8c:	4011      	ands	r1, r2
    4c8e:	2201      	movs	r2, #1
    4c90:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4c92:	619a      	str	r2, [r3, #24]
	memset((uint8_t *)&read_buffer, 0, AT25DFX_BUFFER_SIZE);
    4c94:	2580      	movs	r5, #128	; 0x80
    4c96:	006d      	lsls	r5, r5, #1
    4c98:	002a      	movs	r2, r5
    4c9a:	2100      	movs	r1, #0
    4c9c:	481a      	ldr	r0, [pc, #104]	; (4d08 <init_storage+0xec>)
    4c9e:	4c1b      	ldr	r4, [pc, #108]	; (4d0c <init_storage+0xf0>)
    4ca0:	47a0      	blx	r4
	memset((uint8_t *)&write_buffer, 0, AT25DFX_BUFFER_SIZE);
    4ca2:	002a      	movs	r2, r5
    4ca4:	2100      	movs	r1, #0
    4ca6:	481a      	ldr	r0, [pc, #104]	; (4d10 <init_storage+0xf4>)
    4ca8:	47a0      	blx	r4
	memset((uint8_t *)&image1_metadata, 0, sizeof(image1_metadata));
    4caa:	2208      	movs	r2, #8
    4cac:	2100      	movs	r1, #0
    4cae:	4819      	ldr	r0, [pc, #100]	; (4d14 <init_storage+0xf8>)
    4cb0:	47a0      	blx	r4
	memset((uint8_t *)&image2_metadata, 0, sizeof(image2_metadata));
    4cb2:	2208      	movs	r2, #8
    4cb4:	2100      	movs	r1, #0
    4cb6:	4818      	ldr	r0, [pc, #96]	; (4d18 <init_storage+0xfc>)
    4cb8:	47a0      	blx	r4
	memset((uint8_t *)&flash_status, 0, sizeof(flash_status));
    4cba:	2202      	movs	r2, #2
    4cbc:	2100      	movs	r1, #0
    4cbe:	4817      	ldr	r0, [pc, #92]	; (4d1c <init_storage+0x100>)
    4cc0:	47a0      	blx	r4
	flash_byte_ptr = 0;
    4cc2:	2300      	movs	r3, #0
    4cc4:	4a16      	ldr	r2, [pc, #88]	; (4d20 <init_storage+0x104>)
    4cc6:	7013      	strb	r3, [r2, #0]
	flash_page_ptr = 0;
    4cc8:	4a16      	ldr	r2, [pc, #88]	; (4d24 <init_storage+0x108>)
    4cca:	8013      	strh	r3, [r2, #0]
	flash_sector_ptr = 0;
    4ccc:	4b16      	ldr	r3, [pc, #88]	; (4d28 <init_storage+0x10c>)
    4cce:	2200      	movs	r2, #0
    4cd0:	701a      	strb	r2, [r3, #0]
	add_state(STORAGE_READY);
    4cd2:	2001      	movs	r0, #1
    4cd4:	4b15      	ldr	r3, [pc, #84]	; (4d2c <init_storage+0x110>)
    4cd6:	4798      	blx	r3
}
    4cd8:	b00a      	add	sp, #40	; 0x28
    4cda:	bd70      	pop	{r4, r5, r6, pc}
    4cdc:	00b71b00 	.word	0x00b71b00
    4ce0:	00100002 	.word	0x00100002
    4ce4:	00120002 	.word	0x00120002
    4ce8:	00130002 	.word	0x00130002
    4cec:	200004e4 	.word	0x200004e4
    4cf0:	42000c00 	.word	0x42000c00
    4cf4:	00009da1 	.word	0x00009da1
    4cf8:	00009f4d 	.word	0x00009f4d
    4cfc:	200004d8 	.word	0x200004d8
    4d00:	000092bd 	.word	0x000092bd
    4d04:	41004400 	.word	0x41004400
    4d08:	20000208 	.word	0x20000208
    4d0c:	0000ccc7 	.word	0x0000ccc7
    4d10:	20000308 	.word	0x20000308
    4d14:	200004cc 	.word	0x200004cc
    4d18:	20000504 	.word	0x20000504
    4d1c:	200004e0 	.word	0x200004e0
    4d20:	200001fe 	.word	0x200001fe
    4d24:	20000200 	.word	0x20000200
    4d28:	20000202 	.word	0x20000202
    4d2c:	00004ec5 	.word	0x00004ec5

00004d30 <finish_write>:
}

void finish_write(void){
    4d30:	b510      	push	{r4, lr}
	finish_write_flash();
    4d32:	4b01      	ldr	r3, [pc, #4]	; (4d38 <finish_write+0x8>)
    4d34:	4798      	blx	r3
}
    4d36:	bd10      	pop	{r4, pc}
    4d38:	00004419 	.word	0x00004419

00004d3c <set_bootloader_flag>:

void set_bootloader_flag(void){
    4d3c:	b570      	push	{r4, r5, r6, lr}
	nvm_status.bootloader = 1;
    4d3e:	4b0d      	ldr	r3, [pc, #52]	; (4d74 <set_bootloader_flag+0x38>)
    4d40:	2201      	movs	r2, #1
    4d42:	701a      	strb	r2, [r3, #0]
	nvm_status.nvm_valid = 1;
    4d44:	705a      	strb	r2, [r3, #1]
	enum status_code error_code;
	do{
		error_code = nvm_erase_row(NVM_STATUS_ADDRESS);
    4d46:	25fc      	movs	r5, #252	; 0xfc
    4d48:	01ad      	lsls	r5, r5, #6
    4d4a:	4c0b      	ldr	r4, [pc, #44]	; (4d78 <set_bootloader_flag+0x3c>)
    4d4c:	0028      	movs	r0, r5
    4d4e:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
    4d50:	2805      	cmp	r0, #5
    4d52:	d0fb      	beq.n	4d4c <set_bootloader_flag+0x10>
	do{
		error_code = nvm_write_buffer(NVM_STATUS_ADDRESS, (uint8_t *)&nvm_status, sizeof(nvm_status));
    4d54:	4e07      	ldr	r6, [pc, #28]	; (4d74 <set_bootloader_flag+0x38>)
    4d56:	25fc      	movs	r5, #252	; 0xfc
    4d58:	01ad      	lsls	r5, r5, #6
    4d5a:	4c08      	ldr	r4, [pc, #32]	; (4d7c <set_bootloader_flag+0x40>)
    4d5c:	2202      	movs	r2, #2
    4d5e:	0031      	movs	r1, r6
    4d60:	0028      	movs	r0, r5
    4d62:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
    4d64:	2805      	cmp	r0, #5
    4d66:	d0f9      	beq.n	4d5c <set_bootloader_flag+0x20>
	nvm_status.bootloader = 0;
    4d68:	4b02      	ldr	r3, [pc, #8]	; (4d74 <set_bootloader_flag+0x38>)
    4d6a:	2200      	movs	r2, #0
    4d6c:	701a      	strb	r2, [r3, #0]
	nvm_status.nvm_valid = 1;
    4d6e:	3201      	adds	r2, #1
    4d70:	705a      	strb	r2, [r3, #1]
    4d72:	bd70      	pop	{r4, r5, r6, pc}
    4d74:	200004d4 	.word	0x200004d4
    4d78:	000043bd 	.word	0x000043bd
    4d7c:	00004315 	.word	0x00004315

00004d80 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
    4d80:	b570      	push	{r4, r5, r6, lr}
    4d82:	b082      	sub	sp, #8
    4d84:	0005      	movs	r5, r0
    4d86:	000c      	movs	r4, r1
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
			(int)IPV4_BYTE(u32ServerIP, 0), (int)IPV4_BYTE(u32ServerIP, 1),
    4d88:	0a0b      	lsrs	r3, r1, #8
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    4d8a:	21ff      	movs	r1, #255	; 0xff
    4d8c:	400b      	ands	r3, r1
    4d8e:	000a      	movs	r2, r1
    4d90:	4022      	ands	r2, r4
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    4d92:	0e20      	lsrs	r0, r4, #24
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    4d94:	9001      	str	r0, [sp, #4]
			(int)IPV4_BYTE(u32ServerIP, 2), (int)IPV4_BYTE(u32ServerIP, 3));
    4d96:	0c20      	lsrs	r0, r4, #16
	printf("resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n", pu8DomainName,
    4d98:	4001      	ands	r1, r0
    4d9a:	9100      	str	r1, [sp, #0]
    4d9c:	0029      	movs	r1, r5
    4d9e:	4804      	ldr	r0, [pc, #16]	; (4db0 <resolve_cb+0x30>)
    4da0:	4e04      	ldr	r6, [pc, #16]	; (4db4 <resolve_cb+0x34>)
    4da2:	47b0      	blx	r6
	http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    4da4:	0021      	movs	r1, r4
    4da6:	0028      	movs	r0, r5
    4da8:	4b03      	ldr	r3, [pc, #12]	; (4db8 <resolve_cb+0x38>)
    4daa:	4798      	blx	r3
}
    4dac:	b002      	add	sp, #8
    4dae:	bd70      	pop	{r4, r5, r6, pc}
    4db0:	0000ea44 	.word	0x0000ea44
    4db4:	0000ce29 	.word	0x0000ce29
    4db8:	0000b715 	.word	0x0000b715

00004dbc <socket_cb>:
{
    4dbc:	b510      	push	{r4, lr}
	http_client_socket_event_handler(sock, u8Msg, pvMsg);
    4dbe:	4b01      	ldr	r3, [pc, #4]	; (4dc4 <socket_cb+0x8>)
    4dc0:	4798      	blx	r3
}
    4dc2:	bd10      	pop	{r4, pc}
    4dc4:	0000c341 	.word	0x0000c341

00004dc8 <store_file_packet>:
{
    4dc8:	b510      	push	{r4, lr}
	if(now_downloading == IMAGE)
    4dca:	4b0c      	ldr	r3, [pc, #48]	; (4dfc <store_file_packet+0x34>)
    4dcc:	781b      	ldrb	r3, [r3, #0]
    4dce:	2b01      	cmp	r3, #1
    4dd0:	d00a      	beq.n	4de8 <store_file_packet+0x20>
		if(length == sizeof(new_img_meta)){
    4dd2:	2908      	cmp	r1, #8
    4dd4:	d00b      	beq.n	4dee <store_file_packet+0x26>
			printf("Image metadata in wrong format\r\n");
    4dd6:	480a      	ldr	r0, [pc, #40]	; (4e00 <store_file_packet+0x38>)
    4dd8:	4b0a      	ldr	r3, [pc, #40]	; (4e04 <store_file_packet+0x3c>)
    4dda:	4798      	blx	r3
			memset(&new_img_meta, 0, sizeof(new_img_meta));
    4ddc:	2208      	movs	r2, #8
    4dde:	2100      	movs	r1, #0
    4de0:	4809      	ldr	r0, [pc, #36]	; (4e08 <store_file_packet+0x40>)
    4de2:	4b0a      	ldr	r3, [pc, #40]	; (4e0c <store_file_packet+0x44>)
    4de4:	4798      	blx	r3
}
    4de6:	bd10      	pop	{r4, pc}
		save_data_to_flash(data, length);
    4de8:	4b09      	ldr	r3, [pc, #36]	; (4e10 <store_file_packet+0x48>)
    4dea:	4798      	blx	r3
    4dec:	e7fb      	b.n	4de6 <store_file_packet+0x1e>
			memcpy(&new_img_meta, data, length);
    4dee:	2208      	movs	r2, #8
    4df0:	0001      	movs	r1, r0
    4df2:	4805      	ldr	r0, [pc, #20]	; (4e08 <store_file_packet+0x40>)
    4df4:	4b07      	ldr	r3, [pc, #28]	; (4e14 <store_file_packet+0x4c>)
    4df6:	4798      	blx	r3
    4df8:	e7f5      	b.n	4de6 <store_file_packet+0x1e>
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	20000410 	.word	0x20000410
    4e00:	0000ebe0 	.word	0x0000ebe0
    4e04:	0000cf45 	.word	0x0000cf45
    4e08:	2000064c 	.word	0x2000064c
    4e0c:	0000ccc7 	.word	0x0000ccc7
    4e10:	000049d5 	.word	0x000049d5
    4e14:	0000cc91 	.word	0x0000cc91

00004e18 <start_download>:
{
    4e18:	b510      	push	{r4, lr}
    4e1a:	b082      	sub	sp, #8
	return ((down_state & mask) != 0);
    4e1c:	4b19      	ldr	r3, [pc, #100]	; (4e84 <start_download+0x6c>)
    4e1e:	781b      	ldrb	r3, [r3, #0]
	if (!is_state_set(STORAGE_READY)) {
    4e20:	07da      	lsls	r2, r3, #31
    4e22:	d515      	bpl.n	4e50 <start_download+0x38>
	if (!is_state_set(WIFI_CONNECTED)) {
    4e24:	079a      	lsls	r2, r3, #30
    4e26:	d518      	bpl.n	4e5a <start_download+0x42>
	if (is_state_set(GET_REQUESTED)) {
    4e28:	075a      	lsls	r2, r3, #29
    4e2a:	d41a      	bmi.n	4e62 <start_download+0x4a>
	if (is_state_set(DOWNLOADING)) {
    4e2c:	071b      	lsls	r3, r3, #28
    4e2e:	d41c      	bmi.n	4e6a <start_download+0x52>
	printf("start_download: sending HTTP request...\r\n");
    4e30:	4815      	ldr	r0, [pc, #84]	; (4e88 <start_download+0x70>)
    4e32:	4b16      	ldr	r3, [pc, #88]	; (4e8c <start_download+0x74>)
    4e34:	4798      	blx	r3
	if(now_downloading == IMAGE)
    4e36:	4b16      	ldr	r3, [pc, #88]	; (4e90 <start_download+0x78>)
    4e38:	781b      	ldrb	r3, [r3, #0]
    4e3a:	2b01      	cmp	r3, #1
    4e3c:	d019      	beq.n	4e72 <start_download+0x5a>
	else if(now_downloading == METADATA)
    4e3e:	2b00      	cmp	r3, #0
    4e40:	d109      	bne.n	4e56 <start_download+0x3e>
		http_client_send_request(&http_client_module_inst, MAIN_METADATA_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    4e42:	9300      	str	r3, [sp, #0]
    4e44:	2201      	movs	r2, #1
    4e46:	4913      	ldr	r1, [pc, #76]	; (4e94 <start_download+0x7c>)
    4e48:	4813      	ldr	r0, [pc, #76]	; (4e98 <start_download+0x80>)
    4e4a:	4c14      	ldr	r4, [pc, #80]	; (4e9c <start_download+0x84>)
    4e4c:	47a0      	blx	r4
    4e4e:	e002      	b.n	4e56 <start_download+0x3e>
		printf("start_download: Flash storage not ready.\r\n");
    4e50:	4813      	ldr	r0, [pc, #76]	; (4ea0 <start_download+0x88>)
    4e52:	4b0e      	ldr	r3, [pc, #56]	; (4e8c <start_download+0x74>)
    4e54:	4798      	blx	r3
}
    4e56:	b002      	add	sp, #8
    4e58:	bd10      	pop	{r4, pc}
		printf("start_download: Wi-Fi is not connected.\r\n");
    4e5a:	4812      	ldr	r0, [pc, #72]	; (4ea4 <start_download+0x8c>)
    4e5c:	4b0b      	ldr	r3, [pc, #44]	; (4e8c <start_download+0x74>)
    4e5e:	4798      	blx	r3
		return;
    4e60:	e7f9      	b.n	4e56 <start_download+0x3e>
		printf("start_download: request is sent already.\r\n");
    4e62:	4811      	ldr	r0, [pc, #68]	; (4ea8 <start_download+0x90>)
    4e64:	4b09      	ldr	r3, [pc, #36]	; (4e8c <start_download+0x74>)
    4e66:	4798      	blx	r3
		return;
    4e68:	e7f5      	b.n	4e56 <start_download+0x3e>
		printf("start_download: running download already.\r\n");
    4e6a:	4810      	ldr	r0, [pc, #64]	; (4eac <start_download+0x94>)
    4e6c:	4b07      	ldr	r3, [pc, #28]	; (4e8c <start_download+0x74>)
    4e6e:	4798      	blx	r3
		return;
    4e70:	e7f1      	b.n	4e56 <start_download+0x3e>
		http_client_send_request(&http_client_module_inst, MAIN_IMAGE_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    4e72:	2300      	movs	r3, #0
    4e74:	9300      	str	r3, [sp, #0]
    4e76:	2201      	movs	r2, #1
    4e78:	490d      	ldr	r1, [pc, #52]	; (4eb0 <start_download+0x98>)
    4e7a:	4807      	ldr	r0, [pc, #28]	; (4e98 <start_download+0x80>)
    4e7c:	4c07      	ldr	r4, [pc, #28]	; (4e9c <start_download+0x84>)
    4e7e:	47a0      	blx	r4
    4e80:	e7e9      	b.n	4e56 <start_download+0x3e>
    4e82:	46c0      	nop			; (mov r8, r8)
    4e84:	20000408 	.word	0x20000408
    4e88:	0000eb24 	.word	0x0000eb24
    4e8c:	0000cf45 	.word	0x0000cf45
    4e90:	20000410 	.word	0x20000410
    4e94:	0000eb94 	.word	0x0000eb94
    4e98:	20000564 	.word	0x20000564
    4e9c:	0000bc45 	.word	0x0000bc45
    4ea0:	0000ea74 	.word	0x0000ea74
    4ea4:	0000eaa0 	.word	0x0000eaa0
    4ea8:	0000eacc 	.word	0x0000eacc
    4eac:	0000eaf8 	.word	0x0000eaf8
    4eb0:	0000eb50 	.word	0x0000eb50

00004eb4 <clear_state>:
	down_state &= ~mask;
    4eb4:	4a02      	ldr	r2, [pc, #8]	; (4ec0 <clear_state+0xc>)
    4eb6:	7813      	ldrb	r3, [r2, #0]
    4eb8:	4383      	bics	r3, r0
    4eba:	7013      	strb	r3, [r2, #0]
}
    4ebc:	4770      	bx	lr
    4ebe:	46c0      	nop			; (mov r8, r8)
    4ec0:	20000408 	.word	0x20000408

00004ec4 <add_state>:
	down_state |= mask;
    4ec4:	4b02      	ldr	r3, [pc, #8]	; (4ed0 <add_state+0xc>)
    4ec6:	781a      	ldrb	r2, [r3, #0]
    4ec8:	4310      	orrs	r0, r2
    4eca:	7018      	strb	r0, [r3, #0]
}
    4ecc:	4770      	bx	lr
    4ece:	46c0      	nop			; (mov r8, r8)
    4ed0:	20000408 	.word	0x20000408

00004ed4 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
    4ed4:	b510      	push	{r4, lr}
    4ed6:	b082      	sub	sp, #8
	switch (u8MsgType) {
    4ed8:	282c      	cmp	r0, #44	; 0x2c
    4eda:	d003      	beq.n	4ee4 <wifi_cb+0x10>
    4edc:	2832      	cmp	r0, #50	; 0x32
    4ede:	d02d      	beq.n	4f3c <wifi_cb+0x68>
	}

	default:
		break;
	}
}
    4ee0:	b002      	add	sp, #8
    4ee2:	bd10      	pop	{r4, pc}
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    4ee4:	780b      	ldrb	r3, [r1, #0]
    4ee6:	2b01      	cmp	r3, #1
    4ee8:	d018      	beq.n	4f1c <wifi_cb+0x48>
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    4eea:	2b00      	cmp	r3, #0
    4eec:	d1f8      	bne.n	4ee0 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    4eee:	481a      	ldr	r0, [pc, #104]	; (4f58 <wifi_cb+0x84>)
    4ef0:	4b1a      	ldr	r3, [pc, #104]	; (4f5c <wifi_cb+0x88>)
    4ef2:	4798      	blx	r3
			clear_state(WIFI_CONNECTED);
    4ef4:	2002      	movs	r0, #2
    4ef6:	4b1a      	ldr	r3, [pc, #104]	; (4f60 <wifi_cb+0x8c>)
    4ef8:	4798      	blx	r3
	return ((down_state & mask) != 0);
    4efa:	4b1a      	ldr	r3, [pc, #104]	; (4f64 <wifi_cb+0x90>)
    4efc:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    4efe:	071b      	lsls	r3, r3, #28
    4f00:	d412      	bmi.n	4f28 <wifi_cb+0x54>
	return ((down_state & mask) != 0);
    4f02:	4b18      	ldr	r3, [pc, #96]	; (4f64 <wifi_cb+0x90>)
    4f04:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    4f06:	075b      	lsls	r3, r3, #29
    4f08:	d414      	bmi.n	4f34 <wifi_cb+0x60>
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    4f0a:	23ff      	movs	r3, #255	; 0xff
    4f0c:	9300      	str	r3, [sp, #0]
    4f0e:	4b16      	ldr	r3, [pc, #88]	; (4f68 <wifi_cb+0x94>)
    4f10:	2202      	movs	r2, #2
    4f12:	211d      	movs	r1, #29
    4f14:	4815      	ldr	r0, [pc, #84]	; (4f6c <wifi_cb+0x98>)
    4f16:	4c16      	ldr	r4, [pc, #88]	; (4f70 <wifi_cb+0x9c>)
    4f18:	47a0      	blx	r4
    4f1a:	e7e1      	b.n	4ee0 <wifi_cb+0xc>
			printf("wifi_cb: M2M_WIFI_CONNECTED\r\n");
    4f1c:	4815      	ldr	r0, [pc, #84]	; (4f74 <wifi_cb+0xa0>)
    4f1e:	4b0f      	ldr	r3, [pc, #60]	; (4f5c <wifi_cb+0x88>)
    4f20:	4798      	blx	r3
			m2m_wifi_request_dhcp_client();
    4f22:	4b15      	ldr	r3, [pc, #84]	; (4f78 <wifi_cb+0xa4>)
    4f24:	4798      	blx	r3
    4f26:	e7db      	b.n	4ee0 <wifi_cb+0xc>
				finish_write();
    4f28:	4b14      	ldr	r3, [pc, #80]	; (4f7c <wifi_cb+0xa8>)
    4f2a:	4798      	blx	r3
				clear_state(DOWNLOADING);
    4f2c:	2008      	movs	r0, #8
    4f2e:	4b0c      	ldr	r3, [pc, #48]	; (4f60 <wifi_cb+0x8c>)
    4f30:	4798      	blx	r3
    4f32:	e7e6      	b.n	4f02 <wifi_cb+0x2e>
				clear_state(GET_REQUESTED);
    4f34:	2004      	movs	r0, #4
    4f36:	4b0a      	ldr	r3, [pc, #40]	; (4f60 <wifi_cb+0x8c>)
    4f38:	4798      	blx	r3
    4f3a:	e7e6      	b.n	4f0a <wifi_cb+0x36>
		printf("wifi_cb: IP address is %u.%u.%u.%u\r\n",
    4f3c:	788b      	ldrb	r3, [r1, #2]
    4f3e:	784a      	ldrb	r2, [r1, #1]
    4f40:	7808      	ldrb	r0, [r1, #0]
    4f42:	78c9      	ldrb	r1, [r1, #3]
    4f44:	9100      	str	r1, [sp, #0]
    4f46:	0001      	movs	r1, r0
    4f48:	480d      	ldr	r0, [pc, #52]	; (4f80 <wifi_cb+0xac>)
    4f4a:	4c0e      	ldr	r4, [pc, #56]	; (4f84 <wifi_cb+0xb0>)
    4f4c:	47a0      	blx	r4
		add_state(WIFI_CONNECTED);
    4f4e:	2002      	movs	r0, #2
    4f50:	4b0d      	ldr	r3, [pc, #52]	; (4f88 <wifi_cb+0xb4>)
    4f52:	4798      	blx	r3
}
    4f54:	e7c4      	b.n	4ee0 <wifi_cb+0xc>
    4f56:	46c0      	nop			; (mov r8, r8)
    4f58:	0000ec20 	.word	0x0000ec20
    4f5c:	0000cf45 	.word	0x0000cf45
    4f60:	00004eb5 	.word	0x00004eb5
    4f64:	20000408 	.word	0x20000408
    4f68:	0000ec40 	.word	0x0000ec40
    4f6c:	0000ec50 	.word	0x0000ec50
    4f70:	00007225 	.word	0x00007225
    4f74:	0000ec00 	.word	0x0000ec00
    4f78:	00007241 	.word	0x00007241
    4f7c:	00004d31 	.word	0x00004d31
    4f80:	0000ec70 	.word	0x0000ec70
    4f84:	0000ce29 	.word	0x0000ce29
    4f88:	00004ec5 	.word	0x00004ec5

00004f8c <http_client_callback>:
{
    4f8c:	b510      	push	{r4, lr}
    4f8e:	0014      	movs	r4, r2
	switch (type) {
    4f90:	2904      	cmp	r1, #4
    4f92:	d806      	bhi.n	4fa2 <http_client_callback+0x16>
    4f94:	0089      	lsls	r1, r1, #2
    4f96:	4b28      	ldr	r3, [pc, #160]	; (5038 <http_client_callback+0xac>)
    4f98:	585b      	ldr	r3, [r3, r1]
    4f9a:	469f      	mov	pc, r3
		printf("http_client_callback: HTTP client socket connected.\r\n");
    4f9c:	4827      	ldr	r0, [pc, #156]	; (503c <http_client_callback+0xb0>)
    4f9e:	4b28      	ldr	r3, [pc, #160]	; (5040 <http_client_callback+0xb4>)
    4fa0:	4798      	blx	r3
}
    4fa2:	bd10      	pop	{r4, pc}
		printf("http_client_callback: request completed.\r\n");
    4fa4:	4827      	ldr	r0, [pc, #156]	; (5044 <http_client_callback+0xb8>)
    4fa6:	4b26      	ldr	r3, [pc, #152]	; (5040 <http_client_callback+0xb4>)
    4fa8:	4798      	blx	r3
		add_state(GET_REQUESTED);
    4faa:	2004      	movs	r0, #4
    4fac:	4b26      	ldr	r3, [pc, #152]	; (5048 <http_client_callback+0xbc>)
    4fae:	4798      	blx	r3
		break;
    4fb0:	e7f7      	b.n	4fa2 <http_client_callback+0x16>
		printf("http_client_callback: received response %u data size %u\r\n",
    4fb2:	8811      	ldrh	r1, [r2, #0]
    4fb4:	6852      	ldr	r2, [r2, #4]
    4fb6:	4825      	ldr	r0, [pc, #148]	; (504c <http_client_callback+0xc0>)
    4fb8:	4b25      	ldr	r3, [pc, #148]	; (5050 <http_client_callback+0xc4>)
    4fba:	4798      	blx	r3
		if ((unsigned int)data->recv_response.response_code == 200) {
    4fbc:	8823      	ldrh	r3, [r4, #0]
    4fbe:	2bc8      	cmp	r3, #200	; 0xc8
    4fc0:	d10f      	bne.n	4fe2 <http_client_callback+0x56>
			http_file_size = data->recv_response.content_length;
    4fc2:	6861      	ldr	r1, [r4, #4]
    4fc4:	4b23      	ldr	r3, [pc, #140]	; (5054 <http_client_callback+0xc8>)
    4fc6:	6019      	str	r1, [r3, #0]
			received_file_size = 0;
    4fc8:	2200      	movs	r2, #0
    4fca:	4b23      	ldr	r3, [pc, #140]	; (5058 <http_client_callback+0xcc>)
    4fcc:	601a      	str	r2, [r3, #0]
		if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    4fce:	4b23      	ldr	r3, [pc, #140]	; (505c <http_client_callback+0xd0>)
    4fd0:	4299      	cmp	r1, r3
    4fd2:	d8e6      	bhi.n	4fa2 <http_client_callback+0x16>
			store_file_packet(data->recv_response.content, data->recv_response.content_length);
    4fd4:	68a0      	ldr	r0, [r4, #8]
    4fd6:	4b22      	ldr	r3, [pc, #136]	; (5060 <http_client_callback+0xd4>)
    4fd8:	4798      	blx	r3
			add_state(COMPLETED);
    4fda:	2010      	movs	r0, #16
    4fdc:	4b1a      	ldr	r3, [pc, #104]	; (5048 <http_client_callback+0xbc>)
    4fde:	4798      	blx	r3
    4fe0:	e7df      	b.n	4fa2 <http_client_callback+0x16>
			add_state(CANCELED);
    4fe2:	2020      	movs	r0, #32
    4fe4:	4b18      	ldr	r3, [pc, #96]	; (5048 <http_client_callback+0xbc>)
    4fe6:	4798      	blx	r3
			return;
    4fe8:	e7db      	b.n	4fa2 <http_client_callback+0x16>
		store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    4fea:	6811      	ldr	r1, [r2, #0]
    4fec:	6850      	ldr	r0, [r2, #4]
    4fee:	4b1c      	ldr	r3, [pc, #112]	; (5060 <http_client_callback+0xd4>)
    4ff0:	4798      	blx	r3
		if (data->recv_chunked_data.is_complete) {
    4ff2:	7a23      	ldrb	r3, [r4, #8]
    4ff4:	2b00      	cmp	r3, #0
    4ff6:	d0d4      	beq.n	4fa2 <http_client_callback+0x16>
			add_state(COMPLETED);
    4ff8:	2010      	movs	r0, #16
    4ffa:	4b13      	ldr	r3, [pc, #76]	; (5048 <http_client_callback+0xbc>)
    4ffc:	4798      	blx	r3
    4ffe:	e7d0      	b.n	4fa2 <http_client_callback+0x16>
		printf("http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    5000:	6811      	ldr	r1, [r2, #0]
    5002:	4818      	ldr	r0, [pc, #96]	; (5064 <http_client_callback+0xd8>)
    5004:	4b12      	ldr	r3, [pc, #72]	; (5050 <http_client_callback+0xc4>)
    5006:	4798      	blx	r3
		if (data->disconnected.reason == -EAGAIN) {
    5008:	6823      	ldr	r3, [r4, #0]
    500a:	330b      	adds	r3, #11
    500c:	d1c9      	bne.n	4fa2 <http_client_callback+0x16>
	return ((down_state & mask) != 0);
    500e:	4b16      	ldr	r3, [pc, #88]	; (5068 <http_client_callback+0xdc>)
    5010:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(DOWNLOADING)) {
    5012:	071b      	lsls	r3, r3, #28
    5014:	d406      	bmi.n	5024 <http_client_callback+0x98>
	return ((down_state & mask) != 0);
    5016:	4b14      	ldr	r3, [pc, #80]	; (5068 <http_client_callback+0xdc>)
    5018:	781b      	ldrb	r3, [r3, #0]
			if (is_state_set(GET_REQUESTED)) {
    501a:	075b      	lsls	r3, r3, #29
    501c:	d408      	bmi.n	5030 <http_client_callback+0xa4>
			start_download();
    501e:	4b13      	ldr	r3, [pc, #76]	; (506c <http_client_callback+0xe0>)
    5020:	4798      	blx	r3
    5022:	e7be      	b.n	4fa2 <http_client_callback+0x16>
				finish_write();
    5024:	4b12      	ldr	r3, [pc, #72]	; (5070 <http_client_callback+0xe4>)
    5026:	4798      	blx	r3
				clear_state(DOWNLOADING);
    5028:	2008      	movs	r0, #8
    502a:	4b12      	ldr	r3, [pc, #72]	; (5074 <http_client_callback+0xe8>)
    502c:	4798      	blx	r3
    502e:	e7f2      	b.n	5016 <http_client_callback+0x8a>
				clear_state(GET_REQUESTED);
    5030:	2004      	movs	r0, #4
    5032:	4b10      	ldr	r3, [pc, #64]	; (5074 <http_client_callback+0xe8>)
    5034:	4798      	blx	r3
    5036:	e7f2      	b.n	501e <http_client_callback+0x92>
    5038:	0000e780 	.word	0x0000e780
    503c:	0000e900 	.word	0x0000e900
    5040:	0000cf45 	.word	0x0000cf45
    5044:	0000e938 	.word	0x0000e938
    5048:	00004ec5 	.word	0x00004ec5
    504c:	0000e964 	.word	0x0000e964
    5050:	0000ce29 	.word	0x0000ce29
    5054:	2000040c 	.word	0x2000040c
    5058:	20000414 	.word	0x20000414
    505c:	000005a6 	.word	0x000005a6
    5060:	00004dc9 	.word	0x00004dc9
    5064:	0000e9a0 	.word	0x0000e9a0
    5068:	20000408 	.word	0x20000408
    506c:	00004e19 	.word	0x00004e19
    5070:	00004d31 	.word	0x00004d31
    5074:	00004eb5 	.word	0x00004eb5

00005078 <is_state_set>:
{
    5078:	0003      	movs	r3, r0
	return ((down_state & mask) != 0);
    507a:	4a03      	ldr	r2, [pc, #12]	; (5088 <is_state_set+0x10>)
    507c:	7810      	ldrb	r0, [r2, #0]
    507e:	4018      	ands	r0, r3
    5080:	1e43      	subs	r3, r0, #1
    5082:	4198      	sbcs	r0, r3
    5084:	b2c0      	uxtb	r0, r0
}
    5086:	4770      	bx	lr
    5088:	20000408 	.word	0x20000408

0000508c <init_wifi>:
	}

	http_client_register_callback(&http_client_module_inst, http_client_callback);
}

void init_wifi(void){
    508c:	b510      	push	{r4, lr}
    508e:	b08e      	sub	sp, #56	; 0x38
	down_state = NOT_READY;
    5090:	2200      	movs	r2, #0
    5092:	4b1d      	ldr	r3, [pc, #116]	; (5108 <init_wifi+0x7c>)
    5094:	701a      	strb	r2, [r3, #0]
	sw_timer_get_config_defaults(&swt_conf);
    5096:	a801      	add	r0, sp, #4
    5098:	4b1c      	ldr	r3, [pc, #112]	; (510c <init_wifi+0x80>)
    509a:	4798      	blx	r3
	sw_timer_init(&swt_module_inst, &swt_conf);
    509c:	4c1c      	ldr	r4, [pc, #112]	; (5110 <init_wifi+0x84>)
    509e:	a901      	add	r1, sp, #4
    50a0:	0020      	movs	r0, r4
    50a2:	4b1c      	ldr	r3, [pc, #112]	; (5114 <init_wifi+0x88>)
    50a4:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    50a6:	0020      	movs	r0, r4
    50a8:	4b1b      	ldr	r3, [pc, #108]	; (5118 <init_wifi+0x8c>)
    50aa:	4798      	blx	r3
	http_client_get_config_defaults(&httpc_conf);
    50ac:	a801      	add	r0, sp, #4
    50ae:	4b1b      	ldr	r3, [pc, #108]	; (511c <init_wifi+0x90>)
    50b0:	4798      	blx	r3
	httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    50b2:	4b1b      	ldr	r3, [pc, #108]	; (5120 <init_wifi+0x94>)
    50b4:	9305      	str	r3, [sp, #20]
	httpc_conf.timer_inst = &swt_module_inst;
    50b6:	9402      	str	r4, [sp, #8]
	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    50b8:	a901      	add	r1, sp, #4
    50ba:	481a      	ldr	r0, [pc, #104]	; (5124 <init_wifi+0x98>)
    50bc:	4b1a      	ldr	r3, [pc, #104]	; (5128 <init_wifi+0x9c>)
    50be:	4798      	blx	r3
    50c0:	1e01      	subs	r1, r0, #0
	if (ret < 0) {
    50c2:	db15      	blt.n	50f0 <init_wifi+0x64>
	http_client_register_callback(&http_client_module_inst, http_client_callback);
    50c4:	4919      	ldr	r1, [pc, #100]	; (512c <init_wifi+0xa0>)
    50c6:	4817      	ldr	r0, [pc, #92]	; (5124 <init_wifi+0x98>)
    50c8:	4b19      	ldr	r3, [pc, #100]	; (5130 <init_wifi+0xa4>)
    50ca:	4798      	blx	r3

			/* Initialize the HTTP client service. */
			configure_http_client();

			/* Initialize the BSP. */
			nm_bsp_init();
    50cc:	4b19      	ldr	r3, [pc, #100]	; (5134 <init_wifi+0xa8>)
    50ce:	4798      	blx	r3
			
			/* Initialize Wi-Fi parameters structure. */
			memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    50d0:	2218      	movs	r2, #24
    50d2:	2100      	movs	r1, #0
    50d4:	a808      	add	r0, sp, #32
    50d6:	4b18      	ldr	r3, [pc, #96]	; (5138 <init_wifi+0xac>)
    50d8:	4798      	blx	r3

			/* Initialize Wi-Fi driver with data and status callbacks. */
			param.pfAppWifiCb = wifi_cb;
    50da:	4b18      	ldr	r3, [pc, #96]	; (513c <init_wifi+0xb0>)
    50dc:	9308      	str	r3, [sp, #32]
			ret = m2m_wifi_init(&param);
    50de:	a808      	add	r0, sp, #32
    50e0:	4b17      	ldr	r3, [pc, #92]	; (5140 <init_wifi+0xb4>)
    50e2:	4798      	blx	r3
    50e4:	1e01      	subs	r1, r0, #0
			if (M2M_SUCCESS != ret) {
    50e6:	d007      	beq.n	50f8 <init_wifi+0x6c>
				printf("main: m2m_wifi_init call error! (res %d)\r\n", ret);
    50e8:	4816      	ldr	r0, [pc, #88]	; (5144 <init_wifi+0xb8>)
    50ea:	4b17      	ldr	r3, [pc, #92]	; (5148 <init_wifi+0xbc>)
    50ec:	4798      	blx	r3
    50ee:	e7fe      	b.n	50ee <init_wifi+0x62>
		printf("configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    50f0:	4816      	ldr	r0, [pc, #88]	; (514c <init_wifi+0xc0>)
    50f2:	4b15      	ldr	r3, [pc, #84]	; (5148 <init_wifi+0xbc>)
    50f4:	4798      	blx	r3
    50f6:	e7fe      	b.n	50f6 <init_wifi+0x6a>
				while (1) {
				}
			}

			/* Initialize socket module. */
			socketInit();
    50f8:	4b15      	ldr	r3, [pc, #84]	; (5150 <init_wifi+0xc4>)
    50fa:	4798      	blx	r3
			/* Register socket callback function. */
			registerSocketCallback(socket_cb, resolve_cb);
    50fc:	4915      	ldr	r1, [pc, #84]	; (5154 <init_wifi+0xc8>)
    50fe:	4816      	ldr	r0, [pc, #88]	; (5158 <init_wifi+0xcc>)
    5100:	4b16      	ldr	r3, [pc, #88]	; (515c <init_wifi+0xd0>)
    5102:	4798      	blx	r3
}
    5104:	b00e      	add	sp, #56	; 0x38
    5106:	bd10      	pop	{r4, pc}
    5108:	20000408 	.word	0x20000408
    510c:	0000c589 	.word	0x0000c589
    5110:	2000050c 	.word	0x2000050c
    5114:	0000c595 	.word	0x0000c595
    5118:	0000c641 	.word	0x0000c641
    511c:	0000b5a1 	.word	0x0000b5a1
    5120:	000005a6 	.word	0x000005a6
    5124:	20000564 	.word	0x20000564
    5128:	0000b5c9 	.word	0x0000b5c9
    512c:	00004f8d 	.word	0x00004f8d
    5130:	0000b67d 	.word	0x0000b67d
    5134:	00005f19 	.word	0x00005f19
    5138:	0000ccc7 	.word	0x0000ccc7
    513c:	00004ed5 	.word	0x00004ed5
    5140:	00006e55 	.word	0x00006e55
    5144:	0000ea18 	.word	0x0000ea18
    5148:	0000ce29 	.word	0x0000ce29
    514c:	0000e9d0 	.word	0x0000e9d0
    5150:	00008a81 	.word	0x00008a81
    5154:	00004d81 	.word	0x00004d81
    5158:	00004dbd 	.word	0x00004dbd
    515c:	00008ac5 	.word	0x00008ac5

00005160 <connect_wifi>:

void connect_wifi(void){
    5160:	b570      	push	{r4, r5, r6, lr}
    5162:	b082      	sub	sp, #8
			/* Connect to router. */
			printf("main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    5164:	4c0e      	ldr	r4, [pc, #56]	; (51a0 <connect_wifi+0x40>)
    5166:	0021      	movs	r1, r4
    5168:	480e      	ldr	r0, [pc, #56]	; (51a4 <connect_wifi+0x44>)
    516a:	4b0f      	ldr	r3, [pc, #60]	; (51a8 <connect_wifi+0x48>)
    516c:	4798      	blx	r3
			m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    516e:	23ff      	movs	r3, #255	; 0xff
    5170:	9300      	str	r3, [sp, #0]
    5172:	4b0e      	ldr	r3, [pc, #56]	; (51ac <connect_wifi+0x4c>)
    5174:	2202      	movs	r2, #2
    5176:	211d      	movs	r1, #29
    5178:	0020      	movs	r0, r4
    517a:	4c0d      	ldr	r4, [pc, #52]	; (51b0 <connect_wifi+0x50>)
    517c:	47a0      	blx	r4
	return ((down_state & mask) != 0);
    517e:	4b0d      	ldr	r3, [pc, #52]	; (51b4 <connect_wifi+0x54>)
    5180:	781b      	ldrb	r3, [r3, #0]
			while(!is_state_set(WIFI_CONNECTED)){
    5182:	079b      	lsls	r3, r3, #30
    5184:	d40a      	bmi.n	519c <connect_wifi+0x3c>
				/* Handle pending events from network controller. */
				m2m_wifi_handle_events(NULL);
    5186:	4e0c      	ldr	r6, [pc, #48]	; (51b8 <connect_wifi+0x58>)
				/* Checks the timer timeout. */
				sw_timer_task(&swt_module_inst);
    5188:	4d0c      	ldr	r5, [pc, #48]	; (51bc <connect_wifi+0x5c>)
    518a:	4c0d      	ldr	r4, [pc, #52]	; (51c0 <connect_wifi+0x60>)
				m2m_wifi_handle_events(NULL);
    518c:	2000      	movs	r0, #0
    518e:	47b0      	blx	r6
				sw_timer_task(&swt_module_inst);
    5190:	0028      	movs	r0, r5
    5192:	47a0      	blx	r4
	return ((down_state & mask) != 0);
    5194:	4b07      	ldr	r3, [pc, #28]	; (51b4 <connect_wifi+0x54>)
    5196:	781b      	ldrb	r3, [r3, #0]
			while(!is_state_set(WIFI_CONNECTED)){
    5198:	079b      	lsls	r3, r3, #30
    519a:	d5f7      	bpl.n	518c <connect_wifi+0x2c>
			}
}
    519c:	b002      	add	sp, #8
    519e:	bd70      	pop	{r4, r5, r6, pc}
    51a0:	0000ec50 	.word	0x0000ec50
    51a4:	0000e8b0 	.word	0x0000e8b0
    51a8:	0000ce29 	.word	0x0000ce29
    51ac:	0000ec40 	.word	0x0000ec40
    51b0:	00007225 	.word	0x00007225
    51b4:	20000408 	.word	0x20000408
    51b8:	00006f89 	.word	0x00006f89
    51bc:	2000050c 	.word	0x2000050c
    51c0:	0000c6c9 	.word	0x0000c6c9

000051c4 <download>:

void download(now_downloading_t downloading){
    51c4:	b570      	push	{r4, r5, r6, lr}
	
	now_downloading = downloading;
    51c6:	4b1c      	ldr	r3, [pc, #112]	; (5238 <download+0x74>)
    51c8:	7018      	strb	r0, [r3, #0]
	printf("Downloading %s\r\n", (now_downloading == IMAGE) ? "Firmware" : "Metadata");
    51ca:	2801      	cmp	r0, #1
    51cc:	d02a      	beq.n	5224 <download+0x60>
    51ce:	491b      	ldr	r1, [pc, #108]	; (523c <download+0x78>)
    51d0:	481b      	ldr	r0, [pc, #108]	; (5240 <download+0x7c>)
    51d2:	4b1c      	ldr	r3, [pc, #112]	; (5244 <download+0x80>)
    51d4:	4798      	blx	r3
	start_download();
    51d6:	4b1c      	ldr	r3, [pc, #112]	; (5248 <download+0x84>)
    51d8:	4798      	blx	r3
	return ((down_state & mask) != 0);
    51da:	4b1c      	ldr	r3, [pc, #112]	; (524c <download+0x88>)
    51dc:	781b      	ldrb	r3, [r3, #0]
	if(is_state_set(WIFI_CONNECTED)){
    51de:	079a      	lsls	r2, r3, #30
    51e0:	d50e      	bpl.n	5200 <download+0x3c>
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    51e2:	2230      	movs	r2, #48	; 0x30
    51e4:	421a      	tst	r2, r3
    51e6:	d10b      	bne.n	5200 <download+0x3c>
			/* Handle pending events from network controller. */
			m2m_wifi_handle_events(NULL);
    51e8:	4e19      	ldr	r6, [pc, #100]	; (5250 <download+0x8c>)
			/* Checks the timer timeout. */
			sw_timer_task(&swt_module_inst);
    51ea:	4c1a      	ldr	r4, [pc, #104]	; (5254 <download+0x90>)
    51ec:	4d1a      	ldr	r5, [pc, #104]	; (5258 <download+0x94>)
			m2m_wifi_handle_events(NULL);
    51ee:	2000      	movs	r0, #0
    51f0:	47b0      	blx	r6
			sw_timer_task(&swt_module_inst);
    51f2:	0020      	movs	r0, r4
    51f4:	47a8      	blx	r5
	return ((down_state & mask) != 0);
    51f6:	4b15      	ldr	r3, [pc, #84]	; (524c <download+0x88>)
		while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    51f8:	781b      	ldrb	r3, [r3, #0]
    51fa:	2230      	movs	r2, #48	; 0x30
    51fc:	421a      	tst	r2, r3
    51fe:	d0f6      	beq.n	51ee <download+0x2a>
		}
	}
	clear_state(DOWNLOADING);
    5200:	2008      	movs	r0, #8
    5202:	4c16      	ldr	r4, [pc, #88]	; (525c <download+0x98>)
    5204:	47a0      	blx	r4
	clear_state(CANCELED);
    5206:	2020      	movs	r0, #32
    5208:	47a0      	blx	r4
	clear_state(GET_REQUESTED);
    520a:	2004      	movs	r0, #4
    520c:	47a0      	blx	r4
	clear_state(COMPLETED);
    520e:	2010      	movs	r0, #16
    5210:	47a0      	blx	r4
	if(now_downloading == IMAGE)
    5212:	4b09      	ldr	r3, [pc, #36]	; (5238 <download+0x74>)
    5214:	781b      	ldrb	r3, [r3, #0]
    5216:	2b01      	cmp	r3, #1
    5218:	d006      	beq.n	5228 <download+0x64>
		memset(&new_img_meta, 0, sizeof(new_img_meta));
	printf("Downloading %s done.\r\n", (now_downloading == IMAGE) ? "Firmware" : "Metadata");
    521a:	4908      	ldr	r1, [pc, #32]	; (523c <download+0x78>)
    521c:	4810      	ldr	r0, [pc, #64]	; (5260 <download+0x9c>)
    521e:	4b09      	ldr	r3, [pc, #36]	; (5244 <download+0x80>)
    5220:	4798      	blx	r3

}
    5222:	bd70      	pop	{r4, r5, r6, pc}
	printf("Downloading %s\r\n", (now_downloading == IMAGE) ? "Firmware" : "Metadata");
    5224:	490f      	ldr	r1, [pc, #60]	; (5264 <download+0xa0>)
    5226:	e7d3      	b.n	51d0 <download+0xc>
		memset(&new_img_meta, 0, sizeof(new_img_meta));
    5228:	2208      	movs	r2, #8
    522a:	2100      	movs	r1, #0
    522c:	480e      	ldr	r0, [pc, #56]	; (5268 <download+0xa4>)
    522e:	4b0f      	ldr	r3, [pc, #60]	; (526c <download+0xa8>)
    5230:	4798      	blx	r3
	printf("Downloading %s done.\r\n", (now_downloading == IMAGE) ? "Firmware" : "Metadata");
    5232:	490c      	ldr	r1, [pc, #48]	; (5264 <download+0xa0>)
    5234:	e7f2      	b.n	521c <download+0x58>
    5236:	46c0      	nop			; (mov r8, r8)
    5238:	20000410 	.word	0x20000410
    523c:	0000e51c 	.word	0x0000e51c
    5240:	0000e8d4 	.word	0x0000e8d4
    5244:	0000ce29 	.word	0x0000ce29
    5248:	00004e19 	.word	0x00004e19
    524c:	20000408 	.word	0x20000408
    5250:	00006f89 	.word	0x00006f89
    5254:	2000050c 	.word	0x2000050c
    5258:	0000c6c9 	.word	0x0000c6c9
    525c:	00004eb5 	.word	0x00004eb5
    5260:	0000e8e8 	.word	0x0000e8e8
    5264:	0000e510 	.word	0x0000e510
    5268:	2000064c 	.word	0x2000064c
    526c:	0000ccc7 	.word	0x0000ccc7

00005270 <check_and_update_firmware>:

void check_and_update_firmware(void){
    5270:	b570      	push	{r4, r5, r6, lr}
	download(METADATA);
    5272:	2000      	movs	r0, #0
    5274:	4b2e      	ldr	r3, [pc, #184]	; (5330 <check_and_update_firmware+0xc0>)
    5276:	4798      	blx	r3
	update_metadata(IMAGE1);
    5278:	2000      	movs	r0, #0
    527a:	4b2e      	ldr	r3, [pc, #184]	; (5334 <check_and_update_firmware+0xc4>)
    527c:	4798      	blx	r3
	update_image_status();
    527e:	4b2e      	ldr	r3, [pc, #184]	; (5338 <check_and_update_firmware+0xc8>)
    5280:	4798      	blx	r3
	printf("Server Image Version: %d, Size: %d, Checksum: %lx\r\n", new_img_meta.version, new_img_meta.size, new_img_meta.checksum);
    5282:	4c2e      	ldr	r4, [pc, #184]	; (533c <check_and_update_firmware+0xcc>)
    5284:	8862      	ldrh	r2, [r4, #2]
    5286:	8821      	ldrh	r1, [r4, #0]
    5288:	6863      	ldr	r3, [r4, #4]
    528a:	482d      	ldr	r0, [pc, #180]	; (5340 <check_and_update_firmware+0xd0>)
    528c:	4d2d      	ldr	r5, [pc, #180]	; (5344 <check_and_update_firmware+0xd4>)
    528e:	47a8      	blx	r5
	if((new_img_meta.version > image1_metadata.version) || !flash_status.image1_valid){
    5290:	8822      	ldrh	r2, [r4, #0]
    5292:	4b2d      	ldr	r3, [pc, #180]	; (5348 <check_and_update_firmware+0xd8>)
    5294:	881b      	ldrh	r3, [r3, #0]
    5296:	429a      	cmp	r2, r3
    5298:	d803      	bhi.n	52a2 <check_and_update_firmware+0x32>
    529a:	4b2c      	ldr	r3, [pc, #176]	; (534c <check_and_update_firmware+0xdc>)
    529c:	781b      	ldrb	r3, [r3, #0]
    529e:	2b00      	cmp	r3, #0
    52a0:	d139      	bne.n	5316 <check_and_update_firmware+0xa6>
		printf("Preparing firmware upgrade\r\n");
    52a2:	482b      	ldr	r0, [pc, #172]	; (5350 <check_and_update_firmware+0xe0>)
    52a4:	4d2b      	ldr	r5, [pc, #172]	; (5354 <check_and_update_firmware+0xe4>)
    52a6:	47a8      	blx	r5
		write_image_state(IMAGE1_INVALID);
    52a8:	2001      	movs	r0, #1
    52aa:	4b2b      	ldr	r3, [pc, #172]	; (5358 <check_and_update_firmware+0xe8>)
    52ac:	4798      	blx	r3
		printf("Marked image1 invalid\r\n");
    52ae:	482b      	ldr	r0, [pc, #172]	; (535c <check_and_update_firmware+0xec>)
    52b0:	47a8      	blx	r5
		save_data_to_flash((char *)&new_img_meta, sizeof(new_img_meta));
    52b2:	2108      	movs	r1, #8
    52b4:	4821      	ldr	r0, [pc, #132]	; (533c <check_and_update_firmware+0xcc>)
    52b6:	4b2a      	ldr	r3, [pc, #168]	; (5360 <check_and_update_firmware+0xf0>)
    52b8:	4798      	blx	r3
		clear_state(DOWNLOADING);
    52ba:	2008      	movs	r0, #8
    52bc:	4c29      	ldr	r4, [pc, #164]	; (5364 <check_and_update_firmware+0xf4>)
    52be:	47a0      	blx	r4
		clear_state(CANCELED);
    52c0:	2020      	movs	r0, #32
    52c2:	47a0      	blx	r4
		clear_state(GET_REQUESTED);
    52c4:	2004      	movs	r0, #4
    52c6:	47a0      	blx	r4
		clear_state(COMPLETED);
    52c8:	2010      	movs	r0, #16
    52ca:	47a0      	blx	r4
		printf("Updated new metadata\r\n");
    52cc:	4826      	ldr	r0, [pc, #152]	; (5368 <check_and_update_firmware+0xf8>)
    52ce:	47a8      	blx	r5
		download(IMAGE);
    52d0:	2001      	movs	r0, #1
    52d2:	4b17      	ldr	r3, [pc, #92]	; (5330 <check_and_update_firmware+0xc0>)
    52d4:	4798      	blx	r3
		update_metadata(IMAGE1);
    52d6:	2000      	movs	r0, #0
    52d8:	4b16      	ldr	r3, [pc, #88]	; (5334 <check_and_update_firmware+0xc4>)
    52da:	4798      	blx	r3
		if(verify_checksum(IMAGE1)){
    52dc:	2000      	movs	r0, #0
    52de:	4b23      	ldr	r3, [pc, #140]	; (536c <check_and_update_firmware+0xfc>)
    52e0:	4798      	blx	r3
    52e2:	2800      	cmp	r0, #0
    52e4:	d103      	bne.n	52ee <check_and_update_firmware+0x7e>
			set_bootloader_flag();
			printf("System reboot!!\r\n");
			system_reset();
		}
		else{
			printf("Checksum mismatch. Image1 still invalid\r\n");
    52e6:	4822      	ldr	r0, [pc, #136]	; (5370 <check_and_update_firmware+0x100>)
    52e8:	4b1a      	ldr	r3, [pc, #104]	; (5354 <check_and_update_firmware+0xe4>)
    52ea:	4798      	blx	r3
		clear_state(DOWNLOADING);
		clear_state(CANCELED);
		clear_state(GET_REQUESTED);
		clear_state(COMPLETED);
	}
    52ec:	bd70      	pop	{r4, r5, r6, pc}
			printf("Checksum verified\r\n");
    52ee:	4821      	ldr	r0, [pc, #132]	; (5374 <check_and_update_firmware+0x104>)
    52f0:	4c18      	ldr	r4, [pc, #96]	; (5354 <check_and_update_firmware+0xe4>)
    52f2:	47a0      	blx	r4
			write_image_state(IMAGE1_VALID);
    52f4:	2000      	movs	r0, #0
    52f6:	4b18      	ldr	r3, [pc, #96]	; (5358 <check_and_update_firmware+0xe8>)
    52f8:	4798      	blx	r3
			printf("Marked image1 valid\r\n");
    52fa:	481f      	ldr	r0, [pc, #124]	; (5378 <check_and_update_firmware+0x108>)
    52fc:	47a0      	blx	r4
			set_bootloader_flag();
    52fe:	4b1f      	ldr	r3, [pc, #124]	; (537c <check_and_update_firmware+0x10c>)
    5300:	4798      	blx	r3
			printf("System reboot!!\r\n");
    5302:	481f      	ldr	r0, [pc, #124]	; (5380 <check_and_update_firmware+0x110>)
    5304:	47a0      	blx	r4
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    5306:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    530a:	4a1e      	ldr	r2, [pc, #120]	; (5384 <check_and_update_firmware+0x114>)
    530c:	4b1e      	ldr	r3, [pc, #120]	; (5388 <check_and_update_firmware+0x118>)
    530e:	60da      	str	r2, [r3, #12]
    5310:	f3bf 8f4f 	dsb	sy
    5314:	e7fe      	b.n	5314 <check_and_update_firmware+0xa4>
		printf("Server image version same or older. Ignoring\r\n");
    5316:	481d      	ldr	r0, [pc, #116]	; (538c <check_and_update_firmware+0x11c>)
    5318:	4b0e      	ldr	r3, [pc, #56]	; (5354 <check_and_update_firmware+0xe4>)
    531a:	4798      	blx	r3
		clear_state(DOWNLOADING);
    531c:	2008      	movs	r0, #8
    531e:	4c11      	ldr	r4, [pc, #68]	; (5364 <check_and_update_firmware+0xf4>)
    5320:	47a0      	blx	r4
		clear_state(CANCELED);
    5322:	2020      	movs	r0, #32
    5324:	47a0      	blx	r4
		clear_state(GET_REQUESTED);
    5326:	2004      	movs	r0, #4
    5328:	47a0      	blx	r4
		clear_state(COMPLETED);
    532a:	2010      	movs	r0, #16
    532c:	47a0      	blx	r4
    532e:	e7dd      	b.n	52ec <check_and_update_firmware+0x7c>
    5330:	000051c5 	.word	0x000051c5
    5334:	00004771 	.word	0x00004771
    5338:	00004829 	.word	0x00004829
    533c:	2000064c 	.word	0x2000064c
    5340:	0000e794 	.word	0x0000e794
    5344:	0000ce29 	.word	0x0000ce29
    5348:	200004cc 	.word	0x200004cc
    534c:	200004e0 	.word	0x200004e0
    5350:	0000e7c8 	.word	0x0000e7c8
    5354:	0000cf45 	.word	0x0000cf45
    5358:	000048c1 	.word	0x000048c1
    535c:	0000e7e4 	.word	0x0000e7e4
    5360:	000049d5 	.word	0x000049d5
    5364:	00004eb5 	.word	0x00004eb5
    5368:	0000e7fc 	.word	0x0000e7fc
    536c:	00004635 	.word	0x00004635
    5370:	0000e854 	.word	0x0000e854
    5374:	0000e814 	.word	0x0000e814
    5378:	0000e828 	.word	0x0000e828
    537c:	00004d3d 	.word	0x00004d3d
    5380:	0000e840 	.word	0x0000e840
    5384:	05fa0004 	.word	0x05fa0004
    5388:	e000ed00 	.word	0xe000ed00
    538c:	0000e880 	.word	0x0000e880

00005390 <at25dfx_chip_check_presence>:
 * \retval STATUS_OK if chip responded with ID matching its type.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_NOT_FOUND if chip did not respond, or with wrong ID.
 */
enum status_code at25dfx_chip_check_presence(struct at25dfx_chip_module *chip)
{
    5390:	b530      	push	{r4, r5, lr}
    5392:	b089      	sub	sp, #36	; 0x24
    5394:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;
	uint32_t id = 0;
    5396:	2300      	movs	r3, #0
    5398:	9307      	str	r3, [sp, #28]

	Assert(chip);

	// Reserve the SPI for us
	status = _at25dfx_spi_lock(chip->spi);
    539a:	6805      	ldr	r5, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    539c:	4b37      	ldr	r3, [pc, #220]	; (547c <at25dfx_chip_check_presence+0xec>)
    539e:	4798      	blx	r3
{
	enum status_code status;

	system_interrupt_enter_critical_section();

	if (module->locked) {
    53a0:	792b      	ldrb	r3, [r5, #4]
    53a2:	2b00      	cmp	r3, #0
    53a4:	d166      	bne.n	5474 <at25dfx_chip_check_presence+0xe4>
		status = STATUS_BUSY;
	} else {
		module->locked = true;
    53a6:	3301      	adds	r3, #1
    53a8:	712b      	strb	r3, [r5, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    53aa:	4b35      	ldr	r3, [pc, #212]	; (5480 <at25dfx_chip_check_presence+0xf0>)
    53ac:	4798      	blx	r3
	uint8_t cmd_buffer[AT25DFX_COMMAND_MAX_SIZE];

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	// Construct command to send
	cmd_buffer[0] = cmd.opcode;
    53ae:	229f      	movs	r2, #159	; 0x9f
    53b0:	ab01      	add	r3, sp, #4
    53b2:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    53b4:	7961      	ldrb	r1, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    53b6:	09ca      	lsrs	r2, r1, #7
		return NULL;
    53b8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    53ba:	2a00      	cmp	r2, #0
    53bc:	d104      	bne.n	53c8 <at25dfx_chip_check_presence+0x38>
		return &(ports[port_index]->Group[group_index]);
    53be:	094b      	lsrs	r3, r1, #5
    53c0:	01db      	lsls	r3, r3, #7
    53c2:	4a30      	ldr	r2, [pc, #192]	; (5484 <at25dfx_chip_check_presence+0xf4>)
    53c4:	4694      	mov	ip, r2
    53c6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    53c8:	221f      	movs	r2, #31
    53ca:	400a      	ands	r2, r1
    53cc:	2001      	movs	r0, #1
    53ce:	0001      	movs	r1, r0
    53d0:	4091      	lsls	r1, r2
	} else {
		port_base->OUTCLR.reg = pin_mask;
    53d2:	6159      	str	r1, [r3, #20]
	// Don't bother with init of dummy bytes

	// Issue command, then start read
	_at25dfx_chip_select(chip);

	vectors[0].data = cmd_buffer;
    53d4:	a903      	add	r1, sp, #12
    53d6:	ab01      	add	r3, sp, #4
    53d8:	9303      	str	r3, [sp, #12]
	vectors[0].length = cmd.command_size;
    53da:	8088      	strh	r0, [r1, #4]
	vectors[1].length = 0;
    53dc:	2300      	movs	r3, #0
    53de:	818b      	strh	r3, [r1, #12]

	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    53e0:	2200      	movs	r2, #0
    53e2:	6820      	ldr	r0, [r4, #0]
    53e4:	4b28      	ldr	r3, [pc, #160]	; (5488 <at25dfx_chip_check_presence+0xf8>)
    53e6:	4798      	blx	r3
	Assert(status == STATUS_OK);
	status = spi_master_vec_get_job_status_wait(chip->spi);
    53e8:	6820      	ldr	r0, [r4, #0]
 * \retval <other> if previous transfer failed.
 */
static inline enum status_code spi_master_vec_get_job_status(
		const struct spi_master_vec_module *const module)
{
	return module->status;
    53ea:	7983      	ldrb	r3, [r0, #6]
	status = spi_master_vec_get_job_status(module);
	CONF_SPI_MASTER_VEC_GIVE_SEMAPHORE(module->busy_semaphore);
#else
	do {
		status = spi_master_vec_get_job_status(module);
	} while (status == STATUS_BUSY);
    53ec:	2b05      	cmp	r3, #5
    53ee:	d0fc      	beq.n	53ea <at25dfx_chip_check_presence+0x5a>
	Assert(status == STATUS_OK);

	if (cmd.length) {
		vectors[0].data = cmd.data.rx;
    53f0:	aa03      	add	r2, sp, #12
    53f2:	ab07      	add	r3, sp, #28
    53f4:	9303      	str	r3, [sp, #12]
		vectors[0].length = cmd.length;
    53f6:	2303      	movs	r3, #3
    53f8:	8093      	strh	r3, [r2, #4]

		status = spi_master_vec_transceive_buffer_job(chip->spi, NULL, vectors);
    53fa:	2100      	movs	r1, #0
    53fc:	4b22      	ldr	r3, [pc, #136]	; (5488 <at25dfx_chip_check_presence+0xf8>)
    53fe:	4798      	blx	r3
		Assert(status == STATUS_OK);
		status = spi_master_vec_get_job_status_wait(chip->spi);
    5400:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5402:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5404:	2b05      	cmp	r3, #5
    5406:	d0fc      	beq.n	5402 <at25dfx_chip_check_presence+0x72>
	port_pin_set_output_level(chip->cs_pin, true);
    5408:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    540a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    540c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    540e:	2900      	cmp	r1, #0
    5410:	d104      	bne.n	541c <at25dfx_chip_check_presence+0x8c>
		return &(ports[port_index]->Group[group_index]);
    5412:	0953      	lsrs	r3, r2, #5
    5414:	01db      	lsls	r3, r3, #7
    5416:	491b      	ldr	r1, [pc, #108]	; (5484 <at25dfx_chip_check_presence+0xf4>)
    5418:	468c      	mov	ip, r1
    541a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    541c:	211f      	movs	r1, #31
    541e:	4011      	ands	r1, r2
    5420:	2201      	movs	r2, #1
    5422:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5424:	619a      	str	r2, [r3, #24]
	module->locked = false;
    5426:	2300      	movs	r3, #0
    5428:	6822      	ldr	r2, [r4, #0]
    542a:	7113      	strb	r3, [r2, #4]
	switch (type) {
    542c:	7923      	ldrb	r3, [r4, #4]
    542e:	2b09      	cmp	r3, #9
    5430:	d815      	bhi.n	545e <at25dfx_chip_check_presence+0xce>
    5432:	009b      	lsls	r3, r3, #2
    5434:	4a15      	ldr	r2, [pc, #84]	; (548c <at25dfx_chip_check_presence+0xfc>)
    5436:	58d3      	ldr	r3, [r2, r3]
    5438:	469f      	mov	pc, r3
		return 0x00431f;
    543a:	4b15      	ldr	r3, [pc, #84]	; (5490 <at25dfx_chip_check_presence+0x100>)
    543c:	e012      	b.n	5464 <at25dfx_chip_check_presence+0xd4>
		return 0x01441f;
    543e:	4b15      	ldr	r3, [pc, #84]	; (5494 <at25dfx_chip_check_presence+0x104>)
    5440:	e010      	b.n	5464 <at25dfx_chip_check_presence+0xd4>
		return 0x02451f;
    5442:	4b15      	ldr	r3, [pc, #84]	; (5498 <at25dfx_chip_check_presence+0x108>)
    5444:	e00e      	b.n	5464 <at25dfx_chip_check_presence+0xd4>
		return 0x01451f;
    5446:	4b15      	ldr	r3, [pc, #84]	; (549c <at25dfx_chip_check_presence+0x10c>)
    5448:	e00c      	b.n	5464 <at25dfx_chip_check_presence+0xd4>
		return 0x02461f;
    544a:	4b15      	ldr	r3, [pc, #84]	; (54a0 <at25dfx_chip_check_presence+0x110>)
    544c:	e00a      	b.n	5464 <at25dfx_chip_check_presence+0xd4>
		return 0x03461f;
    544e:	4b15      	ldr	r3, [pc, #84]	; (54a4 <at25dfx_chip_check_presence+0x114>)
    5450:	e008      	b.n	5464 <at25dfx_chip_check_presence+0xd4>
		return 0x00861f;
    5452:	4b15      	ldr	r3, [pc, #84]	; (54a8 <at25dfx_chip_check_presence+0x118>)
    5454:	e006      	b.n	5464 <at25dfx_chip_check_presence+0xd4>
		return 0x01471f;
    5456:	4b15      	ldr	r3, [pc, #84]	; (54ac <at25dfx_chip_check_presence+0x11c>)
    5458:	e004      	b.n	5464 <at25dfx_chip_check_presence+0xd4>
		return 0x00481f;
    545a:	4b15      	ldr	r3, [pc, #84]	; (54b0 <at25dfx_chip_check_presence+0x120>)
    545c:	e002      	b.n	5464 <at25dfx_chip_check_presence+0xd4>
		return 0;
    545e:	2300      	movs	r3, #0
    5460:	e000      	b.n	5464 <at25dfx_chip_check_presence+0xd4>
		return 0x00651f;
    5462:	4b14      	ldr	r3, [pc, #80]	; (54b4 <at25dfx_chip_check_presence+0x124>)

	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	if (id == _at25dfx_get_device_id(chip->type)) {
    5464:	9a07      	ldr	r2, [sp, #28]
    5466:	429a      	cmp	r2, r3
    5468:	d002      	beq.n	5470 <at25dfx_chip_check_presence+0xe0>
		return STATUS_OK;
	} else {
		return STATUS_ERR_NOT_FOUND;
    546a:	2014      	movs	r0, #20
	}
}
    546c:	b009      	add	sp, #36	; 0x24
    546e:	bd30      	pop	{r4, r5, pc}
		return STATUS_OK;
    5470:	2000      	movs	r0, #0
    5472:	e7fb      	b.n	546c <at25dfx_chip_check_presence+0xdc>
    5474:	4b02      	ldr	r3, [pc, #8]	; (5480 <at25dfx_chip_check_presence+0xf0>)
    5476:	4798      	blx	r3
		return status;
    5478:	2005      	movs	r0, #5
    547a:	e7f7      	b.n	546c <at25dfx_chip_check_presence+0xdc>
    547c:	00009045 	.word	0x00009045
    5480:	00009085 	.word	0x00009085
    5484:	41004400 	.word	0x41004400
    5488:	00009f81 	.word	0x00009f81
    548c:	0000ec98 	.word	0x0000ec98
    5490:	0000431f 	.word	0x0000431f
    5494:	0001441f 	.word	0x0001441f
    5498:	0002451f 	.word	0x0002451f
    549c:	0001451f 	.word	0x0001451f
    54a0:	0002461f 	.word	0x0002461f
    54a4:	0003461f 	.word	0x0003461f
    54a8:	0000861f 	.word	0x0000861f
    54ac:	0001471f 	.word	0x0001471f
    54b0:	0000481f 	.word	0x0000481f
    54b4:	0000651f 	.word	0x0000651f

000054b8 <at25dfx_chip_read_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_read_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, void *data, at25dfx_datalen_t length)
{
    54b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ba:	b089      	sub	sp, #36	; 0x24
    54bc:	0004      	movs	r4, r0
    54be:	000e      	movs	r6, r1
    54c0:	9201      	str	r2, [sp, #4]
    54c2:	001f      	movs	r7, r3
	Assert(chip);
	Assert(data);
	Assert(length);

	// Address out of range?
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    54c4:	185a      	adds	r2, r3, r1
	switch (type) {
    54c6:	7903      	ldrb	r3, [r0, #4]
    54c8:	2b09      	cmp	r3, #9
    54ca:	d815      	bhi.n	54f8 <at25dfx_chip_read_buffer+0x40>
    54cc:	009b      	lsls	r3, r3, #2
    54ce:	493a      	ldr	r1, [pc, #232]	; (55b8 <at25dfx_chip_read_buffer+0x100>)
    54d0:	58cb      	ldr	r3, [r1, r3]
    54d2:	469f      	mov	pc, r3
		return 256 * 1024UL;
    54d4:	2380      	movs	r3, #128	; 0x80
    54d6:	02db      	lsls	r3, r3, #11
    54d8:	e012      	b.n	5500 <at25dfx_chip_read_buffer+0x48>
		return 512 * 1024UL;
    54da:	2380      	movs	r3, #128	; 0x80
    54dc:	031b      	lsls	r3, r3, #12
    54de:	e00f      	b.n	5500 <at25dfx_chip_read_buffer+0x48>
		return 1024 * 1024UL;
    54e0:	2380      	movs	r3, #128	; 0x80
    54e2:	035b      	lsls	r3, r3, #13
    54e4:	e00c      	b.n	5500 <at25dfx_chip_read_buffer+0x48>
		return 2048 * 1024UL;
    54e6:	2380      	movs	r3, #128	; 0x80
    54e8:	039b      	lsls	r3, r3, #14
    54ea:	e009      	b.n	5500 <at25dfx_chip_read_buffer+0x48>
		return 4096 * 1024UL;
    54ec:	2380      	movs	r3, #128	; 0x80
    54ee:	03db      	lsls	r3, r3, #15
    54f0:	e006      	b.n	5500 <at25dfx_chip_read_buffer+0x48>
		return 8192 * 1024UL;
    54f2:	2380      	movs	r3, #128	; 0x80
    54f4:	041b      	lsls	r3, r3, #16
    54f6:	e003      	b.n	5500 <at25dfx_chip_read_buffer+0x48>
		return 0;
    54f8:	2300      	movs	r3, #0
    54fa:	e001      	b.n	5500 <at25dfx_chip_read_buffer+0x48>
		return 64 * 1024UL;
    54fc:	2380      	movs	r3, #128	; 0x80
    54fe:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    5500:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    5502:	429a      	cmp	r2, r3
    5504:	d901      	bls.n	550a <at25dfx_chip_read_buffer+0x52>
	_at25dfx_chip_issue_read_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
    5506:	b009      	add	sp, #36	; 0x24
    5508:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    550a:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    550c:	4b2b      	ldr	r3, [pc, #172]	; (55bc <at25dfx_chip_read_buffer+0x104>)
    550e:	4798      	blx	r3
	if (module->locked) {
    5510:	792b      	ldrb	r3, [r5, #4]
    5512:	2b00      	cmp	r3, #0
    5514:	d14b      	bne.n	55ae <at25dfx_chip_read_buffer+0xf6>
		module->locked = true;
    5516:	3301      	adds	r3, #1
    5518:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    551a:	4b29      	ldr	r3, [pc, #164]	; (55c0 <at25dfx_chip_read_buffer+0x108>)
    551c:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    551e:	230b      	movs	r3, #11
    5520:	aa02      	add	r2, sp, #8
    5522:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    5524:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    5526:	0a33      	lsrs	r3, r6, #8
    5528:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    552a:	0c36      	lsrs	r6, r6, #16
    552c:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    552e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5530:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5532:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5534:	2900      	cmp	r1, #0
    5536:	d104      	bne.n	5542 <at25dfx_chip_read_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
    5538:	0953      	lsrs	r3, r2, #5
    553a:	01db      	lsls	r3, r3, #7
    553c:	4921      	ldr	r1, [pc, #132]	; (55c4 <at25dfx_chip_read_buffer+0x10c>)
    553e:	468c      	mov	ip, r1
    5540:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5542:	211f      	movs	r1, #31
    5544:	4011      	ands	r1, r2
    5546:	2201      	movs	r2, #1
    5548:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    554a:	615a      	str	r2, [r3, #20]
	vectors[0].data = cmd_buffer;
    554c:	a904      	add	r1, sp, #16
    554e:	ab02      	add	r3, sp, #8
    5550:	9304      	str	r3, [sp, #16]
	vectors[0].length = cmd.command_size;
    5552:	2305      	movs	r3, #5
    5554:	808b      	strh	r3, [r1, #4]
	vectors[1].length = 0;
    5556:	2300      	movs	r3, #0
    5558:	818b      	strh	r3, [r1, #12]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    555a:	2200      	movs	r2, #0
    555c:	6820      	ldr	r0, [r4, #0]
    555e:	4b1a      	ldr	r3, [pc, #104]	; (55c8 <at25dfx_chip_read_buffer+0x110>)
    5560:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5562:	6820      	ldr	r0, [r4, #0]
	return module->status;
    5564:	7983      	ldrb	r3, [r0, #6]
	} while (status == STATUS_BUSY);
    5566:	2b05      	cmp	r3, #5
    5568:	d0fc      	beq.n	5564 <at25dfx_chip_read_buffer+0xac>
	if (cmd.length) {
    556a:	2f00      	cmp	r7, #0
    556c:	d113      	bne.n	5596 <at25dfx_chip_read_buffer+0xde>
	port_pin_set_output_level(chip->cs_pin, true);
    556e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5570:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5572:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5574:	2900      	cmp	r1, #0
    5576:	d104      	bne.n	5582 <at25dfx_chip_read_buffer+0xca>
		return &(ports[port_index]->Group[group_index]);
    5578:	0953      	lsrs	r3, r2, #5
    557a:	01db      	lsls	r3, r3, #7
    557c:	4911      	ldr	r1, [pc, #68]	; (55c4 <at25dfx_chip_read_buffer+0x10c>)
    557e:	468c      	mov	ip, r1
    5580:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5582:	211f      	movs	r1, #31
    5584:	4011      	ands	r1, r2
    5586:	2201      	movs	r2, #1
    5588:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    558a:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
    558c:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    558e:	2200      	movs	r2, #0
    5590:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
    5592:	2000      	movs	r0, #0
    5594:	e7b7      	b.n	5506 <at25dfx_chip_read_buffer+0x4e>
		vectors[0].data = cmd.data.rx;
    5596:	aa04      	add	r2, sp, #16
    5598:	9b01      	ldr	r3, [sp, #4]
    559a:	9304      	str	r3, [sp, #16]
		vectors[0].length = cmd.length;
    559c:	8097      	strh	r7, [r2, #4]
		status = spi_master_vec_transceive_buffer_job(chip->spi, NULL, vectors);
    559e:	2100      	movs	r1, #0
    55a0:	4b09      	ldr	r3, [pc, #36]	; (55c8 <at25dfx_chip_read_buffer+0x110>)
    55a2:	4798      	blx	r3
		status = spi_master_vec_get_job_status_wait(chip->spi);
    55a4:	6822      	ldr	r2, [r4, #0]
	return module->status;
    55a6:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    55a8:	2b05      	cmp	r3, #5
    55aa:	d0fc      	beq.n	55a6 <at25dfx_chip_read_buffer+0xee>
    55ac:	e7df      	b.n	556e <at25dfx_chip_read_buffer+0xb6>
    55ae:	4b04      	ldr	r3, [pc, #16]	; (55c0 <at25dfx_chip_read_buffer+0x108>)
    55b0:	4798      	blx	r3
		return status;
    55b2:	2005      	movs	r0, #5
    55b4:	e7a7      	b.n	5506 <at25dfx_chip_read_buffer+0x4e>
    55b6:	46c0      	nop			; (mov r8, r8)
    55b8:	0000ecc0 	.word	0x0000ecc0
    55bc:	00009045 	.word	0x00009045
    55c0:	00009085 	.word	0x00009085
    55c4:	41004400 	.word	0x41004400
    55c8:	00009f81 	.word	0x00009f81

000055cc <at25dfx_chip_write_buffer>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address and/or length is out of bounds.
 */
enum status_code at25dfx_chip_write_buffer(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, const void *data, at25dfx_datalen_t length)
{
    55cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    55ce:	46de      	mov	lr, fp
    55d0:	4657      	mov	r7, sl
    55d2:	464e      	mov	r6, r9
    55d4:	4645      	mov	r5, r8
    55d6:	b5e0      	push	{r5, r6, r7, lr}
    55d8:	b08b      	sub	sp, #44	; 0x2c
    55da:	0004      	movs	r4, r0
    55dc:	000f      	movs	r7, r1
    55de:	9201      	str	r2, [sp, #4]
    55e0:	001e      	movs	r6, r3

	Assert(chip);
	Assert(data);
	Assert(length);

	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    55e2:	185a      	adds	r2, r3, r1
	switch (type) {
    55e4:	7903      	ldrb	r3, [r0, #4]
    55e6:	2b09      	cmp	r3, #9
    55e8:	d815      	bhi.n	5616 <at25dfx_chip_write_buffer+0x4a>
    55ea:	009b      	lsls	r3, r3, #2
    55ec:	498a      	ldr	r1, [pc, #552]	; (5818 <at25dfx_chip_write_buffer+0x24c>)
    55ee:	58cb      	ldr	r3, [r1, r3]
    55f0:	469f      	mov	pc, r3
		return 256 * 1024UL;
    55f2:	2380      	movs	r3, #128	; 0x80
    55f4:	02db      	lsls	r3, r3, #11
    55f6:	e012      	b.n	561e <at25dfx_chip_write_buffer+0x52>
		return 512 * 1024UL;
    55f8:	2380      	movs	r3, #128	; 0x80
    55fa:	031b      	lsls	r3, r3, #12
    55fc:	e00f      	b.n	561e <at25dfx_chip_write_buffer+0x52>
		return 1024 * 1024UL;
    55fe:	2380      	movs	r3, #128	; 0x80
    5600:	035b      	lsls	r3, r3, #13
    5602:	e00c      	b.n	561e <at25dfx_chip_write_buffer+0x52>
		return 2048 * 1024UL;
    5604:	2380      	movs	r3, #128	; 0x80
    5606:	039b      	lsls	r3, r3, #14
    5608:	e009      	b.n	561e <at25dfx_chip_write_buffer+0x52>
		return 4096 * 1024UL;
    560a:	2380      	movs	r3, #128	; 0x80
    560c:	03db      	lsls	r3, r3, #15
    560e:	e006      	b.n	561e <at25dfx_chip_write_buffer+0x52>
		return 8192 * 1024UL;
    5610:	2380      	movs	r3, #128	; 0x80
    5612:	041b      	lsls	r3, r3, #16
    5614:	e003      	b.n	561e <at25dfx_chip_write_buffer+0x52>
		return 0;
    5616:	2300      	movs	r3, #0
    5618:	e001      	b.n	561e <at25dfx_chip_write_buffer+0x52>
		return 64 * 1024UL;
    561a:	2380      	movs	r3, #128	; 0x80
    561c:	025b      	lsls	r3, r3, #9
		return STATUS_ERR_INVALID_ARG;
    561e:	2017      	movs	r0, #23
	if ((address + length) > _at25dfx_get_device_size(chip->type)) {
    5620:	429a      	cmp	r2, r3
    5622:	d906      	bls.n	5632 <at25dfx_chip_write_buffer+0x66>
	}

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    5624:	b00b      	add	sp, #44	; 0x2c
    5626:	bc3c      	pop	{r2, r3, r4, r5}
    5628:	4690      	mov	r8, r2
    562a:	4699      	mov	r9, r3
    562c:	46a2      	mov	sl, r4
    562e:	46ab      	mov	fp, r5
    5630:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    5632:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
    5634:	4b79      	ldr	r3, [pc, #484]	; (581c <at25dfx_chip_write_buffer+0x250>)
    5636:	4798      	blx	r3
	if (module->locked) {
    5638:	792b      	ldrb	r3, [r5, #4]
    563a:	2b00      	cmp	r3, #0
    563c:	d000      	beq.n	5640 <at25dfx_chip_write_buffer+0x74>
    563e:	e0e6      	b.n	580e <at25dfx_chip_write_buffer+0x242>
		module->locked = true;
    5640:	3301      	adds	r3, #1
    5642:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    5644:	4b76      	ldr	r3, [pc, #472]	; (5820 <at25dfx_chip_write_buffer+0x254>)
    5646:	4798      	blx	r3
	enum status_code status;
	uint8_t cmd_buffer[AT25DFX_COMMAND_MAX_SIZE];

	Assert((cmd.command_size) && (cmd.command_size <= AT25DFX_COMMAND_MAX_SIZE));

	cmd_buffer[0] = cmd.opcode;
    5648:	2306      	movs	r3, #6
    564a:	aa04      	add	r2, sp, #16
    564c:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    564e:	7961      	ldrb	r1, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5650:	09ca      	lsrs	r2, r1, #7
		return NULL;
    5652:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5654:	2a00      	cmp	r2, #0
    5656:	d104      	bne.n	5662 <at25dfx_chip_write_buffer+0x96>
		return &(ports[port_index]->Group[group_index]);
    5658:	094b      	lsrs	r3, r1, #5
    565a:	01db      	lsls	r3, r3, #7
    565c:	4a71      	ldr	r2, [pc, #452]	; (5824 <at25dfx_chip_write_buffer+0x258>)
    565e:	4694      	mov	ip, r2
    5660:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5662:	221f      	movs	r2, #31
    5664:	400a      	ands	r2, r1
    5666:	2001      	movs	r0, #1
    5668:	0001      	movs	r1, r0
    566a:	4091      	lsls	r1, r2
		port_base->OUTCLR.reg = pin_mask;
    566c:	6159      	str	r1, [r3, #20]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	vectors[0].data = cmd_buffer;
    566e:	a906      	add	r1, sp, #24
    5670:	ab04      	add	r3, sp, #16
    5672:	9306      	str	r3, [sp, #24]
	vectors[0].length = cmd.command_size;
    5674:	8088      	strh	r0, [r1, #4]
	vectors[1].length = 0;
    5676:	2300      	movs	r3, #0
    5678:	818b      	strh	r3, [r1, #12]

	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    567a:	2200      	movs	r2, #0
    567c:	6820      	ldr	r0, [r4, #0]
    567e:	4b6a      	ldr	r3, [pc, #424]	; (5828 <at25dfx_chip_write_buffer+0x25c>)
    5680:	4798      	blx	r3
	Assert(status == STATUS_OK);
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5682:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5684:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5686:	2b05      	cmp	r3, #5
    5688:	d0fc      	beq.n	5684 <at25dfx_chip_write_buffer+0xb8>
	port_pin_set_output_level(chip->cs_pin, true);
    568a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    568c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    568e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5690:	2900      	cmp	r1, #0
    5692:	d104      	bne.n	569e <at25dfx_chip_write_buffer+0xd2>
		return &(ports[port_index]->Group[group_index]);
    5694:	0953      	lsrs	r3, r2, #5
    5696:	01db      	lsls	r3, r3, #7
    5698:	4962      	ldr	r1, [pc, #392]	; (5824 <at25dfx_chip_write_buffer+0x258>)
    569a:	468c      	mov	ip, r1
    569c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    569e:	211f      	movs	r1, #31
    56a0:	4011      	ands	r1, r2
    56a2:	2201      	movs	r2, #1
    56a4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    56a6:	619a      	str	r2, [r3, #24]
	page_bytes = AT25DFX_PAGE_SIZE - (address % AT25DFX_PAGE_SIZE);
    56a8:	22ff      	movs	r2, #255	; 0xff
    56aa:	403a      	ands	r2, r7
    56ac:	2380      	movs	r3, #128	; 0x80
    56ae:	005b      	lsls	r3, r3, #1
    56b0:	1a9b      	subs	r3, r3, r2
	cmd.length = min(page_bytes, length);
    56b2:	1c1a      	adds	r2, r3, #0
    56b4:	b29b      	uxth	r3, r3
    56b6:	42b3      	cmp	r3, r6
    56b8:	d900      	bls.n	56bc <at25dfx_chip_write_buffer+0xf0>
    56ba:	1c32      	adds	r2, r6, #0
    56bc:	b293      	uxth	r3, r2
    56be:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
    56c0:	2302      	movs	r3, #2
    56c2:	aa04      	add	r2, sp, #16
    56c4:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    56c6:	70d7      	strb	r7, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    56c8:	0a3b      	lsrs	r3, r7, #8
    56ca:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    56cc:	0c3b      	lsrs	r3, r7, #16
    56ce:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    56d0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    56d2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    56d4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    56d6:	2900      	cmp	r1, #0
    56d8:	d104      	bne.n	56e4 <at25dfx_chip_write_buffer+0x118>
		return &(ports[port_index]->Group[group_index]);
    56da:	0953      	lsrs	r3, r2, #5
    56dc:	01db      	lsls	r3, r3, #7
    56de:	4951      	ldr	r1, [pc, #324]	; (5824 <at25dfx_chip_write_buffer+0x258>)
    56e0:	468c      	mov	ip, r1
    56e2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    56e4:	211f      	movs	r1, #31
    56e6:	4011      	ands	r1, r2
    56e8:	2201      	movs	r2, #1
    56ea:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    56ec:	615a      	str	r2, [r3, #20]
	vectors[0].data = cmd_buffer;
    56ee:	a906      	add	r1, sp, #24
    56f0:	ab04      	add	r3, sp, #16
    56f2:	9306      	str	r3, [sp, #24]
	vectors[0].length = cmd.command_size;
    56f4:	2304      	movs	r3, #4
    56f6:	808b      	strh	r3, [r1, #4]
	vectors[1].length = 0;
    56f8:	2300      	movs	r3, #0
    56fa:	818b      	strh	r3, [r1, #12]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    56fc:	2200      	movs	r2, #0
    56fe:	6820      	ldr	r0, [r4, #0]
    5700:	4b49      	ldr	r3, [pc, #292]	; (5828 <at25dfx_chip_write_buffer+0x25c>)
    5702:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5704:	6820      	ldr	r0, [r4, #0]
	return module->status;
    5706:	7983      	ldrb	r3, [r0, #6]
	} while (status == STATUS_BUSY);
    5708:	2b05      	cmp	r3, #5
    570a:	d0fc      	beq.n	5706 <at25dfx_chip_write_buffer+0x13a>
	Assert(status == STATUS_OK);

	if (cmd.length) {
    570c:	4653      	mov	r3, sl
    570e:	2b00      	cmp	r3, #0
    5710:	d163      	bne.n	57da <at25dfx_chip_write_buffer+0x20e>
	port_pin_set_output_level(chip->cs_pin, true);
    5712:	7961      	ldrb	r1, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5714:	09ca      	lsrs	r2, r1, #7
		return NULL;
    5716:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5718:	2a00      	cmp	r2, #0
    571a:	d104      	bne.n	5726 <at25dfx_chip_write_buffer+0x15a>
		return &(ports[port_index]->Group[group_index]);
    571c:	094b      	lsrs	r3, r1, #5
    571e:	01db      	lsls	r3, r3, #7
    5720:	4a40      	ldr	r2, [pc, #256]	; (5824 <at25dfx_chip_write_buffer+0x258>)
    5722:	4694      	mov	ip, r2
    5724:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5726:	221f      	movs	r2, #31
    5728:	400a      	ands	r2, r1
    572a:	2101      	movs	r1, #1
    572c:	0008      	movs	r0, r1
    572e:	4090      	lsls	r0, r2
		port_base->OUTSET.reg = pin_mask;
    5730:	6198      	str	r0, [r3, #24]
	struct spi_master_vec_bufdesc vectors[2];

	enum status_code status;
	uint8_t data;

	vectors[0].data = &data;
    5732:	ab06      	add	r3, sp, #24
    5734:	aa04      	add	r2, sp, #16
    5736:	9206      	str	r2, [sp, #24]
	vectors[0].length = 1;
    5738:	8099      	strh	r1, [r3, #4]
	vectors[1].length = 0;
    573a:	2200      	movs	r2, #0
    573c:	819a      	strh	r2, [r3, #12]
	port_pin_set_output_level(chip->cs_pin, false);
    573e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5740:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5742:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5744:	2900      	cmp	r1, #0
    5746:	d104      	bne.n	5752 <at25dfx_chip_write_buffer+0x186>
		return &(ports[port_index]->Group[group_index]);
    5748:	0953      	lsrs	r3, r2, #5
    574a:	01db      	lsls	r3, r3, #7
    574c:	4935      	ldr	r1, [pc, #212]	; (5824 <at25dfx_chip_write_buffer+0x258>)
    574e:	468c      	mov	ip, r1
    5750:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5752:	211f      	movs	r1, #31
    5754:	4011      	ands	r1, r2
    5756:	2201      	movs	r2, #1
    5758:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    575a:	615a      	str	r2, [r3, #20]

	_at25dfx_chip_select(chip);

	// Issue status read command
	data = AT25DFX_COMMAND_READ_STATUS;
    575c:	2305      	movs	r3, #5
    575e:	aa04      	add	r2, sp, #16
    5760:	7013      	strb	r3, [r2, #0]

	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    5762:	2200      	movs	r2, #0
    5764:	a906      	add	r1, sp, #24
    5766:	6820      	ldr	r0, [r4, #0]
    5768:	4b2f      	ldr	r3, [pc, #188]	; (5828 <at25dfx_chip_write_buffer+0x25c>)
    576a:	4798      	blx	r3
	Assert(status == STATUS_OK);
	status = spi_master_vec_get_job_status_wait(chip->spi);
    576c:	6822      	ldr	r2, [r4, #0]
	return module->status;
    576e:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5770:	2b05      	cmp	r3, #5
    5772:	d0fc      	beq.n	576e <at25dfx_chip_write_buffer+0x1a2>
	Assert(status == STATUS_OK);

	// Keep reading until busy flag clears
	do {
		status = spi_master_vec_transceive_buffer_job(chip->spi, NULL, vectors);
    5774:	4d2c      	ldr	r5, [pc, #176]	; (5828 <at25dfx_chip_write_buffer+0x25c>)
    5776:	aa06      	add	r2, sp, #24
    5778:	2100      	movs	r1, #0
    577a:	6820      	ldr	r0, [r4, #0]
    577c:	47a8      	blx	r5
		Assert(status == STATUS_OK);
		status = spi_master_vec_get_job_status_wait(chip->spi);
    577e:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5780:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5782:	2b05      	cmp	r3, #5
    5784:	d0fc      	beq.n	5780 <at25dfx_chip_write_buffer+0x1b4>
		Assert(status == STATUS_OK);
	} while (data & AT25DFX_STATUS_BUSY);
    5786:	ab04      	add	r3, sp, #16
    5788:	781b      	ldrb	r3, [r3, #0]
    578a:	07da      	lsls	r2, r3, #31
    578c:	d4f3      	bmi.n	5776 <at25dfx_chip_write_buffer+0x1aa>
	port_pin_set_output_level(chip->cs_pin, true);
    578e:	7961      	ldrb	r1, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5790:	09c8      	lsrs	r0, r1, #7
		return NULL;
    5792:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5794:	2800      	cmp	r0, #0
    5796:	d104      	bne.n	57a2 <at25dfx_chip_write_buffer+0x1d6>
		return &(ports[port_index]->Group[group_index]);
    5798:	094a      	lsrs	r2, r1, #5
    579a:	01d2      	lsls	r2, r2, #7
    579c:	4821      	ldr	r0, [pc, #132]	; (5824 <at25dfx_chip_write_buffer+0x258>)
    579e:	4684      	mov	ip, r0
    57a0:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    57a2:	201f      	movs	r0, #31
    57a4:	4008      	ands	r0, r1
    57a6:	2101      	movs	r1, #1
    57a8:	4081      	lsls	r1, r0
		port_base->OUTSET.reg = pin_mask;
    57aa:	6191      	str	r1, [r2, #24]

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (data & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
    57ac:	2010      	movs	r0, #16
	if (data & AT25DFX_STATUS_ERROR) {
    57ae:	069b      	lsls	r3, r3, #26
    57b0:	d500      	bpl.n	57b4 <at25dfx_chip_write_buffer+0x1e8>
    57b2:	e0ff      	b.n	59b4 <at25dfx_chip_write_buffer+0x3e8>
	length -= cmd.length;
    57b4:	4653      	mov	r3, sl
    57b6:	1af6      	subs	r6, r6, r3
    57b8:	b2b3      	uxth	r3, r6
    57ba:	9302      	str	r3, [sp, #8]
	}
	return STATUS_OK;
    57bc:	2000      	movs	r0, #0
	while (length && (status == STATUS_OK)) {
    57be:	2b00      	cmp	r3, #0
    57c0:	d100      	bne.n	57c4 <at25dfx_chip_write_buffer+0x1f8>
    57c2:	e0f7      	b.n	59b4 <at25dfx_chip_write_buffer+0x3e8>
	cmd_buffer[0] = cmd.opcode;
    57c4:	2306      	movs	r3, #6
    57c6:	4698      	mov	r8, r3
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    57c8:	231f      	movs	r3, #31
    57ca:	469b      	mov	fp, r3
    57cc:	2601      	movs	r6, #1
	vectors[0].data = cmd_buffer;
    57ce:	ad06      	add	r5, sp, #24
	vectors[1].length = 0;
    57d0:	2300      	movs	r3, #0
    57d2:	466a      	mov	r2, sp
    57d4:	81d3      	strh	r3, [r2, #14]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    57d6:	46b9      	mov	r9, r7
    57d8:	e030      	b.n	583c <at25dfx_chip_write_buffer+0x270>
		vectors[0].data = (uint8_t *)cmd.data.tx;
    57da:	a906      	add	r1, sp, #24
    57dc:	9b01      	ldr	r3, [sp, #4]
    57de:	9306      	str	r3, [sp, #24]
		vectors[0].length = cmd.length;
    57e0:	4653      	mov	r3, sl
    57e2:	808b      	strh	r3, [r1, #4]
		status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    57e4:	2200      	movs	r2, #0
    57e6:	4b10      	ldr	r3, [pc, #64]	; (5828 <at25dfx_chip_write_buffer+0x25c>)
    57e8:	4798      	blx	r3
		status = spi_master_vec_get_job_status_wait(chip->spi);
    57ea:	6822      	ldr	r2, [r4, #0]
	return module->status;
    57ec:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    57ee:	2b05      	cmp	r3, #5
    57f0:	d0fc      	beq.n	57ec <at25dfx_chip_write_buffer+0x220>
    57f2:	e78e      	b.n	5712 <at25dfx_chip_write_buffer+0x146>
		vectors[0].data = (uint8_t *)cmd.data.tx;
    57f4:	9b01      	ldr	r3, [sp, #4]
    57f6:	602b      	str	r3, [r5, #0]
		vectors[0].length = cmd.length;
    57f8:	4653      	mov	r3, sl
    57fa:	80ab      	strh	r3, [r5, #4]
		status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    57fc:	2200      	movs	r2, #0
    57fe:	0029      	movs	r1, r5
    5800:	4b09      	ldr	r3, [pc, #36]	; (5828 <at25dfx_chip_write_buffer+0x25c>)
    5802:	4798      	blx	r3
		status = spi_master_vec_get_job_status_wait(chip->spi);
    5804:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5806:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5808:	2b05      	cmp	r3, #5
    580a:	d0fc      	beq.n	5806 <at25dfx_chip_write_buffer+0x23a>
    580c:	e083      	b.n	5916 <at25dfx_chip_write_buffer+0x34a>
    580e:	4b04      	ldr	r3, [pc, #16]	; (5820 <at25dfx_chip_write_buffer+0x254>)
    5810:	4798      	blx	r3
		return status;
    5812:	2005      	movs	r0, #5
    5814:	e706      	b.n	5624 <at25dfx_chip_write_buffer+0x58>
    5816:	46c0      	nop			; (mov r8, r8)
    5818:	0000ecec 	.word	0x0000ecec
    581c:	00009045 	.word	0x00009045
    5820:	00009085 	.word	0x00009085
    5824:	41004400 	.word	0x41004400
    5828:	00009f81 	.word	0x00009f81
		length -= cmd.length;
    582c:	9b02      	ldr	r3, [sp, #8]
    582e:	4652      	mov	r2, sl
    5830:	1a9b      	subs	r3, r3, r2
    5832:	b29b      	uxth	r3, r3
    5834:	9302      	str	r3, [sp, #8]
	while (length && (status == STATUS_OK)) {
    5836:	2b00      	cmp	r3, #0
    5838:	d100      	bne.n	583c <at25dfx_chip_write_buffer+0x270>
    583a:	e0bf      	b.n	59bc <at25dfx_chip_write_buffer+0x3f0>
	cmd_buffer[0] = cmd.opcode;
    583c:	ab04      	add	r3, sp, #16
    583e:	4642      	mov	r2, r8
    5840:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5842:	7963      	ldrb	r3, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5844:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5846:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5848:	2900      	cmp	r1, #0
    584a:	d104      	bne.n	5856 <at25dfx_chip_write_buffer+0x28a>
		return &(ports[port_index]->Group[group_index]);
    584c:	095a      	lsrs	r2, r3, #5
    584e:	01d2      	lsls	r2, r2, #7
    5850:	495b      	ldr	r1, [pc, #364]	; (59c0 <at25dfx_chip_write_buffer+0x3f4>)
    5852:	468c      	mov	ip, r1
    5854:	4462      	add	r2, ip
    5856:	4659      	mov	r1, fp
    5858:	400b      	ands	r3, r1
    585a:	0031      	movs	r1, r6
    585c:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    585e:	6151      	str	r1, [r2, #20]
	vectors[0].data = cmd_buffer;
    5860:	ab04      	add	r3, sp, #16
    5862:	602b      	str	r3, [r5, #0]
	vectors[0].length = cmd.command_size;
    5864:	80ae      	strh	r6, [r5, #4]
	vectors[1].length = 0;
    5866:	466b      	mov	r3, sp
    5868:	89db      	ldrh	r3, [r3, #14]
    586a:	81ab      	strh	r3, [r5, #12]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    586c:	2200      	movs	r2, #0
    586e:	0029      	movs	r1, r5
    5870:	6820      	ldr	r0, [r4, #0]
    5872:	4b54      	ldr	r3, [pc, #336]	; (59c4 <at25dfx_chip_write_buffer+0x3f8>)
    5874:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5876:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5878:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    587a:	2b05      	cmp	r3, #5
    587c:	d0fc      	beq.n	5878 <at25dfx_chip_write_buffer+0x2ac>
	port_pin_set_output_level(chip->cs_pin, true);
    587e:	7963      	ldrb	r3, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5880:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5882:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5884:	2900      	cmp	r1, #0
    5886:	d104      	bne.n	5892 <at25dfx_chip_write_buffer+0x2c6>
		return &(ports[port_index]->Group[group_index]);
    5888:	095a      	lsrs	r2, r3, #5
    588a:	01d2      	lsls	r2, r2, #7
    588c:	494c      	ldr	r1, [pc, #304]	; (59c0 <at25dfx_chip_write_buffer+0x3f4>)
    588e:	468c      	mov	ip, r1
    5890:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5892:	4659      	mov	r1, fp
    5894:	400b      	ands	r3, r1
    5896:	0031      	movs	r1, r6
    5898:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    589a:	6191      	str	r1, [r2, #24]
		cmd.address += cmd.length;
    589c:	44d1      	add	r9, sl
		cmd.data.tx += cmd.length;
    589e:	9b01      	ldr	r3, [sp, #4]
    58a0:	4453      	add	r3, sl
    58a2:	9301      	str	r3, [sp, #4]
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
    58a4:	9902      	ldr	r1, [sp, #8]
    58a6:	1c0b      	adds	r3, r1, #0
    58a8:	2280      	movs	r2, #128	; 0x80
    58aa:	0052      	lsls	r2, r2, #1
    58ac:	4291      	cmp	r1, r2
    58ae:	d901      	bls.n	58b4 <at25dfx_chip_write_buffer+0x2e8>
    58b0:	4b45      	ldr	r3, [pc, #276]	; (59c8 <at25dfx_chip_write_buffer+0x3fc>)
    58b2:	881b      	ldrh	r3, [r3, #0]
    58b4:	b29b      	uxth	r3, r3
    58b6:	469a      	mov	sl, r3
	cmd_buffer[0] = cmd.opcode;
    58b8:	2302      	movs	r3, #2
    58ba:	aa04      	add	r2, sp, #16
    58bc:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    58be:	0013      	movs	r3, r2
    58c0:	464a      	mov	r2, r9
    58c2:	70da      	strb	r2, [r3, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    58c4:	464b      	mov	r3, r9
    58c6:	0a1b      	lsrs	r3, r3, #8
    58c8:	aa04      	add	r2, sp, #16
    58ca:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    58cc:	464b      	mov	r3, r9
    58ce:	0c1b      	lsrs	r3, r3, #16
    58d0:	7053      	strb	r3, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    58d2:	7963      	ldrb	r3, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    58d4:	09d9      	lsrs	r1, r3, #7
		return NULL;
    58d6:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    58d8:	2900      	cmp	r1, #0
    58da:	d104      	bne.n	58e6 <at25dfx_chip_write_buffer+0x31a>
		return &(ports[port_index]->Group[group_index]);
    58dc:	095a      	lsrs	r2, r3, #5
    58de:	01d2      	lsls	r2, r2, #7
    58e0:	4937      	ldr	r1, [pc, #220]	; (59c0 <at25dfx_chip_write_buffer+0x3f4>)
    58e2:	468c      	mov	ip, r1
    58e4:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    58e6:	4659      	mov	r1, fp
    58e8:	400b      	ands	r3, r1
    58ea:	0031      	movs	r1, r6
    58ec:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    58ee:	6151      	str	r1, [r2, #20]
	vectors[0].data = cmd_buffer;
    58f0:	ab04      	add	r3, sp, #16
    58f2:	602b      	str	r3, [r5, #0]
	vectors[0].length = cmd.command_size;
    58f4:	2304      	movs	r3, #4
    58f6:	80ab      	strh	r3, [r5, #4]
	vectors[1].length = 0;
    58f8:	2300      	movs	r3, #0
    58fa:	81ab      	strh	r3, [r5, #12]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    58fc:	2200      	movs	r2, #0
    58fe:	0029      	movs	r1, r5
    5900:	6820      	ldr	r0, [r4, #0]
    5902:	4b30      	ldr	r3, [pc, #192]	; (59c4 <at25dfx_chip_write_buffer+0x3f8>)
    5904:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5906:	6820      	ldr	r0, [r4, #0]
	return module->status;
    5908:	7983      	ldrb	r3, [r0, #6]
	} while (status == STATUS_BUSY);
    590a:	2b05      	cmp	r3, #5
    590c:	d0fc      	beq.n	5908 <at25dfx_chip_write_buffer+0x33c>
	if (cmd.length) {
    590e:	4653      	mov	r3, sl
    5910:	2b00      	cmp	r3, #0
    5912:	d000      	beq.n	5916 <at25dfx_chip_write_buffer+0x34a>
    5914:	e76e      	b.n	57f4 <at25dfx_chip_write_buffer+0x228>
	port_pin_set_output_level(chip->cs_pin, true);
    5916:	7963      	ldrb	r3, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5918:	09d9      	lsrs	r1, r3, #7
		return NULL;
    591a:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    591c:	2900      	cmp	r1, #0
    591e:	d104      	bne.n	592a <at25dfx_chip_write_buffer+0x35e>
		return &(ports[port_index]->Group[group_index]);
    5920:	095a      	lsrs	r2, r3, #5
    5922:	01d2      	lsls	r2, r2, #7
    5924:	4926      	ldr	r1, [pc, #152]	; (59c0 <at25dfx_chip_write_buffer+0x3f4>)
    5926:	468c      	mov	ip, r1
    5928:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    592a:	4659      	mov	r1, fp
    592c:	400b      	ands	r3, r1
    592e:	0031      	movs	r1, r6
    5930:	4099      	lsls	r1, r3
		port_base->OUTSET.reg = pin_mask;
    5932:	6191      	str	r1, [r2, #24]
	vectors[0].data = &data;
    5934:	ab04      	add	r3, sp, #16
    5936:	602b      	str	r3, [r5, #0]
	vectors[0].length = 1;
    5938:	80ae      	strh	r6, [r5, #4]
	vectors[1].length = 0;
    593a:	2300      	movs	r3, #0
    593c:	81ab      	strh	r3, [r5, #12]
	port_pin_set_output_level(chip->cs_pin, false);
    593e:	7963      	ldrb	r3, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5940:	09d9      	lsrs	r1, r3, #7
		return NULL;
    5942:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    5944:	2900      	cmp	r1, #0
    5946:	d104      	bne.n	5952 <at25dfx_chip_write_buffer+0x386>
		return &(ports[port_index]->Group[group_index]);
    5948:	095a      	lsrs	r2, r3, #5
    594a:	01d2      	lsls	r2, r2, #7
    594c:	491c      	ldr	r1, [pc, #112]	; (59c0 <at25dfx_chip_write_buffer+0x3f4>)
    594e:	468c      	mov	ip, r1
    5950:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5952:	4659      	mov	r1, fp
    5954:	400b      	ands	r3, r1
    5956:	0031      	movs	r1, r6
    5958:	4099      	lsls	r1, r3
		port_base->OUTCLR.reg = pin_mask;
    595a:	6151      	str	r1, [r2, #20]
	data = AT25DFX_COMMAND_READ_STATUS;
    595c:	2305      	movs	r3, #5
    595e:	aa04      	add	r2, sp, #16
    5960:	7013      	strb	r3, [r2, #0]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    5962:	2200      	movs	r2, #0
    5964:	0029      	movs	r1, r5
    5966:	6820      	ldr	r0, [r4, #0]
    5968:	4b16      	ldr	r3, [pc, #88]	; (59c4 <at25dfx_chip_write_buffer+0x3f8>)
    596a:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    596c:	6822      	ldr	r2, [r4, #0]
	return module->status;
    596e:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5970:	2b05      	cmp	r3, #5
    5972:	d0fc      	beq.n	596e <at25dfx_chip_write_buffer+0x3a2>
		status = spi_master_vec_transceive_buffer_job(chip->spi, NULL, vectors);
    5974:	4f13      	ldr	r7, [pc, #76]	; (59c4 <at25dfx_chip_write_buffer+0x3f8>)
    5976:	002a      	movs	r2, r5
    5978:	2100      	movs	r1, #0
    597a:	6820      	ldr	r0, [r4, #0]
    597c:	47b8      	blx	r7
		status = spi_master_vec_get_job_status_wait(chip->spi);
    597e:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5980:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5982:	2b05      	cmp	r3, #5
    5984:	d0fc      	beq.n	5980 <at25dfx_chip_write_buffer+0x3b4>
	} while (data & AT25DFX_STATUS_BUSY);
    5986:	ab04      	add	r3, sp, #16
    5988:	781b      	ldrb	r3, [r3, #0]
    598a:	421e      	tst	r6, r3
    598c:	d1f3      	bne.n	5976 <at25dfx_chip_write_buffer+0x3aa>
	port_pin_set_output_level(chip->cs_pin, true);
    598e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5990:	09d0      	lsrs	r0, r2, #7
		return NULL;
    5992:	2100      	movs	r1, #0
	if (port_index < PORT_INST_NUM) {
    5994:	2800      	cmp	r0, #0
    5996:	d104      	bne.n	59a2 <at25dfx_chip_write_buffer+0x3d6>
		return &(ports[port_index]->Group[group_index]);
    5998:	0951      	lsrs	r1, r2, #5
    599a:	01c9      	lsls	r1, r1, #7
    599c:	4808      	ldr	r0, [pc, #32]	; (59c0 <at25dfx_chip_write_buffer+0x3f4>)
    599e:	4684      	mov	ip, r0
    59a0:	4461      	add	r1, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    59a2:	4658      	mov	r0, fp
    59a4:	4002      	ands	r2, r0
    59a6:	0030      	movs	r0, r6
    59a8:	4090      	lsls	r0, r2
		port_base->OUTSET.reg = pin_mask;
    59aa:	6188      	str	r0, [r1, #24]
	if (data & AT25DFX_STATUS_ERROR) {
    59ac:	069b      	lsls	r3, r3, #26
    59ae:	d400      	bmi.n	59b2 <at25dfx_chip_write_buffer+0x3e6>
    59b0:	e73c      	b.n	582c <at25dfx_chip_write_buffer+0x260>
		return STATUS_ERR_IO;
    59b2:	2010      	movs	r0, #16
	_at25dfx_spi_unlock(chip->spi);
    59b4:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    59b6:	2200      	movs	r2, #0
    59b8:	711a      	strb	r2, [r3, #4]
	return status;
    59ba:	e633      	b.n	5624 <at25dfx_chip_write_buffer+0x58>
	return STATUS_OK;
    59bc:	2000      	movs	r0, #0
    59be:	e7f9      	b.n	59b4 <at25dfx_chip_write_buffer+0x3e8>
    59c0:	41004400 	.word	0x41004400
    59c4:	00009f81 	.word	0x00009f81
    59c8:	0000ece8 	.word	0x0000ece8

000059cc <at25dfx_chip_erase_block>:
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_erase_block(struct at25dfx_chip_module *chip,
		at25dfx_address_t address, enum at25dfx_block_size block_size)
{
    59cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    59ce:	b087      	sub	sp, #28
    59d0:	0004      	movs	r4, r0
    59d2:	000e      	movs	r6, r1
    59d4:	0015      	movs	r5, r2
	switch (type) {
    59d6:	7903      	ldrb	r3, [r0, #4]
    59d8:	2b09      	cmp	r3, #9
    59da:	d900      	bls.n	59de <at25dfx_chip_erase_block+0x12>
    59dc:	e0dc      	b.n	5b98 <at25dfx_chip_erase_block+0x1cc>
    59de:	009b      	lsls	r3, r3, #2
    59e0:	4a70      	ldr	r2, [pc, #448]	; (5ba4 <at25dfx_chip_erase_block+0x1d8>)
    59e2:	58d3      	ldr	r3, [r2, r3]
    59e4:	469f      	mov	pc, r3
		return 256 * 1024UL;
    59e6:	2380      	movs	r3, #128	; 0x80
    59e8:	02db      	lsls	r3, r3, #11
    59ea:	e010      	b.n	5a0e <at25dfx_chip_erase_block+0x42>
		return 512 * 1024UL;
    59ec:	2380      	movs	r3, #128	; 0x80
    59ee:	031b      	lsls	r3, r3, #12
    59f0:	e00d      	b.n	5a0e <at25dfx_chip_erase_block+0x42>
		return 1024 * 1024UL;
    59f2:	2380      	movs	r3, #128	; 0x80
    59f4:	035b      	lsls	r3, r3, #13
    59f6:	e00a      	b.n	5a0e <at25dfx_chip_erase_block+0x42>
		return 2048 * 1024UL;
    59f8:	2380      	movs	r3, #128	; 0x80
    59fa:	039b      	lsls	r3, r3, #14
    59fc:	e007      	b.n	5a0e <at25dfx_chip_erase_block+0x42>
		return 4096 * 1024UL;
    59fe:	2380      	movs	r3, #128	; 0x80
    5a00:	03db      	lsls	r3, r3, #15
    5a02:	e004      	b.n	5a0e <at25dfx_chip_erase_block+0x42>
		return 8192 * 1024UL;
    5a04:	2380      	movs	r3, #128	; 0x80
    5a06:	041b      	lsls	r3, r3, #16
    5a08:	e001      	b.n	5a0e <at25dfx_chip_erase_block+0x42>
		return 64 * 1024UL;
    5a0a:	2380      	movs	r3, #128	; 0x80
    5a0c:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if (address >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    5a0e:	2017      	movs	r0, #23
	if (address >= _at25dfx_get_device_size(chip->type)) {
    5a10:	42b3      	cmp	r3, r6
    5a12:	d801      	bhi.n	5a18 <at25dfx_chip_erase_block+0x4c>
	status = _at25dfx_chip_get_nonbusy_status(chip);

	_at25dfx_spi_unlock(chip->spi);

	return status;
}
    5a14:	b007      	add	sp, #28
    5a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    5a18:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
    5a1a:	4b63      	ldr	r3, [pc, #396]	; (5ba8 <at25dfx_chip_erase_block+0x1dc>)
    5a1c:	4798      	blx	r3
	if (module->locked) {
    5a1e:	793b      	ldrb	r3, [r7, #4]
    5a20:	2b00      	cmp	r3, #0
    5a22:	d000      	beq.n	5a26 <at25dfx_chip_erase_block+0x5a>
    5a24:	e0ba      	b.n	5b9c <at25dfx_chip_erase_block+0x1d0>
		module->locked = true;
    5a26:	3301      	adds	r3, #1
    5a28:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
    5a2a:	4b60      	ldr	r3, [pc, #384]	; (5bac <at25dfx_chip_erase_block+0x1e0>)
    5a2c:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    5a2e:	2306      	movs	r3, #6
    5a30:	466a      	mov	r2, sp
    5a32:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5a34:	7961      	ldrb	r1, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5a36:	09ca      	lsrs	r2, r1, #7
		return NULL;
    5a38:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5a3a:	2a00      	cmp	r2, #0
    5a3c:	d104      	bne.n	5a48 <at25dfx_chip_erase_block+0x7c>
		return &(ports[port_index]->Group[group_index]);
    5a3e:	094b      	lsrs	r3, r1, #5
    5a40:	01db      	lsls	r3, r3, #7
    5a42:	4a5b      	ldr	r2, [pc, #364]	; (5bb0 <at25dfx_chip_erase_block+0x1e4>)
    5a44:	4694      	mov	ip, r2
    5a46:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a48:	221f      	movs	r2, #31
    5a4a:	400a      	ands	r2, r1
    5a4c:	2001      	movs	r0, #1
    5a4e:	0001      	movs	r1, r0
    5a50:	4091      	lsls	r1, r2
		port_base->OUTCLR.reg = pin_mask;
    5a52:	6159      	str	r1, [r3, #20]
	vectors[0].data = cmd_buffer;
    5a54:	a902      	add	r1, sp, #8
    5a56:	466b      	mov	r3, sp
    5a58:	9302      	str	r3, [sp, #8]
	vectors[0].length = cmd.command_size;
    5a5a:	8088      	strh	r0, [r1, #4]
	vectors[1].length = 0;
    5a5c:	2300      	movs	r3, #0
    5a5e:	818b      	strh	r3, [r1, #12]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    5a60:	2200      	movs	r2, #0
    5a62:	6820      	ldr	r0, [r4, #0]
    5a64:	4b53      	ldr	r3, [pc, #332]	; (5bb4 <at25dfx_chip_erase_block+0x1e8>)
    5a66:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5a68:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5a6a:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5a6c:	2b05      	cmp	r3, #5
    5a6e:	d0fc      	beq.n	5a6a <at25dfx_chip_erase_block+0x9e>
	port_pin_set_output_level(chip->cs_pin, true);
    5a70:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5a72:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5a74:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5a76:	2900      	cmp	r1, #0
    5a78:	d104      	bne.n	5a84 <at25dfx_chip_erase_block+0xb8>
		return &(ports[port_index]->Group[group_index]);
    5a7a:	0953      	lsrs	r3, r2, #5
    5a7c:	01db      	lsls	r3, r3, #7
    5a7e:	494c      	ldr	r1, [pc, #304]	; (5bb0 <at25dfx_chip_erase_block+0x1e4>)
    5a80:	468c      	mov	ip, r1
    5a82:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5a84:	211f      	movs	r1, #31
    5a86:	4011      	ands	r1, r2
    5a88:	2201      	movs	r2, #1
    5a8a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5a8c:	619a      	str	r2, [r3, #24]
	switch (block_size) {
    5a8e:	2d01      	cmp	r5, #1
    5a90:	d006      	beq.n	5aa0 <at25dfx_chip_erase_block+0xd4>
    5a92:	2d00      	cmp	r5, #0
    5a94:	d07e      	beq.n	5b94 <at25dfx_chip_erase_block+0x1c8>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_64KB;
    5a96:	23d8      	movs	r3, #216	; 0xd8
	switch (block_size) {
    5a98:	2d02      	cmp	r5, #2
    5a9a:	d002      	beq.n	5aa2 <at25dfx_chip_erase_block+0xd6>
		cmd.opcode = (enum at25dfx_command_opcode)0;
    5a9c:	2300      	movs	r3, #0
    5a9e:	e000      	b.n	5aa2 <at25dfx_chip_erase_block+0xd6>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_32KB;
    5aa0:	2352      	movs	r3, #82	; 0x52
	cmd_buffer[0] = cmd.opcode;
    5aa2:	466a      	mov	r2, sp
    5aa4:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    5aa6:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    5aa8:	0a33      	lsrs	r3, r6, #8
    5aaa:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    5aac:	0c36      	lsrs	r6, r6, #16
    5aae:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    5ab0:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5ab2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5ab4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5ab6:	2900      	cmp	r1, #0
    5ab8:	d104      	bne.n	5ac4 <at25dfx_chip_erase_block+0xf8>
		return &(ports[port_index]->Group[group_index]);
    5aba:	0953      	lsrs	r3, r2, #5
    5abc:	01db      	lsls	r3, r3, #7
    5abe:	493c      	ldr	r1, [pc, #240]	; (5bb0 <at25dfx_chip_erase_block+0x1e4>)
    5ac0:	468c      	mov	ip, r1
    5ac2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ac4:	211f      	movs	r1, #31
    5ac6:	4011      	ands	r1, r2
    5ac8:	2201      	movs	r2, #1
    5aca:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5acc:	615a      	str	r2, [r3, #20]
	vectors[0].data = cmd_buffer;
    5ace:	a902      	add	r1, sp, #8
    5ad0:	466b      	mov	r3, sp
    5ad2:	9302      	str	r3, [sp, #8]
	vectors[0].length = cmd.command_size;
    5ad4:	2304      	movs	r3, #4
    5ad6:	808b      	strh	r3, [r1, #4]
	vectors[1].length = 0;
    5ad8:	2300      	movs	r3, #0
    5ada:	818b      	strh	r3, [r1, #12]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    5adc:	2200      	movs	r2, #0
    5ade:	6820      	ldr	r0, [r4, #0]
    5ae0:	4b34      	ldr	r3, [pc, #208]	; (5bb4 <at25dfx_chip_erase_block+0x1e8>)
    5ae2:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5ae4:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5ae6:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5ae8:	2b05      	cmp	r3, #5
    5aea:	d0fc      	beq.n	5ae6 <at25dfx_chip_erase_block+0x11a>
	port_pin_set_output_level(chip->cs_pin, true);
    5aec:	7961      	ldrb	r1, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5aee:	09ca      	lsrs	r2, r1, #7
		return NULL;
    5af0:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5af2:	2a00      	cmp	r2, #0
    5af4:	d104      	bne.n	5b00 <at25dfx_chip_erase_block+0x134>
		return &(ports[port_index]->Group[group_index]);
    5af6:	094b      	lsrs	r3, r1, #5
    5af8:	01db      	lsls	r3, r3, #7
    5afa:	4a2d      	ldr	r2, [pc, #180]	; (5bb0 <at25dfx_chip_erase_block+0x1e4>)
    5afc:	4694      	mov	ip, r2
    5afe:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b00:	221f      	movs	r2, #31
    5b02:	400a      	ands	r2, r1
    5b04:	2101      	movs	r1, #1
    5b06:	0008      	movs	r0, r1
    5b08:	4090      	lsls	r0, r2
		port_base->OUTSET.reg = pin_mask;
    5b0a:	6198      	str	r0, [r3, #24]
	vectors[0].data = &data;
    5b0c:	ab02      	add	r3, sp, #8
    5b0e:	466a      	mov	r2, sp
    5b10:	9202      	str	r2, [sp, #8]
	vectors[0].length = 1;
    5b12:	8099      	strh	r1, [r3, #4]
	vectors[1].length = 0;
    5b14:	2200      	movs	r2, #0
    5b16:	819a      	strh	r2, [r3, #12]
	port_pin_set_output_level(chip->cs_pin, false);
    5b18:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5b1a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b1c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b1e:	2900      	cmp	r1, #0
    5b20:	d104      	bne.n	5b2c <at25dfx_chip_erase_block+0x160>
		return &(ports[port_index]->Group[group_index]);
    5b22:	0953      	lsrs	r3, r2, #5
    5b24:	01db      	lsls	r3, r3, #7
    5b26:	4922      	ldr	r1, [pc, #136]	; (5bb0 <at25dfx_chip_erase_block+0x1e4>)
    5b28:	468c      	mov	ip, r1
    5b2a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b2c:	211f      	movs	r1, #31
    5b2e:	4011      	ands	r1, r2
    5b30:	2201      	movs	r2, #1
    5b32:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5b34:	615a      	str	r2, [r3, #20]
	data = AT25DFX_COMMAND_READ_STATUS;
    5b36:	2305      	movs	r3, #5
    5b38:	466a      	mov	r2, sp
    5b3a:	7013      	strb	r3, [r2, #0]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    5b3c:	2200      	movs	r2, #0
    5b3e:	a902      	add	r1, sp, #8
    5b40:	6820      	ldr	r0, [r4, #0]
    5b42:	4b1c      	ldr	r3, [pc, #112]	; (5bb4 <at25dfx_chip_erase_block+0x1e8>)
    5b44:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5b46:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5b48:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5b4a:	2b05      	cmp	r3, #5
    5b4c:	d0fc      	beq.n	5b48 <at25dfx_chip_erase_block+0x17c>
		status = spi_master_vec_transceive_buffer_job(chip->spi, NULL, vectors);
    5b4e:	4d19      	ldr	r5, [pc, #100]	; (5bb4 <at25dfx_chip_erase_block+0x1e8>)
    5b50:	aa02      	add	r2, sp, #8
    5b52:	2100      	movs	r1, #0
    5b54:	6820      	ldr	r0, [r4, #0]
    5b56:	47a8      	blx	r5
		status = spi_master_vec_get_job_status_wait(chip->spi);
    5b58:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5b5a:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5b5c:	2b05      	cmp	r3, #5
    5b5e:	d0fc      	beq.n	5b5a <at25dfx_chip_erase_block+0x18e>
	} while (data & AT25DFX_STATUS_BUSY);
    5b60:	466b      	mov	r3, sp
    5b62:	7818      	ldrb	r0, [r3, #0]
    5b64:	07c3      	lsls	r3, r0, #31
    5b66:	d4f3      	bmi.n	5b50 <at25dfx_chip_erase_block+0x184>
	port_pin_set_output_level(chip->cs_pin, true);
    5b68:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5b6a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5b6c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5b6e:	2900      	cmp	r1, #0
    5b70:	d104      	bne.n	5b7c <at25dfx_chip_erase_block+0x1b0>
		return &(ports[port_index]->Group[group_index]);
    5b72:	0953      	lsrs	r3, r2, #5
    5b74:	01db      	lsls	r3, r3, #7
    5b76:	490e      	ldr	r1, [pc, #56]	; (5bb0 <at25dfx_chip_erase_block+0x1e4>)
    5b78:	468c      	mov	ip, r1
    5b7a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b7c:	211f      	movs	r1, #31
    5b7e:	4011      	ands	r1, r2
    5b80:	2201      	movs	r2, #1
    5b82:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5b84:	619a      	str	r2, [r3, #24]
	if (data & AT25DFX_STATUS_ERROR) {
    5b86:	0680      	lsls	r0, r0, #26
	return STATUS_OK;
    5b88:	0fc0      	lsrs	r0, r0, #31
    5b8a:	0100      	lsls	r0, r0, #4
	_at25dfx_spi_unlock(chip->spi);
    5b8c:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    5b8e:	2200      	movs	r2, #0
    5b90:	711a      	strb	r2, [r3, #4]
	return status;
    5b92:	e73f      	b.n	5a14 <at25dfx_chip_erase_block+0x48>
		cmd.opcode = AT25DFX_COMMAND_ERASE_BLOCK_4KB;
    5b94:	2320      	movs	r3, #32
    5b96:	e784      	b.n	5aa2 <at25dfx_chip_erase_block+0xd6>
		return STATUS_ERR_INVALID_ARG;
    5b98:	2017      	movs	r0, #23
    5b9a:	e73b      	b.n	5a14 <at25dfx_chip_erase_block+0x48>
    5b9c:	4b03      	ldr	r3, [pc, #12]	; (5bac <at25dfx_chip_erase_block+0x1e0>)
    5b9e:	4798      	blx	r3
		return status;
    5ba0:	2005      	movs	r0, #5
    5ba2:	e737      	b.n	5a14 <at25dfx_chip_erase_block+0x48>
    5ba4:	0000ed14 	.word	0x0000ed14
    5ba8:	00009045 	.word	0x00009045
    5bac:	00009085 	.word	0x00009085
    5bb0:	41004400 	.word	0x41004400
    5bb4:	00009f81 	.word	0x00009f81

00005bb8 <at25dfx_chip_set_sector_protect>:
 * \retval STATUS_ERR_INVALID_ARG if address is out of bounds.
 */
enum status_code at25dfx_chip_set_sector_protect(
		struct at25dfx_chip_module *chip, at25dfx_address_t address,
		bool protect)
{
    5bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bba:	b087      	sub	sp, #28
    5bbc:	0004      	movs	r4, r0
    5bbe:	000e      	movs	r6, r1
    5bc0:	0015      	movs	r5, r2
	switch (type) {
    5bc2:	7903      	ldrb	r3, [r0, #4]
    5bc4:	2b09      	cmp	r3, #9
    5bc6:	d900      	bls.n	5bca <at25dfx_chip_set_sector_protect+0x12>
    5bc8:	e093      	b.n	5cf2 <at25dfx_chip_set_sector_protect+0x13a>
    5bca:	009b      	lsls	r3, r3, #2
    5bcc:	4a4c      	ldr	r2, [pc, #304]	; (5d00 <at25dfx_chip_set_sector_protect+0x148>)
    5bce:	58d3      	ldr	r3, [r2, r3]
    5bd0:	469f      	mov	pc, r3
		return 256 * 1024UL;
    5bd2:	2380      	movs	r3, #128	; 0x80
    5bd4:	02db      	lsls	r3, r3, #11
    5bd6:	e010      	b.n	5bfa <at25dfx_chip_set_sector_protect+0x42>
		return 512 * 1024UL;
    5bd8:	2380      	movs	r3, #128	; 0x80
    5bda:	031b      	lsls	r3, r3, #12
    5bdc:	e00d      	b.n	5bfa <at25dfx_chip_set_sector_protect+0x42>
		return 1024 * 1024UL;
    5bde:	2380      	movs	r3, #128	; 0x80
    5be0:	035b      	lsls	r3, r3, #13
    5be2:	e00a      	b.n	5bfa <at25dfx_chip_set_sector_protect+0x42>
		return 2048 * 1024UL;
    5be4:	2380      	movs	r3, #128	; 0x80
    5be6:	039b      	lsls	r3, r3, #14
    5be8:	e007      	b.n	5bfa <at25dfx_chip_set_sector_protect+0x42>
		return 4096 * 1024UL;
    5bea:	2380      	movs	r3, #128	; 0x80
    5bec:	03db      	lsls	r3, r3, #15
    5bee:	e004      	b.n	5bfa <at25dfx_chip_set_sector_protect+0x42>
		return 8192 * 1024UL;
    5bf0:	2380      	movs	r3, #128	; 0x80
    5bf2:	041b      	lsls	r3, r3, #16
    5bf4:	e001      	b.n	5bfa <at25dfx_chip_set_sector_protect+0x42>
		return 64 * 1024UL;
    5bf6:	2380      	movs	r3, #128	; 0x80
    5bf8:	025b      	lsls	r3, r3, #9
	struct at25dfx_command cmd;

	Assert(chip);

	if ((address) >= _at25dfx_get_device_size(chip->type)) {
		return STATUS_ERR_INVALID_ARG;
    5bfa:	2017      	movs	r0, #23
	if ((address) >= _at25dfx_get_device_size(chip->type)) {
    5bfc:	42b3      	cmp	r3, r6
    5bfe:	d801      	bhi.n	5c04 <at25dfx_chip_set_sector_protect+0x4c>
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);

	return STATUS_OK;
}
    5c00:	b007      	add	sp, #28
    5c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = _at25dfx_spi_lock(chip->spi);
    5c04:	6827      	ldr	r7, [r4, #0]
	cpu_irq_enter_critical();
    5c06:	4b3f      	ldr	r3, [pc, #252]	; (5d04 <at25dfx_chip_set_sector_protect+0x14c>)
    5c08:	4798      	blx	r3
	if (module->locked) {
    5c0a:	793b      	ldrb	r3, [r7, #4]
    5c0c:	2b00      	cmp	r3, #0
    5c0e:	d172      	bne.n	5cf6 <at25dfx_chip_set_sector_protect+0x13e>
		module->locked = true;
    5c10:	3301      	adds	r3, #1
    5c12:	713b      	strb	r3, [r7, #4]
	cpu_irq_leave_critical();
    5c14:	4b3c      	ldr	r3, [pc, #240]	; (5d08 <at25dfx_chip_set_sector_protect+0x150>)
    5c16:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    5c18:	2306      	movs	r3, #6
    5c1a:	466a      	mov	r2, sp
    5c1c:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5c1e:	7961      	ldrb	r1, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5c20:	09ca      	lsrs	r2, r1, #7
		return NULL;
    5c22:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c24:	2a00      	cmp	r2, #0
    5c26:	d104      	bne.n	5c32 <at25dfx_chip_set_sector_protect+0x7a>
		return &(ports[port_index]->Group[group_index]);
    5c28:	094b      	lsrs	r3, r1, #5
    5c2a:	01db      	lsls	r3, r3, #7
    5c2c:	4a37      	ldr	r2, [pc, #220]	; (5d0c <at25dfx_chip_set_sector_protect+0x154>)
    5c2e:	4694      	mov	ip, r2
    5c30:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c32:	221f      	movs	r2, #31
    5c34:	400a      	ands	r2, r1
    5c36:	2001      	movs	r0, #1
    5c38:	0001      	movs	r1, r0
    5c3a:	4091      	lsls	r1, r2
		port_base->OUTCLR.reg = pin_mask;
    5c3c:	6159      	str	r1, [r3, #20]
	vectors[0].data = cmd_buffer;
    5c3e:	a902      	add	r1, sp, #8
    5c40:	466b      	mov	r3, sp
    5c42:	9302      	str	r3, [sp, #8]
	vectors[0].length = cmd.command_size;
    5c44:	8088      	strh	r0, [r1, #4]
	vectors[1].length = 0;
    5c46:	2300      	movs	r3, #0
    5c48:	818b      	strh	r3, [r1, #12]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    5c4a:	2200      	movs	r2, #0
    5c4c:	6820      	ldr	r0, [r4, #0]
    5c4e:	4b30      	ldr	r3, [pc, #192]	; (5d10 <at25dfx_chip_set_sector_protect+0x158>)
    5c50:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5c52:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5c54:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5c56:	2b05      	cmp	r3, #5
    5c58:	d0fc      	beq.n	5c54 <at25dfx_chip_set_sector_protect+0x9c>
	port_pin_set_output_level(chip->cs_pin, true);
    5c5a:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5c5c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5c5e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c60:	2900      	cmp	r1, #0
    5c62:	d104      	bne.n	5c6e <at25dfx_chip_set_sector_protect+0xb6>
		return &(ports[port_index]->Group[group_index]);
    5c64:	0953      	lsrs	r3, r2, #5
    5c66:	01db      	lsls	r3, r3, #7
    5c68:	4928      	ldr	r1, [pc, #160]	; (5d0c <at25dfx_chip_set_sector_protect+0x154>)
    5c6a:	468c      	mov	ip, r1
    5c6c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5c6e:	211f      	movs	r1, #31
    5c70:	4011      	ands	r1, r2
    5c72:	2201      	movs	r2, #1
    5c74:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5c76:	619a      	str	r2, [r3, #24]
	cmd.opcode = protect ?
    5c78:	2336      	movs	r3, #54	; 0x36
    5c7a:	2d00      	cmp	r5, #0
    5c7c:	d100      	bne.n	5c80 <at25dfx_chip_set_sector_protect+0xc8>
    5c7e:	3303      	adds	r3, #3
	cmd_buffer[0] = cmd.opcode;
    5c80:	466a      	mov	r2, sp
    5c82:	7013      	strb	r3, [r2, #0]
		cmd_buffer[3] = cmd.address & 0xff;
    5c84:	70d6      	strb	r6, [r2, #3]
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
    5c86:	0a33      	lsrs	r3, r6, #8
    5c88:	7093      	strb	r3, [r2, #2]
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
    5c8a:	0c36      	lsrs	r6, r6, #16
    5c8c:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, false);
    5c8e:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5c90:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5c92:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5c94:	2900      	cmp	r1, #0
    5c96:	d104      	bne.n	5ca2 <at25dfx_chip_set_sector_protect+0xea>
		return &(ports[port_index]->Group[group_index]);
    5c98:	0953      	lsrs	r3, r2, #5
    5c9a:	01db      	lsls	r3, r3, #7
    5c9c:	491b      	ldr	r1, [pc, #108]	; (5d0c <at25dfx_chip_set_sector_protect+0x154>)
    5c9e:	468c      	mov	ip, r1
    5ca0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5ca2:	211f      	movs	r1, #31
    5ca4:	4011      	ands	r1, r2
    5ca6:	2201      	movs	r2, #1
    5ca8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    5caa:	615a      	str	r2, [r3, #20]
	vectors[0].data = cmd_buffer;
    5cac:	a902      	add	r1, sp, #8
    5cae:	466b      	mov	r3, sp
    5cb0:	9302      	str	r3, [sp, #8]
	vectors[0].length = cmd.command_size;
    5cb2:	2304      	movs	r3, #4
    5cb4:	808b      	strh	r3, [r1, #4]
	vectors[1].length = 0;
    5cb6:	2300      	movs	r3, #0
    5cb8:	818b      	strh	r3, [r1, #12]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    5cba:	2200      	movs	r2, #0
    5cbc:	6820      	ldr	r0, [r4, #0]
    5cbe:	4b14      	ldr	r3, [pc, #80]	; (5d10 <at25dfx_chip_set_sector_protect+0x158>)
    5cc0:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5cc2:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5cc4:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5cc6:	2b05      	cmp	r3, #5
    5cc8:	d0fc      	beq.n	5cc4 <at25dfx_chip_set_sector_protect+0x10c>
	port_pin_set_output_level(chip->cs_pin, true);
    5cca:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5ccc:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5cce:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5cd0:	2900      	cmp	r1, #0
    5cd2:	d104      	bne.n	5cde <at25dfx_chip_set_sector_protect+0x126>
		return &(ports[port_index]->Group[group_index]);
    5cd4:	0953      	lsrs	r3, r2, #5
    5cd6:	01db      	lsls	r3, r3, #7
    5cd8:	490c      	ldr	r1, [pc, #48]	; (5d0c <at25dfx_chip_set_sector_protect+0x154>)
    5cda:	468c      	mov	ip, r1
    5cdc:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5cde:	211f      	movs	r1, #31
    5ce0:	4011      	ands	r1, r2
    5ce2:	2201      	movs	r2, #1
    5ce4:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5ce6:	619a      	str	r2, [r3, #24]
	_at25dfx_spi_unlock(chip->spi);
    5ce8:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    5cea:	2200      	movs	r2, #0
    5cec:	711a      	strb	r2, [r3, #4]
	return STATUS_OK;
    5cee:	2000      	movs	r0, #0
    5cf0:	e786      	b.n	5c00 <at25dfx_chip_set_sector_protect+0x48>
		return STATUS_ERR_INVALID_ARG;
    5cf2:	2017      	movs	r0, #23
    5cf4:	e784      	b.n	5c00 <at25dfx_chip_set_sector_protect+0x48>
    5cf6:	4b04      	ldr	r3, [pc, #16]	; (5d08 <at25dfx_chip_set_sector_protect+0x150>)
    5cf8:	4798      	blx	r3
		return status;
    5cfa:	2005      	movs	r0, #5
    5cfc:	e780      	b.n	5c00 <at25dfx_chip_set_sector_protect+0x48>
    5cfe:	46c0      	nop			; (mov r8, r8)
    5d00:	0000ed3c 	.word	0x0000ed3c
    5d04:	00009045 	.word	0x00009045
    5d08:	00009085 	.word	0x00009085
    5d0c:	41004400 	.word	0x41004400
    5d10:	00009f81 	.word	0x00009f81

00005d14 <at25dfx_chip_sleep>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_sleep(struct at25dfx_chip_module *chip)
{
    5d14:	b530      	push	{r4, r5, lr}
    5d16:	b087      	sub	sp, #28
    5d18:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    5d1a:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    5d1c:	4b21      	ldr	r3, [pc, #132]	; (5da4 <at25dfx_chip_sleep+0x90>)
    5d1e:	4798      	blx	r3
	if (module->locked) {
    5d20:	792b      	ldrb	r3, [r5, #4]
    5d22:	2b00      	cmp	r3, #0
    5d24:	d138      	bne.n	5d98 <at25dfx_chip_sleep+0x84>
		module->locked = true;
    5d26:	3301      	adds	r3, #1
    5d28:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    5d2a:	4b1f      	ldr	r3, [pc, #124]	; (5da8 <at25dfx_chip_sleep+0x94>)
    5d2c:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    5d2e:	23b9      	movs	r3, #185	; 0xb9
    5d30:	466a      	mov	r2, sp
    5d32:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5d34:	7961      	ldrb	r1, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5d36:	09ca      	lsrs	r2, r1, #7
		return NULL;
    5d38:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5d3a:	2a00      	cmp	r2, #0
    5d3c:	d104      	bne.n	5d48 <at25dfx_chip_sleep+0x34>
		return &(ports[port_index]->Group[group_index]);
    5d3e:	094b      	lsrs	r3, r1, #5
    5d40:	01db      	lsls	r3, r3, #7
    5d42:	4a1a      	ldr	r2, [pc, #104]	; (5dac <at25dfx_chip_sleep+0x98>)
    5d44:	4694      	mov	ip, r2
    5d46:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5d48:	221f      	movs	r2, #31
    5d4a:	400a      	ands	r2, r1
    5d4c:	2001      	movs	r0, #1
    5d4e:	0001      	movs	r1, r0
    5d50:	4091      	lsls	r1, r2
		port_base->OUTCLR.reg = pin_mask;
    5d52:	6159      	str	r1, [r3, #20]
	vectors[0].data = cmd_buffer;
    5d54:	a902      	add	r1, sp, #8
    5d56:	466b      	mov	r3, sp
    5d58:	9302      	str	r3, [sp, #8]
	vectors[0].length = cmd.command_size;
    5d5a:	8088      	strh	r0, [r1, #4]
	vectors[1].length = 0;
    5d5c:	2300      	movs	r3, #0
    5d5e:	818b      	strh	r3, [r1, #12]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    5d60:	2200      	movs	r2, #0
    5d62:	6820      	ldr	r0, [r4, #0]
    5d64:	4b12      	ldr	r3, [pc, #72]	; (5db0 <at25dfx_chip_sleep+0x9c>)
    5d66:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5d68:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5d6a:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5d6c:	2b05      	cmp	r3, #5
    5d6e:	d0fc      	beq.n	5d6a <at25dfx_chip_sleep+0x56>
	port_pin_set_output_level(chip->cs_pin, true);
    5d70:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5d72:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5d74:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5d76:	2900      	cmp	r1, #0
    5d78:	d104      	bne.n	5d84 <at25dfx_chip_sleep+0x70>
		return &(ports[port_index]->Group[group_index]);
    5d7a:	0953      	lsrs	r3, r2, #5
    5d7c:	01db      	lsls	r3, r3, #7
    5d7e:	490b      	ldr	r1, [pc, #44]	; (5dac <at25dfx_chip_sleep+0x98>)
    5d80:	468c      	mov	ip, r1
    5d82:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5d84:	211f      	movs	r1, #31
    5d86:	4011      	ands	r1, r2
    5d88:	2201      	movs	r2, #1
    5d8a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5d8c:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    5d8e:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    5d90:	2200      	movs	r2, #0
    5d92:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    5d94:	2000      	movs	r0, #0
    5d96:	e002      	b.n	5d9e <at25dfx_chip_sleep+0x8a>
    5d98:	4b03      	ldr	r3, [pc, #12]	; (5da8 <at25dfx_chip_sleep+0x94>)
    5d9a:	4798      	blx	r3
		return status;
    5d9c:	2005      	movs	r0, #5
}
    5d9e:	b007      	add	sp, #28
    5da0:	bd30      	pop	{r4, r5, pc}
    5da2:	46c0      	nop			; (mov r8, r8)
    5da4:	00009045 	.word	0x00009045
    5da8:	00009085 	.word	0x00009085
    5dac:	41004400 	.word	0x41004400
    5db0:	00009f81 	.word	0x00009f81

00005db4 <at25dfx_chip_wake>:
 * \return Status of operation.
 * \retval STATUS_OK if write operation succeeded.
 * \retval STATUS_BUSY if SPI is busy with some other operation.
 */
enum status_code at25dfx_chip_wake(struct at25dfx_chip_module *chip)
{
    5db4:	b530      	push	{r4, r5, lr}
    5db6:	b087      	sub	sp, #28
    5db8:	0004      	movs	r4, r0
	enum status_code status;
	struct at25dfx_command cmd;

	Assert(chip);

	status = _at25dfx_spi_lock(chip->spi);
    5dba:	6805      	ldr	r5, [r0, #0]
	cpu_irq_enter_critical();
    5dbc:	4b21      	ldr	r3, [pc, #132]	; (5e44 <at25dfx_chip_wake+0x90>)
    5dbe:	4798      	blx	r3
	if (module->locked) {
    5dc0:	792b      	ldrb	r3, [r5, #4]
    5dc2:	2b00      	cmp	r3, #0
    5dc4:	d138      	bne.n	5e38 <at25dfx_chip_wake+0x84>
		module->locked = true;
    5dc6:	3301      	adds	r3, #1
    5dc8:	712b      	strb	r3, [r5, #4]
	cpu_irq_leave_critical();
    5dca:	4b1f      	ldr	r3, [pc, #124]	; (5e48 <at25dfx_chip_wake+0x94>)
    5dcc:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
    5dce:	23ab      	movs	r3, #171	; 0xab
    5dd0:	466a      	mov	r2, sp
    5dd2:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
    5dd4:	7961      	ldrb	r1, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5dd6:	09ca      	lsrs	r2, r1, #7
		return NULL;
    5dd8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5dda:	2a00      	cmp	r2, #0
    5ddc:	d104      	bne.n	5de8 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
    5dde:	094b      	lsrs	r3, r1, #5
    5de0:	01db      	lsls	r3, r3, #7
    5de2:	4a1a      	ldr	r2, [pc, #104]	; (5e4c <at25dfx_chip_wake+0x98>)
    5de4:	4694      	mov	ip, r2
    5de6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5de8:	221f      	movs	r2, #31
    5dea:	400a      	ands	r2, r1
    5dec:	2001      	movs	r0, #1
    5dee:	0001      	movs	r1, r0
    5df0:	4091      	lsls	r1, r2
		port_base->OUTCLR.reg = pin_mask;
    5df2:	6159      	str	r1, [r3, #20]
	vectors[0].data = cmd_buffer;
    5df4:	a902      	add	r1, sp, #8
    5df6:	466b      	mov	r3, sp
    5df8:	9302      	str	r3, [sp, #8]
	vectors[0].length = cmd.command_size;
    5dfa:	8088      	strh	r0, [r1, #4]
	vectors[1].length = 0;
    5dfc:	2300      	movs	r3, #0
    5dfe:	818b      	strh	r3, [r1, #12]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
    5e00:	2200      	movs	r2, #0
    5e02:	6820      	ldr	r0, [r4, #0]
    5e04:	4b12      	ldr	r3, [pc, #72]	; (5e50 <at25dfx_chip_wake+0x9c>)
    5e06:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
    5e08:	6822      	ldr	r2, [r4, #0]
	return module->status;
    5e0a:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
    5e0c:	2b05      	cmp	r3, #5
    5e0e:	d0fc      	beq.n	5e0a <at25dfx_chip_wake+0x56>
	port_pin_set_output_level(chip->cs_pin, true);
    5e10:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
    5e12:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5e14:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5e16:	2900      	cmp	r1, #0
    5e18:	d104      	bne.n	5e24 <at25dfx_chip_wake+0x70>
		return &(ports[port_index]->Group[group_index]);
    5e1a:	0953      	lsrs	r3, r2, #5
    5e1c:	01db      	lsls	r3, r3, #7
    5e1e:	490b      	ldr	r1, [pc, #44]	; (5e4c <at25dfx_chip_wake+0x98>)
    5e20:	468c      	mov	ip, r1
    5e22:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5e24:	211f      	movs	r1, #31
    5e26:	4011      	ands	r1, r2
    5e28:	2201      	movs	r2, #1
    5e2a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    5e2c:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
    5e2e:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
    5e30:	2200      	movs	r2, #0
    5e32:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    5e34:	2000      	movs	r0, #0
    5e36:	e002      	b.n	5e3e <at25dfx_chip_wake+0x8a>
    5e38:	4b03      	ldr	r3, [pc, #12]	; (5e48 <at25dfx_chip_wake+0x94>)
    5e3a:	4798      	blx	r3
		return status;
    5e3c:	2005      	movs	r0, #5
    5e3e:	b007      	add	sp, #28
    5e40:	bd30      	pop	{r4, r5, pc}
    5e42:	46c0      	nop			; (mov r8, r8)
    5e44:	00009045 	.word	0x00009045
    5e48:	00009085 	.word	0x00009085
    5e4c:	41004400 	.word	0x41004400
    5e50:	00009f81 	.word	0x00009f81

00005e54 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    5e54:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    5e56:	2000      	movs	r0, #0
    5e58:	4b08      	ldr	r3, [pc, #32]	; (5e7c <delay_init+0x28>)
    5e5a:	4798      	blx	r3
    5e5c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    5e5e:	4c08      	ldr	r4, [pc, #32]	; (5e80 <delay_init+0x2c>)
    5e60:	21fa      	movs	r1, #250	; 0xfa
    5e62:	0089      	lsls	r1, r1, #2
    5e64:	47a0      	blx	r4
    5e66:	4b07      	ldr	r3, [pc, #28]	; (5e84 <delay_init+0x30>)
    5e68:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    5e6a:	4907      	ldr	r1, [pc, #28]	; (5e88 <delay_init+0x34>)
    5e6c:	0028      	movs	r0, r5
    5e6e:	47a0      	blx	r4
    5e70:	4b06      	ldr	r3, [pc, #24]	; (5e8c <delay_init+0x38>)
    5e72:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    5e74:	2205      	movs	r2, #5
    5e76:	4b06      	ldr	r3, [pc, #24]	; (5e90 <delay_init+0x3c>)
    5e78:	601a      	str	r2, [r3, #0]
}
    5e7a:	bd70      	pop	{r4, r5, r6, pc}
    5e7c:	0000aaad 	.word	0x0000aaad
    5e80:	0000c8d5 	.word	0x0000c8d5
    5e84:	20000000 	.word	0x20000000
    5e88:	000f4240 	.word	0x000f4240
    5e8c:	20000004 	.word	0x20000004
    5e90:	e000e010 	.word	0xe000e010

00005e94 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    5e94:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    5e96:	4b08      	ldr	r3, [pc, #32]	; (5eb8 <delay_cycles_ms+0x24>)
    5e98:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    5e9a:	4a08      	ldr	r2, [pc, #32]	; (5ebc <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    5e9c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    5e9e:	2180      	movs	r1, #128	; 0x80
    5ea0:	0249      	lsls	r1, r1, #9
	while (n--) {
    5ea2:	3801      	subs	r0, #1
    5ea4:	d307      	bcc.n	5eb6 <delay_cycles_ms+0x22>
	if (n > 0) {
    5ea6:	2c00      	cmp	r4, #0
    5ea8:	d0fb      	beq.n	5ea2 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    5eaa:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    5eac:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    5eae:	6813      	ldr	r3, [r2, #0]
    5eb0:	420b      	tst	r3, r1
    5eb2:	d0fc      	beq.n	5eae <delay_cycles_ms+0x1a>
    5eb4:	e7f5      	b.n	5ea2 <delay_cycles_ms+0xe>
	}
}
    5eb6:	bd30      	pop	{r4, r5, pc}
    5eb8:	20000000 	.word	0x20000000
    5ebc:	e000e010 	.word	0xe000e010

00005ec0 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    5ec0:	b510      	push	{r4, lr}
	if (gpfIsr) {
    5ec2:	4b03      	ldr	r3, [pc, #12]	; (5ed0 <chip_isr+0x10>)
    5ec4:	681b      	ldr	r3, [r3, #0]
    5ec6:	2b00      	cmp	r3, #0
    5ec8:	d000      	beq.n	5ecc <chip_isr+0xc>
		gpfIsr();
    5eca:	4798      	blx	r3
	}
}
    5ecc:	bd10      	pop	{r4, pc}
    5ece:	46c0      	nop			; (mov r8, r8)
    5ed0:	20000418 	.word	0x20000418

00005ed4 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    5ed4:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    5ed6:	1e44      	subs	r4, r0, #1
    5ed8:	2800      	cmp	r0, #0
    5eda:	d004      	beq.n	5ee6 <nm_bsp_sleep+0x12>
		delay_ms(1);
    5edc:	4d02      	ldr	r5, [pc, #8]	; (5ee8 <nm_bsp_sleep+0x14>)
    5ede:	2001      	movs	r0, #1
    5ee0:	47a8      	blx	r5
	while (u32TimeMsec--) {
    5ee2:	3c01      	subs	r4, #1
    5ee4:	d2fb      	bcs.n	5ede <nm_bsp_sleep+0xa>
	}
}
    5ee6:	bd70      	pop	{r4, r5, r6, pc}
    5ee8:	00005e95 	.word	0x00005e95

00005eec <nm_bsp_reset>:
{
    5eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		port_base->OUTCLR.reg = pin_mask;
    5eee:	4c08      	ldr	r4, [pc, #32]	; (5f10 <nm_bsp_reset+0x24>)
    5ef0:	2780      	movs	r7, #128	; 0x80
    5ef2:	057f      	lsls	r7, r7, #21
    5ef4:	6167      	str	r7, [r4, #20]
    5ef6:	2680      	movs	r6, #128	; 0x80
    5ef8:	0536      	lsls	r6, r6, #20
    5efa:	6166      	str	r6, [r4, #20]
	nm_bsp_sleep(100);
    5efc:	2064      	movs	r0, #100	; 0x64
    5efe:	4d05      	ldr	r5, [pc, #20]	; (5f14 <nm_bsp_reset+0x28>)
    5f00:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    5f02:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(100);
    5f04:	2064      	movs	r0, #100	; 0x64
    5f06:	47a8      	blx	r5
    5f08:	61a6      	str	r6, [r4, #24]
	nm_bsp_sleep(100);
    5f0a:	2064      	movs	r0, #100	; 0x64
    5f0c:	47a8      	blx	r5
}
    5f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f10:	41004400 	.word	0x41004400
    5f14:	00005ed5 	.word	0x00005ed5

00005f18 <nm_bsp_init>:
{
    5f18:	b570      	push	{r4, r5, r6, lr}
    5f1a:	b082      	sub	sp, #8
	gpfIsr = NULL;
    5f1c:	2300      	movs	r3, #0
    5f1e:	4a16      	ldr	r2, [pc, #88]	; (5f78 <nm_bsp_init+0x60>)
    5f20:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5f22:	ac01      	add	r4, sp, #4
    5f24:	2501      	movs	r5, #1
    5f26:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    5f28:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    5f2a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    5f2c:	0021      	movs	r1, r4
    5f2e:	201b      	movs	r0, #27
    5f30:	4e12      	ldr	r6, [pc, #72]	; (5f7c <nm_bsp_init+0x64>)
    5f32:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    5f34:	0021      	movs	r1, r4
    5f36:	201c      	movs	r0, #28
    5f38:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    5f3a:	0021      	movs	r1, r4
    5f3c:	2028      	movs	r0, #40	; 0x28
    5f3e:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    5f40:	4b0f      	ldr	r3, [pc, #60]	; (5f80 <nm_bsp_init+0x68>)
    5f42:	2280      	movs	r2, #128	; 0x80
    5f44:	0552      	lsls	r2, r2, #21
    5f46:	615a      	str	r2, [r3, #20]
    5f48:	2280      	movs	r2, #128	; 0x80
    5f4a:	0512      	lsls	r2, r2, #20
    5f4c:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    5f4e:	4b0d      	ldr	r3, [pc, #52]	; (5f84 <nm_bsp_init+0x6c>)
    5f50:	681b      	ldr	r3, [r3, #0]
    5f52:	421d      	tst	r5, r3
    5f54:	d003      	beq.n	5f5e <nm_bsp_init+0x46>
    5f56:	4b0b      	ldr	r3, [pc, #44]	; (5f84 <nm_bsp_init+0x6c>)
    5f58:	681b      	ldr	r3, [r3, #0]
    5f5a:	079b      	lsls	r3, r3, #30
    5f5c:	d401      	bmi.n	5f62 <nm_bsp_init+0x4a>
	    delay_init();
    5f5e:	4b0a      	ldr	r3, [pc, #40]	; (5f88 <nm_bsp_init+0x70>)
    5f60:	4798      	blx	r3
	nm_bsp_reset();
    5f62:	4b0a      	ldr	r3, [pc, #40]	; (5f8c <nm_bsp_init+0x74>)
    5f64:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    5f66:	2201      	movs	r2, #1
    5f68:	4b09      	ldr	r3, [pc, #36]	; (5f90 <nm_bsp_init+0x78>)
    5f6a:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    5f6c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    5f70:	b662      	cpsie	i
}
    5f72:	2000      	movs	r0, #0
    5f74:	b002      	add	sp, #8
    5f76:	bd70      	pop	{r4, r5, r6, pc}
    5f78:	20000418 	.word	0x20000418
    5f7c:	000092bd 	.word	0x000092bd
    5f80:	41004400 	.word	0x41004400
    5f84:	e000e010 	.word	0xe000e010
    5f88:	00005e55 	.word	0x00005e55
    5f8c:	00005eed 	.word	0x00005eed
    5f90:	2000000a 	.word	0x2000000a

00005f94 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    5f94:	b510      	push	{r4, lr}
    5f96:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    5f98:	4b0e      	ldr	r3, [pc, #56]	; (5fd4 <nm_bsp_register_isr+0x40>)
    5f9a:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    5f9c:	ac01      	add	r4, sp, #4
    5f9e:	0020      	movs	r0, r4
    5fa0:	4b0d      	ldr	r3, [pc, #52]	; (5fd8 <nm_bsp_register_isr+0x44>)
    5fa2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    5fa4:	2329      	movs	r3, #41	; 0x29
    5fa6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    5fa8:	2300      	movs	r3, #0
    5faa:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    5fac:	3301      	adds	r3, #1
    5fae:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    5fb0:	3301      	adds	r3, #1
    5fb2:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    5fb4:	0021      	movs	r1, r4
    5fb6:	2009      	movs	r0, #9
    5fb8:	4b08      	ldr	r3, [pc, #32]	; (5fdc <nm_bsp_register_isr+0x48>)
    5fba:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    5fbc:	2200      	movs	r2, #0
    5fbe:	2109      	movs	r1, #9
    5fc0:	4807      	ldr	r0, [pc, #28]	; (5fe0 <nm_bsp_register_isr+0x4c>)
    5fc2:	4b08      	ldr	r3, [pc, #32]	; (5fe4 <nm_bsp_register_isr+0x50>)
    5fc4:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    5fc6:	2100      	movs	r1, #0
    5fc8:	2009      	movs	r0, #9
    5fca:	4b07      	ldr	r3, [pc, #28]	; (5fe8 <nm_bsp_register_isr+0x54>)
    5fcc:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    5fce:	b004      	add	sp, #16
    5fd0:	bd10      	pop	{r4, pc}
    5fd2:	46c0      	nop			; (mov r8, r8)
    5fd4:	20000418 	.word	0x20000418
    5fd8:	00009231 	.word	0x00009231
    5fdc:	00009245 	.word	0x00009245
    5fe0:	00005ec1 	.word	0x00005ec1
    5fe4:	000090ed 	.word	0x000090ed
    5fe8:	00009119 	.word	0x00009119

00005fec <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    5fec:	b510      	push	{r4, lr}
	if (u8Enable) {
    5fee:	2800      	cmp	r0, #0
    5ff0:	d104      	bne.n	5ffc <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    5ff2:	2100      	movs	r1, #0
    5ff4:	2009      	movs	r0, #9
    5ff6:	4b04      	ldr	r3, [pc, #16]	; (6008 <nm_bsp_interrupt_ctrl+0x1c>)
    5ff8:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    5ffa:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    5ffc:	2100      	movs	r1, #0
    5ffe:	2009      	movs	r0, #9
    6000:	4b02      	ldr	r3, [pc, #8]	; (600c <nm_bsp_interrupt_ctrl+0x20>)
    6002:	4798      	blx	r3
    6004:	e7f9      	b.n	5ffa <nm_bsp_interrupt_ctrl+0xe>
    6006:	46c0      	nop			; (mov r8, r8)
    6008:	00009139 	.word	0x00009139
    600c:	00009119 	.word	0x00009119

00006010 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    6010:	b530      	push	{r4, r5, lr}
    6012:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    6014:	4c30      	ldr	r4, [pc, #192]	; (60d8 <nm_bus_init+0xc8>)
    6016:	230e      	movs	r3, #14
    6018:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    601a:	2300      	movs	r3, #0
    601c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    601e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    6020:	a901      	add	r1, sp, #4
    6022:	2201      	movs	r2, #1
    6024:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    6026:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    6028:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    602a:	200e      	movs	r0, #14
    602c:	4b2b      	ldr	r3, [pc, #172]	; (60dc <nm_bus_init+0xcc>)
    602e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    6030:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    6032:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6034:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6036:	2900      	cmp	r1, #0
    6038:	d104      	bne.n	6044 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    603a:	0953      	lsrs	r3, r2, #5
    603c:	01db      	lsls	r3, r3, #7
    603e:	4928      	ldr	r1, [pc, #160]	; (60e0 <nm_bus_init+0xd0>)
    6040:	468c      	mov	ip, r1
    6042:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6044:	211f      	movs	r1, #31
    6046:	4011      	ands	r1, r2
    6048:	2201      	movs	r2, #1
    604a:	0010      	movs	r0, r2
    604c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    604e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    6050:	ac02      	add	r4, sp, #8
    6052:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    6054:	2300      	movs	r3, #0
    6056:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6058:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    605a:	21c0      	movs	r1, #192	; 0xc0
    605c:	0389      	lsls	r1, r1, #14
    605e:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    6060:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    6062:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    6064:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    6066:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    6068:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    606a:	3223      	adds	r2, #35	; 0x23
    606c:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    606e:	3a18      	subs	r2, #24
    6070:	2100      	movs	r1, #0
    6072:	a808      	add	r0, sp, #32
    6074:	4b1b      	ldr	r3, [pc, #108]	; (60e4 <nm_bus_init+0xd4>)
    6076:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    6078:	4b1b      	ldr	r3, [pc, #108]	; (60e8 <nm_bus_init+0xd8>)
    607a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    607c:	4b1b      	ldr	r3, [pc, #108]	; (60ec <nm_bus_init+0xdc>)
    607e:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    6080:	2301      	movs	r3, #1
    6082:	425b      	negs	r3, r3
    6084:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    6086:	4b1a      	ldr	r3, [pc, #104]	; (60f0 <nm_bus_init+0xe0>)
    6088:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    608a:	4b1a      	ldr	r3, [pc, #104]	; (60f4 <nm_bus_init+0xe4>)
    608c:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    608e:	0022      	movs	r2, r4
    6090:	4919      	ldr	r1, [pc, #100]	; (60f8 <nm_bus_init+0xe8>)
    6092:	481a      	ldr	r0, [pc, #104]	; (60fc <nm_bus_init+0xec>)
    6094:	4b1a      	ldr	r3, [pc, #104]	; (6100 <nm_bus_init+0xf0>)
    6096:	4798      	blx	r3
    6098:	2800      	cmp	r0, #0
    609a:	d11a      	bne.n	60d2 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    609c:	4d17      	ldr	r5, [pc, #92]	; (60fc <nm_bus_init+0xec>)
    609e:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    60a0:	0020      	movs	r0, r4
    60a2:	4b18      	ldr	r3, [pc, #96]	; (6104 <nm_bus_init+0xf4>)
    60a4:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    60a6:	231f      	movs	r3, #31
    60a8:	4018      	ands	r0, r3
    60aa:	3b1e      	subs	r3, #30
    60ac:	4083      	lsls	r3, r0
    60ae:	4a16      	ldr	r2, [pc, #88]	; (6108 <nm_bus_init+0xf8>)
    60b0:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    60b2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    60b4:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    60b6:	2b00      	cmp	r3, #0
    60b8:	d1fc      	bne.n	60b4 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    60ba:	6823      	ldr	r3, [r4, #0]
    60bc:	2202      	movs	r2, #2
    60be:	4313      	orrs	r3, r2
    60c0:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    60c2:	4b12      	ldr	r3, [pc, #72]	; (610c <nm_bus_init+0xfc>)
    60c4:	4798      	blx	r3
	nm_bsp_sleep(1);
    60c6:	2001      	movs	r0, #1
    60c8:	4b11      	ldr	r3, [pc, #68]	; (6110 <nm_bus_init+0x100>)
    60ca:	4798      	blx	r3
#endif
	return result;
    60cc:	2000      	movs	r0, #0
}
    60ce:	b011      	add	sp, #68	; 0x44
    60d0:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    60d2:	2006      	movs	r0, #6
    60d4:	4240      	negs	r0, r0
    60d6:	e7fa      	b.n	60ce <nm_bus_init+0xbe>
    60d8:	20000654 	.word	0x20000654
    60dc:	000092bd 	.word	0x000092bd
    60e0:	41004400 	.word	0x41004400
    60e4:	0000ccc7 	.word	0x0000ccc7
    60e8:	000c0002 	.word	0x000c0002
    60ec:	000d0002 	.word	0x000d0002
    60f0:	000f0002 	.word	0x000f0002
    60f4:	00b71b00 	.word	0x00b71b00
    60f8:	42001000 	.word	0x42001000
    60fc:	20000658 	.word	0x20000658
    6100:	00009769 	.word	0x00009769
    6104:	000096d9 	.word	0x000096d9
    6108:	e000e100 	.word	0xe000e100
    610c:	00005eed 	.word	0x00005eed
    6110:	00005ed5 	.word	0x00005ed5

00006114 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    6114:	b5f0      	push	{r4, r5, r6, r7, lr}
    6116:	46de      	mov	lr, fp
    6118:	4657      	mov	r7, sl
    611a:	464e      	mov	r6, r9
    611c:	4645      	mov	r5, r8
    611e:	b5e0      	push	{r5, r6, r7, lr}
    6120:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    6122:	2803      	cmp	r0, #3
    6124:	d000      	beq.n	6128 <nm_bus_ioctl+0x14>
    6126:	e075      	b.n	6214 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    6128:	680e      	ldr	r6, [r1, #0]
    612a:	684d      	ldr	r5, [r1, #4]
    612c:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
    612e:	2200      	movs	r2, #0
    6130:	466b      	mov	r3, sp
    6132:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    6134:	2d00      	cmp	r5, #0
    6136:	d027      	beq.n	6188 <nm_bus_ioctl+0x74>
    6138:	2c00      	cmp	r4, #0
    613a:	d065      	beq.n	6208 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    613c:	2e00      	cmp	r6, #0
    613e:	d100      	bne.n	6142 <nm_bus_ioctl+0x2e>
    6140:	e077      	b.n	6232 <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    6142:	2300      	movs	r3, #0
    6144:	4698      	mov	r8, r3
    6146:	2300      	movs	r3, #0
    6148:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    614a:	2201      	movs	r2, #1
    614c:	493b      	ldr	r1, [pc, #236]	; (623c <nm_bus_ioctl+0x128>)
    614e:	483c      	ldr	r0, [pc, #240]	; (6240 <nm_bus_ioctl+0x12c>)
    6150:	4b3c      	ldr	r3, [pc, #240]	; (6244 <nm_bus_ioctl+0x130>)
    6152:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    6154:	4b3a      	ldr	r3, [pc, #232]	; (6240 <nm_bus_ioctl+0x12c>)
    6156:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    6158:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    615a:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    615c:	4699      	mov	r9, r3
			pu8Miso++;
    615e:	4659      	mov	r1, fp
    6160:	424b      	negs	r3, r1
    6162:	4159      	adcs	r1, r3
    6164:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    6166:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6168:	4653      	mov	r3, sl
    616a:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    616c:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    616e:	4239      	tst	r1, r7
    6170:	d0fc      	beq.n	616c <nm_bus_ioctl+0x58>
    6172:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    6174:	4239      	tst	r1, r7
    6176:	d0fc      	beq.n	6172 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6178:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    617a:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    617c:	4211      	tst	r1, r2
    617e:	d0fc      	beq.n	617a <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6180:	4649      	mov	r1, r9
    6182:	7989      	ldrb	r1, [r1, #6]
    6184:	468c      	mov	ip, r1
    6186:	e011      	b.n	61ac <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    6188:	2e00      	cmp	r6, #0
    618a:	d03a      	beq.n	6202 <nm_bus_ioctl+0xee>
    618c:	2c00      	cmp	r4, #0
    618e:	d03e      	beq.n	620e <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    6190:	2300      	movs	r3, #0
    6192:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    6194:	3301      	adds	r3, #1
    6196:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    6198:	466b      	mov	r3, sp
    619a:	1ddd      	adds	r5, r3, #7
    619c:	e7d5      	b.n	614a <nm_bus_ioctl+0x36>
    619e:	4660      	mov	r0, ip
    61a0:	2801      	cmp	r0, #1
    61a2:	d00d      	beq.n	61c0 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    61a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    61a6:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    61a8:	2900      	cmp	r1, #0
    61aa:	d00d      	beq.n	61c8 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    61ac:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    61ae:	4211      	tst	r1, r2
    61b0:	d0fc      	beq.n	61ac <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    61b2:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    61b4:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    61b6:	4210      	tst	r0, r2
    61b8:	d0f1      	beq.n	619e <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    61ba:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    61bc:	311e      	adds	r1, #30
    61be:	e7ee      	b.n	619e <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    61c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    61c2:	05c0      	lsls	r0, r0, #23
    61c4:	0dc0      	lsrs	r0, r0, #23
    61c6:	e7ef      	b.n	61a8 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    61c8:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    61ca:	3c01      	subs	r4, #1
    61cc:	b2a4      	uxth	r4, r4
			pu8Miso++;
    61ce:	445d      	add	r5, fp
			pu8Mosi++;
    61d0:	4643      	mov	r3, r8
    61d2:	4259      	negs	r1, r3
    61d4:	414b      	adcs	r3, r1
    61d6:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    61d8:	2c00      	cmp	r4, #0
    61da:	d1c4      	bne.n	6166 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    61dc:	4b18      	ldr	r3, [pc, #96]	; (6240 <nm_bus_ioctl+0x12c>)
    61de:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    61e0:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    61e2:	7e0b      	ldrb	r3, [r1, #24]
    61e4:	4213      	tst	r3, r2
    61e6:	d0fc      	beq.n	61e2 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    61e8:	2200      	movs	r2, #0
    61ea:	4914      	ldr	r1, [pc, #80]	; (623c <nm_bus_ioctl+0x128>)
    61ec:	4814      	ldr	r0, [pc, #80]	; (6240 <nm_bus_ioctl+0x12c>)
    61ee:	4b15      	ldr	r3, [pc, #84]	; (6244 <nm_bus_ioctl+0x130>)
    61f0:	4798      	blx	r3
	return M2M_SUCCESS;
    61f2:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    61f4:	b003      	add	sp, #12
    61f6:	bc3c      	pop	{r2, r3, r4, r5}
    61f8:	4690      	mov	r8, r2
    61fa:	4699      	mov	r9, r3
    61fc:	46a2      	mov	sl, r4
    61fe:	46ab      	mov	fp, r5
    6200:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    6202:	200f      	movs	r0, #15
    6204:	4240      	negs	r0, r0
    6206:	e7f5      	b.n	61f4 <nm_bus_ioctl+0xe0>
    6208:	200f      	movs	r0, #15
    620a:	4240      	negs	r0, r0
    620c:	e7f2      	b.n	61f4 <nm_bus_ioctl+0xe0>
    620e:	200f      	movs	r0, #15
    6210:	4240      	negs	r0, r0
		break;
    6212:	e7ef      	b.n	61f4 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    6214:	220e      	movs	r2, #14
    6216:	32ff      	adds	r2, #255	; 0xff
    6218:	490b      	ldr	r1, [pc, #44]	; (6248 <nm_bus_ioctl+0x134>)
    621a:	480c      	ldr	r0, [pc, #48]	; (624c <nm_bus_ioctl+0x138>)
    621c:	4b0c      	ldr	r3, [pc, #48]	; (6250 <nm_bus_ioctl+0x13c>)
    621e:	4798      	blx	r3
    6220:	480c      	ldr	r0, [pc, #48]	; (6254 <nm_bus_ioctl+0x140>)
    6222:	4b0d      	ldr	r3, [pc, #52]	; (6258 <nm_bus_ioctl+0x144>)
    6224:	4798      	blx	r3
    6226:	200d      	movs	r0, #13
    6228:	4b0c      	ldr	r3, [pc, #48]	; (625c <nm_bus_ioctl+0x148>)
    622a:	4798      	blx	r3
			s8Ret = -1;
    622c:	2001      	movs	r0, #1
    622e:	4240      	negs	r0, r0
	return s8Ret;
    6230:	e7e0      	b.n	61f4 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    6232:	2301      	movs	r3, #1
    6234:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    6236:	466b      	mov	r3, sp
    6238:	1dde      	adds	r6, r3, #7
    623a:	e784      	b.n	6146 <nm_bus_ioctl+0x32>
    623c:	20000654 	.word	0x20000654
    6240:	20000658 	.word	0x20000658
    6244:	0000997d 	.word	0x0000997d
    6248:	0000ed64 	.word	0x0000ed64
    624c:	0000ed74 	.word	0x0000ed74
    6250:	0000ce29 	.word	0x0000ce29
    6254:	0000ed88 	.word	0x0000ed88
    6258:	0000cf45 	.word	0x0000cf45
    625c:	0000ce5d 	.word	0x0000ce5d

00006260 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    6260:	b530      	push	{r4, r5, lr}
    6262:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    6264:	ab01      	add	r3, sp, #4
    6266:	2200      	movs	r2, #0
    6268:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    626a:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    626c:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    626e:	4d13      	ldr	r5, [pc, #76]	; (62bc <nm_bus_deinit+0x5c>)
    6270:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    6272:	0020      	movs	r0, r4
    6274:	4b12      	ldr	r3, [pc, #72]	; (62c0 <nm_bus_deinit+0x60>)
    6276:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6278:	231f      	movs	r3, #31
    627a:	4018      	ands	r0, r3
    627c:	3b1e      	subs	r3, #30
    627e:	4083      	lsls	r3, r0
    6280:	2280      	movs	r2, #128	; 0x80
    6282:	4910      	ldr	r1, [pc, #64]	; (62c4 <nm_bus_deinit+0x64>)
    6284:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    6286:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    6288:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    628a:	2b00      	cmp	r3, #0
    628c:	d1fc      	bne.n	6288 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    628e:	338f      	adds	r3, #143	; 0x8f
    6290:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    6292:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    6294:	6823      	ldr	r3, [r4, #0]
    6296:	2202      	movs	r2, #2
    6298:	4393      	bics	r3, r2
    629a:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    629c:	a901      	add	r1, sp, #4
    629e:	200c      	movs	r0, #12
    62a0:	4c09      	ldr	r4, [pc, #36]	; (62c8 <nm_bus_deinit+0x68>)
    62a2:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    62a4:	a901      	add	r1, sp, #4
    62a6:	200f      	movs	r0, #15
    62a8:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    62aa:	a901      	add	r1, sp, #4
    62ac:	200d      	movs	r0, #13
    62ae:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    62b0:	a901      	add	r1, sp, #4
    62b2:	200e      	movs	r0, #14
    62b4:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    62b6:	2000      	movs	r0, #0
    62b8:	b003      	add	sp, #12
    62ba:	bd30      	pop	{r4, r5, pc}
    62bc:	20000658 	.word	0x20000658
    62c0:	000096d9 	.word	0x000096d9
    62c4:	e000e100 	.word	0xe000e100
    62c8:	000092bd 	.word	0x000092bd

000062cc <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    62cc:	2a00      	cmp	r2, #0
    62ce:	d006      	beq.n	62de <m2m_memcpy+0x12>
    62d0:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    62d2:	780b      	ldrb	r3, [r1, #0]
    62d4:	7003      	strb	r3, [r0, #0]
		pDst++;
    62d6:	3001      	adds	r0, #1
		pSrc++;
    62d8:	3101      	adds	r1, #1
	}while(--sz);
    62da:	4290      	cmp	r0, r2
    62dc:	d1f9      	bne.n	62d2 <m2m_memcpy+0x6>
}
    62de:	4770      	bx	lr

000062e0 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    62e0:	2a00      	cmp	r2, #0
    62e2:	d004      	beq.n	62ee <m2m_memset+0xe>
    62e4:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    62e6:	7001      	strb	r1, [r0, #0]
		pBuf++;
    62e8:	3001      	adds	r0, #1
	}while(--sz);
    62ea:	4290      	cmp	r0, r2
    62ec:	d1fb      	bne.n	62e6 <m2m_memset+0x6>
}
    62ee:	4770      	bx	lr

000062f0 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    62f0:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    62f2:	7802      	ldrb	r2, [r0, #0]
    62f4:	2a00      	cmp	r2, #0
    62f6:	d007      	beq.n	6308 <m2m_strlen+0x18>
    62f8:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    62fa:	3001      	adds	r0, #1
    62fc:	b280      	uxth	r0, r0
		pcStr++;
    62fe:	3301      	adds	r3, #1
	while(*pcStr)
    6300:	781a      	ldrb	r2, [r3, #0]
    6302:	2a00      	cmp	r2, #0
    6304:	d1f9      	bne.n	62fa <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    6306:	4770      	bx	lr
	uint16	u16StrLen = 0;
    6308:	2000      	movs	r0, #0
    630a:	e7fc      	b.n	6306 <m2m_strlen+0x16>

0000630c <isr>:

volatile tstrHifContext gstrHifCxt;

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    630c:	4a02      	ldr	r2, [pc, #8]	; (6318 <isr+0xc>)
    630e:	78d3      	ldrb	r3, [r2, #3]
    6310:	3301      	adds	r3, #1
    6312:	b2db      	uxtb	r3, r3
    6314:	70d3      	strb	r3, [r2, #3]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    6316:	4770      	bx	lr
    6318:	20000694 	.word	0x20000694

0000631c <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    631c:	4770      	bx	lr
	...

00006320 <hif_set_rx_done>:
{
    6320:	b500      	push	{lr}
    6322:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    6324:	2200      	movs	r2, #0
    6326:	4b0a      	ldr	r3, [pc, #40]	; (6350 <hif_set_rx_done+0x30>)
    6328:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    632a:	2001      	movs	r0, #1
    632c:	4b09      	ldr	r3, [pc, #36]	; (6354 <hif_set_rx_done+0x34>)
    632e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    6330:	a901      	add	r1, sp, #4
    6332:	4809      	ldr	r0, [pc, #36]	; (6358 <hif_set_rx_done+0x38>)
    6334:	4b09      	ldr	r3, [pc, #36]	; (635c <hif_set_rx_done+0x3c>)
    6336:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    6338:	2800      	cmp	r0, #0
    633a:	d001      	beq.n	6340 <hif_set_rx_done+0x20>
}
    633c:	b003      	add	sp, #12
    633e:	bd00      	pop	{pc}
	reg |= NBIT1;
    6340:	2102      	movs	r1, #2
    6342:	9b01      	ldr	r3, [sp, #4]
    6344:	4319      	orrs	r1, r3
    6346:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    6348:	4803      	ldr	r0, [pc, #12]	; (6358 <hif_set_rx_done+0x38>)
    634a:	4b05      	ldr	r3, [pc, #20]	; (6360 <hif_set_rx_done+0x40>)
    634c:	4798      	blx	r3
    634e:	e7f5      	b.n	633c <hif_set_rx_done+0x1c>
    6350:	20000694 	.word	0x20000694
    6354:	00005fed 	.word	0x00005fed
    6358:	00001070 	.word	0x00001070
    635c:	00007729 	.word	0x00007729
    6360:	00007735 	.word	0x00007735

00006364 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    6364:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    6366:	4b0c      	ldr	r3, [pc, #48]	; (6398 <hif_chip_wake+0x34>)
    6368:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    636a:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    636c:	2b00      	cmp	r3, #0
    636e:	d10d      	bne.n	638c <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    6370:	4b09      	ldr	r3, [pc, #36]	; (6398 <hif_chip_wake+0x34>)
    6372:	785b      	ldrb	r3, [r3, #1]
    6374:	2b00      	cmp	r3, #0
    6376:	d103      	bne.n	6380 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    6378:	4b07      	ldr	r3, [pc, #28]	; (6398 <hif_chip_wake+0x34>)
    637a:	781b      	ldrb	r3, [r3, #0]
    637c:	2b00      	cmp	r3, #0
    637e:	d106      	bne.n	638e <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    6380:	4a05      	ldr	r2, [pc, #20]	; (6398 <hif_chip_wake+0x34>)
    6382:	7853      	ldrb	r3, [r2, #1]
    6384:	3301      	adds	r3, #1
    6386:	b2db      	uxtb	r3, r3
    6388:	7053      	strb	r3, [r2, #1]
    638a:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    638c:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    638e:	4b03      	ldr	r3, [pc, #12]	; (639c <hif_chip_wake+0x38>)
    6390:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    6392:	2800      	cmp	r0, #0
    6394:	d0f4      	beq.n	6380 <hif_chip_wake+0x1c>
    6396:	e7f9      	b.n	638c <hif_chip_wake+0x28>
    6398:	20000694 	.word	0x20000694
    639c:	00007411 	.word	0x00007411

000063a0 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    63a0:	4b05      	ldr	r3, [pc, #20]	; (63b8 <hif_chip_sleep_sc+0x18>)
    63a2:	785b      	ldrb	r3, [r3, #1]
    63a4:	2b00      	cmp	r3, #0
    63a6:	d004      	beq.n	63b2 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    63a8:	4a03      	ldr	r2, [pc, #12]	; (63b8 <hif_chip_sleep_sc+0x18>)
    63aa:	7853      	ldrb	r3, [r2, #1]
    63ac:	3b01      	subs	r3, #1
    63ae:	b2db      	uxtb	r3, r3
    63b0:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    63b2:	2000      	movs	r0, #0
    63b4:	4770      	bx	lr
    63b6:	46c0      	nop			; (mov r8, r8)
    63b8:	20000694 	.word	0x20000694

000063bc <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    63bc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    63be:	4b0b      	ldr	r3, [pc, #44]	; (63ec <hif_chip_sleep+0x30>)
    63c0:	785b      	ldrb	r3, [r3, #1]
    63c2:	2b00      	cmp	r3, #0
    63c4:	d004      	beq.n	63d0 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    63c6:	4a09      	ldr	r2, [pc, #36]	; (63ec <hif_chip_sleep+0x30>)
    63c8:	7853      	ldrb	r3, [r2, #1]
    63ca:	3b01      	subs	r3, #1
    63cc:	b2db      	uxtb	r3, r3
    63ce:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    63d0:	4b06      	ldr	r3, [pc, #24]	; (63ec <hif_chip_sleep+0x30>)
    63d2:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    63d4:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    63d6:	2b00      	cmp	r3, #0
    63d8:	d103      	bne.n	63e2 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    63da:	4b04      	ldr	r3, [pc, #16]	; (63ec <hif_chip_sleep+0x30>)
    63dc:	781b      	ldrb	r3, [r3, #0]
    63de:	2b00      	cmp	r3, #0
    63e0:	d100      	bne.n	63e4 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    63e2:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    63e4:	4b02      	ldr	r3, [pc, #8]	; (63f0 <hif_chip_sleep+0x34>)
    63e6:	4798      	blx	r3
    63e8:	e7fb      	b.n	63e2 <hif_chip_sleep+0x26>
    63ea:	46c0      	nop			; (mov r8, r8)
    63ec:	20000694 	.word	0x20000694
    63f0:	000073a9 	.word	0x000073a9

000063f4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    63f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    63f6:	46de      	mov	lr, fp
    63f8:	4657      	mov	r7, sl
    63fa:	b580      	push	{r7, lr}
    63fc:	b089      	sub	sp, #36	; 0x24
    63fe:	4683      	mov	fp, r0
    6400:	468a      	mov	sl, r1
    6402:	9201      	str	r2, [sp, #4]
    6404:	9300      	str	r3, [sp, #0]
    6406:	ab10      	add	r3, sp, #64	; 0x40
    6408:	cb80      	ldmia	r3!, {r7}
    640a:	881e      	ldrh	r6, [r3, #0]
    640c:	ab12      	add	r3, sp, #72	; 0x48
    640e:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    6410:	227f      	movs	r2, #127	; 0x7f
    6412:	400a      	ands	r2, r1
    6414:	ab07      	add	r3, sp, #28
    6416:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    6418:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    641a:	2208      	movs	r2, #8
    641c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    641e:	2f00      	cmp	r7, #0
    6420:	d03d      	beq.n	649e <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    6422:	885a      	ldrh	r2, [r3, #2]
    6424:	1992      	adds	r2, r2, r6
    6426:	18aa      	adds	r2, r5, r2
    6428:	b292      	uxth	r2, r2
    642a:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    642c:	4b69      	ldr	r3, [pc, #420]	; (65d4 <hif_send+0x1e0>)
    642e:	4798      	blx	r3
    6430:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    6432:	d000      	beq.n	6436 <hif_send+0x42>
    6434:	e0c1      	b.n	65ba <hif_send+0x1c6>
	{
		volatile uint32 reg, dma_addr = 0;
    6436:	2300      	movs	r3, #0
    6438:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    643a:	aa02      	add	r2, sp, #8
    643c:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    643e:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    6440:	9b04      	ldr	r3, [sp, #16]
    6442:	465a      	mov	r2, fp
    6444:	431a      	orrs	r2, r3
    6446:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    6448:	9a04      	ldr	r2, [sp, #16]
    644a:	4653      	mov	r3, sl
    644c:	021b      	lsls	r3, r3, #8
    644e:	4313      	orrs	r3, r2
    6450:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    6452:	ab07      	add	r3, sp, #28
    6454:	885b      	ldrh	r3, [r3, #2]
    6456:	9a04      	ldr	r2, [sp, #16]
    6458:	041b      	lsls	r3, r3, #16
    645a:	4313      	orrs	r3, r2
    645c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    645e:	9904      	ldr	r1, [sp, #16]
    6460:	485d      	ldr	r0, [pc, #372]	; (65d8 <hif_send+0x1e4>)
    6462:	4b5e      	ldr	r3, [pc, #376]	; (65dc <hif_send+0x1e8>)
    6464:	4798      	blx	r3
    6466:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    6468:	d157      	bne.n	651a <hif_send+0x126>

		reg = 0UL;
    646a:	2300      	movs	r3, #0
    646c:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    646e:	9b04      	ldr	r3, [sp, #16]
    6470:	2202      	movs	r2, #2
    6472:	4313      	orrs	r3, r2
    6474:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    6476:	9904      	ldr	r1, [sp, #16]
    6478:	4859      	ldr	r0, [pc, #356]	; (65e0 <hif_send+0x1ec>)
    647a:	4b58      	ldr	r3, [pc, #352]	; (65dc <hif_send+0x1e8>)
    647c:	4798      	blx	r3
    647e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    6480:	d14b      	bne.n	651a <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    6482:	2200      	movs	r2, #0
    6484:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    6486:	ab02      	add	r3, sp, #8
    6488:	80da      	strh	r2, [r3, #6]
    648a:	3306      	adds	r3, #6
    648c:	881b      	ldrh	r3, [r3, #0]
    648e:	b29b      	uxth	r3, r3
    6490:	4a54      	ldr	r2, [pc, #336]	; (65e4 <hif_send+0x1f0>)
    6492:	4293      	cmp	r3, r2
    6494:	d849      	bhi.n	652a <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    6496:	4c54      	ldr	r4, [pc, #336]	; (65e8 <hif_send+0x1f4>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    6498:	4b54      	ldr	r3, [pc, #336]	; (65ec <hif_send+0x1f8>)
    649a:	469a      	mov	sl, r3
    649c:	e017      	b.n	64ce <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    649e:	ab07      	add	r3, sp, #28
    64a0:	885a      	ldrh	r2, [r3, #2]
    64a2:	9900      	ldr	r1, [sp, #0]
    64a4:	468c      	mov	ip, r1
    64a6:	4462      	add	r2, ip
    64a8:	b292      	uxth	r2, r2
    64aa:	805a      	strh	r2, [r3, #2]
    64ac:	e7be      	b.n	642c <hif_send+0x38>
				nm_bsp_sleep(1);
    64ae:	2001      	movs	r0, #1
    64b0:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    64b2:	9b04      	ldr	r3, [sp, #16]
    64b4:	079b      	lsls	r3, r3, #30
    64b6:	d528      	bpl.n	650a <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
    64b8:	ab02      	add	r3, sp, #8
    64ba:	88da      	ldrh	r2, [r3, #6]
    64bc:	3201      	adds	r2, #1
    64be:	b292      	uxth	r2, r2
    64c0:	80da      	strh	r2, [r3, #6]
    64c2:	3306      	adds	r3, #6
    64c4:	881b      	ldrh	r3, [r3, #0]
    64c6:	b29b      	uxth	r3, r3
    64c8:	4a46      	ldr	r2, [pc, #280]	; (65e4 <hif_send+0x1f0>)
    64ca:	4293      	cmp	r3, r2
    64cc:	d82d      	bhi.n	652a <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    64ce:	a904      	add	r1, sp, #16
    64d0:	4843      	ldr	r0, [pc, #268]	; (65e0 <hif_send+0x1ec>)
    64d2:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    64d4:	2800      	cmp	r0, #0
    64d6:	d128      	bne.n	652a <hif_send+0x136>
			if(cnt >= 500) {
    64d8:	ab02      	add	r3, sp, #8
    64da:	3306      	adds	r3, #6
    64dc:	881b      	ldrh	r3, [r3, #0]
    64de:	b29b      	uxth	r3, r3
    64e0:	22f4      	movs	r2, #244	; 0xf4
    64e2:	32ff      	adds	r2, #255	; 0xff
    64e4:	4293      	cmp	r3, r2
    64e6:	d9e4      	bls.n	64b2 <hif_send+0xbe>
				if(cnt < 501) {
    64e8:	ab02      	add	r3, sp, #8
    64ea:	3306      	adds	r3, #6
    64ec:	881b      	ldrh	r3, [r3, #0]
    64ee:	b29b      	uxth	r3, r3
    64f0:	3201      	adds	r2, #1
    64f2:	4293      	cmp	r3, r2
    64f4:	d8db      	bhi.n	64ae <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    64f6:	483e      	ldr	r0, [pc, #248]	; (65f0 <hif_send+0x1fc>)
    64f8:	4b3e      	ldr	r3, [pc, #248]	; (65f4 <hif_send+0x200>)
    64fa:	4798      	blx	r3
    64fc:	483e      	ldr	r0, [pc, #248]	; (65f8 <hif_send+0x204>)
    64fe:	4b3f      	ldr	r3, [pc, #252]	; (65fc <hif_send+0x208>)
    6500:	4798      	blx	r3
    6502:	200d      	movs	r0, #13
    6504:	4b3e      	ldr	r3, [pc, #248]	; (6600 <hif_send+0x20c>)
    6506:	4798      	blx	r3
    6508:	e7d1      	b.n	64ae <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    650a:	a905      	add	r1, sp, #20
    650c:	483d      	ldr	r0, [pc, #244]	; (6604 <hif_send+0x210>)
    650e:	4b36      	ldr	r3, [pc, #216]	; (65e8 <hif_send+0x1f4>)
    6510:	4798      	blx	r3
    6512:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    6514:	d009      	beq.n	652a <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    6516:	2300      	movs	r3, #0
    6518:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    651a:	4b3b      	ldr	r3, [pc, #236]	; (6608 <hif_send+0x214>)
    651c:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    651e:	0020      	movs	r0, r4
    6520:	b009      	add	sp, #36	; 0x24
    6522:	bc0c      	pop	{r2, r3}
    6524:	4692      	mov	sl, r2
    6526:	469b      	mov	fp, r3
    6528:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    652a:	9b05      	ldr	r3, [sp, #20]
    652c:	2b00      	cmp	r3, #0
    652e:	d03f      	beq.n	65b0 <hif_send+0x1bc>
			u32CurrAddr = dma_addr;
    6530:	9b05      	ldr	r3, [sp, #20]
    6532:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    6534:	a907      	add	r1, sp, #28
    6536:	884b      	ldrh	r3, [r1, #2]
    6538:	b29b      	uxth	r3, r3
    653a:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    653c:	9806      	ldr	r0, [sp, #24]
    653e:	2208      	movs	r2, #8
    6540:	4b32      	ldr	r3, [pc, #200]	; (660c <hif_send+0x218>)
    6542:	4798      	blx	r3
    6544:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    6546:	d1e8      	bne.n	651a <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    6548:	9b06      	ldr	r3, [sp, #24]
    654a:	3308      	adds	r3, #8
    654c:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    654e:	9b01      	ldr	r3, [sp, #4]
    6550:	2b00      	cmp	r3, #0
    6552:	d00b      	beq.n	656c <hif_send+0x178>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    6554:	9806      	ldr	r0, [sp, #24]
    6556:	9a00      	ldr	r2, [sp, #0]
    6558:	0019      	movs	r1, r3
    655a:	4b2c      	ldr	r3, [pc, #176]	; (660c <hif_send+0x218>)
    655c:	4798      	blx	r3
    655e:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    6560:	d1db      	bne.n	651a <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
    6562:	9b06      	ldr	r3, [sp, #24]
    6564:	9a00      	ldr	r2, [sp, #0]
    6566:	4694      	mov	ip, r2
    6568:	4463      	add	r3, ip
    656a:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    656c:	2f00      	cmp	r7, #0
    656e:	d00e      	beq.n	658e <hif_send+0x19a>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    6570:	9b06      	ldr	r3, [sp, #24]
    6572:	9a00      	ldr	r2, [sp, #0]
    6574:	1aad      	subs	r5, r5, r2
    6576:	18ed      	adds	r5, r5, r3
    6578:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    657a:	9806      	ldr	r0, [sp, #24]
    657c:	0032      	movs	r2, r6
    657e:	0039      	movs	r1, r7
    6580:	4b22      	ldr	r3, [pc, #136]	; (660c <hif_send+0x218>)
    6582:	4798      	blx	r3
    6584:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    6586:	d1c8      	bne.n	651a <hif_send+0x126>
				u32CurrAddr += u16DataSize;
    6588:	9b06      	ldr	r3, [sp, #24]
    658a:	18f3      	adds	r3, r6, r3
    658c:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    658e:	9b05      	ldr	r3, [sp, #20]
    6590:	009b      	lsls	r3, r3, #2
    6592:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    6594:	9b04      	ldr	r3, [sp, #16]
    6596:	2202      	movs	r2, #2
    6598:	4313      	orrs	r3, r2
    659a:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    659c:	9904      	ldr	r1, [sp, #16]
    659e:	481c      	ldr	r0, [pc, #112]	; (6610 <hif_send+0x21c>)
    65a0:	4b0e      	ldr	r3, [pc, #56]	; (65dc <hif_send+0x1e8>)
    65a2:	4798      	blx	r3
    65a4:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    65a6:	d1b8      	bne.n	651a <hif_send+0x126>
 	ret = hif_chip_sleep();
    65a8:	4b1a      	ldr	r3, [pc, #104]	; (6614 <hif_send+0x220>)
    65aa:	4798      	blx	r3
    65ac:	0004      	movs	r4, r0
	return ret;
    65ae:	e7b6      	b.n	651e <hif_send+0x12a>
			ret = hif_chip_sleep();
    65b0:	4b18      	ldr	r3, [pc, #96]	; (6614 <hif_send+0x220>)
    65b2:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    65b4:	2403      	movs	r4, #3
    65b6:	4264      	negs	r4, r4
			goto ERR2;
    65b8:	e7b1      	b.n	651e <hif_send+0x12a>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    65ba:	22cb      	movs	r2, #203	; 0xcb
    65bc:	0052      	lsls	r2, r2, #1
    65be:	4916      	ldr	r1, [pc, #88]	; (6618 <hif_send+0x224>)
    65c0:	4816      	ldr	r0, [pc, #88]	; (661c <hif_send+0x228>)
    65c2:	4b0c      	ldr	r3, [pc, #48]	; (65f4 <hif_send+0x200>)
    65c4:	4798      	blx	r3
    65c6:	4816      	ldr	r0, [pc, #88]	; (6620 <hif_send+0x22c>)
    65c8:	4b0c      	ldr	r3, [pc, #48]	; (65fc <hif_send+0x208>)
    65ca:	4798      	blx	r3
    65cc:	200d      	movs	r0, #13
    65ce:	4b0c      	ldr	r3, [pc, #48]	; (6600 <hif_send+0x20c>)
    65d0:	4798      	blx	r3
		goto ERR2;
    65d2:	e7a4      	b.n	651e <hif_send+0x12a>
    65d4:	00006365 	.word	0x00006365
    65d8:	0000108c 	.word	0x0000108c
    65dc:	00007735 	.word	0x00007735
    65e0:	00001078 	.word	0x00001078
    65e4:	000003e7 	.word	0x000003e7
    65e8:	00007729 	.word	0x00007729
    65ec:	00005ed5 	.word	0x00005ed5
    65f0:	0000f0a4 	.word	0x0000f0a4
    65f4:	0000ce29 	.word	0x0000ce29
    65f8:	0000f0b0 	.word	0x0000f0b0
    65fc:	0000cf45 	.word	0x0000cf45
    6600:	0000ce5d 	.word	0x0000ce5d
    6604:	00150400 	.word	0x00150400
    6608:	000063a1 	.word	0x000063a1
    660c:	000077a9 	.word	0x000077a9
    6610:	0000106c 	.word	0x0000106c
    6614:	000063bd 	.word	0x000063bd
    6618:	0000edbc 	.word	0x0000edbc
    661c:	0000ed74 	.word	0x0000ed74
    6620:	0000f0c0 	.word	0x0000f0c0

00006624 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    6624:	b5f0      	push	{r4, r5, r6, r7, lr}
    6626:	46ce      	mov	lr, r9
    6628:	4647      	mov	r7, r8
    662a:	b580      	push	{r7, lr}
    662c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	while (gstrHifCxt.u8Interrupt) {
    662e:	4bcf      	ldr	r3, [pc, #828]	; (696c <hif_handle_isr+0x348>)
    6630:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    6632:	4699      	mov	r9, r3
	while (gstrHifCxt.u8Interrupt) {
    6634:	e080      	b.n	6738 <hif_handle_isr+0x114>
				gstrHifCxt.u32RxAddr = address;
    6636:	4bcd      	ldr	r3, [pc, #820]	; (696c <hif_handle_isr+0x348>)
    6638:	9a05      	ldr	r2, [sp, #20]
    663a:	605a      	str	r2, [r3, #4]
				gstrHifCxt.u32RxSize = size;
    663c:	609d      	str	r5, [r3, #8]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    663e:	af04      	add	r7, sp, #16
    6640:	2204      	movs	r2, #4
    6642:	0039      	movs	r1, r7
    6644:	9805      	ldr	r0, [sp, #20]
    6646:	4bca      	ldr	r3, [pc, #808]	; (6970 <hif_handle_isr+0x34c>)
    6648:	4798      	blx	r3
    664a:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    664c:	887b      	ldrh	r3, [r7, #2]
    664e:	b29b      	uxth	r3, r3
    6650:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
    6652:	2800      	cmp	r0, #0
    6654:	d133      	bne.n	66be <hif_handle_isr+0x9a>
				if(strHif.u16Length != size)
    6656:	ab04      	add	r3, sp, #16
    6658:	885b      	ldrh	r3, [r3, #2]
    665a:	b29b      	uxth	r3, r3
    665c:	429d      	cmp	r5, r3
    665e:	d004      	beq.n	666a <hif_handle_isr+0x46>
					if((size - strHif.u16Length) > 4)
    6660:	ab04      	add	r3, sp, #16
    6662:	885b      	ldrh	r3, [r3, #2]
    6664:	1aeb      	subs	r3, r5, r3
    6666:	2b04      	cmp	r3, #4
    6668:	dc39      	bgt.n	66de <hif_handle_isr+0xba>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    666a:	ab04      	add	r3, sp, #16
    666c:	781b      	ldrb	r3, [r3, #0]
    666e:	2b01      	cmp	r3, #1
    6670:	d04e      	beq.n	6710 <hif_handle_isr+0xec>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    6672:	ab04      	add	r3, sp, #16
    6674:	781b      	ldrb	r3, [r3, #0]
    6676:	2b02      	cmp	r3, #2
    6678:	d078      	beq.n	676c <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    667a:	ab04      	add	r3, sp, #16
    667c:	781b      	ldrb	r3, [r3, #0]
    667e:	2b04      	cmp	r3, #4
    6680:	d100      	bne.n	6684 <hif_handle_isr+0x60>
    6682:	e090      	b.n	67a6 <hif_handle_isr+0x182>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    6684:	ab04      	add	r3, sp, #16
    6686:	781b      	ldrb	r3, [r3, #0]
    6688:	2b06      	cmp	r3, #6
    668a:	d100      	bne.n	668e <hif_handle_isr+0x6a>
    668c:	e0a8      	b.n	67e0 <hif_handle_isr+0x1bc>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    668e:	ab04      	add	r3, sp, #16
    6690:	781b      	ldrb	r3, [r3, #0]
    6692:	2b07      	cmp	r3, #7
    6694:	d100      	bne.n	6698 <hif_handle_isr+0x74>
    6696:	e0bf      	b.n	6818 <hif_handle_isr+0x1f4>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    6698:	ab04      	add	r3, sp, #16
    669a:	781b      	ldrb	r3, [r3, #0]
    669c:	2b05      	cmp	r3, #5
    669e:	d100      	bne.n	66a2 <hif_handle_isr+0x7e>
    66a0:	e0d6      	b.n	6850 <hif_handle_isr+0x22c>
					M2M_ERR("(hif) invalid group ID\n");
    66a2:	4ab4      	ldr	r2, [pc, #720]	; (6974 <hif_handle_isr+0x350>)
    66a4:	49b4      	ldr	r1, [pc, #720]	; (6978 <hif_handle_isr+0x354>)
    66a6:	48b5      	ldr	r0, [pc, #724]	; (697c <hif_handle_isr+0x358>)
    66a8:	4bb5      	ldr	r3, [pc, #724]	; (6980 <hif_handle_isr+0x35c>)
    66aa:	4798      	blx	r3
    66ac:	48b5      	ldr	r0, [pc, #724]	; (6984 <hif_handle_isr+0x360>)
    66ae:	4bb6      	ldr	r3, [pc, #728]	; (6988 <hif_handle_isr+0x364>)
    66b0:	4798      	blx	r3
    66b2:	200d      	movs	r0, #13
    66b4:	4bb5      	ldr	r3, [pc, #724]	; (698c <hif_handle_isr+0x368>)
    66b6:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
    66b8:	2406      	movs	r4, #6
    66ba:	4264      	negs	r4, r4
    66bc:	e116      	b.n	68ec <hif_handle_isr+0x2c8>
					M2M_ERR("(hif) address bus fail\n");
    66be:	22d2      	movs	r2, #210	; 0xd2
    66c0:	32ff      	adds	r2, #255	; 0xff
    66c2:	49ad      	ldr	r1, [pc, #692]	; (6978 <hif_handle_isr+0x354>)
    66c4:	48ad      	ldr	r0, [pc, #692]	; (697c <hif_handle_isr+0x358>)
    66c6:	4bae      	ldr	r3, [pc, #696]	; (6980 <hif_handle_isr+0x35c>)
    66c8:	4798      	blx	r3
    66ca:	48b1      	ldr	r0, [pc, #708]	; (6990 <hif_handle_isr+0x36c>)
    66cc:	4bae      	ldr	r3, [pc, #696]	; (6988 <hif_handle_isr+0x364>)
    66ce:	4798      	blx	r3
    66d0:	200d      	movs	r0, #13
    66d2:	4bae      	ldr	r3, [pc, #696]	; (698c <hif_handle_isr+0x368>)
    66d4:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    66d6:	2001      	movs	r0, #1
    66d8:	4bae      	ldr	r3, [pc, #696]	; (6994 <hif_handle_isr+0x370>)
    66da:	4798      	blx	r3
    66dc:	e106      	b.n	68ec <hif_handle_isr+0x2c8>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    66de:	22ed      	movs	r2, #237	; 0xed
    66e0:	0052      	lsls	r2, r2, #1
    66e2:	49a5      	ldr	r1, [pc, #660]	; (6978 <hif_handle_isr+0x354>)
    66e4:	48a5      	ldr	r0, [pc, #660]	; (697c <hif_handle_isr+0x358>)
    66e6:	4ca6      	ldr	r4, [pc, #664]	; (6980 <hif_handle_isr+0x35c>)
    66e8:	47a0      	blx	r4
    66ea:	a904      	add	r1, sp, #16
    66ec:	884a      	ldrh	r2, [r1, #2]
    66ee:	b292      	uxth	r2, r2
    66f0:	780b      	ldrb	r3, [r1, #0]
    66f2:	b2db      	uxtb	r3, r3
    66f4:	7849      	ldrb	r1, [r1, #1]
    66f6:	9100      	str	r1, [sp, #0]
    66f8:	0029      	movs	r1, r5
    66fa:	48a7      	ldr	r0, [pc, #668]	; (6998 <hif_handle_isr+0x374>)
    66fc:	47a0      	blx	r4
    66fe:	200d      	movs	r0, #13
    6700:	4ba2      	ldr	r3, [pc, #648]	; (698c <hif_handle_isr+0x368>)
    6702:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    6704:	2001      	movs	r0, #1
    6706:	4ba3      	ldr	r3, [pc, #652]	; (6994 <hif_handle_isr+0x370>)
    6708:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    670a:	2406      	movs	r4, #6
    670c:	4264      	negs	r4, r4
    670e:	e0ed      	b.n	68ec <hif_handle_isr+0x2c8>
					if(gstrHifCxt.pfWifiCb)
    6710:	4b96      	ldr	r3, [pc, #600]	; (696c <hif_handle_isr+0x348>)
    6712:	68db      	ldr	r3, [r3, #12]
    6714:	2b00      	cmp	r3, #0
    6716:	d01c      	beq.n	6752 <hif_handle_isr+0x12e>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    6718:	4b94      	ldr	r3, [pc, #592]	; (696c <hif_handle_isr+0x348>)
    671a:	68db      	ldr	r3, [r3, #12]
    671c:	aa04      	add	r2, sp, #16
    671e:	7850      	ldrb	r0, [r2, #1]
    6720:	b2c0      	uxtb	r0, r0
    6722:	8851      	ldrh	r1, [r2, #2]
    6724:	9a05      	ldr	r2, [sp, #20]
    6726:	3208      	adds	r2, #8
    6728:	3908      	subs	r1, #8
    672a:	b289      	uxth	r1, r1
    672c:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    672e:	4b8f      	ldr	r3, [pc, #572]	; (696c <hif_handle_isr+0x348>)
    6730:	789b      	ldrb	r3, [r3, #2]
    6732:	2b00      	cmp	r3, #0
    6734:	d000      	beq.n	6738 <hif_handle_isr+0x114>
    6736:	e09c      	b.n	6872 <hif_handle_isr+0x24e>
	while (gstrHifCxt.u8Interrupt) {
    6738:	4643      	mov	r3, r8
    673a:	78db      	ldrb	r3, [r3, #3]
    673c:	2b00      	cmp	r3, #0
    673e:	d100      	bne.n	6742 <hif_handle_isr+0x11e>
    6740:	e158      	b.n	69f4 <hif_handle_isr+0x3d0>
		gstrHifCxt.u8Interrupt--;
    6742:	464b      	mov	r3, r9
    6744:	78db      	ldrb	r3, [r3, #3]
    6746:	3b01      	subs	r3, #1
    6748:	b2db      	uxtb	r3, r3
    674a:	464a      	mov	r2, r9
    674c:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    674e:	4e93      	ldr	r6, [pc, #588]	; (699c <hif_handle_isr+0x378>)
    6750:	e0d7      	b.n	6902 <hif_handle_isr+0x2de>
						M2M_ERR("WIFI callback is not registered\n");
    6752:	22f3      	movs	r2, #243	; 0xf3
    6754:	0052      	lsls	r2, r2, #1
    6756:	4988      	ldr	r1, [pc, #544]	; (6978 <hif_handle_isr+0x354>)
    6758:	4888      	ldr	r0, [pc, #544]	; (697c <hif_handle_isr+0x358>)
    675a:	4b89      	ldr	r3, [pc, #548]	; (6980 <hif_handle_isr+0x35c>)
    675c:	4798      	blx	r3
    675e:	4890      	ldr	r0, [pc, #576]	; (69a0 <hif_handle_isr+0x37c>)
    6760:	4b89      	ldr	r3, [pc, #548]	; (6988 <hif_handle_isr+0x364>)
    6762:	4798      	blx	r3
    6764:	200d      	movs	r0, #13
    6766:	4b89      	ldr	r3, [pc, #548]	; (698c <hif_handle_isr+0x368>)
    6768:	4798      	blx	r3
    676a:	e7e0      	b.n	672e <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfIpCb)
    676c:	4b7f      	ldr	r3, [pc, #508]	; (696c <hif_handle_isr+0x348>)
    676e:	691b      	ldr	r3, [r3, #16]
    6770:	2b00      	cmp	r3, #0
    6772:	d00b      	beq.n	678c <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    6774:	4b7d      	ldr	r3, [pc, #500]	; (696c <hif_handle_isr+0x348>)
    6776:	691b      	ldr	r3, [r3, #16]
    6778:	aa04      	add	r2, sp, #16
    677a:	7850      	ldrb	r0, [r2, #1]
    677c:	b2c0      	uxtb	r0, r0
    677e:	8851      	ldrh	r1, [r2, #2]
    6780:	9a05      	ldr	r2, [sp, #20]
    6782:	3208      	adds	r2, #8
    6784:	3908      	subs	r1, #8
    6786:	b289      	uxth	r1, r1
    6788:	4798      	blx	r3
    678a:	e7d0      	b.n	672e <hif_handle_isr+0x10a>
						M2M_ERR("Scoket callback is not registered\n");
    678c:	22f7      	movs	r2, #247	; 0xf7
    678e:	0052      	lsls	r2, r2, #1
    6790:	4979      	ldr	r1, [pc, #484]	; (6978 <hif_handle_isr+0x354>)
    6792:	487a      	ldr	r0, [pc, #488]	; (697c <hif_handle_isr+0x358>)
    6794:	4b7a      	ldr	r3, [pc, #488]	; (6980 <hif_handle_isr+0x35c>)
    6796:	4798      	blx	r3
    6798:	4882      	ldr	r0, [pc, #520]	; (69a4 <hif_handle_isr+0x380>)
    679a:	4b7b      	ldr	r3, [pc, #492]	; (6988 <hif_handle_isr+0x364>)
    679c:	4798      	blx	r3
    679e:	200d      	movs	r0, #13
    67a0:	4b7a      	ldr	r3, [pc, #488]	; (698c <hif_handle_isr+0x368>)
    67a2:	4798      	blx	r3
    67a4:	e7c3      	b.n	672e <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfOtaCb)
    67a6:	4b71      	ldr	r3, [pc, #452]	; (696c <hif_handle_isr+0x348>)
    67a8:	695b      	ldr	r3, [r3, #20]
    67aa:	2b00      	cmp	r3, #0
    67ac:	d00b      	beq.n	67c6 <hif_handle_isr+0x1a2>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    67ae:	4b6f      	ldr	r3, [pc, #444]	; (696c <hif_handle_isr+0x348>)
    67b0:	695b      	ldr	r3, [r3, #20]
    67b2:	aa04      	add	r2, sp, #16
    67b4:	7850      	ldrb	r0, [r2, #1]
    67b6:	b2c0      	uxtb	r0, r0
    67b8:	8851      	ldrh	r1, [r2, #2]
    67ba:	9a05      	ldr	r2, [sp, #20]
    67bc:	3208      	adds	r2, #8
    67be:	3908      	subs	r1, #8
    67c0:	b289      	uxth	r1, r1
    67c2:	4798      	blx	r3
    67c4:	e7b3      	b.n	672e <hif_handle_isr+0x10a>
						M2M_ERR("Ota callback is not registered\n");
    67c6:	22fb      	movs	r2, #251	; 0xfb
    67c8:	0052      	lsls	r2, r2, #1
    67ca:	496b      	ldr	r1, [pc, #428]	; (6978 <hif_handle_isr+0x354>)
    67cc:	486b      	ldr	r0, [pc, #428]	; (697c <hif_handle_isr+0x358>)
    67ce:	4b6c      	ldr	r3, [pc, #432]	; (6980 <hif_handle_isr+0x35c>)
    67d0:	4798      	blx	r3
    67d2:	4875      	ldr	r0, [pc, #468]	; (69a8 <hif_handle_isr+0x384>)
    67d4:	4b6c      	ldr	r3, [pc, #432]	; (6988 <hif_handle_isr+0x364>)
    67d6:	4798      	blx	r3
    67d8:	200d      	movs	r0, #13
    67da:	4b6c      	ldr	r3, [pc, #432]	; (698c <hif_handle_isr+0x368>)
    67dc:	4798      	blx	r3
    67de:	e7a6      	b.n	672e <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfCryptoCb)
    67e0:	4b62      	ldr	r3, [pc, #392]	; (696c <hif_handle_isr+0x348>)
    67e2:	6a1b      	ldr	r3, [r3, #32]
    67e4:	2b00      	cmp	r3, #0
    67e6:	d00b      	beq.n	6800 <hif_handle_isr+0x1dc>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    67e8:	4b60      	ldr	r3, [pc, #384]	; (696c <hif_handle_isr+0x348>)
    67ea:	6a1b      	ldr	r3, [r3, #32]
    67ec:	aa04      	add	r2, sp, #16
    67ee:	7850      	ldrb	r0, [r2, #1]
    67f0:	b2c0      	uxtb	r0, r0
    67f2:	8851      	ldrh	r1, [r2, #2]
    67f4:	9a05      	ldr	r2, [sp, #20]
    67f6:	3208      	adds	r2, #8
    67f8:	3908      	subs	r1, #8
    67fa:	b289      	uxth	r1, r1
    67fc:	4798      	blx	r3
    67fe:	e796      	b.n	672e <hif_handle_isr+0x10a>
						M2M_ERR("Crypto callback is not registered\n");
    6800:	4a6a      	ldr	r2, [pc, #424]	; (69ac <hif_handle_isr+0x388>)
    6802:	495d      	ldr	r1, [pc, #372]	; (6978 <hif_handle_isr+0x354>)
    6804:	485d      	ldr	r0, [pc, #372]	; (697c <hif_handle_isr+0x358>)
    6806:	4b5e      	ldr	r3, [pc, #376]	; (6980 <hif_handle_isr+0x35c>)
    6808:	4798      	blx	r3
    680a:	4869      	ldr	r0, [pc, #420]	; (69b0 <hif_handle_isr+0x38c>)
    680c:	4b5e      	ldr	r3, [pc, #376]	; (6988 <hif_handle_isr+0x364>)
    680e:	4798      	blx	r3
    6810:	200d      	movs	r0, #13
    6812:	4b5e      	ldr	r3, [pc, #376]	; (698c <hif_handle_isr+0x368>)
    6814:	4798      	blx	r3
    6816:	e78a      	b.n	672e <hif_handle_isr+0x10a>
					if(gstrHifCxt.pfSigmaCb)
    6818:	4b54      	ldr	r3, [pc, #336]	; (696c <hif_handle_isr+0x348>)
    681a:	699b      	ldr	r3, [r3, #24]
    681c:	2b00      	cmp	r3, #0
    681e:	d00b      	beq.n	6838 <hif_handle_isr+0x214>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    6820:	4b52      	ldr	r3, [pc, #328]	; (696c <hif_handle_isr+0x348>)
    6822:	699b      	ldr	r3, [r3, #24]
    6824:	aa04      	add	r2, sp, #16
    6826:	7850      	ldrb	r0, [r2, #1]
    6828:	b2c0      	uxtb	r0, r0
    682a:	8851      	ldrh	r1, [r2, #2]
    682c:	9a05      	ldr	r2, [sp, #20]
    682e:	3208      	adds	r2, #8
    6830:	3908      	subs	r1, #8
    6832:	b289      	uxth	r1, r1
    6834:	4798      	blx	r3
    6836:	e77a      	b.n	672e <hif_handle_isr+0x10a>
						M2M_ERR("Sigma callback is not registered\n");
    6838:	4a5e      	ldr	r2, [pc, #376]	; (69b4 <hif_handle_isr+0x390>)
    683a:	494f      	ldr	r1, [pc, #316]	; (6978 <hif_handle_isr+0x354>)
    683c:	484f      	ldr	r0, [pc, #316]	; (697c <hif_handle_isr+0x358>)
    683e:	4b50      	ldr	r3, [pc, #320]	; (6980 <hif_handle_isr+0x35c>)
    6840:	4798      	blx	r3
    6842:	485d      	ldr	r0, [pc, #372]	; (69b8 <hif_handle_isr+0x394>)
    6844:	4b50      	ldr	r3, [pc, #320]	; (6988 <hif_handle_isr+0x364>)
    6846:	4798      	blx	r3
    6848:	200d      	movs	r0, #13
    684a:	4b50      	ldr	r3, [pc, #320]	; (698c <hif_handle_isr+0x368>)
    684c:	4798      	blx	r3
    684e:	e76e      	b.n	672e <hif_handle_isr+0x10a>
				    if(gstrHifCxt.pfSslCb)
    6850:	4b46      	ldr	r3, [pc, #280]	; (696c <hif_handle_isr+0x348>)
    6852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6854:	2b00      	cmp	r3, #0
    6856:	d100      	bne.n	685a <hif_handle_isr+0x236>
    6858:	e769      	b.n	672e <hif_handle_isr+0x10a>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    685a:	4b44      	ldr	r3, [pc, #272]	; (696c <hif_handle_isr+0x348>)
    685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    685e:	aa04      	add	r2, sp, #16
    6860:	7850      	ldrb	r0, [r2, #1]
    6862:	b2c0      	uxtb	r0, r0
    6864:	8851      	ldrh	r1, [r2, #2]
    6866:	9a05      	ldr	r2, [sp, #20]
    6868:	3208      	adds	r2, #8
    686a:	3908      	subs	r1, #8
    686c:	b289      	uxth	r1, r1
    686e:	4798      	blx	r3
    6870:	e75d      	b.n	672e <hif_handle_isr+0x10a>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    6872:	4a52      	ldr	r2, [pc, #328]	; (69bc <hif_handle_isr+0x398>)
    6874:	4940      	ldr	r1, [pc, #256]	; (6978 <hif_handle_isr+0x354>)
    6876:	4841      	ldr	r0, [pc, #260]	; (697c <hif_handle_isr+0x358>)
    6878:	4c41      	ldr	r4, [pc, #260]	; (6980 <hif_handle_isr+0x35c>)
    687a:	47a0      	blx	r4
    687c:	ab04      	add	r3, sp, #16
    687e:	7819      	ldrb	r1, [r3, #0]
    6880:	b2c9      	uxtb	r1, r1
    6882:	785a      	ldrb	r2, [r3, #1]
    6884:	b2d2      	uxtb	r2, r2
    6886:	484e      	ldr	r0, [pc, #312]	; (69c0 <hif_handle_isr+0x39c>)
    6888:	47a0      	blx	r4
    688a:	200d      	movs	r0, #13
    688c:	4b3f      	ldr	r3, [pc, #252]	; (698c <hif_handle_isr+0x368>)
    688e:	4798      	blx	r3
					ret = hif_set_rx_done();
    6890:	4b4c      	ldr	r3, [pc, #304]	; (69c4 <hif_handle_isr+0x3a0>)
    6892:	4798      	blx	r3
    6894:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    6896:	d129      	bne.n	68ec <hif_handle_isr+0x2c8>
    6898:	e74e      	b.n	6738 <hif_handle_isr+0x114>
				M2M_ERR("(hif) Wrong Size\n");
    689a:	2287      	movs	r2, #135	; 0x87
    689c:	0092      	lsls	r2, r2, #2
    689e:	4936      	ldr	r1, [pc, #216]	; (6978 <hif_handle_isr+0x354>)
    68a0:	4836      	ldr	r0, [pc, #216]	; (697c <hif_handle_isr+0x358>)
    68a2:	4b37      	ldr	r3, [pc, #220]	; (6980 <hif_handle_isr+0x35c>)
    68a4:	4798      	blx	r3
    68a6:	4848      	ldr	r0, [pc, #288]	; (69c8 <hif_handle_isr+0x3a4>)
    68a8:	4b37      	ldr	r3, [pc, #220]	; (6988 <hif_handle_isr+0x364>)
    68aa:	4798      	blx	r3
    68ac:	200d      	movs	r0, #13
    68ae:	4b37      	ldr	r3, [pc, #220]	; (698c <hif_handle_isr+0x368>)
    68b0:	4798      	blx	r3
				ret = M2M_ERR_RCV;
    68b2:	2402      	movs	r4, #2
    68b4:	4264      	negs	r4, r4
    68b6:	e019      	b.n	68ec <hif_handle_isr+0x2c8>
			M2M_ERR("(hif) False interrupt %lx",reg);
    68b8:	2289      	movs	r2, #137	; 0x89
    68ba:	0092      	lsls	r2, r2, #2
    68bc:	492e      	ldr	r1, [pc, #184]	; (6978 <hif_handle_isr+0x354>)
    68be:	482f      	ldr	r0, [pc, #188]	; (697c <hif_handle_isr+0x358>)
    68c0:	4c2f      	ldr	r4, [pc, #188]	; (6980 <hif_handle_isr+0x35c>)
    68c2:	47a0      	blx	r4
    68c4:	9903      	ldr	r1, [sp, #12]
    68c6:	4841      	ldr	r0, [pc, #260]	; (69cc <hif_handle_isr+0x3a8>)
    68c8:	47a0      	blx	r4
    68ca:	200d      	movs	r0, #13
    68cc:	4b2f      	ldr	r3, [pc, #188]	; (698c <hif_handle_isr+0x368>)
    68ce:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    68d0:	240c      	movs	r4, #12
    68d2:	4264      	negs	r4, r4
    68d4:	e00a      	b.n	68ec <hif_handle_isr+0x2c8>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    68d6:	4a3e      	ldr	r2, [pc, #248]	; (69d0 <hif_handle_isr+0x3ac>)
    68d8:	4927      	ldr	r1, [pc, #156]	; (6978 <hif_handle_isr+0x354>)
    68da:	4828      	ldr	r0, [pc, #160]	; (697c <hif_handle_isr+0x358>)
    68dc:	4b28      	ldr	r3, [pc, #160]	; (6980 <hif_handle_isr+0x35c>)
    68de:	4798      	blx	r3
    68e0:	483c      	ldr	r0, [pc, #240]	; (69d4 <hif_handle_isr+0x3b0>)
    68e2:	4b29      	ldr	r3, [pc, #164]	; (6988 <hif_handle_isr+0x364>)
    68e4:	4798      	blx	r3
    68e6:	200d      	movs	r0, #13
    68e8:	4b28      	ldr	r3, [pc, #160]	; (698c <hif_handle_isr+0x368>)
    68ea:	4798      	blx	r3
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    68ec:	4a3a      	ldr	r2, [pc, #232]	; (69d8 <hif_handle_isr+0x3b4>)
    68ee:	493b      	ldr	r1, [pc, #236]	; (69dc <hif_handle_isr+0x3b8>)
    68f0:	4822      	ldr	r0, [pc, #136]	; (697c <hif_handle_isr+0x358>)
    68f2:	4f23      	ldr	r7, [pc, #140]	; (6980 <hif_handle_isr+0x35c>)
    68f4:	47b8      	blx	r7
    68f6:	0021      	movs	r1, r4
    68f8:	4839      	ldr	r0, [pc, #228]	; (69e0 <hif_handle_isr+0x3bc>)
    68fa:	47b8      	blx	r7
    68fc:	200d      	movs	r0, #13
    68fe:	4b23      	ldr	r3, [pc, #140]	; (698c <hif_handle_isr+0x368>)
    6900:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    6902:	a903      	add	r1, sp, #12
    6904:	4837      	ldr	r0, [pc, #220]	; (69e4 <hif_handle_isr+0x3c0>)
    6906:	47b0      	blx	r6
    6908:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    690a:	d1e4      	bne.n	68d6 <hif_handle_isr+0x2b2>
		if(reg & 0x1)	/* New interrupt has been received */
    690c:	9b03      	ldr	r3, [sp, #12]
    690e:	07db      	lsls	r3, r3, #31
    6910:	d5d2      	bpl.n	68b8 <hif_handle_isr+0x294>
			nm_bsp_interrupt_ctrl(0);
    6912:	2000      	movs	r0, #0
    6914:	4b1f      	ldr	r3, [pc, #124]	; (6994 <hif_handle_isr+0x370>)
    6916:	4798      	blx	r3
			reg &= ~NBIT0;
    6918:	2301      	movs	r3, #1
    691a:	9903      	ldr	r1, [sp, #12]
    691c:	4399      	bics	r1, r3
    691e:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    6920:	4830      	ldr	r0, [pc, #192]	; (69e4 <hif_handle_isr+0x3c0>)
    6922:	4b31      	ldr	r3, [pc, #196]	; (69e8 <hif_handle_isr+0x3c4>)
    6924:	4798      	blx	r3
    6926:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    6928:	d1e0      	bne.n	68ec <hif_handle_isr+0x2c8>
			gstrHifCxt.u8HifRXDone = 1;
    692a:	2201      	movs	r2, #1
    692c:	4b0f      	ldr	r3, [pc, #60]	; (696c <hif_handle_isr+0x348>)
    692e:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    6930:	9b03      	ldr	r3, [sp, #12]
    6932:	049d      	lsls	r5, r3, #18
    6934:	0d2d      	lsrs	r5, r5, #20
			if (size > 0) {
    6936:	d0b0      	beq.n	689a <hif_handle_isr+0x276>
				uint32 address = 0;
    6938:	2300      	movs	r3, #0
    693a:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    693c:	a905      	add	r1, sp, #20
    693e:	482b      	ldr	r0, [pc, #172]	; (69ec <hif_handle_isr+0x3c8>)
    6940:	4b16      	ldr	r3, [pc, #88]	; (699c <hif_handle_isr+0x378>)
    6942:	4798      	blx	r3
    6944:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    6946:	d100      	bne.n	694a <hif_handle_isr+0x326>
    6948:	e675      	b.n	6636 <hif_handle_isr+0x12>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    694a:	22c8      	movs	r2, #200	; 0xc8
    694c:	32ff      	adds	r2, #255	; 0xff
    694e:	490a      	ldr	r1, [pc, #40]	; (6978 <hif_handle_isr+0x354>)
    6950:	480a      	ldr	r0, [pc, #40]	; (697c <hif_handle_isr+0x358>)
    6952:	4b0b      	ldr	r3, [pc, #44]	; (6980 <hif_handle_isr+0x35c>)
    6954:	4798      	blx	r3
    6956:	4826      	ldr	r0, [pc, #152]	; (69f0 <hif_handle_isr+0x3cc>)
    6958:	4b0b      	ldr	r3, [pc, #44]	; (6988 <hif_handle_isr+0x364>)
    695a:	4798      	blx	r3
    695c:	200d      	movs	r0, #13
    695e:	4b0b      	ldr	r3, [pc, #44]	; (698c <hif_handle_isr+0x368>)
    6960:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
    6962:	2001      	movs	r0, #1
    6964:	4b0b      	ldr	r3, [pc, #44]	; (6994 <hif_handle_isr+0x370>)
    6966:	4798      	blx	r3
    6968:	e7c0      	b.n	68ec <hif_handle_isr+0x2c8>
    696a:	46c0      	nop			; (mov r8, r8)
    696c:	20000694 	.word	0x20000694
    6970:	00007741 	.word	0x00007741
    6974:	0000020f 	.word	0x0000020f
    6978:	0000edc8 	.word	0x0000edc8
    697c:	0000ed74 	.word	0x0000ed74
    6980:	0000ce29 	.word	0x0000ce29
    6984:	0000ef24 	.word	0x0000ef24
    6988:	0000cf45 	.word	0x0000cf45
    698c:	0000ce5d 	.word	0x0000ce5d
    6990:	0000ee20 	.word	0x0000ee20
    6994:	00005fed 	.word	0x00005fed
    6998:	0000ee38 	.word	0x0000ee38
    699c:	00007729 	.word	0x00007729
    69a0:	0000ee78 	.word	0x0000ee78
    69a4:	0000ee98 	.word	0x0000ee98
    69a8:	0000eebc 	.word	0x0000eebc
    69ac:	000001ff 	.word	0x000001ff
    69b0:	0000eedc 	.word	0x0000eedc
    69b4:	00000206 	.word	0x00000206
    69b8:	0000ef00 	.word	0x0000ef00
    69bc:	00000215 	.word	0x00000215
    69c0:	0000ef3c 	.word	0x0000ef3c
    69c4:	00006321 	.word	0x00006321
    69c8:	0000ef68 	.word	0x0000ef68
    69cc:	0000ef7c 	.word	0x0000ef7c
    69d0:	0000022d 	.word	0x0000022d
    69d4:	0000ef98 	.word	0x0000ef98
    69d8:	0000024a 	.word	0x0000024a
    69dc:	0000edd0 	.word	0x0000edd0
    69e0:	0000efbc 	.word	0x0000efbc
    69e4:	00001070 	.word	0x00001070
    69e8:	00007735 	.word	0x00007735
    69ec:	00001084 	.word	0x00001084
    69f0:	0000edfc 	.word	0x0000edfc
			}
		}
	}

	return ret;
}
    69f4:	2000      	movs	r0, #0
    69f6:	b007      	add	sp, #28
    69f8:	bc0c      	pop	{r2, r3}
    69fa:	4690      	mov	r8, r2
    69fc:	4699      	mov	r9, r3
    69fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006a00 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    6a00:	b570      	push	{r4, r5, r6, lr}
    6a02:	0014      	movs	r4, r2
    6a04:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    6a06:	2800      	cmp	r0, #0
    6a08:	d003      	beq.n	6a12 <hif_receive+0x12>
    6a0a:	2900      	cmp	r1, #0
    6a0c:	d001      	beq.n	6a12 <hif_receive+0x12>
    6a0e:	2a00      	cmp	r2, #0
    6a10:	d112      	bne.n	6a38 <hif_receive+0x38>
	{
		if(isDone)
    6a12:	2d00      	cmp	r5, #0
    6a14:	d002      	beq.n	6a1c <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    6a16:	4b27      	ldr	r3, [pc, #156]	; (6ab4 <hif_receive+0xb4>)
    6a18:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    6a1a:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    6a1c:	4a26      	ldr	r2, [pc, #152]	; (6ab8 <hif_receive+0xb8>)
    6a1e:	4927      	ldr	r1, [pc, #156]	; (6abc <hif_receive+0xbc>)
    6a20:	4827      	ldr	r0, [pc, #156]	; (6ac0 <hif_receive+0xc0>)
    6a22:	4b28      	ldr	r3, [pc, #160]	; (6ac4 <hif_receive+0xc4>)
    6a24:	4798      	blx	r3
    6a26:	4828      	ldr	r0, [pc, #160]	; (6ac8 <hif_receive+0xc8>)
    6a28:	4b28      	ldr	r3, [pc, #160]	; (6acc <hif_receive+0xcc>)
    6a2a:	4798      	blx	r3
    6a2c:	200d      	movs	r0, #13
    6a2e:	4b28      	ldr	r3, [pc, #160]	; (6ad0 <hif_receive+0xd0>)
    6a30:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    6a32:	200c      	movs	r0, #12
    6a34:	4240      	negs	r0, r0
    6a36:	e7f0      	b.n	6a1a <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    6a38:	4b26      	ldr	r3, [pc, #152]	; (6ad4 <hif_receive+0xd4>)
    6a3a:	689b      	ldr	r3, [r3, #8]
    6a3c:	429a      	cmp	r2, r3
    6a3e:	d81a      	bhi.n	6a76 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    6a40:	4b24      	ldr	r3, [pc, #144]	; (6ad4 <hif_receive+0xd4>)
    6a42:	685b      	ldr	r3, [r3, #4]
    6a44:	4298      	cmp	r0, r3
    6a46:	d326      	bcc.n	6a96 <hif_receive+0x96>
    6a48:	1886      	adds	r6, r0, r2
    6a4a:	4a22      	ldr	r2, [pc, #136]	; (6ad4 <hif_receive+0xd4>)
    6a4c:	6853      	ldr	r3, [r2, #4]
    6a4e:	6892      	ldr	r2, [r2, #8]
    6a50:	189b      	adds	r3, r3, r2
    6a52:	429e      	cmp	r6, r3
    6a54:	d81f      	bhi.n	6a96 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    6a56:	0022      	movs	r2, r4
    6a58:	4b1f      	ldr	r3, [pc, #124]	; (6ad8 <hif_receive+0xd8>)
    6a5a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    6a5c:	2800      	cmp	r0, #0
    6a5e:	d1dc      	bne.n	6a1a <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    6a60:	4a1c      	ldr	r2, [pc, #112]	; (6ad4 <hif_receive+0xd4>)
    6a62:	6853      	ldr	r3, [r2, #4]
    6a64:	6892      	ldr	r2, [r2, #8]
    6a66:	189b      	adds	r3, r3, r2
    6a68:	429e      	cmp	r6, r3
    6a6a:	d001      	beq.n	6a70 <hif_receive+0x70>
    6a6c:	2d00      	cmp	r5, #0
    6a6e:	d0d4      	beq.n	6a1a <hif_receive+0x1a>
		ret = hif_set_rx_done();
    6a70:	4b10      	ldr	r3, [pc, #64]	; (6ab4 <hif_receive+0xb4>)
    6a72:	4798      	blx	r3
    6a74:	e7d1      	b.n	6a1a <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    6a76:	4a19      	ldr	r2, [pc, #100]	; (6adc <hif_receive+0xdc>)
    6a78:	4910      	ldr	r1, [pc, #64]	; (6abc <hif_receive+0xbc>)
    6a7a:	4811      	ldr	r0, [pc, #68]	; (6ac0 <hif_receive+0xc0>)
    6a7c:	4d11      	ldr	r5, [pc, #68]	; (6ac4 <hif_receive+0xc4>)
    6a7e:	47a8      	blx	r5
    6a80:	4b14      	ldr	r3, [pc, #80]	; (6ad4 <hif_receive+0xd4>)
    6a82:	689a      	ldr	r2, [r3, #8]
    6a84:	0021      	movs	r1, r4
    6a86:	4816      	ldr	r0, [pc, #88]	; (6ae0 <hif_receive+0xe0>)
    6a88:	47a8      	blx	r5
    6a8a:	200d      	movs	r0, #13
    6a8c:	4b10      	ldr	r3, [pc, #64]	; (6ad0 <hif_receive+0xd0>)
    6a8e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    6a90:	200c      	movs	r0, #12
    6a92:	4240      	negs	r0, r0
		goto ERR1;
    6a94:	e7c1      	b.n	6a1a <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    6a96:	4a13      	ldr	r2, [pc, #76]	; (6ae4 <hif_receive+0xe4>)
    6a98:	4908      	ldr	r1, [pc, #32]	; (6abc <hif_receive+0xbc>)
    6a9a:	4809      	ldr	r0, [pc, #36]	; (6ac0 <hif_receive+0xc0>)
    6a9c:	4b09      	ldr	r3, [pc, #36]	; (6ac4 <hif_receive+0xc4>)
    6a9e:	4798      	blx	r3
    6aa0:	4811      	ldr	r0, [pc, #68]	; (6ae8 <hif_receive+0xe8>)
    6aa2:	4b0a      	ldr	r3, [pc, #40]	; (6acc <hif_receive+0xcc>)
    6aa4:	4798      	blx	r3
    6aa6:	200d      	movs	r0, #13
    6aa8:	4b09      	ldr	r3, [pc, #36]	; (6ad0 <hif_receive+0xd0>)
    6aaa:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    6aac:	200c      	movs	r0, #12
    6aae:	4240      	negs	r0, r0
		goto ERR1;
    6ab0:	e7b3      	b.n	6a1a <hif_receive+0x1a>
    6ab2:	46c0      	nop			; (mov r8, r8)
    6ab4:	00006321 	.word	0x00006321
    6ab8:	0000026b 	.word	0x0000026b
    6abc:	0000ede0 	.word	0x0000ede0
    6ac0:	0000ed74 	.word	0x0000ed74
    6ac4:	0000ce29 	.word	0x0000ce29
    6ac8:	0000efec 	.word	0x0000efec
    6acc:	0000cf45 	.word	0x0000cf45
    6ad0:	0000ce5d 	.word	0x0000ce5d
    6ad4:	20000694 	.word	0x20000694
    6ad8:	00007741 	.word	0x00007741
    6adc:	00000273 	.word	0x00000273
    6ae0:	0000f00c 	.word	0x0000f00c
    6ae4:	00000279 	.word	0x00000279
    6ae8:	0000f054 	.word	0x0000f054

00006aec <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    6aec:	b570      	push	{r4, r5, r6, lr}
    6aee:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    6af0:	2807      	cmp	r0, #7
    6af2:	d81f      	bhi.n	6b34 <hif_register_cb+0x48>
    6af4:	0083      	lsls	r3, r0, #2
    6af6:	4a16      	ldr	r2, [pc, #88]	; (6b50 <hif_register_cb+0x64>)
    6af8:	58d3      	ldr	r3, [r2, r3]
    6afa:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    6afc:	4b15      	ldr	r3, [pc, #84]	; (6b54 <hif_register_cb+0x68>)
    6afe:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    6b00:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    6b02:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    6b04:	4b13      	ldr	r3, [pc, #76]	; (6b54 <hif_register_cb+0x68>)
    6b06:	60d9      	str	r1, [r3, #12]
	sint8 ret = M2M_SUCCESS;
    6b08:	2000      	movs	r0, #0
			break;
    6b0a:	e7fa      	b.n	6b02 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    6b0c:	4b11      	ldr	r3, [pc, #68]	; (6b54 <hif_register_cb+0x68>)
    6b0e:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    6b10:	2000      	movs	r0, #0
			break;
    6b12:	e7f6      	b.n	6b02 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    6b14:	4b0f      	ldr	r3, [pc, #60]	; (6b54 <hif_register_cb+0x68>)
    6b16:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    6b18:	2000      	movs	r0, #0
			break;
    6b1a:	e7f2      	b.n	6b02 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    6b1c:	4b0d      	ldr	r3, [pc, #52]	; (6b54 <hif_register_cb+0x68>)
    6b1e:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    6b20:	2000      	movs	r0, #0
			break;
    6b22:	e7ee      	b.n	6b02 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    6b24:	4b0b      	ldr	r3, [pc, #44]	; (6b54 <hif_register_cb+0x68>)
    6b26:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    6b28:	2000      	movs	r0, #0
			break;
    6b2a:	e7ea      	b.n	6b02 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    6b2c:	4b09      	ldr	r3, [pc, #36]	; (6b54 <hif_register_cb+0x68>)
    6b2e:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    6b30:	2000      	movs	r0, #0
			break;
    6b32:	e7e6      	b.n	6b02 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    6b34:	4a08      	ldr	r2, [pc, #32]	; (6b58 <hif_register_cb+0x6c>)
    6b36:	4909      	ldr	r1, [pc, #36]	; (6b5c <hif_register_cb+0x70>)
    6b38:	4809      	ldr	r0, [pc, #36]	; (6b60 <hif_register_cb+0x74>)
    6b3a:	4d0a      	ldr	r5, [pc, #40]	; (6b64 <hif_register_cb+0x78>)
    6b3c:	47a8      	blx	r5
    6b3e:	0021      	movs	r1, r4
    6b40:	4809      	ldr	r0, [pc, #36]	; (6b68 <hif_register_cb+0x7c>)
    6b42:	47a8      	blx	r5
    6b44:	200d      	movs	r0, #13
    6b46:	4b09      	ldr	r3, [pc, #36]	; (6b6c <hif_register_cb+0x80>)
    6b48:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    6b4a:	200c      	movs	r0, #12
    6b4c:	4240      	negs	r0, r0
			break;
    6b4e:	e7d8      	b.n	6b02 <hif_register_cb+0x16>
    6b50:	0000ed9c 	.word	0x0000ed9c
    6b54:	20000694 	.word	0x20000694
    6b58:	000002b1 	.word	0x000002b1
    6b5c:	0000edec 	.word	0x0000edec
    6b60:	0000ed74 	.word	0x0000ed74
    6b64:	0000ce29 	.word	0x0000ce29
    6b68:	0000f098 	.word	0x0000f098
    6b6c:	0000ce5d 	.word	0x0000ce5d

00006b70 <hif_init>:
{
    6b70:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    6b72:	2228      	movs	r2, #40	; 0x28
    6b74:	2100      	movs	r1, #0
    6b76:	4806      	ldr	r0, [pc, #24]	; (6b90 <hif_init+0x20>)
    6b78:	4b06      	ldr	r3, [pc, #24]	; (6b94 <hif_init+0x24>)
    6b7a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    6b7c:	4806      	ldr	r0, [pc, #24]	; (6b98 <hif_init+0x28>)
    6b7e:	4b07      	ldr	r3, [pc, #28]	; (6b9c <hif_init+0x2c>)
    6b80:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    6b82:	4907      	ldr	r1, [pc, #28]	; (6ba0 <hif_init+0x30>)
    6b84:	2003      	movs	r0, #3
    6b86:	4b07      	ldr	r3, [pc, #28]	; (6ba4 <hif_init+0x34>)
    6b88:	4798      	blx	r3
}
    6b8a:	2000      	movs	r0, #0
    6b8c:	bd10      	pop	{r4, pc}
    6b8e:	46c0      	nop			; (mov r8, r8)
    6b90:	20000694 	.word	0x20000694
    6b94:	000062e1 	.word	0x000062e1
    6b98:	0000630d 	.word	0x0000630d
    6b9c:	00005f95 	.word	0x00005f95
    6ba0:	0000631d 	.word	0x0000631d
    6ba4:	00006aed 	.word	0x00006aed

00006ba8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    6ba8:	b530      	push	{r4, r5, lr}
    6baa:	b09f      	sub	sp, #124	; 0x7c
    6bac:	0004      	movs	r4, r0
    6bae:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    6bb0:	282c      	cmp	r0, #44	; 0x2c
    6bb2:	d02f      	beq.n	6c14 <m2m_wifi_cb+0x6c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    6bb4:	281b      	cmp	r0, #27
    6bb6:	d03d      	beq.n	6c34 <m2m_wifi_cb+0x8c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    6bb8:	2806      	cmp	r0, #6
    6bba:	d04b      	beq.n	6c54 <m2m_wifi_cb+0xac>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    6bbc:	280e      	cmp	r0, #14
    6bbe:	d027      	beq.n	6c10 <m2m_wifi_cb+0x68>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    6bc0:	2832      	cmp	r0, #50	; 0x32
    6bc2:	d057      	beq.n	6c74 <m2m_wifi_cb+0xcc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    6bc4:	282f      	cmp	r0, #47	; 0x2f
    6bc6:	d065      	beq.n	6c94 <m2m_wifi_cb+0xec>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    6bc8:	2834      	cmp	r0, #52	; 0x34
    6bca:	d100      	bne.n	6bce <m2m_wifi_cb+0x26>
    6bcc:	e077      	b.n	6cbe <m2m_wifi_cb+0x116>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    6bce:	2811      	cmp	r0, #17
    6bd0:	d100      	bne.n	6bd4 <m2m_wifi_cb+0x2c>
    6bd2:	e096      	b.n	6d02 <m2m_wifi_cb+0x15a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    6bd4:	2813      	cmp	r0, #19
    6bd6:	d100      	bne.n	6bda <m2m_wifi_cb+0x32>
    6bd8:	e0ac      	b.n	6d34 <m2m_wifi_cb+0x18c>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    6bda:	2804      	cmp	r0, #4
    6bdc:	d100      	bne.n	6be0 <m2m_wifi_cb+0x38>
    6bde:	e0bb      	b.n	6d58 <m2m_wifi_cb+0x1b0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    6be0:	2865      	cmp	r0, #101	; 0x65
    6be2:	d100      	bne.n	6be6 <m2m_wifi_cb+0x3e>
    6be4:	e0ca      	b.n	6d7c <m2m_wifi_cb+0x1d4>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    6be6:	2809      	cmp	r0, #9
    6be8:	d100      	bne.n	6bec <m2m_wifi_cb+0x44>
    6bea:	e0d9      	b.n	6da0 <m2m_wifi_cb+0x1f8>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    6bec:	282a      	cmp	r0, #42	; 0x2a
    6bee:	d100      	bne.n	6bf2 <m2m_wifi_cb+0x4a>
    6bf0:	e0e8      	b.n	6dc4 <m2m_wifi_cb+0x21c>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    6bf2:	2820      	cmp	r0, #32
    6bf4:	d100      	bne.n	6bf8 <m2m_wifi_cb+0x50>
    6bf6:	e0f7      	b.n	6de8 <m2m_wifi_cb+0x240>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    6bf8:	2292      	movs	r2, #146	; 0x92
    6bfa:	0052      	lsls	r2, r2, #1
    6bfc:	4989      	ldr	r1, [pc, #548]	; (6e24 <m2m_wifi_cb+0x27c>)
    6bfe:	488a      	ldr	r0, [pc, #552]	; (6e28 <m2m_wifi_cb+0x280>)
    6c00:	4d8a      	ldr	r5, [pc, #552]	; (6e2c <m2m_wifi_cb+0x284>)
    6c02:	47a8      	blx	r5
    6c04:	0021      	movs	r1, r4
    6c06:	488a      	ldr	r0, [pc, #552]	; (6e30 <m2m_wifi_cb+0x288>)
    6c08:	47a8      	blx	r5
    6c0a:	200d      	movs	r0, #13
    6c0c:	4b89      	ldr	r3, [pc, #548]	; (6e34 <m2m_wifi_cb+0x28c>)
    6c0e:	4798      	blx	r3
	}
}
    6c10:	b01f      	add	sp, #124	; 0x7c
    6c12:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    6c14:	2300      	movs	r3, #0
    6c16:	2204      	movs	r2, #4
    6c18:	a903      	add	r1, sp, #12
    6c1a:	0028      	movs	r0, r5
    6c1c:	4c86      	ldr	r4, [pc, #536]	; (6e38 <m2m_wifi_cb+0x290>)
    6c1e:	47a0      	blx	r4
    6c20:	2800      	cmp	r0, #0
    6c22:	d1f5      	bne.n	6c10 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6c24:	4b85      	ldr	r3, [pc, #532]	; (6e3c <m2m_wifi_cb+0x294>)
    6c26:	681b      	ldr	r3, [r3, #0]
    6c28:	2b00      	cmp	r3, #0
    6c2a:	d0f1      	beq.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    6c2c:	a903      	add	r1, sp, #12
    6c2e:	302c      	adds	r0, #44	; 0x2c
    6c30:	4798      	blx	r3
    6c32:	e7ed      	b.n	6c10 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    6c34:	2300      	movs	r3, #0
    6c36:	2208      	movs	r2, #8
    6c38:	a903      	add	r1, sp, #12
    6c3a:	0028      	movs	r0, r5
    6c3c:	4c7e      	ldr	r4, [pc, #504]	; (6e38 <m2m_wifi_cb+0x290>)
    6c3e:	47a0      	blx	r4
    6c40:	2800      	cmp	r0, #0
    6c42:	d1e5      	bne.n	6c10 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6c44:	4b7d      	ldr	r3, [pc, #500]	; (6e3c <m2m_wifi_cb+0x294>)
    6c46:	681b      	ldr	r3, [r3, #0]
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d0e1      	beq.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    6c4c:	a903      	add	r1, sp, #12
    6c4e:	301b      	adds	r0, #27
    6c50:	4798      	blx	r3
    6c52:	e7dd      	b.n	6c10 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    6c54:	2301      	movs	r3, #1
    6c56:	2230      	movs	r2, #48	; 0x30
    6c58:	a903      	add	r1, sp, #12
    6c5a:	0028      	movs	r0, r5
    6c5c:	4c76      	ldr	r4, [pc, #472]	; (6e38 <m2m_wifi_cb+0x290>)
    6c5e:	47a0      	blx	r4
    6c60:	2800      	cmp	r0, #0
    6c62:	d1d5      	bne.n	6c10 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    6c64:	4b75      	ldr	r3, [pc, #468]	; (6e3c <m2m_wifi_cb+0x294>)
    6c66:	681b      	ldr	r3, [r3, #0]
    6c68:	2b00      	cmp	r3, #0
    6c6a:	d0d1      	beq.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    6c6c:	a903      	add	r1, sp, #12
    6c6e:	3006      	adds	r0, #6
    6c70:	4798      	blx	r3
    6c72:	e7cd      	b.n	6c10 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    6c74:	2300      	movs	r3, #0
    6c76:	2214      	movs	r2, #20
    6c78:	a903      	add	r1, sp, #12
    6c7a:	0028      	movs	r0, r5
    6c7c:	4c6e      	ldr	r4, [pc, #440]	; (6e38 <m2m_wifi_cb+0x290>)
    6c7e:	47a0      	blx	r4
    6c80:	2800      	cmp	r0, #0
    6c82:	d1c5      	bne.n	6c10 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6c84:	4b6d      	ldr	r3, [pc, #436]	; (6e3c <m2m_wifi_cb+0x294>)
    6c86:	681b      	ldr	r3, [r3, #0]
    6c88:	2b00      	cmp	r3, #0
    6c8a:	d0c1      	beq.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    6c8c:	a903      	add	r1, sp, #12
    6c8e:	3032      	adds	r0, #50	; 0x32
    6c90:	4798      	blx	r3
    6c92:	e7bd      	b.n	6c10 <m2m_wifi_cb+0x68>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    6c94:	2264      	movs	r2, #100	; 0x64
    6c96:	2100      	movs	r1, #0
    6c98:	a803      	add	r0, sp, #12
    6c9a:	4b69      	ldr	r3, [pc, #420]	; (6e40 <m2m_wifi_cb+0x298>)
    6c9c:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    6c9e:	2300      	movs	r3, #0
    6ca0:	2264      	movs	r2, #100	; 0x64
    6ca2:	a903      	add	r1, sp, #12
    6ca4:	0028      	movs	r0, r5
    6ca6:	4c64      	ldr	r4, [pc, #400]	; (6e38 <m2m_wifi_cb+0x290>)
    6ca8:	47a0      	blx	r4
    6caa:	2800      	cmp	r0, #0
    6cac:	d1b0      	bne.n	6c10 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6cae:	4b63      	ldr	r3, [pc, #396]	; (6e3c <m2m_wifi_cb+0x294>)
    6cb0:	681b      	ldr	r3, [r3, #0]
    6cb2:	2b00      	cmp	r3, #0
    6cb4:	d0ac      	beq.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    6cb6:	a903      	add	r1, sp, #12
    6cb8:	302f      	adds	r0, #47	; 0x2f
    6cba:	4798      	blx	r3
    6cbc:	e7a8      	b.n	6c10 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    6cbe:	2300      	movs	r3, #0
    6cc0:	2204      	movs	r2, #4
    6cc2:	a903      	add	r1, sp, #12
    6cc4:	0028      	movs	r0, r5
    6cc6:	4c5c      	ldr	r4, [pc, #368]	; (6e38 <m2m_wifi_cb+0x290>)
    6cc8:	47a0      	blx	r4
    6cca:	2800      	cmp	r0, #0
    6ccc:	d1a0      	bne.n	6c10 <m2m_wifi_cb+0x68>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    6cce:	485d      	ldr	r0, [pc, #372]	; (6e44 <m2m_wifi_cb+0x29c>)
    6cd0:	4d56      	ldr	r5, [pc, #344]	; (6e2c <m2m_wifi_cb+0x284>)
    6cd2:	47a8      	blx	r5
    6cd4:	9c03      	ldr	r4, [sp, #12]
    6cd6:	0a23      	lsrs	r3, r4, #8
    6cd8:	20ff      	movs	r0, #255	; 0xff
    6cda:	4003      	ands	r3, r0
    6cdc:	0c22      	lsrs	r2, r4, #16
    6cde:	4002      	ands	r2, r0
    6ce0:	0e21      	lsrs	r1, r4, #24
    6ce2:	4020      	ands	r0, r4
    6ce4:	9000      	str	r0, [sp, #0]
    6ce6:	4858      	ldr	r0, [pc, #352]	; (6e48 <m2m_wifi_cb+0x2a0>)
    6ce8:	47a8      	blx	r5
    6cea:	200d      	movs	r0, #13
    6cec:	4b51      	ldr	r3, [pc, #324]	; (6e34 <m2m_wifi_cb+0x28c>)
    6cee:	4798      	blx	r3
			if (gpfAppWifiCb)
    6cf0:	4b52      	ldr	r3, [pc, #328]	; (6e3c <m2m_wifi_cb+0x294>)
    6cf2:	681b      	ldr	r3, [r3, #0]
    6cf4:	2b00      	cmp	r3, #0
    6cf6:	d100      	bne.n	6cfa <m2m_wifi_cb+0x152>
    6cf8:	e78a      	b.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    6cfa:	2100      	movs	r1, #0
    6cfc:	2034      	movs	r0, #52	; 0x34
    6cfe:	4798      	blx	r3
    6d00:	e786      	b.n	6c10 <m2m_wifi_cb+0x68>
		gu8scanInProgress = 0;
    6d02:	2200      	movs	r2, #0
    6d04:	4b51      	ldr	r3, [pc, #324]	; (6e4c <m2m_wifi_cb+0x2a4>)
    6d06:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    6d08:	2300      	movs	r3, #0
    6d0a:	3204      	adds	r2, #4
    6d0c:	a903      	add	r1, sp, #12
    6d0e:	0028      	movs	r0, r5
    6d10:	4c49      	ldr	r4, [pc, #292]	; (6e38 <m2m_wifi_cb+0x290>)
    6d12:	47a0      	blx	r4
    6d14:	2800      	cmp	r0, #0
    6d16:	d000      	beq.n	6d1a <m2m_wifi_cb+0x172>
    6d18:	e77a      	b.n	6c10 <m2m_wifi_cb+0x68>
			gu8ChNum = strState.u8NumofCh;
    6d1a:	ab03      	add	r3, sp, #12
    6d1c:	781a      	ldrb	r2, [r3, #0]
    6d1e:	4b4c      	ldr	r3, [pc, #304]	; (6e50 <m2m_wifi_cb+0x2a8>)
    6d20:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    6d22:	4b46      	ldr	r3, [pc, #280]	; (6e3c <m2m_wifi_cb+0x294>)
    6d24:	681b      	ldr	r3, [r3, #0]
    6d26:	2b00      	cmp	r3, #0
    6d28:	d100      	bne.n	6d2c <m2m_wifi_cb+0x184>
    6d2a:	e771      	b.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    6d2c:	a903      	add	r1, sp, #12
    6d2e:	3011      	adds	r0, #17
    6d30:	4798      	blx	r3
    6d32:	e76d      	b.n	6c10 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    6d34:	2300      	movs	r3, #0
    6d36:	222c      	movs	r2, #44	; 0x2c
    6d38:	a903      	add	r1, sp, #12
    6d3a:	0028      	movs	r0, r5
    6d3c:	4c3e      	ldr	r4, [pc, #248]	; (6e38 <m2m_wifi_cb+0x290>)
    6d3e:	47a0      	blx	r4
    6d40:	2800      	cmp	r0, #0
    6d42:	d000      	beq.n	6d46 <m2m_wifi_cb+0x19e>
    6d44:	e764      	b.n	6c10 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6d46:	4b3d      	ldr	r3, [pc, #244]	; (6e3c <m2m_wifi_cb+0x294>)
    6d48:	681b      	ldr	r3, [r3, #0]
    6d4a:	2b00      	cmp	r3, #0
    6d4c:	d100      	bne.n	6d50 <m2m_wifi_cb+0x1a8>
    6d4e:	e75f      	b.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    6d50:	a903      	add	r1, sp, #12
    6d52:	3013      	adds	r0, #19
    6d54:	4798      	blx	r3
    6d56:	e75b      	b.n	6c10 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    6d58:	2300      	movs	r3, #0
    6d5a:	2204      	movs	r2, #4
    6d5c:	a91c      	add	r1, sp, #112	; 0x70
    6d5e:	0028      	movs	r0, r5
    6d60:	4c35      	ldr	r4, [pc, #212]	; (6e38 <m2m_wifi_cb+0x290>)
    6d62:	47a0      	blx	r4
    6d64:	2800      	cmp	r0, #0
    6d66:	d000      	beq.n	6d6a <m2m_wifi_cb+0x1c2>
    6d68:	e752      	b.n	6c10 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6d6a:	4b34      	ldr	r3, [pc, #208]	; (6e3c <m2m_wifi_cb+0x294>)
    6d6c:	681b      	ldr	r3, [r3, #0]
    6d6e:	2b00      	cmp	r3, #0
    6d70:	d100      	bne.n	6d74 <m2m_wifi_cb+0x1cc>
    6d72:	e74d      	b.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    6d74:	a91c      	add	r1, sp, #112	; 0x70
    6d76:	3004      	adds	r0, #4
    6d78:	4798      	blx	r3
    6d7a:	e749      	b.n	6c10 <m2m_wifi_cb+0x68>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    6d7c:	2300      	movs	r3, #0
    6d7e:	2204      	movs	r2, #4
    6d80:	a91c      	add	r1, sp, #112	; 0x70
    6d82:	0028      	movs	r0, r5
    6d84:	4c2c      	ldr	r4, [pc, #176]	; (6e38 <m2m_wifi_cb+0x290>)
    6d86:	47a0      	blx	r4
    6d88:	2800      	cmp	r0, #0
    6d8a:	d000      	beq.n	6d8e <m2m_wifi_cb+0x1e6>
    6d8c:	e740      	b.n	6c10 <m2m_wifi_cb+0x68>
			if (gpfAppWifiCb)
    6d8e:	4b2b      	ldr	r3, [pc, #172]	; (6e3c <m2m_wifi_cb+0x294>)
    6d90:	681b      	ldr	r3, [r3, #0]
    6d92:	2b00      	cmp	r3, #0
    6d94:	d100      	bne.n	6d98 <m2m_wifi_cb+0x1f0>
    6d96:	e73b      	b.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    6d98:	a91c      	add	r1, sp, #112	; 0x70
    6d9a:	3065      	adds	r0, #101	; 0x65
    6d9c:	4798      	blx	r3
    6d9e:	e737      	b.n	6c10 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    6da0:	2301      	movs	r3, #1
    6da2:	2264      	movs	r2, #100	; 0x64
    6da4:	a903      	add	r1, sp, #12
    6da6:	0028      	movs	r0, r5
    6da8:	4c23      	ldr	r4, [pc, #140]	; (6e38 <m2m_wifi_cb+0x290>)
    6daa:	47a0      	blx	r4
    6dac:	2800      	cmp	r0, #0
    6dae:	d000      	beq.n	6db2 <m2m_wifi_cb+0x20a>
    6db0:	e72e      	b.n	6c10 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    6db2:	4b22      	ldr	r3, [pc, #136]	; (6e3c <m2m_wifi_cb+0x294>)
    6db4:	681b      	ldr	r3, [r3, #0]
    6db6:	2b00      	cmp	r3, #0
    6db8:	d100      	bne.n	6dbc <m2m_wifi_cb+0x214>
    6dba:	e729      	b.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    6dbc:	a903      	add	r1, sp, #12
    6dbe:	3009      	adds	r0, #9
    6dc0:	4798      	blx	r3
    6dc2:	e725      	b.n	6c10 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    6dc4:	2301      	movs	r3, #1
    6dc6:	2204      	movs	r2, #4
    6dc8:	a903      	add	r1, sp, #12
    6dca:	0028      	movs	r0, r5
    6dcc:	4c1a      	ldr	r4, [pc, #104]	; (6e38 <m2m_wifi_cb+0x290>)
    6dce:	47a0      	blx	r4
    6dd0:	2800      	cmp	r0, #0
    6dd2:	d000      	beq.n	6dd6 <m2m_wifi_cb+0x22e>
    6dd4:	e71c      	b.n	6c10 <m2m_wifi_cb+0x68>
			if(gpfAppWifiCb)
    6dd6:	4b19      	ldr	r3, [pc, #100]	; (6e3c <m2m_wifi_cb+0x294>)
    6dd8:	681b      	ldr	r3, [r3, #0]
    6dda:	2b00      	cmp	r3, #0
    6ddc:	d100      	bne.n	6de0 <m2m_wifi_cb+0x238>
    6dde:	e717      	b.n	6c10 <m2m_wifi_cb+0x68>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    6de0:	a903      	add	r1, sp, #12
    6de2:	302a      	adds	r0, #42	; 0x2a
    6de4:	4798      	blx	r3
    6de6:	e713      	b.n	6c10 <m2m_wifi_cb+0x68>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    6de8:	2300      	movs	r3, #0
    6dea:	2208      	movs	r2, #8
    6dec:	a903      	add	r1, sp, #12
    6dee:	0028      	movs	r0, r5
    6df0:	4c11      	ldr	r4, [pc, #68]	; (6e38 <m2m_wifi_cb+0x290>)
    6df2:	47a0      	blx	r4
    6df4:	2800      	cmp	r0, #0
    6df6:	d000      	beq.n	6dfa <m2m_wifi_cb+0x252>
    6df8:	e70a      	b.n	6c10 <m2m_wifi_cb+0x68>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    6dfa:	ab03      	add	r3, sp, #12
    6dfc:	889a      	ldrh	r2, [r3, #4]
    6dfe:	0028      	movs	r0, r5
    6e00:	3008      	adds	r0, #8
    6e02:	2301      	movs	r3, #1
    6e04:	9903      	ldr	r1, [sp, #12]
    6e06:	4c0c      	ldr	r4, [pc, #48]	; (6e38 <m2m_wifi_cb+0x290>)
    6e08:	47a0      	blx	r4
    6e0a:	2800      	cmp	r0, #0
    6e0c:	d000      	beq.n	6e10 <m2m_wifi_cb+0x268>
    6e0e:	e6ff      	b.n	6c10 <m2m_wifi_cb+0x68>
				if(gpfAppWifiCb)
    6e10:	4b0a      	ldr	r3, [pc, #40]	; (6e3c <m2m_wifi_cb+0x294>)
    6e12:	681b      	ldr	r3, [r3, #0]
    6e14:	2b00      	cmp	r3, #0
    6e16:	d100      	bne.n	6e1a <m2m_wifi_cb+0x272>
    6e18:	e6fa      	b.n	6c10 <m2m_wifi_cb+0x68>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    6e1a:	a903      	add	r1, sp, #12
    6e1c:	3020      	adds	r0, #32
    6e1e:	4798      	blx	r3
    6e20:	e6f6      	b.n	6c10 <m2m_wifi_cb+0x68>
    6e22:	46c0      	nop			; (mov r8, r8)
    6e24:	0000f0dc 	.word	0x0000f0dc
    6e28:	0000ed74 	.word	0x0000ed74
    6e2c:	0000ce29 	.word	0x0000ce29
    6e30:	0000f12c 	.word	0x0000f12c
    6e34:	0000ce5d 	.word	0x0000ce5d
    6e38:	00006a01 	.word	0x00006a01
    6e3c:	2000041c 	.word	0x2000041c
    6e40:	000062e1 	.word	0x000062e1
    6e44:	0000f0a4 	.word	0x0000f0a4
    6e48:	0000f10c 	.word	0x0000f10c
    6e4c:	20000421 	.word	0x20000421
    6e50:	20000420 	.word	0x20000420

00006e54 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    6e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e56:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    6e58:	2201      	movs	r2, #1
    6e5a:	230f      	movs	r3, #15
    6e5c:	446b      	add	r3, sp
    6e5e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    6e60:	2800      	cmp	r0, #0
    6e62:	d061      	beq.n	6f28 <m2m_wifi_init+0xd4>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    6e64:	6802      	ldr	r2, [r0, #0]
    6e66:	4b32      	ldr	r3, [pc, #200]	; (6f30 <m2m_wifi_init+0xdc>)
    6e68:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    6e6a:	2200      	movs	r2, #0
    6e6c:	4b31      	ldr	r3, [pc, #196]	; (6f34 <m2m_wifi_init+0xe0>)
    6e6e:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    6e70:	200f      	movs	r0, #15
    6e72:	4468      	add	r0, sp
    6e74:	4b30      	ldr	r3, [pc, #192]	; (6f38 <m2m_wifi_init+0xe4>)
    6e76:	4798      	blx	r3
    6e78:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    6e7a:	d002      	beq.n	6e82 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    6e7c:	0020      	movs	r0, r4
    6e7e:	b00f      	add	sp, #60	; 0x3c
    6e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    6e82:	2000      	movs	r0, #0
    6e84:	4b2d      	ldr	r3, [pc, #180]	; (6f3c <m2m_wifi_init+0xe8>)
    6e86:	4798      	blx	r3
    6e88:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    6e8a:	d149      	bne.n	6f20 <m2m_wifi_init+0xcc>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    6e8c:	492c      	ldr	r1, [pc, #176]	; (6f40 <m2m_wifi_init+0xec>)
    6e8e:	2001      	movs	r0, #1
    6e90:	4b2c      	ldr	r3, [pc, #176]	; (6f44 <m2m_wifi_init+0xf0>)
    6e92:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    6e94:	ae04      	add	r6, sp, #16
    6e96:	0030      	movs	r0, r6
    6e98:	4b2b      	ldr	r3, [pc, #172]	; (6f48 <m2m_wifi_init+0xf4>)
    6e9a:	4798      	blx	r3
    6e9c:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    6e9e:	482b      	ldr	r0, [pc, #172]	; (6f4c <m2m_wifi_init+0xf8>)
    6ea0:	4d2b      	ldr	r5, [pc, #172]	; (6f50 <m2m_wifi_init+0xfc>)
    6ea2:	47a8      	blx	r5
    6ea4:	79b3      	ldrb	r3, [r6, #6]
    6ea6:	7972      	ldrb	r2, [r6, #5]
    6ea8:	7931      	ldrb	r1, [r6, #4]
    6eaa:	8c30      	ldrh	r0, [r6, #32]
    6eac:	9000      	str	r0, [sp, #0]
    6eae:	4829      	ldr	r0, [pc, #164]	; (6f54 <m2m_wifi_init+0x100>)
    6eb0:	47a8      	blx	r5
    6eb2:	200d      	movs	r0, #13
    6eb4:	4f28      	ldr	r7, [pc, #160]	; (6f58 <m2m_wifi_init+0x104>)
    6eb6:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    6eb8:	4824      	ldr	r0, [pc, #144]	; (6f4c <m2m_wifi_init+0xf8>)
    6eba:	47a8      	blx	r5
    6ebc:	2226      	movs	r2, #38	; 0x26
    6ebe:	446a      	add	r2, sp
    6ec0:	211a      	movs	r1, #26
    6ec2:	4469      	add	r1, sp
    6ec4:	4825      	ldr	r0, [pc, #148]	; (6f5c <m2m_wifi_init+0x108>)
    6ec6:	47a8      	blx	r5
    6ec8:	200d      	movs	r0, #13
    6eca:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    6ecc:	481f      	ldr	r0, [pc, #124]	; (6f4c <m2m_wifi_init+0xf8>)
    6ece:	47a8      	blx	r5
    6ed0:	7a73      	ldrb	r3, [r6, #9]
    6ed2:	7a32      	ldrb	r2, [r6, #8]
    6ed4:	79f1      	ldrb	r1, [r6, #7]
    6ed6:	4822      	ldr	r0, [pc, #136]	; (6f60 <m2m_wifi_init+0x10c>)
    6ed8:	47a8      	blx	r5
    6eda:	200d      	movs	r0, #13
    6edc:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    6ede:	481b      	ldr	r0, [pc, #108]	; (6f4c <m2m_wifi_init+0xf8>)
    6ee0:	47a8      	blx	r5
    6ee2:	2302      	movs	r3, #2
    6ee4:	2205      	movs	r2, #5
    6ee6:	2113      	movs	r1, #19
    6ee8:	481e      	ldr	r0, [pc, #120]	; (6f64 <m2m_wifi_init+0x110>)
    6eea:	47a8      	blx	r5
    6eec:	200d      	movs	r0, #13
    6eee:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    6ef0:	4816      	ldr	r0, [pc, #88]	; (6f4c <m2m_wifi_init+0xf8>)
    6ef2:	47a8      	blx	r5
    6ef4:	4a1c      	ldr	r2, [pc, #112]	; (6f68 <m2m_wifi_init+0x114>)
    6ef6:	491d      	ldr	r1, [pc, #116]	; (6f6c <m2m_wifi_init+0x118>)
    6ef8:	481d      	ldr	r0, [pc, #116]	; (6f70 <m2m_wifi_init+0x11c>)
    6efa:	47a8      	blx	r5
    6efc:	200d      	movs	r0, #13
    6efe:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    6f00:	0023      	movs	r3, r4
    6f02:	330d      	adds	r3, #13
    6f04:	d1ba      	bne.n	6e7c <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    6f06:	22e8      	movs	r2, #232	; 0xe8
    6f08:	32ff      	adds	r2, #255	; 0xff
    6f0a:	491a      	ldr	r1, [pc, #104]	; (6f74 <m2m_wifi_init+0x120>)
    6f0c:	481a      	ldr	r0, [pc, #104]	; (6f78 <m2m_wifi_init+0x124>)
    6f0e:	4b10      	ldr	r3, [pc, #64]	; (6f50 <m2m_wifi_init+0xfc>)
    6f10:	4798      	blx	r3
    6f12:	481a      	ldr	r0, [pc, #104]	; (6f7c <m2m_wifi_init+0x128>)
    6f14:	4b1a      	ldr	r3, [pc, #104]	; (6f80 <m2m_wifi_init+0x12c>)
    6f16:	4798      	blx	r3
    6f18:	200d      	movs	r0, #13
    6f1a:	4b0f      	ldr	r3, [pc, #60]	; (6f58 <m2m_wifi_init+0x104>)
    6f1c:	4798      	blx	r3
    6f1e:	e7ad      	b.n	6e7c <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    6f20:	2000      	movs	r0, #0
    6f22:	4b18      	ldr	r3, [pc, #96]	; (6f84 <m2m_wifi_init+0x130>)
    6f24:	4798      	blx	r3
    6f26:	e7a9      	b.n	6e7c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    6f28:	240c      	movs	r4, #12
    6f2a:	4264      	negs	r4, r4
    6f2c:	e7a6      	b.n	6e7c <m2m_wifi_init+0x28>
    6f2e:	46c0      	nop			; (mov r8, r8)
    6f30:	2000041c 	.word	0x2000041c
    6f34:	20000421 	.word	0x20000421
    6f38:	000078f5 	.word	0x000078f5
    6f3c:	00006b71 	.word	0x00006b71
    6f40:	00006ba9 	.word	0x00006ba9
    6f44:	00006aed 	.word	0x00006aed
    6f48:	00007811 	.word	0x00007811
    6f4c:	0000f0a4 	.word	0x0000f0a4
    6f50:	0000ce29 	.word	0x0000ce29
    6f54:	0000f1e8 	.word	0x0000f1e8
    6f58:	0000ce5d 	.word	0x0000ce5d
    6f5c:	0000f210 	.word	0x0000f210
    6f60:	0000f22c 	.word	0x0000f22c
    6f64:	0000f250 	.word	0x0000f250
    6f68:	0000f268 	.word	0x0000f268
    6f6c:	0000f274 	.word	0x0000f274
    6f70:	0000f280 	.word	0x0000f280
    6f74:	0000f0e8 	.word	0x0000f0e8
    6f78:	0000ed74 	.word	0x0000ed74
    6f7c:	0000f298 	.word	0x0000f298
    6f80:	0000cf45 	.word	0x0000cf45
    6f84:	000079c9 	.word	0x000079c9

00006f88 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    6f88:	b510      	push	{r4, lr}
	return hif_handle_isr();
    6f8a:	4b01      	ldr	r3, [pc, #4]	; (6f90 <m2m_wifi_handle_events+0x8>)
    6f8c:	4798      	blx	r3
}
    6f8e:	bd10      	pop	{r4, pc}
    6f90:	00006625 	.word	0x00006625

00006f94 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    6f94:	b5f0      	push	{r4, r5, r6, r7, lr}
    6f96:	46ce      	mov	lr, r9
    6f98:	4647      	mov	r7, r8
    6f9a:	b580      	push	{r7, lr}
    6f9c:	b0a3      	sub	sp, #140	; 0x8c
    6f9e:	9005      	str	r0, [sp, #20]
    6fa0:	000c      	movs	r4, r1
    6fa2:	0015      	movs	r5, r2
    6fa4:	001f      	movs	r7, r3
    6fa6:	ab2a      	add	r3, sp, #168	; 0xa8
    6fa8:	881b      	ldrh	r3, [r3, #0]
    6faa:	4699      	mov	r9, r3
    6fac:	ab2b      	add	r3, sp, #172	; 0xac
    6fae:	781b      	ldrb	r3, [r3, #0]
    6fb0:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    6fb2:	2a01      	cmp	r2, #1
    6fb4:	d003      	beq.n	6fbe <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    6fb6:	2f00      	cmp	r7, #0
    6fb8:	d040      	beq.n	703c <m2m_wifi_connect_sc+0xa8>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    6fba:	2a02      	cmp	r2, #2
    6fbc:	d04c      	beq.n	7058 <m2m_wifi_connect_sc+0xc4>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    6fbe:	1e63      	subs	r3, r4, #1
    6fc0:	2b1f      	cmp	r3, #31
    6fc2:	d900      	bls.n	6fc6 <m2m_wifi_connect_sc+0x32>
    6fc4:	e078      	b.n	70b8 <m2m_wifi_connect_sc+0x124>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    6fc6:	464b      	mov	r3, r9
    6fc8:	3b01      	subs	r3, #1
    6fca:	b29b      	uxth	r3, r3
    6fcc:	2b0d      	cmp	r3, #13
    6fce:	d903      	bls.n	6fd8 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    6fd0:	464b      	mov	r3, r9
    6fd2:	2bff      	cmp	r3, #255	; 0xff
    6fd4:	d000      	beq.n	6fd8 <m2m_wifi_connect_sc+0x44>
    6fd6:	e07d      	b.n	70d4 <m2m_wifi_connect_sc+0x140>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    6fd8:	ae07      	add	r6, sp, #28
    6fda:	0022      	movs	r2, r4
    6fdc:	9905      	ldr	r1, [sp, #20]
    6fde:	205a      	movs	r0, #90	; 0x5a
    6fe0:	ab02      	add	r3, sp, #8
    6fe2:	469c      	mov	ip, r3
    6fe4:	4460      	add	r0, ip
    6fe6:	4b78      	ldr	r3, [pc, #480]	; (71c8 <m2m_wifi_connect_sc+0x234>)
    6fe8:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    6fea:	1934      	adds	r4, r6, r4
    6fec:	3446      	adds	r4, #70	; 0x46
    6fee:	2300      	movs	r3, #0
    6ff0:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    6ff2:	3344      	adds	r3, #68	; 0x44
    6ff4:	464a      	mov	r2, r9
    6ff6:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    6ff8:	4643      	mov	r3, r8
    6ffa:	1e5a      	subs	r2, r3, #1
    6ffc:	4193      	sbcs	r3, r2
    6ffe:	2267      	movs	r2, #103	; 0x67
    7000:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    7002:	2341      	movs	r3, #65	; 0x41
    7004:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    7006:	2d03      	cmp	r5, #3
    7008:	d100      	bne.n	700c <m2m_wifi_connect_sc+0x78>
    700a:	e072      	b.n	70f2 <m2m_wifi_connect_sc+0x15e>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    700c:	2d02      	cmp	r5, #2
    700e:	d100      	bne.n	7012 <m2m_wifi_connect_sc+0x7e>
    7010:	e0ab      	b.n	716a <m2m_wifi_connect_sc+0x1d6>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    7012:	2d04      	cmp	r5, #4
    7014:	d100      	bne.n	7018 <m2m_wifi_connect_sc+0x84>
    7016:	e0c3      	b.n	71a0 <m2m_wifi_connect_sc+0x20c>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    7018:	2d01      	cmp	r5, #1
    701a:	d000      	beq.n	701e <m2m_wifi_connect_sc+0x8a>
    701c:	e0c6      	b.n	71ac <m2m_wifi_connect_sc+0x218>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    701e:	2300      	movs	r3, #0
    7020:	9302      	str	r3, [sp, #8]
    7022:	9301      	str	r3, [sp, #4]
    7024:	9300      	str	r3, [sp, #0]
    7026:	336c      	adds	r3, #108	; 0x6c
    7028:	aa07      	add	r2, sp, #28
    702a:	2128      	movs	r1, #40	; 0x28
    702c:	2001      	movs	r0, #1
    702e:	4c67      	ldr	r4, [pc, #412]	; (71cc <m2m_wifi_connect_sc+0x238>)
    7030:	47a0      	blx	r4

ERR1:
	return ret;
}
    7032:	b023      	add	sp, #140	; 0x8c
    7034:	bc0c      	pop	{r2, r3}
    7036:	4690      	mov	r8, r2
    7038:	4699      	mov	r9, r3
    703a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    703c:	4a64      	ldr	r2, [pc, #400]	; (71d0 <m2m_wifi_connect_sc+0x23c>)
    703e:	4965      	ldr	r1, [pc, #404]	; (71d4 <m2m_wifi_connect_sc+0x240>)
    7040:	4865      	ldr	r0, [pc, #404]	; (71d8 <m2m_wifi_connect_sc+0x244>)
    7042:	4b66      	ldr	r3, [pc, #408]	; (71dc <m2m_wifi_connect_sc+0x248>)
    7044:	4798      	blx	r3
    7046:	4866      	ldr	r0, [pc, #408]	; (71e0 <m2m_wifi_connect_sc+0x24c>)
    7048:	4b66      	ldr	r3, [pc, #408]	; (71e4 <m2m_wifi_connect_sc+0x250>)
    704a:	4798      	blx	r3
    704c:	200d      	movs	r0, #13
    704e:	4b66      	ldr	r3, [pc, #408]	; (71e8 <m2m_wifi_connect_sc+0x254>)
    7050:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    7052:	200c      	movs	r0, #12
    7054:	4240      	negs	r0, r0
			goto ERR1;
    7056:	e7ec      	b.n	7032 <m2m_wifi_connect_sc+0x9e>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    7058:	0038      	movs	r0, r7
    705a:	4b64      	ldr	r3, [pc, #400]	; (71ec <m2m_wifi_connect_sc+0x258>)
    705c:	4798      	blx	r3
    705e:	2840      	cmp	r0, #64	; 0x40
    7060:	d1ad      	bne.n	6fbe <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    7062:	783b      	ldrb	r3, [r7, #0]
    7064:	001a      	movs	r2, r3
    7066:	3a30      	subs	r2, #48	; 0x30
    7068:	2a36      	cmp	r2, #54	; 0x36
    706a:	d817      	bhi.n	709c <m2m_wifi_connect_sc+0x108>
    706c:	3a0a      	subs	r2, #10
    706e:	2a06      	cmp	r2, #6
    7070:	d914      	bls.n	709c <m2m_wifi_connect_sc+0x108>
    7072:	3b47      	subs	r3, #71	; 0x47
    7074:	2b19      	cmp	r3, #25
    7076:	d911      	bls.n	709c <m2m_wifi_connect_sc+0x108>
    7078:	1c7a      	adds	r2, r7, #1
    707a:	0038      	movs	r0, r7
    707c:	3040      	adds	r0, #64	; 0x40
    707e:	7813      	ldrb	r3, [r2, #0]
    7080:	0019      	movs	r1, r3
    7082:	3930      	subs	r1, #48	; 0x30
    7084:	2936      	cmp	r1, #54	; 0x36
    7086:	d809      	bhi.n	709c <m2m_wifi_connect_sc+0x108>
    7088:	390a      	subs	r1, #10
    708a:	2906      	cmp	r1, #6
    708c:	d906      	bls.n	709c <m2m_wifi_connect_sc+0x108>
    708e:	3b47      	subs	r3, #71	; 0x47
    7090:	2b19      	cmp	r3, #25
    7092:	d903      	bls.n	709c <m2m_wifi_connect_sc+0x108>
    7094:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    7096:	4282      	cmp	r2, r0
    7098:	d1f1      	bne.n	707e <m2m_wifi_connect_sc+0xea>
    709a:	e790      	b.n	6fbe <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    709c:	4a54      	ldr	r2, [pc, #336]	; (71f0 <m2m_wifi_connect_sc+0x25c>)
    709e:	494d      	ldr	r1, [pc, #308]	; (71d4 <m2m_wifi_connect_sc+0x240>)
    70a0:	484d      	ldr	r0, [pc, #308]	; (71d8 <m2m_wifi_connect_sc+0x244>)
    70a2:	4b4e      	ldr	r3, [pc, #312]	; (71dc <m2m_wifi_connect_sc+0x248>)
    70a4:	4798      	blx	r3
    70a6:	4853      	ldr	r0, [pc, #332]	; (71f4 <m2m_wifi_connect_sc+0x260>)
    70a8:	4b4e      	ldr	r3, [pc, #312]	; (71e4 <m2m_wifi_connect_sc+0x250>)
    70aa:	4798      	blx	r3
    70ac:	200d      	movs	r0, #13
    70ae:	4b4e      	ldr	r3, [pc, #312]	; (71e8 <m2m_wifi_connect_sc+0x254>)
    70b0:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    70b2:	200c      	movs	r0, #12
    70b4:	4240      	negs	r0, r0
					goto ERR1;
    70b6:	e7bc      	b.n	7032 <m2m_wifi_connect_sc+0x9e>
		M2M_ERR("SSID LEN INVALID\n");
    70b8:	4a4f      	ldr	r2, [pc, #316]	; (71f8 <m2m_wifi_connect_sc+0x264>)
    70ba:	4946      	ldr	r1, [pc, #280]	; (71d4 <m2m_wifi_connect_sc+0x240>)
    70bc:	4846      	ldr	r0, [pc, #280]	; (71d8 <m2m_wifi_connect_sc+0x244>)
    70be:	4b47      	ldr	r3, [pc, #284]	; (71dc <m2m_wifi_connect_sc+0x248>)
    70c0:	4798      	blx	r3
    70c2:	484e      	ldr	r0, [pc, #312]	; (71fc <m2m_wifi_connect_sc+0x268>)
    70c4:	4b47      	ldr	r3, [pc, #284]	; (71e4 <m2m_wifi_connect_sc+0x250>)
    70c6:	4798      	blx	r3
    70c8:	200d      	movs	r0, #13
    70ca:	4b47      	ldr	r3, [pc, #284]	; (71e8 <m2m_wifi_connect_sc+0x254>)
    70cc:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    70ce:	200c      	movs	r0, #12
    70d0:	4240      	negs	r0, r0
		goto ERR1;
    70d2:	e7ae      	b.n	7032 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("CH INVALID\n");
    70d4:	228d      	movs	r2, #141	; 0x8d
    70d6:	0092      	lsls	r2, r2, #2
    70d8:	493e      	ldr	r1, [pc, #248]	; (71d4 <m2m_wifi_connect_sc+0x240>)
    70da:	483f      	ldr	r0, [pc, #252]	; (71d8 <m2m_wifi_connect_sc+0x244>)
    70dc:	4b3f      	ldr	r3, [pc, #252]	; (71dc <m2m_wifi_connect_sc+0x248>)
    70de:	4798      	blx	r3
    70e0:	4847      	ldr	r0, [pc, #284]	; (7200 <m2m_wifi_connect_sc+0x26c>)
    70e2:	4b40      	ldr	r3, [pc, #256]	; (71e4 <m2m_wifi_connect_sc+0x250>)
    70e4:	4798      	blx	r3
    70e6:	200d      	movs	r0, #13
    70e8:	4b3f      	ldr	r3, [pc, #252]	; (71e8 <m2m_wifi_connect_sc+0x254>)
    70ea:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    70ec:	200c      	movs	r0, #12
    70ee:	4240      	negs	r0, r0
			goto ERR1;
    70f0:	e79f      	b.n	7032 <m2m_wifi_connect_sc+0x9e>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    70f2:	783b      	ldrb	r3, [r7, #0]
    70f4:	3b01      	subs	r3, #1
    70f6:	b2db      	uxtb	r3, r3
    70f8:	aa07      	add	r2, sp, #28
    70fa:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    70fc:	2b03      	cmp	r3, #3
    70fe:	d817      	bhi.n	7130 <m2m_wifi_connect_sc+0x19c>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    7100:	787a      	ldrb	r2, [r7, #1]
    7102:	1e51      	subs	r1, r2, #1
    7104:	ab07      	add	r3, sp, #28
    7106:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    7108:	2310      	movs	r3, #16
    710a:	0011      	movs	r1, r2
    710c:	4399      	bics	r1, r3
    710e:	290b      	cmp	r1, #11
    7110:	d01d      	beq.n	714e <m2m_wifi_connect_sc+0x1ba>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    7112:	4a3c      	ldr	r2, [pc, #240]	; (7204 <m2m_wifi_connect_sc+0x270>)
    7114:	492f      	ldr	r1, [pc, #188]	; (71d4 <m2m_wifi_connect_sc+0x240>)
    7116:	4830      	ldr	r0, [pc, #192]	; (71d8 <m2m_wifi_connect_sc+0x244>)
    7118:	4c30      	ldr	r4, [pc, #192]	; (71dc <m2m_wifi_connect_sc+0x248>)
    711a:	47a0      	blx	r4
    711c:	ab07      	add	r3, sp, #28
    711e:	7859      	ldrb	r1, [r3, #1]
    7120:	4839      	ldr	r0, [pc, #228]	; (7208 <m2m_wifi_connect_sc+0x274>)
    7122:	47a0      	blx	r4
    7124:	200d      	movs	r0, #13
    7126:	4b30      	ldr	r3, [pc, #192]	; (71e8 <m2m_wifi_connect_sc+0x254>)
    7128:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    712a:	200c      	movs	r0, #12
    712c:	4240      	negs	r0, r0
			goto ERR1;
    712e:	e780      	b.n	7032 <m2m_wifi_connect_sc+0x9e>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    7130:	4a36      	ldr	r2, [pc, #216]	; (720c <m2m_wifi_connect_sc+0x278>)
    7132:	4928      	ldr	r1, [pc, #160]	; (71d4 <m2m_wifi_connect_sc+0x240>)
    7134:	4828      	ldr	r0, [pc, #160]	; (71d8 <m2m_wifi_connect_sc+0x244>)
    7136:	4c29      	ldr	r4, [pc, #164]	; (71dc <m2m_wifi_connect_sc+0x248>)
    7138:	47a0      	blx	r4
    713a:	ab07      	add	r3, sp, #28
    713c:	7819      	ldrb	r1, [r3, #0]
    713e:	4834      	ldr	r0, [pc, #208]	; (7210 <m2m_wifi_connect_sc+0x27c>)
    7140:	47a0      	blx	r4
    7142:	200d      	movs	r0, #13
    7144:	4b28      	ldr	r3, [pc, #160]	; (71e8 <m2m_wifi_connect_sc+0x254>)
    7146:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    7148:	200c      	movs	r0, #12
    714a:	4240      	negs	r0, r0
			goto ERR1;
    714c:	e771      	b.n	7032 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    714e:	1cb9      	adds	r1, r7, #2
    7150:	2016      	movs	r0, #22
    7152:	ab02      	add	r3, sp, #8
    7154:	469c      	mov	ip, r3
    7156:	4460      	add	r0, ip
    7158:	4b1b      	ldr	r3, [pc, #108]	; (71c8 <m2m_wifi_connect_sc+0x234>)
    715a:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    715c:	787b      	ldrb	r3, [r7, #1]
    715e:	aa07      	add	r2, sp, #28
    7160:	4694      	mov	ip, r2
    7162:	4463      	add	r3, ip
    7164:	2200      	movs	r2, #0
    7166:	709a      	strb	r2, [r3, #2]
    7168:	e759      	b.n	701e <m2m_wifi_connect_sc+0x8a>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    716a:	0038      	movs	r0, r7
    716c:	4b1f      	ldr	r3, [pc, #124]	; (71ec <m2m_wifi_connect_sc+0x258>)
    716e:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    7170:	1e43      	subs	r3, r0, #1
    7172:	b29b      	uxth	r3, r3
    7174:	2b3f      	cmp	r3, #63	; 0x3f
    7176:	d805      	bhi.n	7184 <m2m_wifi_connect_sc+0x1f0>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    7178:	1c42      	adds	r2, r0, #1
    717a:	0039      	movs	r1, r7
    717c:	a807      	add	r0, sp, #28
    717e:	4b12      	ldr	r3, [pc, #72]	; (71c8 <m2m_wifi_connect_sc+0x234>)
    7180:	4798      	blx	r3
    7182:	e74c      	b.n	701e <m2m_wifi_connect_sc+0x8a>
			M2M_ERR("Incorrect PSK key length\n");
    7184:	4a23      	ldr	r2, [pc, #140]	; (7214 <m2m_wifi_connect_sc+0x280>)
    7186:	4913      	ldr	r1, [pc, #76]	; (71d4 <m2m_wifi_connect_sc+0x240>)
    7188:	4813      	ldr	r0, [pc, #76]	; (71d8 <m2m_wifi_connect_sc+0x244>)
    718a:	4b14      	ldr	r3, [pc, #80]	; (71dc <m2m_wifi_connect_sc+0x248>)
    718c:	4798      	blx	r3
    718e:	4822      	ldr	r0, [pc, #136]	; (7218 <m2m_wifi_connect_sc+0x284>)
    7190:	4b14      	ldr	r3, [pc, #80]	; (71e4 <m2m_wifi_connect_sc+0x250>)
    7192:	4798      	blx	r3
    7194:	200d      	movs	r0, #13
    7196:	4b14      	ldr	r3, [pc, #80]	; (71e8 <m2m_wifi_connect_sc+0x254>)
    7198:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    719a:	200c      	movs	r0, #12
    719c:	4240      	negs	r0, r0
			goto ERR1;
    719e:	e748      	b.n	7032 <m2m_wifi_connect_sc+0x9e>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    71a0:	223e      	movs	r2, #62	; 0x3e
    71a2:	0039      	movs	r1, r7
    71a4:	a807      	add	r0, sp, #28
    71a6:	4b08      	ldr	r3, [pc, #32]	; (71c8 <m2m_wifi_connect_sc+0x234>)
    71a8:	4798      	blx	r3
    71aa:	e738      	b.n	701e <m2m_wifi_connect_sc+0x8a>
		M2M_ERR("undefined sec type\n");
    71ac:	4a1b      	ldr	r2, [pc, #108]	; (721c <m2m_wifi_connect_sc+0x288>)
    71ae:	4909      	ldr	r1, [pc, #36]	; (71d4 <m2m_wifi_connect_sc+0x240>)
    71b0:	4809      	ldr	r0, [pc, #36]	; (71d8 <m2m_wifi_connect_sc+0x244>)
    71b2:	4b0a      	ldr	r3, [pc, #40]	; (71dc <m2m_wifi_connect_sc+0x248>)
    71b4:	4798      	blx	r3
    71b6:	481a      	ldr	r0, [pc, #104]	; (7220 <m2m_wifi_connect_sc+0x28c>)
    71b8:	4b0a      	ldr	r3, [pc, #40]	; (71e4 <m2m_wifi_connect_sc+0x250>)
    71ba:	4798      	blx	r3
    71bc:	200d      	movs	r0, #13
    71be:	4b0a      	ldr	r3, [pc, #40]	; (71e8 <m2m_wifi_connect_sc+0x254>)
    71c0:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    71c2:	200c      	movs	r0, #12
    71c4:	4240      	negs	r0, r0
		goto ERR1;
    71c6:	e734      	b.n	7032 <m2m_wifi_connect_sc+0x9e>
    71c8:	000062cd 	.word	0x000062cd
    71cc:	000063f5 	.word	0x000063f5
    71d0:	00000215 	.word	0x00000215
    71d4:	0000f0f8 	.word	0x0000f0f8
    71d8:	0000ed74 	.word	0x0000ed74
    71dc:	0000ce29 	.word	0x0000ce29
    71e0:	0000f140 	.word	0x0000f140
    71e4:	0000cf45 	.word	0x0000cf45
    71e8:	0000ce5d 	.word	0x0000ce5d
    71ec:	000062f1 	.word	0x000062f1
    71f0:	00000221 	.word	0x00000221
    71f4:	0000f154 	.word	0x0000f154
    71f8:	0000022b 	.word	0x0000022b
    71fc:	0000f160 	.word	0x0000f160
    7200:	0000f174 	.word	0x0000f174
    7204:	00000252 	.word	0x00000252
    7208:	0000f19c 	.word	0x0000f19c
    720c:	0000024b 	.word	0x0000024b
    7210:	0000f180 	.word	0x0000f180
    7214:	00000261 	.word	0x00000261
    7218:	0000f1b8 	.word	0x0000f1b8
    721c:	00000271 	.word	0x00000271
    7220:	0000f1d4 	.word	0x0000f1d4

00007224 <m2m_wifi_connect>:
{
    7224:	b530      	push	{r4, r5, lr}
    7226:	b083      	sub	sp, #12
    7228:	ac06      	add	r4, sp, #24
    722a:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    722c:	2500      	movs	r5, #0
    722e:	9501      	str	r5, [sp, #4]
    7230:	9400      	str	r4, [sp, #0]
    7232:	4c02      	ldr	r4, [pc, #8]	; (723c <m2m_wifi_connect+0x18>)
    7234:	47a0      	blx	r4
}
    7236:	b003      	add	sp, #12
    7238:	bd30      	pop	{r4, r5, pc}
    723a:	46c0      	nop			; (mov r8, r8)
    723c:	00006f95 	.word	0x00006f95

00007240 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    7240:	2000      	movs	r0, #0
    7242:	4770      	bx	lr

00007244 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    7244:	b5f0      	push	{r4, r5, r6, r7, lr}
    7246:	b083      	sub	sp, #12
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    7248:	2580      	movs	r5, #128	; 0x80
    724a:	006d      	lsls	r5, r5, #1
    724c:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    724e:	24a5      	movs	r4, #165	; 0xa5
    7250:	0164      	lsls	r4, r4, #5
    7252:	4f08      	ldr	r7, [pc, #32]	; (7274 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    7254:	4e08      	ldr	r6, [pc, #32]	; (7278 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    7256:	0029      	movs	r1, r5
    7258:	0020      	movs	r0, r4
    725a:	47b8      	blx	r7
			uint32 reg = 0;
    725c:	2300      	movs	r3, #0
    725e:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    7260:	a901      	add	r1, sp, #4
    7262:	0020      	movs	r0, r4
    7264:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    7266:	2800      	cmp	r0, #0
    7268:	d1f5      	bne.n	7256 <chip_apply_conf+0x12>
				if(reg == val32)
    726a:	9b01      	ldr	r3, [sp, #4]
    726c:	429d      	cmp	r5, r3
    726e:	d1f2      	bne.n	7256 <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    7270:	b003      	add	sp, #12
    7272:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7274:	00007735 	.word	0x00007735
    7278:	00007729 	.word	0x00007729

0000727c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    727c:	b500      	push	{lr}
    727e:	b083      	sub	sp, #12
	uint32 reg = 0;
    7280:	2300      	movs	r3, #0
    7282:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    7284:	a901      	add	r1, sp, #4
    7286:	4811      	ldr	r0, [pc, #68]	; (72cc <enable_interrupts+0x50>)
    7288:	4b11      	ldr	r3, [pc, #68]	; (72d0 <enable_interrupts+0x54>)
    728a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    728c:	2800      	cmp	r0, #0
    728e:	d001      	beq.n	7294 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    7290:	b003      	add	sp, #12
    7292:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    7294:	2180      	movs	r1, #128	; 0x80
    7296:	0049      	lsls	r1, r1, #1
    7298:	9b01      	ldr	r3, [sp, #4]
    729a:	4319      	orrs	r1, r3
    729c:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    729e:	480b      	ldr	r0, [pc, #44]	; (72cc <enable_interrupts+0x50>)
    72a0:	4b0c      	ldr	r3, [pc, #48]	; (72d4 <enable_interrupts+0x58>)
    72a2:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    72a4:	2800      	cmp	r0, #0
    72a6:	d1f3      	bne.n	7290 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    72a8:	a901      	add	r1, sp, #4
    72aa:	20d0      	movs	r0, #208	; 0xd0
    72ac:	0140      	lsls	r0, r0, #5
    72ae:	4b08      	ldr	r3, [pc, #32]	; (72d0 <enable_interrupts+0x54>)
    72b0:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    72b2:	2800      	cmp	r0, #0
    72b4:	d1ec      	bne.n	7290 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    72b6:	2180      	movs	r1, #128	; 0x80
    72b8:	0249      	lsls	r1, r1, #9
    72ba:	9b01      	ldr	r3, [sp, #4]
    72bc:	4319      	orrs	r1, r3
    72be:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    72c0:	20d0      	movs	r0, #208	; 0xd0
    72c2:	0140      	lsls	r0, r0, #5
    72c4:	4b03      	ldr	r3, [pc, #12]	; (72d4 <enable_interrupts+0x58>)
    72c6:	4798      	blx	r3
    72c8:	e7e2      	b.n	7290 <enable_interrupts+0x14>
    72ca:	46c0      	nop			; (mov r8, r8)
    72cc:	00001408 	.word	0x00001408
    72d0:	00007729 	.word	0x00007729
    72d4:	00007735 	.word	0x00007735

000072d8 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    72d8:	b510      	push	{r4, lr}
    72da:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    72dc:	4b28      	ldr	r3, [pc, #160]	; (7380 <nmi_get_chipid+0xa8>)
    72de:	681c      	ldr	r4, [r3, #0]
    72e0:	2c00      	cmp	r4, #0
    72e2:	d004      	beq.n	72ee <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    72e4:	4b26      	ldr	r3, [pc, #152]	; (7380 <nmi_get_chipid+0xa8>)
    72e6:	681c      	ldr	r4, [r3, #0]
}
    72e8:	0020      	movs	r0, r4
    72ea:	b002      	add	sp, #8
    72ec:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    72ee:	0019      	movs	r1, r3
    72f0:	2080      	movs	r0, #128	; 0x80
    72f2:	0140      	lsls	r0, r0, #5
    72f4:	4b23      	ldr	r3, [pc, #140]	; (7384 <nmi_get_chipid+0xac>)
    72f6:	4798      	blx	r3
    72f8:	2800      	cmp	r0, #0
    72fa:	d003      	beq.n	7304 <nmi_get_chipid+0x2c>
			chipid = 0;
    72fc:	2200      	movs	r2, #0
    72fe:	4b20      	ldr	r3, [pc, #128]	; (7380 <nmi_get_chipid+0xa8>)
    7300:	601a      	str	r2, [r3, #0]
			return 0;
    7302:	e7f1      	b.n	72e8 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    7304:	a901      	add	r1, sp, #4
    7306:	4820      	ldr	r0, [pc, #128]	; (7388 <nmi_get_chipid+0xb0>)
    7308:	4b1e      	ldr	r3, [pc, #120]	; (7384 <nmi_get_chipid+0xac>)
    730a:	4798      	blx	r3
    730c:	2800      	cmp	r0, #0
    730e:	d003      	beq.n	7318 <nmi_get_chipid+0x40>
			chipid = 0;
    7310:	2200      	movs	r2, #0
    7312:	4b1b      	ldr	r3, [pc, #108]	; (7380 <nmi_get_chipid+0xa8>)
    7314:	601a      	str	r2, [r3, #0]
			return 0;
    7316:	e7e7      	b.n	72e8 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    7318:	4b19      	ldr	r3, [pc, #100]	; (7380 <nmi_get_chipid+0xa8>)
    731a:	681b      	ldr	r3, [r3, #0]
    731c:	4a1b      	ldr	r2, [pc, #108]	; (738c <nmi_get_chipid+0xb4>)
    731e:	4293      	cmp	r3, r2
    7320:	d00e      	beq.n	7340 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    7322:	4a1b      	ldr	r2, [pc, #108]	; (7390 <nmi_get_chipid+0xb8>)
    7324:	4293      	cmp	r3, r2
    7326:	d012      	beq.n	734e <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    7328:	4a1a      	ldr	r2, [pc, #104]	; (7394 <nmi_get_chipid+0xbc>)
    732a:	4293      	cmp	r3, r2
    732c:	d01c      	beq.n	7368 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    732e:	4914      	ldr	r1, [pc, #80]	; (7380 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    7330:	4a19      	ldr	r2, [pc, #100]	; (7398 <nmi_get_chipid+0xc0>)
    7332:	680b      	ldr	r3, [r1, #0]
    7334:	401a      	ands	r2, r3
		chipid |= 0x050000;
    7336:	23a0      	movs	r3, #160	; 0xa0
    7338:	02db      	lsls	r3, r3, #11
    733a:	4313      	orrs	r3, r2
    733c:	600b      	str	r3, [r1, #0]
    733e:	e7d1      	b.n	72e4 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    7340:	9b01      	ldr	r3, [sp, #4]
    7342:	2b01      	cmp	r3, #1
    7344:	d0f3      	beq.n	732e <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    7346:	4a15      	ldr	r2, [pc, #84]	; (739c <nmi_get_chipid+0xc4>)
    7348:	4b0d      	ldr	r3, [pc, #52]	; (7380 <nmi_get_chipid+0xa8>)
    734a:	601a      	str	r2, [r3, #0]
    734c:	e7ef      	b.n	732e <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    734e:	9b01      	ldr	r3, [sp, #4]
    7350:	2b03      	cmp	r3, #3
    7352:	d0ec      	beq.n	732e <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    7354:	2b04      	cmp	r3, #4
    7356:	d003      	beq.n	7360 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    7358:	4a11      	ldr	r2, [pc, #68]	; (73a0 <nmi_get_chipid+0xc8>)
    735a:	4b09      	ldr	r3, [pc, #36]	; (7380 <nmi_get_chipid+0xa8>)
    735c:	601a      	str	r2, [r3, #0]
    735e:	e7e6      	b.n	732e <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    7360:	4a10      	ldr	r2, [pc, #64]	; (73a4 <nmi_get_chipid+0xcc>)
    7362:	4b07      	ldr	r3, [pc, #28]	; (7380 <nmi_get_chipid+0xa8>)
    7364:	601a      	str	r2, [r3, #0]
    7366:	e7e2      	b.n	732e <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    7368:	4905      	ldr	r1, [pc, #20]	; (7380 <nmi_get_chipid+0xa8>)
    736a:	20ec      	movs	r0, #236	; 0xec
    736c:	0380      	lsls	r0, r0, #14
    736e:	4b05      	ldr	r3, [pc, #20]	; (7384 <nmi_get_chipid+0xac>)
    7370:	4798      	blx	r3
    7372:	2800      	cmp	r0, #0
    7374:	d0db      	beq.n	732e <nmi_get_chipid+0x56>
			chipid = 0;
    7376:	2200      	movs	r2, #0
    7378:	4b01      	ldr	r3, [pc, #4]	; (7380 <nmi_get_chipid+0xa8>)
    737a:	601a      	str	r2, [r3, #0]
			return 0;
    737c:	e7b4      	b.n	72e8 <nmi_get_chipid+0x10>
    737e:	46c0      	nop			; (mov r8, r8)
    7380:	20000424 	.word	0x20000424
    7384:	00007729 	.word	0x00007729
    7388:	000013f4 	.word	0x000013f4
    738c:	001002a0 	.word	0x001002a0
    7390:	001002b0 	.word	0x001002b0
    7394:	001000f0 	.word	0x001000f0
    7398:	fff0ffff 	.word	0xfff0ffff
    739c:	001002a1 	.word	0x001002a1
    73a0:	001002b2 	.word	0x001002b2
    73a4:	001002b1 	.word	0x001002b1

000073a8 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    73a8:	b530      	push	{r4, r5, lr}
    73aa:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    73ac:	4c16      	ldr	r4, [pc, #88]	; (7408 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    73ae:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    73b0:	a901      	add	r1, sp, #4
    73b2:	2010      	movs	r0, #16
    73b4:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    73b6:	2800      	cmp	r0, #0
    73b8:	d11c      	bne.n	73f4 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    73ba:	9b01      	ldr	r3, [sp, #4]
    73bc:	422b      	tst	r3, r5
    73be:	d1f7      	bne.n	73b0 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    73c0:	a901      	add	r1, sp, #4
    73c2:	3001      	adds	r0, #1
    73c4:	4b10      	ldr	r3, [pc, #64]	; (7408 <chip_sleep+0x60>)
    73c6:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    73c8:	2800      	cmp	r0, #0
    73ca:	d113      	bne.n	73f4 <chip_sleep+0x4c>
	if(reg & NBIT1)
    73cc:	9901      	ldr	r1, [sp, #4]
    73ce:	078b      	lsls	r3, r1, #30
    73d0:	d507      	bpl.n	73e2 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    73d2:	2302      	movs	r3, #2
    73d4:	4399      	bics	r1, r3
    73d6:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    73d8:	3001      	adds	r0, #1
    73da:	4b0c      	ldr	r3, [pc, #48]	; (740c <chip_sleep+0x64>)
    73dc:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    73de:	2800      	cmp	r0, #0
    73e0:	d108      	bne.n	73f4 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    73e2:	a901      	add	r1, sp, #4
    73e4:	200b      	movs	r0, #11
    73e6:	4b08      	ldr	r3, [pc, #32]	; (7408 <chip_sleep+0x60>)
    73e8:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    73ea:	2800      	cmp	r0, #0
    73ec:	d102      	bne.n	73f4 <chip_sleep+0x4c>
	if(reg & NBIT0)
    73ee:	9901      	ldr	r1, [sp, #4]
    73f0:	07cb      	lsls	r3, r1, #31
    73f2:	d401      	bmi.n	73f8 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    73f4:	b003      	add	sp, #12
    73f6:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    73f8:	2301      	movs	r3, #1
    73fa:	4399      	bics	r1, r3
    73fc:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    73fe:	300b      	adds	r0, #11
    7400:	4b02      	ldr	r3, [pc, #8]	; (740c <chip_sleep+0x64>)
    7402:	4798      	blx	r3
    7404:	e7f6      	b.n	73f4 <chip_sleep+0x4c>
    7406:	46c0      	nop			; (mov r8, r8)
    7408:	00007729 	.word	0x00007729
    740c:	00007735 	.word	0x00007735

00007410 <chip_wake>:
sint8 chip_wake(void)
{
    7410:	b5f0      	push	{r4, r5, r6, r7, lr}
    7412:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    7414:	2300      	movs	r3, #0
    7416:	9301      	str	r3, [sp, #4]
    7418:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    741a:	a901      	add	r1, sp, #4
    741c:	200b      	movs	r0, #11
    741e:	4b28      	ldr	r3, [pc, #160]	; (74c0 <chip_wake+0xb0>)
    7420:	4798      	blx	r3
    7422:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    7424:	d130      	bne.n	7488 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    7426:	9901      	ldr	r1, [sp, #4]
    7428:	07cb      	lsls	r3, r1, #31
    742a:	d406      	bmi.n	743a <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    742c:	2301      	movs	r3, #1
    742e:	4319      	orrs	r1, r3
    7430:	200b      	movs	r0, #11
    7432:	4b24      	ldr	r3, [pc, #144]	; (74c4 <chip_wake+0xb4>)
    7434:	4798      	blx	r3
    7436:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    7438:	d126      	bne.n	7488 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    743a:	a901      	add	r1, sp, #4
    743c:	2001      	movs	r0, #1
    743e:	4b20      	ldr	r3, [pc, #128]	; (74c0 <chip_wake+0xb0>)
    7440:	4798      	blx	r3
    7442:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    7444:	d120      	bne.n	7488 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    7446:	9901      	ldr	r1, [sp, #4]
    7448:	078b      	lsls	r3, r1, #30
    744a:	d520      	bpl.n	748e <chip_wake+0x7e>
{
    744c:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    744e:	4f1c      	ldr	r7, [pc, #112]	; (74c0 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    7450:	4e1d      	ldr	r6, [pc, #116]	; (74c8 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    7452:	4669      	mov	r1, sp
    7454:	200f      	movs	r0, #15
    7456:	47b8      	blx	r7
    7458:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    745a:	d120      	bne.n	749e <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    745c:	9b00      	ldr	r3, [sp, #0]
    745e:	075b      	lsls	r3, r3, #29
    7460:	d42b      	bmi.n	74ba <chip_wake+0xaa>
		nm_bsp_sleep(2);
    7462:	2002      	movs	r0, #2
    7464:	47b0      	blx	r6
    7466:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    7468:	2d00      	cmp	r5, #0
    746a:	d1f2      	bne.n	7452 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    746c:	22af      	movs	r2, #175	; 0xaf
    746e:	0052      	lsls	r2, r2, #1
    7470:	4916      	ldr	r1, [pc, #88]	; (74cc <chip_wake+0xbc>)
    7472:	4817      	ldr	r0, [pc, #92]	; (74d0 <chip_wake+0xc0>)
    7474:	4b17      	ldr	r3, [pc, #92]	; (74d4 <chip_wake+0xc4>)
    7476:	4798      	blx	r3
    7478:	4817      	ldr	r0, [pc, #92]	; (74d8 <chip_wake+0xc8>)
    747a:	4b18      	ldr	r3, [pc, #96]	; (74dc <chip_wake+0xcc>)
    747c:	4798      	blx	r3
    747e:	200d      	movs	r0, #13
    7480:	4b17      	ldr	r3, [pc, #92]	; (74e0 <chip_wake+0xd0>)
    7482:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    7484:	2404      	movs	r4, #4
    7486:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    7488:	0020      	movs	r0, r4
    748a:	b003      	add	sp, #12
    748c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    748e:	2302      	movs	r3, #2
    7490:	4319      	orrs	r1, r3
    7492:	2001      	movs	r0, #1
    7494:	4b0b      	ldr	r3, [pc, #44]	; (74c4 <chip_wake+0xb4>)
    7496:	4798      	blx	r3
    7498:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    749a:	d0d7      	beq.n	744c <chip_wake+0x3c>
    749c:	e7f4      	b.n	7488 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    749e:	22aa      	movs	r2, #170	; 0xaa
    74a0:	0052      	lsls	r2, r2, #1
    74a2:	490a      	ldr	r1, [pc, #40]	; (74cc <chip_wake+0xbc>)
    74a4:	480a      	ldr	r0, [pc, #40]	; (74d0 <chip_wake+0xc0>)
    74a6:	4d0b      	ldr	r5, [pc, #44]	; (74d4 <chip_wake+0xc4>)
    74a8:	47a8      	blx	r5
    74aa:	9a00      	ldr	r2, [sp, #0]
    74ac:	0021      	movs	r1, r4
    74ae:	480d      	ldr	r0, [pc, #52]	; (74e4 <chip_wake+0xd4>)
    74b0:	47a8      	blx	r5
    74b2:	200d      	movs	r0, #13
    74b4:	4b0a      	ldr	r3, [pc, #40]	; (74e0 <chip_wake+0xd0>)
    74b6:	4798      	blx	r3
			goto _WAKE_EXIT;
    74b8:	e7e6      	b.n	7488 <chip_wake+0x78>
	nm_bus_reset();
    74ba:	4b0b      	ldr	r3, [pc, #44]	; (74e8 <chip_wake+0xd8>)
    74bc:	4798      	blx	r3
    74be:	e7e3      	b.n	7488 <chip_wake+0x78>
    74c0:	00007729 	.word	0x00007729
    74c4:	00007735 	.word	0x00007735
    74c8:	00005ed5 	.word	0x00005ed5
    74cc:	0000f2b4 	.word	0x0000f2b4
    74d0:	0000ed74 	.word	0x0000ed74
    74d4:	0000ce29 	.word	0x0000ce29
    74d8:	0000f2fc 	.word	0x0000f2fc
    74dc:	0000cf45 	.word	0x0000cf45
    74e0:	0000ce5d 	.word	0x0000ce5d
    74e4:	0000f2e4 	.word	0x0000f2e4
    74e8:	00007711 	.word	0x00007711

000074ec <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    74ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74ee:	0007      	movs	r7, r0
				M2M_RELEASE_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    74f0:	4d2d      	ldr	r5, [pc, #180]	; (75a8 <wait_for_bootrom+0xbc>)
    74f2:	4c2e      	ldr	r4, [pc, #184]	; (75ac <wait_for_bootrom+0xc0>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    74f4:	4e2e      	ldr	r6, [pc, #184]	; (75b0 <wait_for_bootrom+0xc4>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    74f6:	0028      	movs	r0, r5
    74f8:	47a0      	blx	r4
		if (reg & 0x80000000) {
    74fa:	2800      	cmp	r0, #0
    74fc:	db02      	blt.n	7504 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    74fe:	2001      	movs	r0, #1
    7500:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    7502:	e7f8      	b.n	74f6 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    7504:	482b      	ldr	r0, [pc, #172]	; (75b4 <wait_for_bootrom+0xc8>)
    7506:	4b29      	ldr	r3, [pc, #164]	; (75ac <wait_for_bootrom+0xc0>)
    7508:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    750a:	07c3      	lsls	r3, r0, #31
    750c:	d409      	bmi.n	7522 <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    750e:	4e28      	ldr	r6, [pc, #160]	; (75b0 <wait_for_bootrom+0xc4>)
			reg = nm_read_reg(BOOTROM_REG);
    7510:	4c29      	ldr	r4, [pc, #164]	; (75b8 <wait_for_bootrom+0xcc>)
    7512:	4d26      	ldr	r5, [pc, #152]	; (75ac <wait_for_bootrom+0xc0>)
			nm_bsp_sleep(1);
    7514:	2001      	movs	r0, #1
    7516:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    7518:	0020      	movs	r0, r4
    751a:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    751c:	4b27      	ldr	r3, [pc, #156]	; (75bc <wait_for_bootrom+0xd0>)
    751e:	4298      	cmp	r0, r3
    7520:	d1f8      	bne.n	7514 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    7522:	2f02      	cmp	r7, #2
    7524:	d021      	beq.n	756a <wait_for_bootrom+0x7e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    7526:	2f03      	cmp	r7, #3
    7528:	d029      	beq.n	757e <wait_for_bootrom+0x92>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    752a:	2f04      	cmp	r7, #4
    752c:	d030      	beq.n	7590 <wait_for_bootrom+0xa4>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    752e:	4924      	ldr	r1, [pc, #144]	; (75c0 <wait_for_bootrom+0xd4>)
    7530:	4824      	ldr	r0, [pc, #144]	; (75c4 <wait_for_bootrom+0xd8>)
    7532:	4b25      	ldr	r3, [pc, #148]	; (75c8 <wait_for_bootrom+0xdc>)
    7534:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    7536:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    7538:	4b24      	ldr	r3, [pc, #144]	; (75cc <wait_for_bootrom+0xe0>)
    753a:	4798      	blx	r3
    753c:	0500      	lsls	r0, r0, #20
    753e:	0d00      	lsrs	r0, r0, #20
    7540:	4b23      	ldr	r3, [pc, #140]	; (75d0 <wait_for_bootrom+0xe4>)
    7542:	4298      	cmp	r0, r3
    7544:	d82a      	bhi.n	759c <wait_for_bootrom+0xb0>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    7546:	0020      	movs	r0, r4
    7548:	4b22      	ldr	r3, [pc, #136]	; (75d4 <wait_for_bootrom+0xe8>)
    754a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    754c:	4822      	ldr	r0, [pc, #136]	; (75d8 <wait_for_bootrom+0xec>)
    754e:	4c23      	ldr	r4, [pc, #140]	; (75dc <wait_for_bootrom+0xf0>)
    7550:	47a0      	blx	r4
    7552:	491b      	ldr	r1, [pc, #108]	; (75c0 <wait_for_bootrom+0xd4>)
    7554:	4822      	ldr	r0, [pc, #136]	; (75e0 <wait_for_bootrom+0xf4>)
    7556:	47a0      	blx	r4
    7558:	200d      	movs	r0, #13
    755a:	4b22      	ldr	r3, [pc, #136]	; (75e4 <wait_for_bootrom+0xf8>)
    755c:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    755e:	4922      	ldr	r1, [pc, #136]	; (75e8 <wait_for_bootrom+0xfc>)
    7560:	4815      	ldr	r0, [pc, #84]	; (75b8 <wait_for_bootrom+0xcc>)
    7562:	4b19      	ldr	r3, [pc, #100]	; (75c8 <wait_for_bootrom+0xdc>)
    7564:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    7566:	2000      	movs	r0, #0
    7568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    756a:	4920      	ldr	r1, [pc, #128]	; (75ec <wait_for_bootrom+0x100>)
    756c:	4820      	ldr	r0, [pc, #128]	; (75f0 <wait_for_bootrom+0x104>)
    756e:	4c16      	ldr	r4, [pc, #88]	; (75c8 <wait_for_bootrom+0xdc>)
    7570:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    7572:	2180      	movs	r1, #128	; 0x80
    7574:	0349      	lsls	r1, r1, #13
    7576:	4813      	ldr	r0, [pc, #76]	; (75c4 <wait_for_bootrom+0xd8>)
    7578:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    757a:	2400      	movs	r4, #0
    757c:	e7dc      	b.n	7538 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    757e:	491b      	ldr	r1, [pc, #108]	; (75ec <wait_for_bootrom+0x100>)
    7580:	481b      	ldr	r0, [pc, #108]	; (75f0 <wait_for_bootrom+0x104>)
    7582:	4c11      	ldr	r4, [pc, #68]	; (75c8 <wait_for_bootrom+0xdc>)
    7584:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    7586:	2100      	movs	r1, #0
    7588:	480e      	ldr	r0, [pc, #56]	; (75c4 <wait_for_bootrom+0xd8>)
    758a:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    758c:	2400      	movs	r4, #0
    758e:	e7d3      	b.n	7538 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    7590:	490b      	ldr	r1, [pc, #44]	; (75c0 <wait_for_bootrom+0xd4>)
    7592:	480c      	ldr	r0, [pc, #48]	; (75c4 <wait_for_bootrom+0xd8>)
    7594:	4b0c      	ldr	r3, [pc, #48]	; (75c8 <wait_for_bootrom+0xdc>)
    7596:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    7598:	2480      	movs	r4, #128	; 0x80
    759a:	e7cd      	b.n	7538 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    759c:	2002      	movs	r0, #2
    759e:	4320      	orrs	r0, r4
    75a0:	4b0c      	ldr	r3, [pc, #48]	; (75d4 <wait_for_bootrom+0xe8>)
    75a2:	4798      	blx	r3
    75a4:	e7d2      	b.n	754c <wait_for_bootrom+0x60>
    75a6:	46c0      	nop			; (mov r8, r8)
    75a8:	00001014 	.word	0x00001014
    75ac:	0000771d 	.word	0x0000771d
    75b0:	00005ed5 	.word	0x00005ed5
    75b4:	000207bc 	.word	0x000207bc
    75b8:	000c000c 	.word	0x000c000c
    75bc:	10add09e 	.word	0x10add09e
    75c0:	13521352 	.word	0x13521352
    75c4:	0000108c 	.word	0x0000108c
    75c8:	00007735 	.word	0x00007735
    75cc:	000072d9 	.word	0x000072d9
    75d0:	0000039f 	.word	0x0000039f
    75d4:	00007245 	.word	0x00007245
    75d8:	0000f0a4 	.word	0x0000f0a4
    75dc:	0000ce29 	.word	0x0000ce29
    75e0:	0000f318 	.word	0x0000f318
    75e4:	0000ce5d 	.word	0x0000ce5d
    75e8:	ef522f61 	.word	0xef522f61
    75ec:	3c1cd57d 	.word	0x3c1cd57d
    75f0:	000207ac 	.word	0x000207ac

000075f4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    75f4:	b570      	push	{r4, r5, r6, lr}
    75f6:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    75f8:	4b15      	ldr	r3, [pc, #84]	; (7650 <wait_for_firmware_start+0x5c>)
    75fa:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    75fc:	4b15      	ldr	r3, [pc, #84]	; (7654 <wait_for_firmware_start+0x60>)
    75fe:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    7600:	3802      	subs	r0, #2
    7602:	2801      	cmp	r0, #1
    7604:	d911      	bls.n	762a <wait_for_firmware_start+0x36>
{
    7606:	2401      	movs	r4, #1
    7608:	4264      	negs	r4, r4
    760a:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    760c:	4e12      	ldr	r6, [pc, #72]	; (7658 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    760e:	4d13      	ldr	r5, [pc, #76]	; (765c <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    7610:	9b00      	ldr	r3, [sp, #0]
    7612:	4298      	cmp	r0, r3
    7614:	d00e      	beq.n	7634 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    7616:	2002      	movs	r0, #2
    7618:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    761a:	9801      	ldr	r0, [sp, #4]
    761c:	47a8      	blx	r5
    761e:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    7620:	2c00      	cmp	r4, #0
    7622:	d1f5      	bne.n	7610 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    7624:	2005      	movs	r0, #5
    7626:	4240      	negs	r0, r0
    7628:	e009      	b.n	763e <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    762a:	4b0d      	ldr	r3, [pc, #52]	; (7660 <wait_for_firmware_start+0x6c>)
    762c:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    762e:	4b0d      	ldr	r3, [pc, #52]	; (7664 <wait_for_firmware_start+0x70>)
    7630:	9300      	str	r3, [sp, #0]
    7632:	e7e8      	b.n	7606 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    7634:	9a00      	ldr	r2, [sp, #0]
    7636:	4b07      	ldr	r3, [pc, #28]	; (7654 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    7638:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    763a:	429a      	cmp	r2, r3
    763c:	d001      	beq.n	7642 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    763e:	b002      	add	sp, #8
    7640:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    7642:	2100      	movs	r1, #0
    7644:	4802      	ldr	r0, [pc, #8]	; (7650 <wait_for_firmware_start+0x5c>)
    7646:	4b08      	ldr	r3, [pc, #32]	; (7668 <wait_for_firmware_start+0x74>)
    7648:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    764a:	2000      	movs	r0, #0
    764c:	e7f7      	b.n	763e <wait_for_firmware_start+0x4a>
    764e:	46c0      	nop			; (mov r8, r8)
    7650:	0000108c 	.word	0x0000108c
    7654:	02532636 	.word	0x02532636
    7658:	00005ed5 	.word	0x00005ed5
    765c:	0000771d 	.word	0x0000771d
    7660:	000207ac 	.word	0x000207ac
    7664:	d75dc1c3 	.word	0xd75dc1c3
    7668:	00007735 	.word	0x00007735

0000766c <chip_deinit>:

sint8 chip_deinit(void)
{
    766c:	b510      	push	{r4, lr}
    766e:	b082      	sub	sp, #8
	uint32 reg = 0;
    7670:	2300      	movs	r3, #0
    7672:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    7674:	a901      	add	r1, sp, #4
    7676:	20a0      	movs	r0, #160	; 0xa0
    7678:	0140      	lsls	r0, r0, #5
    767a:	4b14      	ldr	r3, [pc, #80]	; (76cc <chip_deinit+0x60>)
    767c:	4798      	blx	r3
    767e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    7680:	d115      	bne.n	76ae <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    7682:	4913      	ldr	r1, [pc, #76]	; (76d0 <chip_deinit+0x64>)
    7684:	9b01      	ldr	r3, [sp, #4]
    7686:	4019      	ands	r1, r3
    7688:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    768a:	20a0      	movs	r0, #160	; 0xa0
    768c:	0140      	lsls	r0, r0, #5
    768e:	4b11      	ldr	r3, [pc, #68]	; (76d4 <chip_deinit+0x68>)
    7690:	4798      	blx	r3
    7692:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    7694:	d016      	beq.n	76c4 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    7696:	4a10      	ldr	r2, [pc, #64]	; (76d8 <chip_deinit+0x6c>)
    7698:	4910      	ldr	r1, [pc, #64]	; (76dc <chip_deinit+0x70>)
    769a:	4811      	ldr	r0, [pc, #68]	; (76e0 <chip_deinit+0x74>)
    769c:	4b11      	ldr	r3, [pc, #68]	; (76e4 <chip_deinit+0x78>)
    769e:	4798      	blx	r3
    76a0:	4811      	ldr	r0, [pc, #68]	; (76e8 <chip_deinit+0x7c>)
    76a2:	4b12      	ldr	r3, [pc, #72]	; (76ec <chip_deinit+0x80>)
    76a4:	4798      	blx	r3
    76a6:	200d      	movs	r0, #13
    76a8:	4b11      	ldr	r3, [pc, #68]	; (76f0 <chip_deinit+0x84>)
    76aa:	4798      	blx	r3
		goto ERR1;
    76ac:	e00a      	b.n	76c4 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    76ae:	4a11      	ldr	r2, [pc, #68]	; (76f4 <chip_deinit+0x88>)
    76b0:	490a      	ldr	r1, [pc, #40]	; (76dc <chip_deinit+0x70>)
    76b2:	480b      	ldr	r0, [pc, #44]	; (76e0 <chip_deinit+0x74>)
    76b4:	4b0b      	ldr	r3, [pc, #44]	; (76e4 <chip_deinit+0x78>)
    76b6:	4798      	blx	r3
    76b8:	480b      	ldr	r0, [pc, #44]	; (76e8 <chip_deinit+0x7c>)
    76ba:	4b0c      	ldr	r3, [pc, #48]	; (76ec <chip_deinit+0x80>)
    76bc:	4798      	blx	r3
    76be:	200d      	movs	r0, #13
    76c0:	4b0b      	ldr	r3, [pc, #44]	; (76f0 <chip_deinit+0x84>)
    76c2:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    76c4:	0020      	movs	r0, r4
    76c6:	b002      	add	sp, #8
    76c8:	bd10      	pop	{r4, pc}
    76ca:	46c0      	nop			; (mov r8, r8)
    76cc:	00007729 	.word	0x00007729
    76d0:	fffffbff 	.word	0xfffffbff
    76d4:	00007735 	.word	0x00007735
    76d8:	0000020b 	.word	0x0000020b
    76dc:	0000f2c0 	.word	0x0000f2c0
    76e0:	0000ed74 	.word	0x0000ed74
    76e4:	0000ce29 	.word	0x0000ce29
    76e8:	0000f2cc 	.word	0x0000f2cc
    76ec:	0000cf45 	.word	0x0000cf45
    76f0:	0000ce5d 	.word	0x0000ce5d
    76f4:	00000205 	.word	0x00000205

000076f8 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    76f8:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    76fa:	4b01      	ldr	r3, [pc, #4]	; (7700 <nm_bus_iface_init+0x8>)
    76fc:	4798      	blx	r3
	return ret;
}
    76fe:	bd10      	pop	{r4, pc}
    7700:	00006011 	.word	0x00006011

00007704 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    7704:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    7706:	4b01      	ldr	r3, [pc, #4]	; (770c <nm_bus_iface_deinit+0x8>)
    7708:	4798      	blx	r3

	return ret;
}
    770a:	bd10      	pop	{r4, pc}
    770c:	00006261 	.word	0x00006261

00007710 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    7710:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    7712:	4b01      	ldr	r3, [pc, #4]	; (7718 <nm_bus_reset+0x8>)
    7714:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    7716:	bd10      	pop	{r4, pc}
    7718:	000080c1 	.word	0x000080c1

0000771c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    771c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    771e:	4b01      	ldr	r3, [pc, #4]	; (7724 <nm_read_reg+0x8>)
    7720:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    7722:	bd10      	pop	{r4, pc}
    7724:	000080f9 	.word	0x000080f9

00007728 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    7728:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    772a:	4b01      	ldr	r3, [pc, #4]	; (7730 <nm_read_reg_with_ret+0x8>)
    772c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    772e:	bd10      	pop	{r4, pc}
    7730:	0000810d 	.word	0x0000810d

00007734 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    7734:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    7736:	4b01      	ldr	r3, [pc, #4]	; (773c <nm_write_reg+0x8>)
    7738:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    773a:	bd10      	pop	{r4, pc}
    773c:	00008125 	.word	0x00008125

00007740 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    7740:	b5f0      	push	{r4, r5, r6, r7, lr}
    7742:	46d6      	mov	lr, sl
    7744:	464f      	mov	r7, r9
    7746:	4646      	mov	r6, r8
    7748:	b5c0      	push	{r6, r7, lr}
    774a:	b082      	sub	sp, #8
    774c:	4680      	mov	r8, r0
    774e:	4689      	mov	r9, r1
    7750:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    7752:	4b13      	ldr	r3, [pc, #76]	; (77a0 <nm_read_block+0x60>)
    7754:	881f      	ldrh	r7, [r3, #0]
    7756:	3f08      	subs	r7, #8
    7758:	b2bb      	uxth	r3, r7
    775a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    775c:	001e      	movs	r6, r3
    775e:	0004      	movs	r4, r0
    7760:	429a      	cmp	r2, r3
    7762:	d91a      	bls.n	779a <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    7764:	4b0f      	ldr	r3, [pc, #60]	; (77a4 <nm_read_block+0x64>)
    7766:	469a      	mov	sl, r3
    7768:	1a37      	subs	r7, r6, r0
    776a:	4643      	mov	r3, r8
    776c:	1ae1      	subs	r1, r4, r3
    776e:	4449      	add	r1, r9
    7770:	9a01      	ldr	r2, [sp, #4]
    7772:	0020      	movs	r0, r4
    7774:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    7776:	2800      	cmp	r0, #0
    7778:	d109      	bne.n	778e <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    777a:	1bad      	subs	r5, r5, r6
    777c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    777e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    7780:	42b5      	cmp	r5, r6
    7782:	d8f2      	bhi.n	776a <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    7784:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    7786:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    7788:	0020      	movs	r0, r4
    778a:	4b06      	ldr	r3, [pc, #24]	; (77a4 <nm_read_block+0x64>)
    778c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    778e:	b002      	add	sp, #8
    7790:	bc1c      	pop	{r2, r3, r4}
    7792:	4690      	mov	r8, r2
    7794:	4699      	mov	r9, r3
    7796:	46a2      	mov	sl, r4
    7798:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    779a:	2100      	movs	r1, #0
    779c:	e7f2      	b.n	7784 <nm_read_block+0x44>
    779e:	46c0      	nop			; (mov r8, r8)
    77a0:	20000008 	.word	0x20000008
    77a4:	00008269 	.word	0x00008269

000077a8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    77a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    77aa:	46d6      	mov	lr, sl
    77ac:	464f      	mov	r7, r9
    77ae:	4646      	mov	r6, r8
    77b0:	b5c0      	push	{r6, r7, lr}
    77b2:	b082      	sub	sp, #8
    77b4:	4680      	mov	r8, r0
    77b6:	4689      	mov	r9, r1
    77b8:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    77ba:	4b13      	ldr	r3, [pc, #76]	; (7808 <nm_write_block+0x60>)
    77bc:	881f      	ldrh	r7, [r3, #0]
    77be:	3f08      	subs	r7, #8
    77c0:	b2bb      	uxth	r3, r7
    77c2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    77c4:	001e      	movs	r6, r3
    77c6:	0004      	movs	r4, r0
    77c8:	429a      	cmp	r2, r3
    77ca:	d91a      	bls.n	7802 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    77cc:	4b0f      	ldr	r3, [pc, #60]	; (780c <nm_write_block+0x64>)
    77ce:	469a      	mov	sl, r3
    77d0:	1a37      	subs	r7, r6, r0
    77d2:	4643      	mov	r3, r8
    77d4:	1ae1      	subs	r1, r4, r3
    77d6:	4449      	add	r1, r9
    77d8:	9a01      	ldr	r2, [sp, #4]
    77da:	0020      	movs	r0, r4
    77dc:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    77de:	2800      	cmp	r0, #0
    77e0:	d109      	bne.n	77f6 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    77e2:	1bad      	subs	r5, r5, r6
    77e4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    77e6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    77e8:	42b5      	cmp	r5, r6
    77ea:	d8f2      	bhi.n	77d2 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    77ec:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    77ee:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    77f0:	0020      	movs	r0, r4
    77f2:	4b06      	ldr	r3, [pc, #24]	; (780c <nm_write_block+0x64>)
    77f4:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    77f6:	b002      	add	sp, #8
    77f8:	bc1c      	pop	{r2, r3, r4}
    77fa:	4690      	mov	r8, r2
    77fc:	4699      	mov	r9, r3
    77fe:	46a2      	mov	sl, r4
    7800:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    7802:	2100      	movs	r1, #0
    7804:	e7f2      	b.n	77ec <nm_write_block+0x44>
    7806:	46c0      	nop			; (mov r8, r8)
    7808:	20000008 	.word	0x20000008
    780c:	000083c5 	.word	0x000083c5

00007810 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    7810:	b570      	push	{r4, r5, r6, lr}
    7812:	b084      	sub	sp, #16
    7814:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    7816:	2300      	movs	r3, #0
    7818:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    781a:	2208      	movs	r2, #8
    781c:	2100      	movs	r1, #0
    781e:	a801      	add	r0, sp, #4
    7820:	4b2d      	ldr	r3, [pc, #180]	; (78d8 <nm_get_firmware_full_info+0xc8>)
    7822:	4798      	blx	r3
	if (pstrRev != NULL)
    7824:	2c00      	cmp	r4, #0
    7826:	d044      	beq.n	78b2 <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    7828:	2228      	movs	r2, #40	; 0x28
    782a:	2100      	movs	r1, #0
    782c:	0020      	movs	r0, r4
    782e:	4b2b      	ldr	r3, [pc, #172]	; (78dc <nm_get_firmware_full_info+0xcc>)
    7830:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    7832:	a903      	add	r1, sp, #12
    7834:	482a      	ldr	r0, [pc, #168]	; (78e0 <nm_get_firmware_full_info+0xd0>)
    7836:	4b2b      	ldr	r3, [pc, #172]	; (78e4 <nm_get_firmware_full_info+0xd4>)
    7838:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    783a:	2800      	cmp	r0, #0
    783c:	d13a      	bne.n	78b4 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    783e:	9b03      	ldr	r3, [sp, #12]
    7840:	2b00      	cmp	r3, #0
    7842:	d039      	beq.n	78b8 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    7844:	20c0      	movs	r0, #192	; 0xc0
    7846:	0280      	lsls	r0, r0, #10
    7848:	4318      	orrs	r0, r3
    784a:	2208      	movs	r2, #8
    784c:	a901      	add	r1, sp, #4
    784e:	4b26      	ldr	r3, [pc, #152]	; (78e8 <nm_get_firmware_full_info+0xd8>)
    7850:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    7852:	2800      	cmp	r0, #0
    7854:	d12e      	bne.n	78b4 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    7856:	9b02      	ldr	r3, [sp, #8]
    7858:	0418      	lsls	r0, r3, #16
    785a:	0c00      	lsrs	r0, r0, #16
    785c:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    785e:	d02e      	beq.n	78be <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    7860:	23c0      	movs	r3, #192	; 0xc0
    7862:	029b      	lsls	r3, r3, #10
    7864:	4318      	orrs	r0, r3
    7866:	2228      	movs	r2, #40	; 0x28
    7868:	0021      	movs	r1, r4
    786a:	4b1f      	ldr	r3, [pc, #124]	; (78e8 <nm_get_firmware_full_info+0xd8>)
    786c:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    786e:	2800      	cmp	r0, #0
    7870:	d120      	bne.n	78b4 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    7872:	7921      	ldrb	r1, [r4, #4]
    7874:	0209      	lsls	r1, r1, #8
    7876:	79a2      	ldrb	r2, [r4, #6]
    7878:	230f      	movs	r3, #15
    787a:	401a      	ands	r2, r3
    787c:	430a      	orrs	r2, r1
    787e:	7961      	ldrb	r1, [r4, #5]
    7880:	0109      	lsls	r1, r1, #4
    7882:	25ff      	movs	r5, #255	; 0xff
    7884:	4029      	ands	r1, r5
    7886:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    7888:	79e1      	ldrb	r1, [r4, #7]
    788a:	0209      	lsls	r1, r1, #8
    788c:	7a66      	ldrb	r6, [r4, #9]
    788e:	4033      	ands	r3, r6
    7890:	430b      	orrs	r3, r1
    7892:	7a21      	ldrb	r1, [r4, #8]
    7894:	0109      	lsls	r1, r1, #4
    7896:	400d      	ands	r5, r1
    7898:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    789a:	2a00      	cmp	r2, #0
    789c:	d012      	beq.n	78c4 <nm_get_firmware_full_info+0xb4>
    789e:	2b00      	cmp	r3, #0
    78a0:	d013      	beq.n	78ca <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    78a2:	4912      	ldr	r1, [pc, #72]	; (78ec <nm_get_firmware_full_info+0xdc>)
    78a4:	428b      	cmp	r3, r1
    78a6:	d813      	bhi.n	78d0 <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    78a8:	4b11      	ldr	r3, [pc, #68]	; (78f0 <nm_get_firmware_full_info+0xe0>)
    78aa:	429a      	cmp	r2, r3
    78ac:	d802      	bhi.n	78b4 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    78ae:	380d      	subs	r0, #13
    78b0:	e000      	b.n	78b4 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    78b2:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    78b4:	b004      	add	sp, #16
    78b6:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    78b8:	200c      	movs	r0, #12
    78ba:	4240      	negs	r0, r0
    78bc:	e7fa      	b.n	78b4 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    78be:	200c      	movs	r0, #12
    78c0:	4240      	negs	r0, r0
    78c2:	e7f7      	b.n	78b4 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    78c4:	200c      	movs	r0, #12
    78c6:	4240      	negs	r0, r0
    78c8:	e7f4      	b.n	78b4 <nm_get_firmware_full_info+0xa4>
    78ca:	200c      	movs	r0, #12
    78cc:	4240      	negs	r0, r0
    78ce:	e7f1      	b.n	78b4 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    78d0:	200d      	movs	r0, #13
    78d2:	4240      	negs	r0, r0
    78d4:	e7ee      	b.n	78b4 <nm_get_firmware_full_info+0xa4>
    78d6:	46c0      	nop			; (mov r8, r8)
    78d8:	0000ccc7 	.word	0x0000ccc7
    78dc:	000062e1 	.word	0x000062e1
    78e0:	000c0008 	.word	0x000c0008
    78e4:	00007729 	.word	0x00007729
    78e8:	00007741 	.word	0x00007741
    78ec:	00001352 	.word	0x00001352
    78f0:	00001351 	.word	0x00001351

000078f4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    78f4:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    78f6:	2800      	cmp	r0, #0
    78f8:	d037      	beq.n	796a <nm_drv_init+0x76>
		u8Mode = *((uint8 *)arg);
    78fa:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    78fc:	1e6b      	subs	r3, r5, #1
    78fe:	2b03      	cmp	r3, #3
    7900:	d900      	bls.n	7904 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    7902:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    7904:	2000      	movs	r0, #0
    7906:	4b20      	ldr	r3, [pc, #128]	; (7988 <nm_drv_init+0x94>)
    7908:	4798      	blx	r3
    790a:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    790c:	d12f      	bne.n	796e <nm_drv_init+0x7a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    790e:	481f      	ldr	r0, [pc, #124]	; (798c <nm_drv_init+0x98>)
    7910:	4c1f      	ldr	r4, [pc, #124]	; (7990 <nm_drv_init+0x9c>)
    7912:	47a0      	blx	r4
    7914:	4b1f      	ldr	r3, [pc, #124]	; (7994 <nm_drv_init+0xa0>)
    7916:	4798      	blx	r3
    7918:	0001      	movs	r1, r0
    791a:	481f      	ldr	r0, [pc, #124]	; (7998 <nm_drv_init+0xa4>)
    791c:	47a0      	blx	r4
    791e:	200d      	movs	r0, #13
    7920:	4b1e      	ldr	r3, [pc, #120]	; (799c <nm_drv_init+0xa8>)
    7922:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    7924:	4b1e      	ldr	r3, [pc, #120]	; (79a0 <nm_drv_init+0xac>)
    7926:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    7928:	0028      	movs	r0, r5
    792a:	4b1e      	ldr	r3, [pc, #120]	; (79a4 <nm_drv_init+0xb0>)
    792c:	4798      	blx	r3
    792e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    7930:	d117      	bne.n	7962 <nm_drv_init+0x6e>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    7932:	0028      	movs	r0, r5
    7934:	4b1c      	ldr	r3, [pc, #112]	; (79a8 <nm_drv_init+0xb4>)
    7936:	4798      	blx	r3
    7938:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    793a:	d112      	bne.n	7962 <nm_drv_init+0x6e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    793c:	3d02      	subs	r5, #2
    793e:	2d01      	cmp	r5, #1
    7940:	d911      	bls.n	7966 <nm_drv_init+0x72>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    7942:	4b1a      	ldr	r3, [pc, #104]	; (79ac <nm_drv_init+0xb8>)
    7944:	4798      	blx	r3
    7946:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    7948:	d00d      	beq.n	7966 <nm_drv_init+0x72>
		M2M_ERR("failed to enable interrupts..\n");
    794a:	2256      	movs	r2, #86	; 0x56
    794c:	32ff      	adds	r2, #255	; 0xff
    794e:	4918      	ldr	r1, [pc, #96]	; (79b0 <nm_drv_init+0xbc>)
    7950:	4818      	ldr	r0, [pc, #96]	; (79b4 <nm_drv_init+0xc0>)
    7952:	4b0f      	ldr	r3, [pc, #60]	; (7990 <nm_drv_init+0x9c>)
    7954:	4798      	blx	r3
    7956:	4818      	ldr	r0, [pc, #96]	; (79b8 <nm_drv_init+0xc4>)
    7958:	4b18      	ldr	r3, [pc, #96]	; (79bc <nm_drv_init+0xc8>)
    795a:	4798      	blx	r3
    795c:	200d      	movs	r0, #13
    795e:	4b0f      	ldr	r3, [pc, #60]	; (799c <nm_drv_init+0xa8>)
    7960:	4798      	blx	r3
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    7962:	4b17      	ldr	r3, [pc, #92]	; (79c0 <nm_drv_init+0xcc>)
    7964:	4798      	blx	r3
ERR1:
	return ret;
}
    7966:	0020      	movs	r0, r4
    7968:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    796a:	2501      	movs	r5, #1
    796c:	e7ca      	b.n	7904 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    796e:	2228      	movs	r2, #40	; 0x28
    7970:	32ff      	adds	r2, #255	; 0xff
    7972:	490f      	ldr	r1, [pc, #60]	; (79b0 <nm_drv_init+0xbc>)
    7974:	480f      	ldr	r0, [pc, #60]	; (79b4 <nm_drv_init+0xc0>)
    7976:	4b06      	ldr	r3, [pc, #24]	; (7990 <nm_drv_init+0x9c>)
    7978:	4798      	blx	r3
    797a:	4812      	ldr	r0, [pc, #72]	; (79c4 <nm_drv_init+0xd0>)
    797c:	4b0f      	ldr	r3, [pc, #60]	; (79bc <nm_drv_init+0xc8>)
    797e:	4798      	blx	r3
    7980:	200d      	movs	r0, #13
    7982:	4b06      	ldr	r3, [pc, #24]	; (799c <nm_drv_init+0xa8>)
    7984:	4798      	blx	r3
		goto ERR1;
    7986:	e7ee      	b.n	7966 <nm_drv_init+0x72>
    7988:	000076f9 	.word	0x000076f9
    798c:	0000f0a4 	.word	0x0000f0a4
    7990:	0000ce29 	.word	0x0000ce29
    7994:	000072d9 	.word	0x000072d9
    7998:	0000f3e8 	.word	0x0000f3e8
    799c:	0000ce5d 	.word	0x0000ce5d
    79a0:	0000813d 	.word	0x0000813d
    79a4:	000074ed 	.word	0x000074ed
    79a8:	000075f5 	.word	0x000075f5
    79ac:	0000727d 	.word	0x0000727d
    79b0:	0000f330 	.word	0x0000f330
    79b4:	0000ed74 	.word	0x0000ed74
    79b8:	0000f3ac 	.word	0x0000f3ac
    79bc:	0000cf45 	.word	0x0000cf45
    79c0:	00007705 	.word	0x00007705
    79c4:	0000f3cc 	.word	0x0000f3cc

000079c8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    79c8:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    79ca:	4b1c      	ldr	r3, [pc, #112]	; (7a3c <nm_drv_deinit+0x74>)
    79cc:	4798      	blx	r3
    79ce:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    79d0:	d10b      	bne.n	79ea <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    79d2:	2000      	movs	r0, #0
    79d4:	4b1a      	ldr	r3, [pc, #104]	; (7a40 <nm_drv_deinit+0x78>)
    79d6:	4798      	blx	r3
    79d8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    79da:	d114      	bne.n	7a06 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    79dc:	4b19      	ldr	r3, [pc, #100]	; (7a44 <nm_drv_deinit+0x7c>)
    79de:	4798      	blx	r3
    79e0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    79e2:	d11d      	bne.n	7a20 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    79e4:	4b18      	ldr	r3, [pc, #96]	; (7a48 <nm_drv_deinit+0x80>)
    79e6:	4798      	blx	r3
    79e8:	e00b      	b.n	7a02 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    79ea:	22b6      	movs	r2, #182	; 0xb6
    79ec:	0052      	lsls	r2, r2, #1
    79ee:	4917      	ldr	r1, [pc, #92]	; (7a4c <nm_drv_deinit+0x84>)
    79f0:	4817      	ldr	r0, [pc, #92]	; (7a50 <nm_drv_deinit+0x88>)
    79f2:	4b18      	ldr	r3, [pc, #96]	; (7a54 <nm_drv_deinit+0x8c>)
    79f4:	4798      	blx	r3
    79f6:	4818      	ldr	r0, [pc, #96]	; (7a58 <nm_drv_deinit+0x90>)
    79f8:	4b18      	ldr	r3, [pc, #96]	; (7a5c <nm_drv_deinit+0x94>)
    79fa:	4798      	blx	r3
    79fc:	200d      	movs	r0, #13
    79fe:	4b18      	ldr	r3, [pc, #96]	; (7a60 <nm_drv_deinit+0x98>)
    7a00:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    7a02:	0020      	movs	r0, r4
    7a04:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    7a06:	2274      	movs	r2, #116	; 0x74
    7a08:	32ff      	adds	r2, #255	; 0xff
    7a0a:	4910      	ldr	r1, [pc, #64]	; (7a4c <nm_drv_deinit+0x84>)
    7a0c:	4810      	ldr	r0, [pc, #64]	; (7a50 <nm_drv_deinit+0x88>)
    7a0e:	4b11      	ldr	r3, [pc, #68]	; (7a54 <nm_drv_deinit+0x8c>)
    7a10:	4798      	blx	r3
    7a12:	4814      	ldr	r0, [pc, #80]	; (7a64 <nm_drv_deinit+0x9c>)
    7a14:	4b11      	ldr	r3, [pc, #68]	; (7a5c <nm_drv_deinit+0x94>)
    7a16:	4798      	blx	r3
    7a18:	200d      	movs	r0, #13
    7a1a:	4b11      	ldr	r3, [pc, #68]	; (7a60 <nm_drv_deinit+0x98>)
    7a1c:	4798      	blx	r3
		goto ERR1;
    7a1e:	e7f0      	b.n	7a02 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    7a20:	227a      	movs	r2, #122	; 0x7a
    7a22:	32ff      	adds	r2, #255	; 0xff
    7a24:	4909      	ldr	r1, [pc, #36]	; (7a4c <nm_drv_deinit+0x84>)
    7a26:	480a      	ldr	r0, [pc, #40]	; (7a50 <nm_drv_deinit+0x88>)
    7a28:	4b0a      	ldr	r3, [pc, #40]	; (7a54 <nm_drv_deinit+0x8c>)
    7a2a:	4798      	blx	r3
    7a2c:	480e      	ldr	r0, [pc, #56]	; (7a68 <nm_drv_deinit+0xa0>)
    7a2e:	4b0b      	ldr	r3, [pc, #44]	; (7a5c <nm_drv_deinit+0x94>)
    7a30:	4798      	blx	r3
    7a32:	200d      	movs	r0, #13
    7a34:	4b0a      	ldr	r3, [pc, #40]	; (7a60 <nm_drv_deinit+0x98>)
    7a36:	4798      	blx	r3
		goto ERR1;
    7a38:	e7e3      	b.n	7a02 <nm_drv_deinit+0x3a>
    7a3a:	46c0      	nop			; (mov r8, r8)
    7a3c:	0000766d 	.word	0x0000766d
    7a40:	00008f5d 	.word	0x00008f5d
    7a44:	00007705 	.word	0x00007705
    7a48:	000080e9 	.word	0x000080e9
    7a4c:	0000f33c 	.word	0x0000f33c
    7a50:	0000ed74 	.word	0x0000ed74
    7a54:	0000ce29 	.word	0x0000ce29
    7a58:	0000f34c 	.word	0x0000f34c
    7a5c:	0000cf45 	.word	0x0000cf45
    7a60:	0000ce5d 	.word	0x0000ce5d
    7a64:	0000f36c 	.word	0x0000f36c
    7a68:	0000f390 	.word	0x0000f390

00007a6c <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    7a6c:	b500      	push	{lr}
    7a6e:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    7a70:	ab01      	add	r3, sp, #4
    7a72:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    7a74:	2200      	movs	r2, #0
    7a76:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    7a78:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7a7a:	0019      	movs	r1, r3
    7a7c:	2003      	movs	r0, #3
    7a7e:	4b02      	ldr	r3, [pc, #8]	; (7a88 <nmi_spi_write+0x1c>)
    7a80:	4798      	blx	r3
}
    7a82:	b005      	add	sp, #20
    7a84:	bd00      	pop	{pc}
    7a86:	46c0      	nop			; (mov r8, r8)
    7a88:	00006115 	.word	0x00006115

00007a8c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    7a8c:	b570      	push	{r4, r5, r6, lr}
    7a8e:	b084      	sub	sp, #16
    7a90:	ac08      	add	r4, sp, #32
    7a92:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    7a94:	ac01      	add	r4, sp, #4
    7a96:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    7a98:	303f      	adds	r0, #63	; 0x3f
    7a9a:	b2c4      	uxtb	r4, r0
    7a9c:	2c0e      	cmp	r4, #14
    7a9e:	d900      	bls.n	7aa2 <spi_cmd+0x16>
    7aa0:	e084      	b.n	7bac <spi_cmd+0x120>
    7aa2:	00a0      	lsls	r0, r4, #2
    7aa4:	4c4f      	ldr	r4, [pc, #316]	; (7be4 <spi_cmd+0x158>)
    7aa6:	5820      	ldr	r0, [r4, r0]
    7aa8:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    7aaa:	ab01      	add	r3, sp, #4
    7aac:	0c0a      	lsrs	r2, r1, #16
    7aae:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    7ab0:	0a0a      	lsrs	r2, r1, #8
    7ab2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    7ab4:	70d9      	strb	r1, [r3, #3]
		len = 5;
    7ab6:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    7ab8:	4b4b      	ldr	r3, [pc, #300]	; (7be8 <spi_cmd+0x15c>)
    7aba:	781b      	ldrb	r3, [r3, #0]
    7abc:	2b00      	cmp	r3, #0
    7abe:	d077      	beq.n	7bb0 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    7ac0:	3901      	subs	r1, #1
    7ac2:	b2c9      	uxtb	r1, r1
    7ac4:	e083      	b.n	7bce <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    7ac6:	0a0b      	lsrs	r3, r1, #8
    7ac8:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    7aca:	2d00      	cmp	r5, #0
    7acc:	d107      	bne.n	7ade <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    7ace:	aa01      	add	r2, sp, #4
    7ad0:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    7ad2:	ab01      	add	r3, sp, #4
    7ad4:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    7ad6:	2200      	movs	r2, #0
    7ad8:	70da      	strb	r2, [r3, #3]
		len = 5;
    7ada:	2105      	movs	r1, #5
		break;
    7adc:	e7ec      	b.n	7ab8 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    7ade:	2280      	movs	r2, #128	; 0x80
    7ae0:	4252      	negs	r2, r2
    7ae2:	4313      	orrs	r3, r2
    7ae4:	aa01      	add	r2, sp, #4
    7ae6:	7053      	strb	r3, [r2, #1]
    7ae8:	e7f3      	b.n	7ad2 <spi_cmd+0x46>
		bc[1] = 0x00;
    7aea:	ab01      	add	r3, sp, #4
    7aec:	2200      	movs	r2, #0
    7aee:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    7af0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    7af2:	70da      	strb	r2, [r3, #3]
		len = 5;
    7af4:	2105      	movs	r1, #5
		break;
    7af6:	e7df      	b.n	7ab8 <spi_cmd+0x2c>
		bc[1] = 0x00;
    7af8:	ab01      	add	r3, sp, #4
    7afa:	2200      	movs	r2, #0
    7afc:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    7afe:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    7b00:	70da      	strb	r2, [r3, #3]
		len = 5;
    7b02:	2105      	movs	r1, #5
		break;
    7b04:	e7d8      	b.n	7ab8 <spi_cmd+0x2c>
		bc[1] = 0xff;
    7b06:	ab01      	add	r3, sp, #4
    7b08:	22ff      	movs	r2, #255	; 0xff
    7b0a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    7b0c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    7b0e:	70da      	strb	r2, [r3, #3]
		len = 5;
    7b10:	2105      	movs	r1, #5
		break;
    7b12:	e7d1      	b.n	7ab8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    7b14:	aa01      	add	r2, sp, #4
    7b16:	0c08      	lsrs	r0, r1, #16
    7b18:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    7b1a:	0a08      	lsrs	r0, r1, #8
    7b1c:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    7b1e:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    7b20:	0a19      	lsrs	r1, r3, #8
    7b22:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    7b24:	7153      	strb	r3, [r2, #5]
		len = 7;
    7b26:	2107      	movs	r1, #7
		break;
    7b28:	e7c6      	b.n	7ab8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    7b2a:	aa01      	add	r2, sp, #4
    7b2c:	0c08      	lsrs	r0, r1, #16
    7b2e:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    7b30:	0a08      	lsrs	r0, r1, #8
    7b32:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    7b34:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    7b36:	0c19      	lsrs	r1, r3, #16
    7b38:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    7b3a:	0a19      	lsrs	r1, r3, #8
    7b3c:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    7b3e:	7193      	strb	r3, [r2, #6]
		len = 8;
    7b40:	2108      	movs	r1, #8
		break;
    7b42:	e7b9      	b.n	7ab8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    7b44:	0a0b      	lsrs	r3, r1, #8
    7b46:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    7b48:	2d00      	cmp	r5, #0
    7b4a:	d10c      	bne.n	7b66 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    7b4c:	a801      	add	r0, sp, #4
    7b4e:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    7b50:	ab01      	add	r3, sp, #4
    7b52:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    7b54:	0e11      	lsrs	r1, r2, #24
    7b56:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    7b58:	0c11      	lsrs	r1, r2, #16
    7b5a:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    7b5c:	0a11      	lsrs	r1, r2, #8
    7b5e:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    7b60:	719a      	strb	r2, [r3, #6]
		len = 8;
    7b62:	2108      	movs	r1, #8
		break;
    7b64:	e7a8      	b.n	7ab8 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    7b66:	2080      	movs	r0, #128	; 0x80
    7b68:	4240      	negs	r0, r0
    7b6a:	4303      	orrs	r3, r0
    7b6c:	a801      	add	r0, sp, #4
    7b6e:	7043      	strb	r3, [r0, #1]
    7b70:	e7ee      	b.n	7b50 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    7b72:	ab01      	add	r3, sp, #4
    7b74:	0c08      	lsrs	r0, r1, #16
    7b76:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    7b78:	0a08      	lsrs	r0, r1, #8
    7b7a:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    7b7c:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    7b7e:	0e11      	lsrs	r1, r2, #24
    7b80:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    7b82:	0c11      	lsrs	r1, r2, #16
    7b84:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    7b86:	0a11      	lsrs	r1, r2, #8
    7b88:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    7b8a:	71da      	strb	r2, [r3, #7]
		len = 9;
    7b8c:	2109      	movs	r1, #9
		break;
    7b8e:	e793      	b.n	7ab8 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    7b90:	2228      	movs	r2, #40	; 0x28
    7b92:	32ff      	adds	r2, #255	; 0xff
    7b94:	4915      	ldr	r1, [pc, #84]	; (7bec <spi_cmd+0x160>)
    7b96:	4816      	ldr	r0, [pc, #88]	; (7bf0 <spi_cmd+0x164>)
    7b98:	4b16      	ldr	r3, [pc, #88]	; (7bf4 <spi_cmd+0x168>)
    7b9a:	4798      	blx	r3
    7b9c:	4816      	ldr	r0, [pc, #88]	; (7bf8 <spi_cmd+0x16c>)
    7b9e:	4b17      	ldr	r3, [pc, #92]	; (7bfc <spi_cmd+0x170>)
    7ba0:	4798      	blx	r3
    7ba2:	200d      	movs	r0, #13
    7ba4:	4b16      	ldr	r3, [pc, #88]	; (7c00 <spi_cmd+0x174>)
    7ba6:	4798      	blx	r3
			result = N_FAIL;
    7ba8:	2300      	movs	r3, #0
    7baa:	e017      	b.n	7bdc <spi_cmd+0x150>
	switch (cmd) {
    7bac:	2300      	movs	r3, #0
    7bae:	e015      	b.n	7bdc <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    7bb0:	1e4e      	subs	r6, r1, #1
    7bb2:	aa01      	add	r2, sp, #4
    7bb4:	1995      	adds	r5, r2, r6
    7bb6:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    7bb8:	4c12      	ldr	r4, [pc, #72]	; (7c04 <spi_cmd+0x178>)
    7bba:	005b      	lsls	r3, r3, #1
    7bbc:	7810      	ldrb	r0, [r2, #0]
    7bbe:	4043      	eors	r3, r0
    7bc0:	5ce3      	ldrb	r3, [r4, r3]
    7bc2:	3201      	adds	r2, #1
	while (len--)
    7bc4:	42aa      	cmp	r2, r5
    7bc6:	d1f8      	bne.n	7bba <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    7bc8:	005b      	lsls	r3, r3, #1
    7bca:	aa01      	add	r2, sp, #4
    7bcc:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    7bce:	b289      	uxth	r1, r1
    7bd0:	a801      	add	r0, sp, #4
    7bd2:	4b0d      	ldr	r3, [pc, #52]	; (7c08 <spi_cmd+0x17c>)
    7bd4:	4798      	blx	r3
    7bd6:	2301      	movs	r3, #1
    7bd8:	2800      	cmp	r0, #0
    7bda:	d1d9      	bne.n	7b90 <spi_cmd+0x104>
		}
	}

	return result;
}
    7bdc:	0018      	movs	r0, r3
    7bde:	b004      	add	sp, #16
    7be0:	bd70      	pop	{r4, r5, r6, pc}
    7be2:	46c0      	nop			; (mov r8, r8)
    7be4:	0000f3f8 	.word	0x0000f3f8
    7be8:	20000428 	.word	0x20000428
    7bec:	0000f438 	.word	0x0000f438
    7bf0:	0000ed74 	.word	0x0000ed74
    7bf4:	0000ce29 	.word	0x0000ce29
    7bf8:	0000f8c8 	.word	0x0000f8c8
    7bfc:	0000cf45 	.word	0x0000cf45
    7c00:	0000ce5d 	.word	0x0000ce5d
    7c04:	0000f4c4 	.word	0x0000f4c4
    7c08:	00007a6d 	.word	0x00007a6d

00007c0c <nmi_spi_read>:
{
    7c0c:	b500      	push	{lr}
    7c0e:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    7c10:	ab01      	add	r3, sp, #4
    7c12:	2200      	movs	r2, #0
    7c14:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    7c16:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    7c18:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    7c1a:	0019      	movs	r1, r3
    7c1c:	2003      	movs	r0, #3
    7c1e:	4b02      	ldr	r3, [pc, #8]	; (7c28 <nmi_spi_read+0x1c>)
    7c20:	4798      	blx	r3
}
    7c22:	b005      	add	sp, #20
    7c24:	bd00      	pop	{pc}
    7c26:	46c0      	nop			; (mov r8, r8)
    7c28:	00006115 	.word	0x00006115

00007c2c <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    7c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c2e:	46c6      	mov	lr, r8
    7c30:	b500      	push	{lr}
    7c32:	b082      	sub	sp, #8
    7c34:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    7c36:	28cf      	cmp	r0, #207	; 0xcf
    7c38:	d02b      	beq.n	7c92 <spi_cmd_rsp+0x66>
    7c3a:	0003      	movs	r3, r0
    7c3c:	333b      	adds	r3, #59	; 0x3b
    7c3e:	b2db      	uxtb	r3, r3
    7c40:	2b01      	cmp	r3, #1
    7c42:	d926      	bls.n	7c92 <spi_cmd_rsp+0x66>
{
    7c44:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7c46:	466b      	mov	r3, sp
    7c48:	1dde      	adds	r6, r3, #7
    7c4a:	4b26      	ldr	r3, [pc, #152]	; (7ce4 <spi_cmd_rsp+0xb8>)
    7c4c:	4698      	mov	r8, r3
    7c4e:	2101      	movs	r1, #1
    7c50:	0030      	movs	r0, r6
    7c52:	47c0      	blx	r8
    7c54:	1e05      	subs	r5, r0, #0
    7c56:	d125      	bne.n	7ca4 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    7c58:	7833      	ldrb	r3, [r6, #0]
    7c5a:	42bb      	cmp	r3, r7
    7c5c:	d030      	beq.n	7cc0 <spi_cmd_rsp+0x94>
    7c5e:	3c01      	subs	r4, #1
    7c60:	b2e4      	uxtb	r4, r4
    7c62:	2c00      	cmp	r4, #0
    7c64:	d1f3      	bne.n	7c4e <spi_cmd_rsp+0x22>
    7c66:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7c68:	466b      	mov	r3, sp
    7c6a:	1dde      	adds	r6, r3, #7
    7c6c:	4f1d      	ldr	r7, [pc, #116]	; (7ce4 <spi_cmd_rsp+0xb8>)
    7c6e:	2101      	movs	r1, #1
    7c70:	0030      	movs	r0, r6
    7c72:	47b8      	blx	r7
    7c74:	2800      	cmp	r0, #0
    7c76:	d125      	bne.n	7cc4 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    7c78:	7833      	ldrb	r3, [r6, #0]
    7c7a:	2b00      	cmp	r3, #0
    7c7c:	d02f      	beq.n	7cde <spi_cmd_rsp+0xb2>
    7c7e:	3c01      	subs	r4, #1
    7c80:	b2e4      	uxtb	r4, r4
    7c82:	2c00      	cmp	r4, #0
    7c84:	d1f3      	bne.n	7c6e <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    7c86:	2501      	movs	r5, #1

_fail_:

	return result;
}
    7c88:	0028      	movs	r0, r5
    7c8a:	b002      	add	sp, #8
    7c8c:	bc04      	pop	{r2}
    7c8e:	4690      	mov	r8, r2
    7c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7c92:	2101      	movs	r1, #1
    7c94:	466b      	mov	r3, sp
    7c96:	1dd8      	adds	r0, r3, #7
    7c98:	4b12      	ldr	r3, [pc, #72]	; (7ce4 <spi_cmd_rsp+0xb8>)
    7c9a:	4798      	blx	r3
			result = N_FAIL;
    7c9c:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7c9e:	2800      	cmp	r0, #0
    7ca0:	d0d0      	beq.n	7c44 <spi_cmd_rsp+0x18>
    7ca2:	e7f1      	b.n	7c88 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    7ca4:	22b1      	movs	r2, #177	; 0xb1
    7ca6:	0052      	lsls	r2, r2, #1
    7ca8:	490f      	ldr	r1, [pc, #60]	; (7ce8 <spi_cmd_rsp+0xbc>)
    7caa:	4810      	ldr	r0, [pc, #64]	; (7cec <spi_cmd_rsp+0xc0>)
    7cac:	4b10      	ldr	r3, [pc, #64]	; (7cf0 <spi_cmd_rsp+0xc4>)
    7cae:	4798      	blx	r3
    7cb0:	4810      	ldr	r0, [pc, #64]	; (7cf4 <spi_cmd_rsp+0xc8>)
    7cb2:	4b11      	ldr	r3, [pc, #68]	; (7cf8 <spi_cmd_rsp+0xcc>)
    7cb4:	4798      	blx	r3
    7cb6:	200d      	movs	r0, #13
    7cb8:	4b10      	ldr	r3, [pc, #64]	; (7cfc <spi_cmd_rsp+0xd0>)
    7cba:	4798      	blx	r3
			result = N_FAIL;
    7cbc:	2500      	movs	r5, #0
			goto _fail_;
    7cbe:	e7e3      	b.n	7c88 <spi_cmd_rsp+0x5c>
    7cc0:	240b      	movs	r4, #11
    7cc2:	e7d1      	b.n	7c68 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    7cc4:	22b8      	movs	r2, #184	; 0xb8
    7cc6:	0052      	lsls	r2, r2, #1
    7cc8:	4907      	ldr	r1, [pc, #28]	; (7ce8 <spi_cmd_rsp+0xbc>)
    7cca:	4808      	ldr	r0, [pc, #32]	; (7cec <spi_cmd_rsp+0xc0>)
    7ccc:	4b08      	ldr	r3, [pc, #32]	; (7cf0 <spi_cmd_rsp+0xc4>)
    7cce:	4798      	blx	r3
    7cd0:	4808      	ldr	r0, [pc, #32]	; (7cf4 <spi_cmd_rsp+0xc8>)
    7cd2:	4b09      	ldr	r3, [pc, #36]	; (7cf8 <spi_cmd_rsp+0xcc>)
    7cd4:	4798      	blx	r3
    7cd6:	200d      	movs	r0, #13
    7cd8:	4b08      	ldr	r3, [pc, #32]	; (7cfc <spi_cmd_rsp+0xd0>)
    7cda:	4798      	blx	r3
			goto _fail_;
    7cdc:	e7d4      	b.n	7c88 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    7cde:	2501      	movs	r5, #1
    7ce0:	e7d2      	b.n	7c88 <spi_cmd_rsp+0x5c>
    7ce2:	46c0      	nop			; (mov r8, r8)
    7ce4:	00007c0d 	.word	0x00007c0d
    7ce8:	0000f450 	.word	0x0000f450
    7cec:	0000ed74 	.word	0x0000ed74
    7cf0:	0000ce29 	.word	0x0000ce29
    7cf4:	0000f8f4 	.word	0x0000f8f4
    7cf8:	0000cf45 	.word	0x0000cf45
    7cfc:	0000ce5d 	.word	0x0000ce5d

00007d00 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    7d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d02:	46de      	mov	lr, fp
    7d04:	4657      	mov	r7, sl
    7d06:	464e      	mov	r6, r9
    7d08:	4645      	mov	r5, r8
    7d0a:	b5e0      	push	{r5, r6, r7, lr}
    7d0c:	b087      	sub	sp, #28
    7d0e:	9001      	str	r0, [sp, #4]
    7d10:	4689      	mov	r9, r1
    7d12:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    7d14:	2300      	movs	r3, #0
    7d16:	469a      	mov	sl, r3
    7d18:	2380      	movs	r3, #128	; 0x80
    7d1a:	019b      	lsls	r3, r3, #6
    7d1c:	469b      	mov	fp, r3
    7d1e:	466a      	mov	r2, sp
    7d20:	81d3      	strh	r3, [r2, #14]
		/**
			Data Respnose header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7d22:	4b3b      	ldr	r3, [pc, #236]	; (7e10 <spi_data_read+0x110>)
    7d24:	4698      	mov	r8, r3
    7d26:	e02e      	b.n	7d86 <spi_data_read+0x86>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    7d28:	4a3a      	ldr	r2, [pc, #232]	; (7e14 <spi_data_read+0x114>)
    7d2a:	493b      	ldr	r1, [pc, #236]	; (7e18 <spi_data_read+0x118>)
    7d2c:	483b      	ldr	r0, [pc, #236]	; (7e1c <spi_data_read+0x11c>)
    7d2e:	4b3c      	ldr	r3, [pc, #240]	; (7e20 <spi_data_read+0x120>)
    7d30:	4798      	blx	r3
    7d32:	483c      	ldr	r0, [pc, #240]	; (7e24 <spi_data_read+0x124>)
    7d34:	4b3c      	ldr	r3, [pc, #240]	; (7e28 <spi_data_read+0x128>)
    7d36:	4798      	blx	r3
    7d38:	200d      	movs	r0, #13
    7d3a:	4b3c      	ldr	r3, [pc, #240]	; (7e2c <spi_data_read+0x12c>)
    7d3c:	4798      	blx	r3
    7d3e:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    7d40:	0028      	movs	r0, r5
    7d42:	b007      	add	sp, #28
    7d44:	bc3c      	pop	{r2, r3, r4, r5}
    7d46:	4690      	mov	r8, r2
    7d48:	4699      	mov	r9, r3
    7d4a:	46a2      	mov	sl, r4
    7d4c:	46ab      	mov	fp, r5
    7d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    7d50:	2c00      	cmp	r4, #0
    7d52:	dd2e      	ble.n	7db2 <spi_data_read+0xb2>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    7d54:	9b01      	ldr	r3, [sp, #4]
    7d56:	4453      	add	r3, sl
    7d58:	0018      	movs	r0, r3
    7d5a:	0039      	movs	r1, r7
    7d5c:	4b2c      	ldr	r3, [pc, #176]	; (7e10 <spi_data_read+0x110>)
    7d5e:	4798      	blx	r3
    7d60:	1e04      	subs	r4, r0, #0
    7d62:	d133      	bne.n	7dcc <spi_data_read+0xcc>
		if(!clockless)
    7d64:	9b02      	ldr	r3, [sp, #8]
    7d66:	2b00      	cmp	r3, #0
    7d68:	d103      	bne.n	7d72 <spi_data_read+0x72>
			if (!gu8Crc_off) {
    7d6a:	4b31      	ldr	r3, [pc, #196]	; (7e30 <spi_data_read+0x130>)
    7d6c:	781b      	ldrb	r3, [r3, #0]
    7d6e:	2b00      	cmp	r3, #0
    7d70:	d039      	beq.n	7de6 <spi_data_read+0xe6>
		ix += nbytes;
    7d72:	4653      	mov	r3, sl
    7d74:	18fb      	adds	r3, r7, r3
    7d76:	b21b      	sxth	r3, r3
    7d78:	469a      	mov	sl, r3
		sz -= nbytes;
    7d7a:	464b      	mov	r3, r9
    7d7c:	1bdf      	subs	r7, r3, r7
    7d7e:	b2bb      	uxth	r3, r7
    7d80:	4699      	mov	r9, r3
	} while (sz);
    7d82:	2b00      	cmp	r3, #0
    7d84:	d042      	beq.n	7e0c <spi_data_read+0x10c>
    7d86:	464f      	mov	r7, r9
    7d88:	45d9      	cmp	r9, fp
    7d8a:	d901      	bls.n	7d90 <spi_data_read+0x90>
    7d8c:	466b      	mov	r3, sp
    7d8e:	89df      	ldrh	r7, [r3, #14]
    7d90:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    7d92:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    7d94:	ab04      	add	r3, sp, #16
    7d96:	1cde      	adds	r6, r3, #3
    7d98:	2101      	movs	r1, #1
    7d9a:	0030      	movs	r0, r6
    7d9c:	47c0      	blx	r8
    7d9e:	1e05      	subs	r5, r0, #0
    7da0:	d1c2      	bne.n	7d28 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    7da2:	7833      	ldrb	r3, [r6, #0]
    7da4:	091b      	lsrs	r3, r3, #4
    7da6:	2b0f      	cmp	r3, #15
    7da8:	d0d2      	beq.n	7d50 <spi_data_read+0x50>
    7daa:	3c01      	subs	r4, #1
    7dac:	b224      	sxth	r4, r4
		} while (retry--);
    7dae:	1c63      	adds	r3, r4, #1
    7db0:	d1f2      	bne.n	7d98 <spi_data_read+0x98>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    7db2:	4a20      	ldr	r2, [pc, #128]	; (7e34 <spi_data_read+0x134>)
    7db4:	4918      	ldr	r1, [pc, #96]	; (7e18 <spi_data_read+0x118>)
    7db6:	4819      	ldr	r0, [pc, #100]	; (7e1c <spi_data_read+0x11c>)
    7db8:	4c19      	ldr	r4, [pc, #100]	; (7e20 <spi_data_read+0x120>)
    7dba:	47a0      	blx	r4
    7dbc:	ab04      	add	r3, sp, #16
    7dbe:	78d9      	ldrb	r1, [r3, #3]
    7dc0:	481d      	ldr	r0, [pc, #116]	; (7e38 <spi_data_read+0x138>)
    7dc2:	47a0      	blx	r4
    7dc4:	200d      	movs	r0, #13
    7dc6:	4b19      	ldr	r3, [pc, #100]	; (7e2c <spi_data_read+0x12c>)
    7dc8:	4798      	blx	r3
			break;
    7dca:	e7b9      	b.n	7d40 <spi_data_read+0x40>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    7dcc:	22c5      	movs	r2, #197	; 0xc5
    7dce:	0092      	lsls	r2, r2, #2
    7dd0:	4911      	ldr	r1, [pc, #68]	; (7e18 <spi_data_read+0x118>)
    7dd2:	4812      	ldr	r0, [pc, #72]	; (7e1c <spi_data_read+0x11c>)
    7dd4:	4b12      	ldr	r3, [pc, #72]	; (7e20 <spi_data_read+0x120>)
    7dd6:	4798      	blx	r3
    7dd8:	4818      	ldr	r0, [pc, #96]	; (7e3c <spi_data_read+0x13c>)
    7dda:	4b13      	ldr	r3, [pc, #76]	; (7e28 <spi_data_read+0x128>)
    7ddc:	4798      	blx	r3
    7dde:	200d      	movs	r0, #13
    7de0:	4b12      	ldr	r3, [pc, #72]	; (7e2c <spi_data_read+0x12c>)
    7de2:	4798      	blx	r3
			break;
    7de4:	e7ac      	b.n	7d40 <spi_data_read+0x40>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    7de6:	2102      	movs	r1, #2
    7de8:	a805      	add	r0, sp, #20
    7dea:	4b09      	ldr	r3, [pc, #36]	; (7e10 <spi_data_read+0x110>)
    7dec:	4798      	blx	r3
    7dee:	2800      	cmp	r0, #0
    7df0:	d0bf      	beq.n	7d72 <spi_data_read+0x72>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    7df2:	4a13      	ldr	r2, [pc, #76]	; (7e40 <spi_data_read+0x140>)
    7df4:	4908      	ldr	r1, [pc, #32]	; (7e18 <spi_data_read+0x118>)
    7df6:	4809      	ldr	r0, [pc, #36]	; (7e1c <spi_data_read+0x11c>)
    7df8:	4b09      	ldr	r3, [pc, #36]	; (7e20 <spi_data_read+0x120>)
    7dfa:	4798      	blx	r3
    7dfc:	4811      	ldr	r0, [pc, #68]	; (7e44 <spi_data_read+0x144>)
    7dfe:	4b0a      	ldr	r3, [pc, #40]	; (7e28 <spi_data_read+0x128>)
    7e00:	4798      	blx	r3
    7e02:	200d      	movs	r0, #13
    7e04:	4b09      	ldr	r3, [pc, #36]	; (7e2c <spi_data_read+0x12c>)
    7e06:	4798      	blx	r3
					result = N_FAIL;
    7e08:	0025      	movs	r5, r4
					break;
    7e0a:	e799      	b.n	7d40 <spi_data_read+0x40>
    7e0c:	2501      	movs	r5, #1
    7e0e:	e797      	b.n	7d40 <spi_data_read+0x40>
    7e10:	00007c0d 	.word	0x00007c0d
    7e14:	000002ff 	.word	0x000002ff
    7e18:	0000f45c 	.word	0x0000f45c
    7e1c:	0000ed74 	.word	0x0000ed74
    7e20:	0000ce29 	.word	0x0000ce29
    7e24:	0000f928 	.word	0x0000f928
    7e28:	0000cf45 	.word	0x0000cf45
    7e2c:	0000ce5d 	.word	0x0000ce5d
    7e30:	20000428 	.word	0x20000428
    7e34:	0000030b 	.word	0x0000030b
    7e38:	0000f95c 	.word	0x0000f95c
    7e3c:	0000f98c 	.word	0x0000f98c
    7e40:	0000031f 	.word	0x0000031f
    7e44:	0000f9bc 	.word	0x0000f9bc

00007e48 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    7e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e4a:	46d6      	mov	lr, sl
    7e4c:	464f      	mov	r7, r9
    7e4e:	4646      	mov	r6, r8
    7e50:	b5c0      	push	{r6, r7, lr}
    7e52:	b086      	sub	sp, #24
    7e54:	9003      	str	r0, [sp, #12]
    7e56:	9104      	str	r1, [sp, #16]
    7e58:	2830      	cmp	r0, #48	; 0x30
    7e5a:	d80f      	bhi.n	7e7c <spi_write_reg+0x34>
    7e5c:	4b30      	ldr	r3, [pc, #192]	; (7f20 <spi_write_reg+0xd8>)
    7e5e:	781f      	ldrb	r7, [r3, #0]
    7e60:	b2fb      	uxtb	r3, r7
    7e62:	9305      	str	r3, [sp, #20]
    7e64:	2300      	movs	r3, #0
    7e66:	2230      	movs	r2, #48	; 0x30
    7e68:	9903      	ldr	r1, [sp, #12]
    7e6a:	428a      	cmp	r2, r1
    7e6c:	415b      	adcs	r3, r3
    7e6e:	b2db      	uxtb	r3, r3
    7e70:	469a      	mov	sl, r3
    7e72:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    7e74:	4b2b      	ldr	r3, [pc, #172]	; (7f24 <spi_write_reg+0xdc>)
    7e76:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    7e78:	46d1      	mov	r9, sl
    7e7a:	e033      	b.n	7ee4 <spi_write_reg+0x9c>
    7e7c:	4b2a      	ldr	r3, [pc, #168]	; (7f28 <spi_write_reg+0xe0>)
    7e7e:	781f      	ldrb	r7, [r3, #0]
    7e80:	e7ee      	b.n	7e60 <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    7e82:	9805      	ldr	r0, [sp, #20]
    7e84:	4b29      	ldr	r3, [pc, #164]	; (7f2c <spi_write_reg+0xe4>)
    7e86:	4798      	blx	r3
    7e88:	0004      	movs	r4, r0
	if (result != N_OK) {
    7e8a:	2801      	cmp	r0, #1
    7e8c:	d041      	beq.n	7f12 <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    7e8e:	22e7      	movs	r2, #231	; 0xe7
    7e90:	0092      	lsls	r2, r2, #2
    7e92:	4927      	ldr	r1, [pc, #156]	; (7f30 <spi_write_reg+0xe8>)
    7e94:	4827      	ldr	r0, [pc, #156]	; (7f34 <spi_write_reg+0xec>)
    7e96:	4e28      	ldr	r6, [pc, #160]	; (7f38 <spi_write_reg+0xf0>)
    7e98:	47b0      	blx	r6
    7e9a:	9903      	ldr	r1, [sp, #12]
    7e9c:	4827      	ldr	r0, [pc, #156]	; (7f3c <spi_write_reg+0xf4>)
    7e9e:	47b0      	blx	r6
    7ea0:	200d      	movs	r0, #13
    7ea2:	4b27      	ldr	r3, [pc, #156]	; (7f40 <spi_write_reg+0xf8>)
    7ea4:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    7ea6:	2001      	movs	r0, #1
    7ea8:	4e26      	ldr	r6, [pc, #152]	; (7f44 <spi_write_reg+0xfc>)
    7eaa:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7eac:	2300      	movs	r3, #0
    7eae:	9300      	str	r3, [sp, #0]
    7eb0:	2200      	movs	r2, #0
    7eb2:	2100      	movs	r1, #0
    7eb4:	20cf      	movs	r0, #207	; 0xcf
    7eb6:	4f1b      	ldr	r7, [pc, #108]	; (7f24 <spi_write_reg+0xdc>)
    7eb8:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    7eba:	20cf      	movs	r0, #207	; 0xcf
    7ebc:	4b1b      	ldr	r3, [pc, #108]	; (7f2c <spi_write_reg+0xe4>)
    7ebe:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    7ec0:	4a21      	ldr	r2, [pc, #132]	; (7f48 <spi_write_reg+0x100>)
    7ec2:	491b      	ldr	r1, [pc, #108]	; (7f30 <spi_write_reg+0xe8>)
    7ec4:	481b      	ldr	r0, [pc, #108]	; (7f34 <spi_write_reg+0xec>)
    7ec6:	4f1c      	ldr	r7, [pc, #112]	; (7f38 <spi_write_reg+0xf0>)
    7ec8:	47b8      	blx	r7
    7eca:	9b04      	ldr	r3, [sp, #16]
    7ecc:	9a03      	ldr	r2, [sp, #12]
    7ece:	0029      	movs	r1, r5
    7ed0:	481e      	ldr	r0, [pc, #120]	; (7f4c <spi_write_reg+0x104>)
    7ed2:	47b8      	blx	r7
    7ed4:	200d      	movs	r0, #13
    7ed6:	4b1a      	ldr	r3, [pc, #104]	; (7f40 <spi_write_reg+0xf8>)
    7ed8:	4798      	blx	r3
		nm_bsp_sleep(1);
    7eda:	2001      	movs	r0, #1
    7edc:	47b0      	blx	r6
    7ede:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    7ee0:	2d00      	cmp	r5, #0
    7ee2:	d016      	beq.n	7f12 <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    7ee4:	464b      	mov	r3, r9
    7ee6:	9300      	str	r3, [sp, #0]
    7ee8:	2304      	movs	r3, #4
    7eea:	9a04      	ldr	r2, [sp, #16]
    7eec:	9f03      	ldr	r7, [sp, #12]
    7eee:	0039      	movs	r1, r7
    7ef0:	9805      	ldr	r0, [sp, #20]
    7ef2:	47c0      	blx	r8
    7ef4:	0004      	movs	r4, r0
	if (result != N_OK) {
    7ef6:	2801      	cmp	r0, #1
    7ef8:	d0c3      	beq.n	7e82 <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    7efa:	4a15      	ldr	r2, [pc, #84]	; (7f50 <spi_write_reg+0x108>)
    7efc:	490c      	ldr	r1, [pc, #48]	; (7f30 <spi_write_reg+0xe8>)
    7efe:	480d      	ldr	r0, [pc, #52]	; (7f34 <spi_write_reg+0xec>)
    7f00:	4e0d      	ldr	r6, [pc, #52]	; (7f38 <spi_write_reg+0xf0>)
    7f02:	47b0      	blx	r6
    7f04:	0039      	movs	r1, r7
    7f06:	4813      	ldr	r0, [pc, #76]	; (7f54 <spi_write_reg+0x10c>)
    7f08:	47b0      	blx	r6
    7f0a:	200d      	movs	r0, #13
    7f0c:	4b0c      	ldr	r3, [pc, #48]	; (7f40 <spi_write_reg+0xf8>)
    7f0e:	4798      	blx	r3
		goto _FAIL_;
    7f10:	e7c9      	b.n	7ea6 <spi_write_reg+0x5e>
	}

	return result;
}
    7f12:	0020      	movs	r0, r4
    7f14:	b006      	add	sp, #24
    7f16:	bc1c      	pop	{r2, r3, r4}
    7f18:	4690      	mov	r8, r2
    7f1a:	4699      	mov	r9, r3
    7f1c:	46a2      	mov	sl, r4
    7f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f20:	0000f434 	.word	0x0000f434
    7f24:	00007a8d 	.word	0x00007a8d
    7f28:	0000f435 	.word	0x0000f435
    7f2c:	00007c2d 	.word	0x00007c2d
    7f30:	0000f47c 	.word	0x0000f47c
    7f34:	0000ed74 	.word	0x0000ed74
    7f38:	0000ce29 	.word	0x0000ce29
    7f3c:	0000fab4 	.word	0x0000fab4
    7f40:	0000ce5d 	.word	0x0000ce5d
    7f44:	00005ed5 	.word	0x00005ed5
    7f48:	000003af 	.word	0x000003af
    7f4c:	0000faec 	.word	0x0000faec
    7f50:	00000396 	.word	0x00000396
    7f54:	0000fa88 	.word	0x0000fa88

00007f58 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    7f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f5a:	46de      	mov	lr, fp
    7f5c:	4657      	mov	r7, sl
    7f5e:	464e      	mov	r6, r9
    7f60:	4645      	mov	r5, r8
    7f62:	b5e0      	push	{r5, r6, r7, lr}
    7f64:	b087      	sub	sp, #28
    7f66:	9002      	str	r0, [sp, #8]
    7f68:	468b      	mov	fp, r1
    7f6a:	28ff      	cmp	r0, #255	; 0xff
    7f6c:	d80f      	bhi.n	7f8e <spi_read_reg+0x36>
    7f6e:	4b41      	ldr	r3, [pc, #260]	; (8074 <spi_read_reg+0x11c>)
    7f70:	781f      	ldrb	r7, [r3, #0]
    7f72:	b2fb      	uxtb	r3, r7
    7f74:	9303      	str	r3, [sp, #12]
    7f76:	2300      	movs	r3, #0
    7f78:	22ff      	movs	r2, #255	; 0xff
    7f7a:	9902      	ldr	r1, [sp, #8]
    7f7c:	428a      	cmp	r2, r1
    7f7e:	415b      	adcs	r3, r3
    7f80:	b2db      	uxtb	r3, r3
    7f82:	469a      	mov	sl, r3
    7f84:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    7f86:	4b3c      	ldr	r3, [pc, #240]	; (8078 <spi_read_reg+0x120>)
    7f88:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    7f8a:	46d1      	mov	r9, sl
    7f8c:	e031      	b.n	7ff2 <spi_read_reg+0x9a>
    7f8e:	4b3b      	ldr	r3, [pc, #236]	; (807c <spi_read_reg+0x124>)
    7f90:	781f      	ldrb	r7, [r3, #0]
    7f92:	e7ee      	b.n	7f72 <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    7f94:	9803      	ldr	r0, [sp, #12]
    7f96:	4b3a      	ldr	r3, [pc, #232]	; (8080 <spi_read_reg+0x128>)
    7f98:	4798      	blx	r3
    7f9a:	0004      	movs	r4, r0
	if (result != N_OK) {
    7f9c:	2801      	cmp	r0, #1
    7f9e:	d03f      	beq.n	8020 <spi_read_reg+0xc8>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    7fa0:	4a38      	ldr	r2, [pc, #224]	; (8084 <spi_read_reg+0x12c>)
    7fa2:	4939      	ldr	r1, [pc, #228]	; (8088 <spi_read_reg+0x130>)
    7fa4:	4839      	ldr	r0, [pc, #228]	; (808c <spi_read_reg+0x134>)
    7fa6:	4e3a      	ldr	r6, [pc, #232]	; (8090 <spi_read_reg+0x138>)
    7fa8:	47b0      	blx	r6
    7faa:	9902      	ldr	r1, [sp, #8]
    7fac:	4839      	ldr	r0, [pc, #228]	; (8094 <spi_read_reg+0x13c>)
    7fae:	47b0      	blx	r6
    7fb0:	200d      	movs	r0, #13
    7fb2:	4b39      	ldr	r3, [pc, #228]	; (8098 <spi_read_reg+0x140>)
    7fb4:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    7fb6:	2001      	movs	r0, #1
    7fb8:	4e38      	ldr	r6, [pc, #224]	; (809c <spi_read_reg+0x144>)
    7fba:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    7fbc:	2300      	movs	r3, #0
    7fbe:	9300      	str	r3, [sp, #0]
    7fc0:	2200      	movs	r2, #0
    7fc2:	2100      	movs	r1, #0
    7fc4:	20cf      	movs	r0, #207	; 0xcf
    7fc6:	4f2c      	ldr	r7, [pc, #176]	; (8078 <spi_read_reg+0x120>)
    7fc8:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    7fca:	20cf      	movs	r0, #207	; 0xcf
    7fcc:	4b2c      	ldr	r3, [pc, #176]	; (8080 <spi_read_reg+0x128>)
    7fce:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    7fd0:	4a33      	ldr	r2, [pc, #204]	; (80a0 <spi_read_reg+0x148>)
    7fd2:	492d      	ldr	r1, [pc, #180]	; (8088 <spi_read_reg+0x130>)
    7fd4:	482d      	ldr	r0, [pc, #180]	; (808c <spi_read_reg+0x134>)
    7fd6:	4f2e      	ldr	r7, [pc, #184]	; (8090 <spi_read_reg+0x138>)
    7fd8:	47b8      	blx	r7
    7fda:	9a02      	ldr	r2, [sp, #8]
    7fdc:	0029      	movs	r1, r5
    7fde:	4831      	ldr	r0, [pc, #196]	; (80a4 <spi_read_reg+0x14c>)
    7fe0:	47b8      	blx	r7
    7fe2:	200d      	movs	r0, #13
    7fe4:	4b2c      	ldr	r3, [pc, #176]	; (8098 <spi_read_reg+0x140>)
    7fe6:	4798      	blx	r3
		nm_bsp_sleep(1);
    7fe8:	2001      	movs	r0, #1
    7fea:	47b0      	blx	r6
    7fec:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    7fee:	2d00      	cmp	r5, #0
    7ff0:	d037      	beq.n	8062 <spi_read_reg+0x10a>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    7ff2:	464b      	mov	r3, r9
    7ff4:	9300      	str	r3, [sp, #0]
    7ff6:	2304      	movs	r3, #4
    7ff8:	2200      	movs	r2, #0
    7ffa:	9f02      	ldr	r7, [sp, #8]
    7ffc:	0039      	movs	r1, r7
    7ffe:	9803      	ldr	r0, [sp, #12]
    8000:	47c0      	blx	r8
    8002:	0004      	movs	r4, r0
	if (result != N_OK) {
    8004:	2801      	cmp	r0, #1
    8006:	d0c5      	beq.n	7f94 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    8008:	4a27      	ldr	r2, [pc, #156]	; (80a8 <spi_read_reg+0x150>)
    800a:	491f      	ldr	r1, [pc, #124]	; (8088 <spi_read_reg+0x130>)
    800c:	481f      	ldr	r0, [pc, #124]	; (808c <spi_read_reg+0x134>)
    800e:	4e20      	ldr	r6, [pc, #128]	; (8090 <spi_read_reg+0x138>)
    8010:	47b0      	blx	r6
    8012:	0039      	movs	r1, r7
    8014:	4825      	ldr	r0, [pc, #148]	; (80ac <spi_read_reg+0x154>)
    8016:	47b0      	blx	r6
    8018:	200d      	movs	r0, #13
    801a:	4b1f      	ldr	r3, [pc, #124]	; (8098 <spi_read_reg+0x140>)
    801c:	4798      	blx	r3
		goto _FAIL_;
    801e:	e7ca      	b.n	7fb6 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    8020:	464a      	mov	r2, r9
    8022:	2104      	movs	r1, #4
    8024:	a805      	add	r0, sp, #20
    8026:	4b22      	ldr	r3, [pc, #136]	; (80b0 <spi_read_reg+0x158>)
    8028:	4798      	blx	r3
    802a:	0004      	movs	r4, r0
	if (result != N_OK) {
    802c:	2801      	cmp	r0, #1
    802e:	d00b      	beq.n	8048 <spi_read_reg+0xf0>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    8030:	4a20      	ldr	r2, [pc, #128]	; (80b4 <spi_read_reg+0x15c>)
    8032:	4915      	ldr	r1, [pc, #84]	; (8088 <spi_read_reg+0x130>)
    8034:	4815      	ldr	r0, [pc, #84]	; (808c <spi_read_reg+0x134>)
    8036:	4b16      	ldr	r3, [pc, #88]	; (8090 <spi_read_reg+0x138>)
    8038:	4798      	blx	r3
    803a:	481f      	ldr	r0, [pc, #124]	; (80b8 <spi_read_reg+0x160>)
    803c:	4b1f      	ldr	r3, [pc, #124]	; (80bc <spi_read_reg+0x164>)
    803e:	4798      	blx	r3
    8040:	200d      	movs	r0, #13
    8042:	4b15      	ldr	r3, [pc, #84]	; (8098 <spi_read_reg+0x140>)
    8044:	4798      	blx	r3
		goto _FAIL_;
    8046:	e7b6      	b.n	7fb6 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    8048:	aa05      	add	r2, sp, #20
    804a:	7853      	ldrb	r3, [r2, #1]
    804c:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    804e:	7891      	ldrb	r1, [r2, #2]
    8050:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    8052:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    8054:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    8056:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    8058:	78d2      	ldrb	r2, [r2, #3]
    805a:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    805c:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    805e:	465a      	mov	r2, fp
    8060:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    8062:	0020      	movs	r0, r4
    8064:	b007      	add	sp, #28
    8066:	bc3c      	pop	{r2, r3, r4, r5}
    8068:	4690      	mov	r8, r2
    806a:	4699      	mov	r9, r3
    806c:	46a2      	mov	sl, r4
    806e:	46ab      	mov	fp, r5
    8070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8072:	46c0      	nop			; (mov r8, r8)
    8074:	0000f436 	.word	0x0000f436
    8078:	00007a8d 	.word	0x00007a8d
    807c:	0000f437 	.word	0x0000f437
    8080:	00007c2d 	.word	0x00007c2d
    8084:	0000041d 	.word	0x0000041d
    8088:	0000f49c 	.word	0x0000f49c
    808c:	0000ed74 	.word	0x0000ed74
    8090:	0000ce29 	.word	0x0000ce29
    8094:	0000fa1c 	.word	0x0000fa1c
    8098:	0000ce5d 	.word	0x0000ce5d
    809c:	00005ed5 	.word	0x00005ed5
    80a0:	0000043c 	.word	0x0000043c
    80a4:	0000fa70 	.word	0x0000fa70
    80a8:	00000417 	.word	0x00000417
    80ac:	0000f9f0 	.word	0x0000f9f0
    80b0:	00007d01 	.word	0x00007d01
    80b4:	00000424 	.word	0x00000424
    80b8:	0000fa50 	.word	0x0000fa50
    80bc:	0000cf45 	.word	0x0000cf45

000080c0 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    80c0:	b510      	push	{r4, lr}
    80c2:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    80c4:	2300      	movs	r3, #0
    80c6:	9300      	str	r3, [sp, #0]
    80c8:	2200      	movs	r2, #0
    80ca:	2100      	movs	r1, #0
    80cc:	20cf      	movs	r0, #207	; 0xcf
    80ce:	4c04      	ldr	r4, [pc, #16]	; (80e0 <nm_spi_reset+0x20>)
    80d0:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    80d2:	20cf      	movs	r0, #207	; 0xcf
    80d4:	4b03      	ldr	r3, [pc, #12]	; (80e4 <nm_spi_reset+0x24>)
    80d6:	4798      	blx	r3
	return M2M_SUCCESS;
}
    80d8:	2000      	movs	r0, #0
    80da:	b002      	add	sp, #8
    80dc:	bd10      	pop	{r4, pc}
    80de:	46c0      	nop			; (mov r8, r8)
    80e0:	00007a8d 	.word	0x00007a8d
    80e4:	00007c2d 	.word	0x00007c2d

000080e8 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    80e8:	2200      	movs	r2, #0
    80ea:	4b02      	ldr	r3, [pc, #8]	; (80f4 <nm_spi_deinit+0xc>)
    80ec:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    80ee:	2000      	movs	r0, #0
    80f0:	4770      	bx	lr
    80f2:	46c0      	nop			; (mov r8, r8)
    80f4:	20000428 	.word	0x20000428

000080f8 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    80f8:	b500      	push	{lr}
    80fa:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    80fc:	a901      	add	r1, sp, #4
    80fe:	4b02      	ldr	r3, [pc, #8]	; (8108 <nm_spi_read_reg+0x10>)
    8100:	4798      	blx	r3

	return u32Val;
}
    8102:	9801      	ldr	r0, [sp, #4]
    8104:	b003      	add	sp, #12
    8106:	bd00      	pop	{pc}
    8108:	00007f59 	.word	0x00007f59

0000810c <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    810c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    810e:	4b04      	ldr	r3, [pc, #16]	; (8120 <nm_spi_read_reg_with_ret+0x14>)
    8110:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    8112:	2300      	movs	r3, #0
    8114:	2801      	cmp	r0, #1
    8116:	d101      	bne.n	811c <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    8118:	0018      	movs	r0, r3
    811a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    811c:	3b06      	subs	r3, #6
    811e:	e7fb      	b.n	8118 <nm_spi_read_reg_with_ret+0xc>
    8120:	00007f59 	.word	0x00007f59

00008124 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    8124:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    8126:	4b04      	ldr	r3, [pc, #16]	; (8138 <nm_spi_write_reg+0x14>)
    8128:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    812a:	2300      	movs	r3, #0
    812c:	2801      	cmp	r0, #1
    812e:	d101      	bne.n	8134 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    8130:	0018      	movs	r0, r3
    8132:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    8134:	3b06      	subs	r3, #6
    8136:	e7fb      	b.n	8130 <nm_spi_write_reg+0xc>
    8138:	00007e49 	.word	0x00007e49

0000813c <nm_spi_init>:
{
    813c:	b510      	push	{r4, lr}
    813e:	b082      	sub	sp, #8
	uint32 reg = 0;
    8140:	2300      	movs	r3, #0
    8142:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    8144:	4a35      	ldr	r2, [pc, #212]	; (821c <nm_spi_init+0xe0>)
    8146:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    8148:	4669      	mov	r1, sp
    814a:	4835      	ldr	r0, [pc, #212]	; (8220 <nm_spi_init+0xe4>)
    814c:	4b35      	ldr	r3, [pc, #212]	; (8224 <nm_spi_init+0xe8>)
    814e:	4798      	blx	r3
    8150:	2800      	cmp	r0, #0
    8152:	d028      	beq.n	81a6 <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    8154:	4b31      	ldr	r3, [pc, #196]	; (821c <nm_spi_init+0xe0>)
    8156:	781b      	ldrb	r3, [r3, #0]
    8158:	2b00      	cmp	r3, #0
    815a:	d10d      	bne.n	8178 <nm_spi_init+0x3c>
		reg &= ~0x70;
    815c:	337c      	adds	r3, #124	; 0x7c
    815e:	9900      	ldr	r1, [sp, #0]
    8160:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    8162:	3b2c      	subs	r3, #44	; 0x2c
    8164:	4319      	orrs	r1, r3
    8166:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    8168:	482d      	ldr	r0, [pc, #180]	; (8220 <nm_spi_init+0xe4>)
    816a:	4b2f      	ldr	r3, [pc, #188]	; (8228 <nm_spi_init+0xec>)
    816c:	4798      	blx	r3
    816e:	1e04      	subs	r4, r0, #0
    8170:	d039      	beq.n	81e6 <nm_spi_init+0xaa>
		gu8Crc_off = 1;
    8172:	2201      	movs	r2, #1
    8174:	4b29      	ldr	r3, [pc, #164]	; (821c <nm_spi_init+0xe0>)
    8176:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    8178:	a901      	add	r1, sp, #4
    817a:	2080      	movs	r0, #128	; 0x80
    817c:	0140      	lsls	r0, r0, #5
    817e:	4b29      	ldr	r3, [pc, #164]	; (8224 <nm_spi_init+0xe8>)
    8180:	4798      	blx	r3
    8182:	2800      	cmp	r0, #0
    8184:	d03b      	beq.n	81fe <nm_spi_init+0xc2>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    8186:	4c26      	ldr	r4, [pc, #152]	; (8220 <nm_spi_init+0xe4>)
    8188:	0020      	movs	r0, r4
    818a:	4b28      	ldr	r3, [pc, #160]	; (822c <nm_spi_init+0xf0>)
    818c:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    818e:	2370      	movs	r3, #112	; 0x70
    8190:	0001      	movs	r1, r0
    8192:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    8194:	2050      	movs	r0, #80	; 0x50
    8196:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    8198:	0020      	movs	r0, r4
    819a:	4b25      	ldr	r3, [pc, #148]	; (8230 <nm_spi_init+0xf4>)
    819c:	4798      	blx	r3
	return M2M_SUCCESS;
    819e:	2400      	movs	r4, #0
}
    81a0:	0020      	movs	r0, r4
    81a2:	b002      	add	sp, #8
    81a4:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    81a6:	2201      	movs	r2, #1
    81a8:	4b1c      	ldr	r3, [pc, #112]	; (821c <nm_spi_init+0xe0>)
    81aa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    81ac:	4a21      	ldr	r2, [pc, #132]	; (8234 <nm_spi_init+0xf8>)
    81ae:	4922      	ldr	r1, [pc, #136]	; (8238 <nm_spi_init+0xfc>)
    81b0:	4822      	ldr	r0, [pc, #136]	; (823c <nm_spi_init+0x100>)
    81b2:	4b23      	ldr	r3, [pc, #140]	; (8240 <nm_spi_init+0x104>)
    81b4:	4798      	blx	r3
    81b6:	4823      	ldr	r0, [pc, #140]	; (8244 <nm_spi_init+0x108>)
    81b8:	4b23      	ldr	r3, [pc, #140]	; (8248 <nm_spi_init+0x10c>)
    81ba:	4798      	blx	r3
    81bc:	200d      	movs	r0, #13
    81be:	4b23      	ldr	r3, [pc, #140]	; (824c <nm_spi_init+0x110>)
    81c0:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    81c2:	4669      	mov	r1, sp
    81c4:	4816      	ldr	r0, [pc, #88]	; (8220 <nm_spi_init+0xe4>)
    81c6:	4b17      	ldr	r3, [pc, #92]	; (8224 <nm_spi_init+0xe8>)
    81c8:	4798      	blx	r3
    81ca:	1e04      	subs	r4, r0, #0
    81cc:	d1c2      	bne.n	8154 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    81ce:	4a20      	ldr	r2, [pc, #128]	; (8250 <nm_spi_init+0x114>)
    81d0:	4919      	ldr	r1, [pc, #100]	; (8238 <nm_spi_init+0xfc>)
    81d2:	481a      	ldr	r0, [pc, #104]	; (823c <nm_spi_init+0x100>)
    81d4:	4b1a      	ldr	r3, [pc, #104]	; (8240 <nm_spi_init+0x104>)
    81d6:	4798      	blx	r3
    81d8:	481e      	ldr	r0, [pc, #120]	; (8254 <nm_spi_init+0x118>)
    81da:	4b1b      	ldr	r3, [pc, #108]	; (8248 <nm_spi_init+0x10c>)
    81dc:	4798      	blx	r3
    81de:	200d      	movs	r0, #13
    81e0:	4b1a      	ldr	r3, [pc, #104]	; (824c <nm_spi_init+0x110>)
    81e2:	4798      	blx	r3
			return 0;
    81e4:	e7dc      	b.n	81a0 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    81e6:	4a1c      	ldr	r2, [pc, #112]	; (8258 <nm_spi_init+0x11c>)
    81e8:	4913      	ldr	r1, [pc, #76]	; (8238 <nm_spi_init+0xfc>)
    81ea:	4814      	ldr	r0, [pc, #80]	; (823c <nm_spi_init+0x100>)
    81ec:	4b14      	ldr	r3, [pc, #80]	; (8240 <nm_spi_init+0x104>)
    81ee:	4798      	blx	r3
    81f0:	481a      	ldr	r0, [pc, #104]	; (825c <nm_spi_init+0x120>)
    81f2:	4b15      	ldr	r3, [pc, #84]	; (8248 <nm_spi_init+0x10c>)
    81f4:	4798      	blx	r3
    81f6:	200d      	movs	r0, #13
    81f8:	4b14      	ldr	r3, [pc, #80]	; (824c <nm_spi_init+0x110>)
    81fa:	4798      	blx	r3
			return 0;
    81fc:	e7d0      	b.n	81a0 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    81fe:	4a18      	ldr	r2, [pc, #96]	; (8260 <nm_spi_init+0x124>)
    8200:	490d      	ldr	r1, [pc, #52]	; (8238 <nm_spi_init+0xfc>)
    8202:	480e      	ldr	r0, [pc, #56]	; (823c <nm_spi_init+0x100>)
    8204:	4b0e      	ldr	r3, [pc, #56]	; (8240 <nm_spi_init+0x104>)
    8206:	4798      	blx	r3
    8208:	4816      	ldr	r0, [pc, #88]	; (8264 <nm_spi_init+0x128>)
    820a:	4b0f      	ldr	r3, [pc, #60]	; (8248 <nm_spi_init+0x10c>)
    820c:	4798      	blx	r3
    820e:	200d      	movs	r0, #13
    8210:	4b0e      	ldr	r3, [pc, #56]	; (824c <nm_spi_init+0x110>)
    8212:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    8214:	2406      	movs	r4, #6
    8216:	4264      	negs	r4, r4
    8218:	e7c2      	b.n	81a0 <nm_spi_init+0x64>
    821a:	46c0      	nop			; (mov r8, r8)
    821c:	20000428 	.word	0x20000428
    8220:	0000e824 	.word	0x0000e824
    8224:	00007f59 	.word	0x00007f59
    8228:	00007e49 	.word	0x00007e49
    822c:	000080f9 	.word	0x000080f9
    8230:	00008125 	.word	0x00008125
    8234:	000004c7 	.word	0x000004c7
    8238:	0000f4b8 	.word	0x0000f4b8
    823c:	0000ed74 	.word	0x0000ed74
    8240:	0000ce29 	.word	0x0000ce29
    8244:	0000f5c4 	.word	0x0000f5c4
    8248:	0000cf45 	.word	0x0000cf45
    824c:	0000ce5d 	.word	0x0000ce5d
    8250:	000004ca 	.word	0x000004ca
    8254:	0000f614 	.word	0x0000f614
    8258:	000004d4 	.word	0x000004d4
    825c:	0000f640 	.word	0x0000f640
    8260:	000004de 	.word	0x000004de
    8264:	0000f674 	.word	0x0000f674

00008268 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    8268:	b5f0      	push	{r4, r5, r6, r7, lr}
    826a:	46de      	mov	lr, fp
    826c:	4657      	mov	r7, sl
    826e:	464e      	mov	r6, r9
    8270:	4645      	mov	r5, r8
    8272:	b5e0      	push	{r5, r6, r7, lr}
    8274:	b087      	sub	sp, #28
    8276:	9002      	str	r0, [sp, #8]
    8278:	9103      	str	r1, [sp, #12]
    827a:	0016      	movs	r6, r2
    827c:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    827e:	2300      	movs	r3, #0
    8280:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    8282:	2400      	movs	r4, #0
    8284:	4b3e      	ldr	r3, [pc, #248]	; (8380 <nm_spi_read_block+0x118>)
    8286:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    8288:	46a9      	mov	r9, r5
    828a:	e037      	b.n	82fc <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    828c:	2301      	movs	r3, #1
    828e:	469b      	mov	fp, r3
		size = 2;
    8290:	3601      	adds	r6, #1
    8292:	e035      	b.n	8300 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    8294:	20c8      	movs	r0, #200	; 0xc8
    8296:	4b3b      	ldr	r3, [pc, #236]	; (8384 <nm_spi_read_block+0x11c>)
    8298:	4798      	blx	r3
	if (result != N_OK) {
    829a:	2801      	cmp	r0, #1
    829c:	d045      	beq.n	832a <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    829e:	4a3a      	ldr	r2, [pc, #232]	; (8388 <nm_spi_read_block+0x120>)
    82a0:	493a      	ldr	r1, [pc, #232]	; (838c <nm_spi_read_block+0x124>)
    82a2:	483b      	ldr	r0, [pc, #236]	; (8390 <nm_spi_read_block+0x128>)
    82a4:	4f3b      	ldr	r7, [pc, #236]	; (8394 <nm_spi_read_block+0x12c>)
    82a6:	47b8      	blx	r7
    82a8:	9902      	ldr	r1, [sp, #8]
    82aa:	483b      	ldr	r0, [pc, #236]	; (8398 <nm_spi_read_block+0x130>)
    82ac:	47b8      	blx	r7
    82ae:	200d      	movs	r0, #13
    82b0:	4b3a      	ldr	r3, [pc, #232]	; (839c <nm_spi_read_block+0x134>)
    82b2:	4798      	blx	r3
		nm_bsp_sleep(1);
    82b4:	2001      	movs	r0, #1
    82b6:	4f3a      	ldr	r7, [pc, #232]	; (83a0 <nm_spi_read_block+0x138>)
    82b8:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    82ba:	9400      	str	r4, [sp, #0]
    82bc:	0023      	movs	r3, r4
    82be:	0022      	movs	r2, r4
    82c0:	0021      	movs	r1, r4
    82c2:	20cf      	movs	r0, #207	; 0xcf
    82c4:	4d2e      	ldr	r5, [pc, #184]	; (8380 <nm_spi_read_block+0x118>)
    82c6:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    82c8:	20cf      	movs	r0, #207	; 0xcf
    82ca:	4b2e      	ldr	r3, [pc, #184]	; (8384 <nm_spi_read_block+0x11c>)
    82cc:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    82ce:	4a35      	ldr	r2, [pc, #212]	; (83a4 <nm_spi_read_block+0x13c>)
    82d0:	492e      	ldr	r1, [pc, #184]	; (838c <nm_spi_read_block+0x124>)
    82d2:	482f      	ldr	r0, [pc, #188]	; (8390 <nm_spi_read_block+0x128>)
    82d4:	4b2f      	ldr	r3, [pc, #188]	; (8394 <nm_spi_read_block+0x12c>)
    82d6:	469a      	mov	sl, r3
    82d8:	4798      	blx	r3
    82da:	0033      	movs	r3, r6
    82dc:	9a02      	ldr	r2, [sp, #8]
    82de:	4649      	mov	r1, r9
    82e0:	4831      	ldr	r0, [pc, #196]	; (83a8 <nm_spi_read_block+0x140>)
    82e2:	47d0      	blx	sl
    82e4:	200d      	movs	r0, #13
    82e6:	4b2d      	ldr	r3, [pc, #180]	; (839c <nm_spi_read_block+0x134>)
    82e8:	4798      	blx	r3
		nm_bsp_sleep(1);
    82ea:	2001      	movs	r0, #1
    82ec:	47b8      	blx	r7
    82ee:	2301      	movs	r3, #1
    82f0:	425b      	negs	r3, r3
    82f2:	469c      	mov	ip, r3
    82f4:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    82f6:	464b      	mov	r3, r9
    82f8:	2b00      	cmp	r3, #0
    82fa:	d038      	beq.n	836e <nm_spi_read_block+0x106>
	if (size == 1)
    82fc:	2e01      	cmp	r6, #1
    82fe:	d0c5      	beq.n	828c <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    8300:	9400      	str	r4, [sp, #0]
    8302:	0033      	movs	r3, r6
    8304:	0022      	movs	r2, r4
    8306:	9d02      	ldr	r5, [sp, #8]
    8308:	0029      	movs	r1, r5
    830a:	20c8      	movs	r0, #200	; 0xc8
    830c:	47c0      	blx	r8
	if (result != N_OK) {
    830e:	2801      	cmp	r0, #1
    8310:	d0c0      	beq.n	8294 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    8312:	4a26      	ldr	r2, [pc, #152]	; (83ac <nm_spi_read_block+0x144>)
    8314:	491d      	ldr	r1, [pc, #116]	; (838c <nm_spi_read_block+0x124>)
    8316:	481e      	ldr	r0, [pc, #120]	; (8390 <nm_spi_read_block+0x128>)
    8318:	4f1e      	ldr	r7, [pc, #120]	; (8394 <nm_spi_read_block+0x12c>)
    831a:	47b8      	blx	r7
    831c:	0029      	movs	r1, r5
    831e:	4824      	ldr	r0, [pc, #144]	; (83b0 <nm_spi_read_block+0x148>)
    8320:	47b8      	blx	r7
    8322:	200d      	movs	r0, #13
    8324:	4b1d      	ldr	r3, [pc, #116]	; (839c <nm_spi_read_block+0x134>)
    8326:	4798      	blx	r3
    8328:	e7c4      	b.n	82b4 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    832a:	465b      	mov	r3, fp
    832c:	2b00      	cmp	r3, #0
    832e:	d016      	beq.n	835e <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    8330:	af05      	add	r7, sp, #20
    8332:	0022      	movs	r2, r4
    8334:	0031      	movs	r1, r6
    8336:	0038      	movs	r0, r7
    8338:	4b1e      	ldr	r3, [pc, #120]	; (83b4 <nm_spi_read_block+0x14c>)
    833a:	4798      	blx	r3
		buf[0] = tmp[0];
    833c:	783b      	ldrb	r3, [r7, #0]
    833e:	9a03      	ldr	r2, [sp, #12]
    8340:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    8342:	2801      	cmp	r0, #1
    8344:	d011      	beq.n	836a <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    8346:	4a1c      	ldr	r2, [pc, #112]	; (83b8 <nm_spi_read_block+0x150>)
    8348:	4910      	ldr	r1, [pc, #64]	; (838c <nm_spi_read_block+0x124>)
    834a:	4811      	ldr	r0, [pc, #68]	; (8390 <nm_spi_read_block+0x128>)
    834c:	4b11      	ldr	r3, [pc, #68]	; (8394 <nm_spi_read_block+0x12c>)
    834e:	4798      	blx	r3
    8350:	481a      	ldr	r0, [pc, #104]	; (83bc <nm_spi_read_block+0x154>)
    8352:	4b1b      	ldr	r3, [pc, #108]	; (83c0 <nm_spi_read_block+0x158>)
    8354:	4798      	blx	r3
    8356:	200d      	movs	r0, #13
    8358:	4b10      	ldr	r3, [pc, #64]	; (839c <nm_spi_read_block+0x134>)
    835a:	4798      	blx	r3
    835c:	e7aa      	b.n	82b4 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    835e:	0022      	movs	r2, r4
    8360:	0031      	movs	r1, r6
    8362:	9803      	ldr	r0, [sp, #12]
    8364:	4b13      	ldr	r3, [pc, #76]	; (83b4 <nm_spi_read_block+0x14c>)
    8366:	4798      	blx	r3
    8368:	e7eb      	b.n	8342 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    836a:	2000      	movs	r0, #0
    836c:	e001      	b.n	8372 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    836e:	2006      	movs	r0, #6
    8370:	4240      	negs	r0, r0

	return s8Ret;
}
    8372:	b007      	add	sp, #28
    8374:	bc3c      	pop	{r2, r3, r4, r5}
    8376:	4690      	mov	r8, r2
    8378:	4699      	mov	r9, r3
    837a:	46a2      	mov	sl, r4
    837c:	46ab      	mov	fp, r5
    837e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8380:	00007a8d 	.word	0x00007a8d
    8384:	00007c2d 	.word	0x00007c2d
    8388:	00000463 	.word	0x00000463
    838c:	0000f4ac 	.word	0x0000f4ac
    8390:	0000ed74 	.word	0x0000ed74
    8394:	0000ce29 	.word	0x0000ce29
    8398:	0000f6c8 	.word	0x0000f6c8
    839c:	0000ce5d 	.word	0x0000ce5d
    83a0:	00005ed5 	.word	0x00005ed5
    83a4:	00000484 	.word	0x00000484
    83a8:	0000f728 	.word	0x0000f728
    83ac:	0000045d 	.word	0x0000045d
    83b0:	0000f698 	.word	0x0000f698
    83b4:	00007d01 	.word	0x00007d01
    83b8:	00000473 	.word	0x00000473
    83bc:	0000f700 	.word	0x0000f700
    83c0:	0000cf45 	.word	0x0000cf45

000083c4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    83c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    83c6:	46de      	mov	lr, fp
    83c8:	4647      	mov	r7, r8
    83ca:	b580      	push	{r7, lr}
    83cc:	b089      	sub	sp, #36	; 0x24
    83ce:	9004      	str	r0, [sp, #16]
    83d0:	468b      	mov	fp, r1
    83d2:	9203      	str	r2, [sp, #12]
    83d4:	260a      	movs	r6, #10
    83d6:	2780      	movs	r7, #128	; 0x80
    83d8:	01bf      	lsls	r7, r7, #6
    83da:	466b      	mov	r3, sp
    83dc:	82df      	strh	r7, [r3, #22]
    83de:	0035      	movs	r5, r6
    83e0:	e02d      	b.n	843e <nm_spi_write_block+0x7a>
		size = 2;
    83e2:	3301      	adds	r3, #1
    83e4:	9303      	str	r3, [sp, #12]
    83e6:	e02d      	b.n	8444 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    83e8:	4a83      	ldr	r2, [pc, #524]	; (85f8 <nm_spi_write_block+0x234>)
    83ea:	4984      	ldr	r1, [pc, #528]	; (85fc <nm_spi_write_block+0x238>)
    83ec:	4884      	ldr	r0, [pc, #528]	; (8600 <nm_spi_write_block+0x23c>)
    83ee:	4c85      	ldr	r4, [pc, #532]	; (8604 <nm_spi_write_block+0x240>)
    83f0:	47a0      	blx	r4
    83f2:	0031      	movs	r1, r6
    83f4:	4884      	ldr	r0, [pc, #528]	; (8608 <nm_spi_write_block+0x244>)
    83f6:	47a0      	blx	r4
    83f8:	200d      	movs	r0, #13
    83fa:	4b84      	ldr	r3, [pc, #528]	; (860c <nm_spi_write_block+0x248>)
    83fc:	4798      	blx	r3
		nm_bsp_sleep(1);
    83fe:	2001      	movs	r0, #1
    8400:	4c83      	ldr	r4, [pc, #524]	; (8610 <nm_spi_write_block+0x24c>)
    8402:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    8404:	2300      	movs	r3, #0
    8406:	9300      	str	r3, [sp, #0]
    8408:	2200      	movs	r2, #0
    840a:	2100      	movs	r1, #0
    840c:	20cf      	movs	r0, #207	; 0xcf
    840e:	4e81      	ldr	r6, [pc, #516]	; (8614 <nm_spi_write_block+0x250>)
    8410:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    8412:	20cf      	movs	r0, #207	; 0xcf
    8414:	4b80      	ldr	r3, [pc, #512]	; (8618 <nm_spi_write_block+0x254>)
    8416:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    8418:	4a80      	ldr	r2, [pc, #512]	; (861c <nm_spi_write_block+0x258>)
    841a:	4978      	ldr	r1, [pc, #480]	; (85fc <nm_spi_write_block+0x238>)
    841c:	4878      	ldr	r0, [pc, #480]	; (8600 <nm_spi_write_block+0x23c>)
    841e:	4e79      	ldr	r6, [pc, #484]	; (8604 <nm_spi_write_block+0x240>)
    8420:	47b0      	blx	r6
    8422:	9b03      	ldr	r3, [sp, #12]
    8424:	9a04      	ldr	r2, [sp, #16]
    8426:	0029      	movs	r1, r5
    8428:	487d      	ldr	r0, [pc, #500]	; (8620 <nm_spi_write_block+0x25c>)
    842a:	47b0      	blx	r6
    842c:	200d      	movs	r0, #13
    842e:	4b77      	ldr	r3, [pc, #476]	; (860c <nm_spi_write_block+0x248>)
    8430:	4798      	blx	r3
		nm_bsp_sleep(1);
    8432:	2001      	movs	r0, #1
    8434:	47a0      	blx	r4
    8436:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    8438:	2d00      	cmp	r5, #0
    843a:	d100      	bne.n	843e <nm_spi_write_block+0x7a>
    843c:	e0d5      	b.n	85ea <nm_spi_write_block+0x226>
	if (size == 1)
    843e:	9b03      	ldr	r3, [sp, #12]
    8440:	2b01      	cmp	r3, #1
    8442:	d0ce      	beq.n	83e2 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    8444:	2300      	movs	r3, #0
    8446:	9300      	str	r3, [sp, #0]
    8448:	9b03      	ldr	r3, [sp, #12]
    844a:	2200      	movs	r2, #0
    844c:	9e04      	ldr	r6, [sp, #16]
    844e:	0031      	movs	r1, r6
    8450:	20c7      	movs	r0, #199	; 0xc7
    8452:	4c70      	ldr	r4, [pc, #448]	; (8614 <nm_spi_write_block+0x250>)
    8454:	47a0      	blx	r4
	if (result != N_OK) {
    8456:	2801      	cmp	r0, #1
    8458:	d1c6      	bne.n	83e8 <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    845a:	20c7      	movs	r0, #199	; 0xc7
    845c:	4b6e      	ldr	r3, [pc, #440]	; (8618 <nm_spi_write_block+0x254>)
    845e:	4798      	blx	r3
	if (result != N_OK) {
    8460:	2801      	cmp	r0, #1
    8462:	d00c      	beq.n	847e <nm_spi_write_block+0xba>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    8464:	22f4      	movs	r2, #244	; 0xf4
    8466:	0092      	lsls	r2, r2, #2
    8468:	4964      	ldr	r1, [pc, #400]	; (85fc <nm_spi_write_block+0x238>)
    846a:	4865      	ldr	r0, [pc, #404]	; (8600 <nm_spi_write_block+0x23c>)
    846c:	4c65      	ldr	r4, [pc, #404]	; (8604 <nm_spi_write_block+0x240>)
    846e:	47a0      	blx	r4
    8470:	9904      	ldr	r1, [sp, #16]
    8472:	486c      	ldr	r0, [pc, #432]	; (8624 <nm_spi_write_block+0x260>)
    8474:	47a0      	blx	r4
    8476:	200d      	movs	r0, #13
    8478:	4b64      	ldr	r3, [pc, #400]	; (860c <nm_spi_write_block+0x248>)
    847a:	4798      	blx	r3
    847c:	e7bf      	b.n	83fe <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    847e:	2200      	movs	r2, #0
    8480:	ab07      	add	r3, sp, #28
    8482:	801a      	strh	r2, [r3, #0]
    8484:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    8486:	2600      	movs	r6, #0
				order = 0x1;
    8488:	46a8      	mov	r8, r5
    848a:	0035      	movs	r5, r6
    848c:	0026      	movs	r6, r4
    848e:	e021      	b.n	84d4 <nm_spi_write_block+0x110>
				order = 0x2;
    8490:	2300      	movs	r3, #0
    8492:	42b7      	cmp	r7, r6
    8494:	415b      	adcs	r3, r3
    8496:	3302      	adds	r3, #2
		cmd |= order;
    8498:	200b      	movs	r0, #11
    849a:	aa04      	add	r2, sp, #16
    849c:	4694      	mov	ip, r2
    849e:	4460      	add	r0, ip
    84a0:	2210      	movs	r2, #16
    84a2:	4252      	negs	r2, r2
    84a4:	4313      	orrs	r3, r2
    84a6:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    84a8:	2101      	movs	r1, #1
    84aa:	4b5f      	ldr	r3, [pc, #380]	; (8628 <nm_spi_write_block+0x264>)
    84ac:	4798      	blx	r3
    84ae:	2800      	cmp	r0, #0
    84b0:	d11d      	bne.n	84ee <nm_spi_write_block+0x12a>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    84b2:	465b      	mov	r3, fp
    84b4:	1958      	adds	r0, r3, r5
    84b6:	0021      	movs	r1, r4
    84b8:	4b5b      	ldr	r3, [pc, #364]	; (8628 <nm_spi_write_block+0x264>)
    84ba:	4798      	blx	r3
    84bc:	2800      	cmp	r0, #0
    84be:	d130      	bne.n	8522 <nm_spi_write_block+0x15e>
		if (!gu8Crc_off) {
    84c0:	4b5a      	ldr	r3, [pc, #360]	; (862c <nm_spi_write_block+0x268>)
    84c2:	781b      	ldrb	r3, [r3, #0]
    84c4:	2b00      	cmp	r3, #0
    84c6:	d039      	beq.n	853c <nm_spi_write_block+0x178>
		ix += nbytes;
    84c8:	1965      	adds	r5, r4, r5
    84ca:	b22d      	sxth	r5, r5
		sz -= nbytes;
    84cc:	1b36      	subs	r6, r6, r4
    84ce:	b2b6      	uxth	r6, r6
	} while (sz);
    84d0:	2e00      	cmp	r6, #0
    84d2:	d053      	beq.n	857c <nm_spi_write_block+0x1b8>
    84d4:	1c34      	adds	r4, r6, #0
    84d6:	42be      	cmp	r6, r7
    84d8:	d901      	bls.n	84de <nm_spi_write_block+0x11a>
    84da:	466b      	mov	r3, sp
    84dc:	8adc      	ldrh	r4, [r3, #22]
    84de:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    84e0:	2d00      	cmp	r5, #0
    84e2:	d1d5      	bne.n	8490 <nm_spi_write_block+0xcc>
				order = 0x3;
    84e4:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    84e6:	42be      	cmp	r6, r7
    84e8:	d9d6      	bls.n	8498 <nm_spi_write_block+0xd4>
				order = 0x1;
    84ea:	3b02      	subs	r3, #2
    84ec:	e7d4      	b.n	8498 <nm_spi_write_block+0xd4>
    84ee:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    84f0:	22d4      	movs	r2, #212	; 0xd4
    84f2:	0092      	lsls	r2, r2, #2
    84f4:	494e      	ldr	r1, [pc, #312]	; (8630 <nm_spi_write_block+0x26c>)
    84f6:	4842      	ldr	r0, [pc, #264]	; (8600 <nm_spi_write_block+0x23c>)
    84f8:	4b42      	ldr	r3, [pc, #264]	; (8604 <nm_spi_write_block+0x240>)
    84fa:	4798      	blx	r3
    84fc:	484d      	ldr	r0, [pc, #308]	; (8634 <nm_spi_write_block+0x270>)
    84fe:	4b4e      	ldr	r3, [pc, #312]	; (8638 <nm_spi_write_block+0x274>)
    8500:	4798      	blx	r3
    8502:	200d      	movs	r0, #13
    8504:	4b41      	ldr	r3, [pc, #260]	; (860c <nm_spi_write_block+0x248>)
    8506:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    8508:	22f8      	movs	r2, #248	; 0xf8
    850a:	0092      	lsls	r2, r2, #2
    850c:	493b      	ldr	r1, [pc, #236]	; (85fc <nm_spi_write_block+0x238>)
    850e:	483c      	ldr	r0, [pc, #240]	; (8600 <nm_spi_write_block+0x23c>)
    8510:	4b3c      	ldr	r3, [pc, #240]	; (8604 <nm_spi_write_block+0x240>)
    8512:	4798      	blx	r3
    8514:	4849      	ldr	r0, [pc, #292]	; (863c <nm_spi_write_block+0x278>)
    8516:	4b48      	ldr	r3, [pc, #288]	; (8638 <nm_spi_write_block+0x274>)
    8518:	4798      	blx	r3
    851a:	200d      	movs	r0, #13
    851c:	4b3b      	ldr	r3, [pc, #236]	; (860c <nm_spi_write_block+0x248>)
    851e:	4798      	blx	r3
    8520:	e76d      	b.n	83fe <nm_spi_write_block+0x3a>
    8522:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    8524:	4a46      	ldr	r2, [pc, #280]	; (8640 <nm_spi_write_block+0x27c>)
    8526:	4942      	ldr	r1, [pc, #264]	; (8630 <nm_spi_write_block+0x26c>)
    8528:	4835      	ldr	r0, [pc, #212]	; (8600 <nm_spi_write_block+0x23c>)
    852a:	4b36      	ldr	r3, [pc, #216]	; (8604 <nm_spi_write_block+0x240>)
    852c:	4798      	blx	r3
    852e:	4845      	ldr	r0, [pc, #276]	; (8644 <nm_spi_write_block+0x280>)
    8530:	4b41      	ldr	r3, [pc, #260]	; (8638 <nm_spi_write_block+0x274>)
    8532:	4798      	blx	r3
    8534:	200d      	movs	r0, #13
    8536:	4b35      	ldr	r3, [pc, #212]	; (860c <nm_spi_write_block+0x248>)
    8538:	4798      	blx	r3
    853a:	e7e5      	b.n	8508 <nm_spi_write_block+0x144>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    853c:	2102      	movs	r1, #2
    853e:	a807      	add	r0, sp, #28
    8540:	4b39      	ldr	r3, [pc, #228]	; (8628 <nm_spi_write_block+0x264>)
    8542:	4798      	blx	r3
    8544:	2800      	cmp	r0, #0
    8546:	d0bf      	beq.n	84c8 <nm_spi_write_block+0x104>
    8548:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    854a:	4a3f      	ldr	r2, [pc, #252]	; (8648 <nm_spi_write_block+0x284>)
    854c:	4938      	ldr	r1, [pc, #224]	; (8630 <nm_spi_write_block+0x26c>)
    854e:	482c      	ldr	r0, [pc, #176]	; (8600 <nm_spi_write_block+0x23c>)
    8550:	4b2c      	ldr	r3, [pc, #176]	; (8604 <nm_spi_write_block+0x240>)
    8552:	4798      	blx	r3
    8554:	483d      	ldr	r0, [pc, #244]	; (864c <nm_spi_write_block+0x288>)
    8556:	4b38      	ldr	r3, [pc, #224]	; (8638 <nm_spi_write_block+0x274>)
    8558:	4798      	blx	r3
    855a:	200d      	movs	r0, #13
    855c:	4b2b      	ldr	r3, [pc, #172]	; (860c <nm_spi_write_block+0x248>)
    855e:	4798      	blx	r3
    8560:	e7d2      	b.n	8508 <nm_spi_write_block+0x144>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    8562:	223c      	movs	r2, #60	; 0x3c
    8564:	32ff      	adds	r2, #255	; 0xff
    8566:	493a      	ldr	r1, [pc, #232]	; (8650 <nm_spi_write_block+0x28c>)
    8568:	4825      	ldr	r0, [pc, #148]	; (8600 <nm_spi_write_block+0x23c>)
    856a:	4b26      	ldr	r3, [pc, #152]	; (8604 <nm_spi_write_block+0x240>)
    856c:	4798      	blx	r3
    856e:	4839      	ldr	r0, [pc, #228]	; (8654 <nm_spi_write_block+0x290>)
    8570:	4b31      	ldr	r3, [pc, #196]	; (8638 <nm_spi_write_block+0x274>)
    8572:	4798      	blx	r3
    8574:	200d      	movs	r0, #13
    8576:	4b25      	ldr	r3, [pc, #148]	; (860c <nm_spi_write_block+0x248>)
    8578:	4798      	blx	r3
    857a:	e027      	b.n	85cc <nm_spi_write_block+0x208>
    857c:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    857e:	4b2b      	ldr	r3, [pc, #172]	; (862c <nm_spi_write_block+0x268>)
    8580:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    8582:	1e63      	subs	r3, r4, #1
    8584:	419c      	sbcs	r4, r3
    8586:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    8588:	b2a1      	uxth	r1, r4
    858a:	a807      	add	r0, sp, #28
    858c:	4b32      	ldr	r3, [pc, #200]	; (8658 <nm_spi_write_block+0x294>)
    858e:	4798      	blx	r3
    8590:	2800      	cmp	r0, #0
    8592:	d1e6      	bne.n	8562 <nm_spi_write_block+0x19e>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    8594:	ab08      	add	r3, sp, #32
    8596:	191b      	adds	r3, r3, r4
    8598:	3b05      	subs	r3, #5
    859a:	781b      	ldrb	r3, [r3, #0]
    859c:	2b00      	cmp	r3, #0
    859e:	d106      	bne.n	85ae <nm_spi_write_block+0x1ea>
    85a0:	ab08      	add	r3, sp, #32
    85a2:	469c      	mov	ip, r3
    85a4:	4464      	add	r4, ip
    85a6:	3c06      	subs	r4, #6
    85a8:	7823      	ldrb	r3, [r4, #0]
    85aa:	2bc3      	cmp	r3, #195	; 0xc3
    85ac:	d01b      	beq.n	85e6 <nm_spi_write_block+0x222>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    85ae:	22a1      	movs	r2, #161	; 0xa1
    85b0:	0052      	lsls	r2, r2, #1
    85b2:	4927      	ldr	r1, [pc, #156]	; (8650 <nm_spi_write_block+0x28c>)
    85b4:	4812      	ldr	r0, [pc, #72]	; (8600 <nm_spi_write_block+0x23c>)
    85b6:	4c13      	ldr	r4, [pc, #76]	; (8604 <nm_spi_write_block+0x240>)
    85b8:	47a0      	blx	r4
    85ba:	a907      	add	r1, sp, #28
    85bc:	788b      	ldrb	r3, [r1, #2]
    85be:	784a      	ldrb	r2, [r1, #1]
    85c0:	7809      	ldrb	r1, [r1, #0]
    85c2:	4826      	ldr	r0, [pc, #152]	; (865c <nm_spi_write_block+0x298>)
    85c4:	47a0      	blx	r4
    85c6:	200d      	movs	r0, #13
    85c8:	4b10      	ldr	r3, [pc, #64]	; (860c <nm_spi_write_block+0x248>)
    85ca:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    85cc:	22fa      	movs	r2, #250	; 0xfa
    85ce:	0092      	lsls	r2, r2, #2
    85d0:	490a      	ldr	r1, [pc, #40]	; (85fc <nm_spi_write_block+0x238>)
    85d2:	480b      	ldr	r0, [pc, #44]	; (8600 <nm_spi_write_block+0x23c>)
    85d4:	4b0b      	ldr	r3, [pc, #44]	; (8604 <nm_spi_write_block+0x240>)
    85d6:	4798      	blx	r3
    85d8:	4818      	ldr	r0, [pc, #96]	; (863c <nm_spi_write_block+0x278>)
    85da:	4b17      	ldr	r3, [pc, #92]	; (8638 <nm_spi_write_block+0x274>)
    85dc:	4798      	blx	r3
    85de:	200d      	movs	r0, #13
    85e0:	4b0a      	ldr	r3, [pc, #40]	; (860c <nm_spi_write_block+0x248>)
    85e2:	4798      	blx	r3
    85e4:	e70b      	b.n	83fe <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    85e6:	2000      	movs	r0, #0
    85e8:	e001      	b.n	85ee <nm_spi_write_block+0x22a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    85ea:	2006      	movs	r0, #6
    85ec:	4240      	negs	r0, r0

	return s8Ret;
}
    85ee:	b009      	add	sp, #36	; 0x24
    85f0:	bc0c      	pop	{r2, r3}
    85f2:	4690      	mov	r8, r2
    85f4:	469b      	mov	fp, r3
    85f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    85f8:	000003ca 	.word	0x000003ca
    85fc:	0000f48c 	.word	0x0000f48c
    8600:	0000ed74 	.word	0x0000ed74
    8604:	0000ce29 	.word	0x0000ce29
    8608:	0000f744 	.word	0x0000f744
    860c:	0000ce5d 	.word	0x0000ce5d
    8610:	00005ed5 	.word	0x00005ed5
    8614:	00007a8d 	.word	0x00007a8d
    8618:	00007c2d 	.word	0x00007c2d
    861c:	000003f2 	.word	0x000003f2
    8620:	0000f728 	.word	0x0000f728
    8624:	0000f774 	.word	0x0000f774
    8628:	00007a6d 	.word	0x00007a6d
    862c:	20000428 	.word	0x20000428
    8630:	0000f46c 	.word	0x0000f46c
    8634:	0000f7ac 	.word	0x0000f7ac
    8638:	0000cf45 	.word	0x0000cf45
    863c:	0000f8a0 	.word	0x0000f8a0
    8640:	00000359 	.word	0x00000359
    8644:	0000f7e4 	.word	0x0000f7e4
    8648:	00000363 	.word	0x00000363
    864c:	0000f818 	.word	0x0000f818
    8650:	0000f440 	.word	0x0000f440
    8654:	0000f850 	.word	0x0000f850
    8658:	00007c0d 	.word	0x00007c0d
    865c:	0000f870 	.word	0x0000f870

00008660 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    8660:	b5f0      	push	{r4, r5, r6, r7, lr}
    8662:	46de      	mov	lr, fp
    8664:	4657      	mov	r7, sl
    8666:	464e      	mov	r6, r9
    8668:	4645      	mov	r5, r8
    866a:	b5e0      	push	{r5, r6, r7, lr}
    866c:	b085      	sub	sp, #20
    866e:	9001      	str	r0, [sp, #4]
    8670:	000e      	movs	r6, r1
    8672:	9202      	str	r2, [sp, #8]
    8674:	001d      	movs	r5, r3
    8676:	ab0e      	add	r3, sp, #56	; 0x38
    8678:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    867a:	2c00      	cmp	r4, #0
    867c:	d064      	beq.n	8748 <Socket_ReadSocketData+0xe8>
    867e:	0103      	lsls	r3, r0, #4
    8680:	4935      	ldr	r1, [pc, #212]	; (8758 <Socket_ReadSocketData+0xf8>)
    8682:	585b      	ldr	r3, [r3, r1]
    8684:	2b00      	cmp	r3, #0
    8686:	d05f      	beq.n	8748 <Socket_ReadSocketData+0xe8>
    8688:	0101      	lsls	r1, r0, #4
    868a:	4b33      	ldr	r3, [pc, #204]	; (8758 <Socket_ReadSocketData+0xf8>)
    868c:	185b      	adds	r3, r3, r1
    868e:	889b      	ldrh	r3, [r3, #4]
    8690:	b29b      	uxth	r3, r3
    8692:	2b00      	cmp	r3, #0
    8694:	d058      	beq.n	8748 <Socket_ReadSocketData+0xe8>
    8696:	4b30      	ldr	r3, [pc, #192]	; (8758 <Socket_ReadSocketData+0xf8>)
    8698:	185b      	adds	r3, r3, r1
    869a:	7a9b      	ldrb	r3, [r3, #10]
    869c:	2b01      	cmp	r3, #1
    869e:	d153      	bne.n	8748 <Socket_ReadSocketData+0xe8>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    86a0:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    86a2:	4b2d      	ldr	r3, [pc, #180]	; (8758 <Socket_ReadSocketData+0xf8>)
    86a4:	469b      	mov	fp, r3
    86a6:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    86a8:	465b      	mov	r3, fp
    86aa:	220a      	movs	r2, #10
    86ac:	4690      	mov	r8, r2
    86ae:	44d8      	add	r8, fp
    86b0:	468a      	mov	sl, r1
    86b2:	9500      	str	r5, [sp, #0]
    86b4:	9303      	str	r3, [sp, #12]
    86b6:	e015      	b.n	86e4 <Socket_ReadSocketData+0x84>
    86b8:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    86ba:	2301      	movs	r3, #1
    86bc:	e01c      	b.n	86f8 <Socket_ReadSocketData+0x98>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    86be:	3301      	adds	r3, #1
    86c0:	2200      	movs	r2, #0
    86c2:	2100      	movs	r1, #0
    86c4:	2000      	movs	r0, #0
    86c6:	4c25      	ldr	r4, [pc, #148]	; (875c <Socket_ReadSocketData+0xfc>)
    86c8:	47a0      	blx	r4
    86ca:	e03d      	b.n	8748 <Socket_ReadSocketData+0xe8>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    86cc:	4824      	ldr	r0, [pc, #144]	; (8760 <Socket_ReadSocketData+0x100>)
    86ce:	4d25      	ldr	r5, [pc, #148]	; (8764 <Socket_ReadSocketData+0x104>)
    86d0:	47a8      	blx	r5
    86d2:	0021      	movs	r1, r4
    86d4:	4824      	ldr	r0, [pc, #144]	; (8768 <Socket_ReadSocketData+0x108>)
    86d6:	47a8      	blx	r5
    86d8:	200d      	movs	r0, #13
    86da:	4b24      	ldr	r3, [pc, #144]	; (876c <Socket_ReadSocketData+0x10c>)
    86dc:	4798      	blx	r3
				break;
    86de:	e033      	b.n	8748 <Socket_ReadSocketData+0xe8>
			}
		}while(u16ReadCount != 0);
    86e0:	2c00      	cmp	r4, #0
    86e2:	d031      	beq.n	8748 <Socket_ReadSocketData+0xe8>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    86e4:	465b      	mov	r3, fp
    86e6:	889b      	ldrh	r3, [r3, #4]
    86e8:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    86ea:	b21b      	sxth	r3, r3
    86ec:	2b00      	cmp	r3, #0
    86ee:	dde3      	ble.n	86b8 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    86f0:	9b03      	ldr	r3, [sp, #12]
    86f2:	889d      	ldrh	r5, [r3, #4]
    86f4:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    86f6:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    86f8:	4a17      	ldr	r2, [pc, #92]	; (8758 <Socket_ReadSocketData+0xf8>)
    86fa:	4651      	mov	r1, sl
    86fc:	5889      	ldr	r1, [r1, r2]
    86fe:	002a      	movs	r2, r5
    8700:	9800      	ldr	r0, [sp, #0]
    8702:	4f16      	ldr	r7, [pc, #88]	; (875c <Socket_ReadSocketData+0xfc>)
    8704:	47b8      	blx	r7
    8706:	2800      	cmp	r0, #0
    8708:	d1e0      	bne.n	86cc <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    870a:	4b13      	ldr	r3, [pc, #76]	; (8758 <Socket_ReadSocketData+0xf8>)
    870c:	4652      	mov	r2, sl
    870e:	58d3      	ldr	r3, [r2, r3]
    8710:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    8712:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    8714:	88f3      	ldrh	r3, [r6, #6]
    8716:	1b5b      	subs	r3, r3, r5
    8718:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    871a:	4b15      	ldr	r3, [pc, #84]	; (8770 <Socket_ReadSocketData+0x110>)
    871c:	681b      	ldr	r3, [r3, #0]
    871e:	2b00      	cmp	r3, #0
    8720:	d005      	beq.n	872e <Socket_ReadSocketData+0xce>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    8722:	4b13      	ldr	r3, [pc, #76]	; (8770 <Socket_ReadSocketData+0x110>)
    8724:	681b      	ldr	r3, [r3, #0]
    8726:	0032      	movs	r2, r6
    8728:	9902      	ldr	r1, [sp, #8]
    872a:	9801      	ldr	r0, [sp, #4]
    872c:	4798      	blx	r3
				u16ReadCount -= u16Read;
    872e:	1b64      	subs	r4, r4, r5
    8730:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    8732:	9b00      	ldr	r3, [sp, #0]
    8734:	469c      	mov	ip, r3
    8736:	44ac      	add	ip, r5
    8738:	4663      	mov	r3, ip
    873a:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    873c:	4643      	mov	r3, r8
    873e:	781b      	ldrb	r3, [r3, #0]
    8740:	2b00      	cmp	r3, #0
    8742:	d1cd      	bne.n	86e0 <Socket_ReadSocketData+0x80>
    8744:	2c00      	cmp	r4, #0
    8746:	d1ba      	bne.n	86be <Socket_ReadSocketData+0x5e>
	}
}
    8748:	b005      	add	sp, #20
    874a:	bc3c      	pop	{r2, r3, r4, r5}
    874c:	4690      	mov	r8, r2
    874e:	4699      	mov	r9, r3
    8750:	46a2      	mov	sl, r4
    8752:	46ab      	mov	fp, r5
    8754:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8756:	46c0      	nop			; (mov r8, r8)
    8758:	200006c0 	.word	0x200006c0
    875c:	00006a01 	.word	0x00006a01
    8760:	0000f0a4 	.word	0x0000f0a4
    8764:	0000ce29 	.word	0x0000ce29
    8768:	0000fb08 	.word	0x0000fb08
    876c:	0000ce5d 	.word	0x0000ce5d
    8770:	20000770 	.word	0x20000770

00008774 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    8774:	b5f0      	push	{r4, r5, r6, r7, lr}
    8776:	46d6      	mov	lr, sl
    8778:	464f      	mov	r7, r9
    877a:	4646      	mov	r6, r8
    877c:	b5c0      	push	{r6, r7, lr}
    877e:	b09a      	sub	sp, #104	; 0x68
    8780:	000d      	movs	r5, r1
    8782:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    8784:	2841      	cmp	r0, #65	; 0x41
    8786:	d039      	beq.n	87fc <m2m_ip_cb+0x88>
    8788:	2854      	cmp	r0, #84	; 0x54
    878a:	d037      	beq.n	87fc <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    878c:	2842      	cmp	r0, #66	; 0x42
    878e:	d053      	beq.n	8838 <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    8790:	2843      	cmp	r0, #67	; 0x43
    8792:	d06a      	beq.n	886a <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    8794:	2844      	cmp	r0, #68	; 0x44
    8796:	d100      	bne.n	879a <m2m_ip_cb+0x26>
    8798:	e0af      	b.n	88fa <m2m_ip_cb+0x186>
    879a:	284b      	cmp	r0, #75	; 0x4b
    879c:	d100      	bne.n	87a0 <m2m_ip_cb+0x2c>
    879e:	e0ac      	b.n	88fa <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    87a0:	284a      	cmp	r0, #74	; 0x4a
    87a2:	d100      	bne.n	87a6 <m2m_ip_cb+0x32>
    87a4:	e0cf      	b.n	8946 <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    87a6:	2846      	cmp	r0, #70	; 0x46
    87a8:	d100      	bne.n	87ac <m2m_ip_cb+0x38>
    87aa:	e0e5      	b.n	8978 <m2m_ip_cb+0x204>
    87ac:	2848      	cmp	r0, #72	; 0x48
    87ae:	d100      	bne.n	87b2 <m2m_ip_cb+0x3e>
    87b0:	e10e      	b.n	89d0 <m2m_ip_cb+0x25c>
    87b2:	284d      	cmp	r0, #77	; 0x4d
    87b4:	d100      	bne.n	87b8 <m2m_ip_cb+0x44>
    87b6:	e0dc      	b.n	8972 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    87b8:	2845      	cmp	r0, #69	; 0x45
    87ba:	d100      	bne.n	87be <m2m_ip_cb+0x4a>
    87bc:	e12c      	b.n	8a18 <m2m_ip_cb+0x2a4>
    87be:	2847      	cmp	r0, #71	; 0x47
    87c0:	d100      	bne.n	87c4 <m2m_ip_cb+0x50>
    87c2:	e14d      	b.n	8a60 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    87c4:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    87c6:	284c      	cmp	r0, #76	; 0x4c
    87c8:	d100      	bne.n	87cc <m2m_ip_cb+0x58>
    87ca:	e126      	b.n	8a1a <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    87cc:	2852      	cmp	r0, #82	; 0x52
    87ce:	d12d      	bne.n	882c <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    87d0:	2301      	movs	r3, #1
    87d2:	2214      	movs	r2, #20
    87d4:	a909      	add	r1, sp, #36	; 0x24
    87d6:	0020      	movs	r0, r4
    87d8:	4ca2      	ldr	r4, [pc, #648]	; (8a64 <m2m_ip_cb+0x2f0>)
    87da:	47a0      	blx	r4
    87dc:	2800      	cmp	r0, #0
    87de:	d125      	bne.n	882c <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    87e0:	4ba1      	ldr	r3, [pc, #644]	; (8a68 <m2m_ip_cb+0x2f4>)
    87e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    87e4:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    87e6:	681b      	ldr	r3, [r3, #0]
    87e8:	2b00      	cmp	r3, #0
    87ea:	d01f      	beq.n	882c <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    87ec:	4b9e      	ldr	r3, [pc, #632]	; (8a68 <m2m_ip_cb+0x2f4>)
    87ee:	681c      	ldr	r4, [r3, #0]
    87f0:	ab09      	add	r3, sp, #36	; 0x24
    87f2:	7c1a      	ldrb	r2, [r3, #16]
    87f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    87f6:	9809      	ldr	r0, [sp, #36]	; 0x24
    87f8:	47a0      	blx	r4
			}
		}
	}
}
    87fa:	e017      	b.n	882c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    87fc:	2300      	movs	r3, #0
    87fe:	2204      	movs	r2, #4
    8800:	a909      	add	r1, sp, #36	; 0x24
    8802:	0020      	movs	r0, r4
    8804:	4c97      	ldr	r4, [pc, #604]	; (8a64 <m2m_ip_cb+0x2f0>)
    8806:	47a0      	blx	r4
    8808:	2800      	cmp	r0, #0
    880a:	d10f      	bne.n	882c <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    880c:	ab09      	add	r3, sp, #36	; 0x24
    880e:	785a      	ldrb	r2, [r3, #1]
    8810:	ab05      	add	r3, sp, #20
    8812:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    8814:	4b95      	ldr	r3, [pc, #596]	; (8a6c <m2m_ip_cb+0x2f8>)
    8816:	681b      	ldr	r3, [r3, #0]
    8818:	2b00      	cmp	r3, #0
    881a:	d007      	beq.n	882c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    881c:	4b93      	ldr	r3, [pc, #588]	; (8a6c <m2m_ip_cb+0x2f8>)
    881e:	681b      	ldr	r3, [r3, #0]
    8820:	aa09      	add	r2, sp, #36	; 0x24
    8822:	2000      	movs	r0, #0
    8824:	5610      	ldrsb	r0, [r2, r0]
    8826:	aa05      	add	r2, sp, #20
    8828:	2101      	movs	r1, #1
    882a:	4798      	blx	r3
}
    882c:	b01a      	add	sp, #104	; 0x68
    882e:	bc1c      	pop	{r2, r3, r4}
    8830:	4690      	mov	r8, r2
    8832:	4699      	mov	r9, r3
    8834:	46a2      	mov	sl, r4
    8836:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    8838:	2300      	movs	r3, #0
    883a:	2204      	movs	r2, #4
    883c:	a909      	add	r1, sp, #36	; 0x24
    883e:	0020      	movs	r0, r4
    8840:	4c88      	ldr	r4, [pc, #544]	; (8a64 <m2m_ip_cb+0x2f0>)
    8842:	47a0      	blx	r4
    8844:	2800      	cmp	r0, #0
    8846:	d1f1      	bne.n	882c <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    8848:	ab09      	add	r3, sp, #36	; 0x24
    884a:	785a      	ldrb	r2, [r3, #1]
    884c:	ab05      	add	r3, sp, #20
    884e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    8850:	4b86      	ldr	r3, [pc, #536]	; (8a6c <m2m_ip_cb+0x2f8>)
    8852:	681b      	ldr	r3, [r3, #0]
    8854:	2b00      	cmp	r3, #0
    8856:	d0e9      	beq.n	882c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    8858:	4b84      	ldr	r3, [pc, #528]	; (8a6c <m2m_ip_cb+0x2f8>)
    885a:	681b      	ldr	r3, [r3, #0]
    885c:	aa09      	add	r2, sp, #36	; 0x24
    885e:	2000      	movs	r0, #0
    8860:	5610      	ldrsb	r0, [r2, r0]
    8862:	aa05      	add	r2, sp, #20
    8864:	2102      	movs	r1, #2
    8866:	4798      	blx	r3
    8868:	e7e0      	b.n	882c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    886a:	2300      	movs	r3, #0
    886c:	220c      	movs	r2, #12
    886e:	a905      	add	r1, sp, #20
    8870:	0020      	movs	r0, r4
    8872:	4c7c      	ldr	r4, [pc, #496]	; (8a64 <m2m_ip_cb+0x2f0>)
    8874:	47a0      	blx	r4
    8876:	2800      	cmp	r0, #0
    8878:	d1d8      	bne.n	882c <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    887a:	ab05      	add	r3, sp, #20
    887c:	2209      	movs	r2, #9
    887e:	569a      	ldrsb	r2, [r3, r2]
    8880:	2a00      	cmp	r2, #0
    8882:	db24      	blt.n	88ce <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    8884:	0018      	movs	r0, r3
    8886:	2108      	movs	r1, #8
    8888:	5659      	ldrsb	r1, [r3, r1]
    888a:	4b79      	ldr	r3, [pc, #484]	; (8a70 <m2m_ip_cb+0x2fc>)
    888c:	0109      	lsls	r1, r1, #4
    888e:	1859      	adds	r1, r3, r1
    8890:	7ac9      	ldrb	r1, [r1, #11]
    8892:	b2c9      	uxtb	r1, r1
    8894:	0114      	lsls	r4, r2, #4
    8896:	191b      	adds	r3, r3, r4
    8898:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    889a:	2101      	movs	r1, #1
    889c:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    889e:	8941      	ldrh	r1, [r0, #10]
    88a0:	3908      	subs	r1, #8
    88a2:	b289      	uxth	r1, r1
    88a4:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    88a6:	4973      	ldr	r1, [pc, #460]	; (8a74 <m2m_ip_cb+0x300>)
    88a8:	880b      	ldrh	r3, [r1, #0]
    88aa:	3301      	adds	r3, #1
    88ac:	b29b      	uxth	r3, r3
    88ae:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    88b0:	880b      	ldrh	r3, [r1, #0]
    88b2:	b29b      	uxth	r3, r3
    88b4:	2b00      	cmp	r3, #0
    88b6:	d103      	bne.n	88c0 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    88b8:	880b      	ldrh	r3, [r1, #0]
    88ba:	3301      	adds	r3, #1
    88bc:	b29b      	uxth	r3, r3
    88be:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    88c0:	4b6c      	ldr	r3, [pc, #432]	; (8a74 <m2m_ip_cb+0x300>)
    88c2:	8819      	ldrh	r1, [r3, #0]
    88c4:	b289      	uxth	r1, r1
    88c6:	0110      	lsls	r0, r2, #4
    88c8:	4b69      	ldr	r3, [pc, #420]	; (8a70 <m2m_ip_cb+0x2fc>)
    88ca:	181b      	adds	r3, r3, r0
    88cc:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    88ce:	ab09      	add	r3, sp, #36	; 0x24
    88d0:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    88d2:	2202      	movs	r2, #2
    88d4:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    88d6:	aa05      	add	r2, sp, #20
    88d8:	8851      	ldrh	r1, [r2, #2]
    88da:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    88dc:	9a06      	ldr	r2, [sp, #24]
    88de:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    88e0:	4b62      	ldr	r3, [pc, #392]	; (8a6c <m2m_ip_cb+0x2f8>)
    88e2:	681b      	ldr	r3, [r3, #0]
    88e4:	2b00      	cmp	r3, #0
    88e6:	d0a1      	beq.n	882c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    88e8:	4b60      	ldr	r3, [pc, #384]	; (8a6c <m2m_ip_cb+0x2f8>)
    88ea:	681b      	ldr	r3, [r3, #0]
    88ec:	aa05      	add	r2, sp, #20
    88ee:	2008      	movs	r0, #8
    88f0:	5610      	ldrsb	r0, [r2, r0]
    88f2:	aa09      	add	r2, sp, #36	; 0x24
    88f4:	2104      	movs	r1, #4
    88f6:	4798      	blx	r3
    88f8:	e798      	b.n	882c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    88fa:	2300      	movs	r3, #0
    88fc:	2204      	movs	r2, #4
    88fe:	a909      	add	r1, sp, #36	; 0x24
    8900:	0020      	movs	r0, r4
    8902:	4c58      	ldr	r4, [pc, #352]	; (8a64 <m2m_ip_cb+0x2f0>)
    8904:	47a0      	blx	r4
    8906:	2800      	cmp	r0, #0
    8908:	d000      	beq.n	890c <m2m_ip_cb+0x198>
    890a:	e78f      	b.n	882c <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    890c:	ab09      	add	r3, sp, #36	; 0x24
    890e:	2000      	movs	r0, #0
    8910:	5618      	ldrsb	r0, [r3, r0]
    8912:	aa05      	add	r2, sp, #20
    8914:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    8916:	785b      	ldrb	r3, [r3, #1]
    8918:	b25b      	sxtb	r3, r3
    891a:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    891c:	2b00      	cmp	r3, #0
    891e:	d107      	bne.n	8930 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    8920:	ab09      	add	r3, sp, #36	; 0x24
    8922:	885b      	ldrh	r3, [r3, #2]
    8924:	3b08      	subs	r3, #8
    8926:	b29b      	uxth	r3, r3
    8928:	0101      	lsls	r1, r0, #4
    892a:	4a51      	ldr	r2, [pc, #324]	; (8a70 <m2m_ip_cb+0x2fc>)
    892c:	1852      	adds	r2, r2, r1
    892e:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    8930:	4b4e      	ldr	r3, [pc, #312]	; (8a6c <m2m_ip_cb+0x2f8>)
    8932:	681b      	ldr	r3, [r3, #0]
    8934:	2b00      	cmp	r3, #0
    8936:	d100      	bne.n	893a <m2m_ip_cb+0x1c6>
    8938:	e778      	b.n	882c <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    893a:	4b4c      	ldr	r3, [pc, #304]	; (8a6c <m2m_ip_cb+0x2f8>)
    893c:	681b      	ldr	r3, [r3, #0]
    893e:	aa05      	add	r2, sp, #20
    8940:	2105      	movs	r1, #5
    8942:	4798      	blx	r3
	{
    8944:	e772      	b.n	882c <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    8946:	2300      	movs	r3, #0
    8948:	2244      	movs	r2, #68	; 0x44
    894a:	a909      	add	r1, sp, #36	; 0x24
    894c:	0020      	movs	r0, r4
    894e:	4c45      	ldr	r4, [pc, #276]	; (8a64 <m2m_ip_cb+0x2f0>)
    8950:	47a0      	blx	r4
    8952:	2800      	cmp	r0, #0
    8954:	d000      	beq.n	8958 <m2m_ip_cb+0x1e4>
    8956:	e769      	b.n	882c <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    8958:	4b47      	ldr	r3, [pc, #284]	; (8a78 <m2m_ip_cb+0x304>)
    895a:	681b      	ldr	r3, [r3, #0]
    895c:	2b00      	cmp	r3, #0
    895e:	d100      	bne.n	8962 <m2m_ip_cb+0x1ee>
    8960:	e764      	b.n	882c <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    8962:	4b45      	ldr	r3, [pc, #276]	; (8a78 <m2m_ip_cb+0x304>)
    8964:	681b      	ldr	r3, [r3, #0]
    8966:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8968:	9203      	str	r2, [sp, #12]
    896a:	0011      	movs	r1, r2
    896c:	a809      	add	r0, sp, #36	; 0x24
    896e:	4798      	blx	r3
    8970:	e75c      	b.n	882c <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    8972:	2306      	movs	r3, #6
    8974:	469a      	mov	sl, r3
    8976:	e001      	b.n	897c <m2m_ip_cb+0x208>
    8978:	2306      	movs	r3, #6
    897a:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    897c:	2300      	movs	r3, #0
    897e:	2210      	movs	r2, #16
    8980:	a905      	add	r1, sp, #20
    8982:	0020      	movs	r0, r4
    8984:	4f37      	ldr	r7, [pc, #220]	; (8a64 <m2m_ip_cb+0x2f0>)
    8986:	47b8      	blx	r7
    8988:	2800      	cmp	r0, #0
    898a:	d000      	beq.n	898e <m2m_ip_cb+0x21a>
    898c:	e74e      	b.n	882c <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    898e:	aa05      	add	r2, sp, #20
    8990:	200c      	movs	r0, #12
    8992:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    8994:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    8996:	0107      	lsls	r7, r0, #4
    8998:	4935      	ldr	r1, [pc, #212]	; (8a70 <m2m_ip_cb+0x2fc>)
    899a:	19c9      	adds	r1, r1, r7
    899c:	2700      	movs	r7, #0
    899e:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    89a0:	2608      	movs	r6, #8
    89a2:	5f97      	ldrsh	r7, [r2, r6]
    89a4:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    89a6:	8957      	ldrh	r7, [r2, #10]
    89a8:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    89aa:	af09      	add	r7, sp, #36	; 0x24
    89ac:	8856      	ldrh	r6, [r2, #2]
    89ae:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    89b0:	9a06      	ldr	r2, [sp, #24]
    89b2:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    89b4:	88ca      	ldrh	r2, [r1, #6]
    89b6:	b292      	uxth	r2, r2
    89b8:	4293      	cmp	r3, r2
    89ba:	d00c      	beq.n	89d6 <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    89bc:	2d10      	cmp	r5, #16
    89be:	d800      	bhi.n	89c2 <m2m_ip_cb+0x24e>
    89c0:	e734      	b.n	882c <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    89c2:	2301      	movs	r3, #1
    89c4:	2200      	movs	r2, #0
    89c6:	2100      	movs	r1, #0
    89c8:	2000      	movs	r0, #0
    89ca:	4c26      	ldr	r4, [pc, #152]	; (8a64 <m2m_ip_cb+0x2f0>)
    89cc:	47a0      	blx	r4
	{
    89ce:	e72d      	b.n	882c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    89d0:	2309      	movs	r3, #9
    89d2:	469a      	mov	sl, r3
    89d4:	e7d2      	b.n	897c <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    89d6:	4643      	mov	r3, r8
    89d8:	2b00      	cmp	r3, #0
    89da:	dd01      	ble.n	89e0 <m2m_ip_cb+0x26c>
    89dc:	45a8      	cmp	r8, r5
    89de:	db0f      	blt.n	8a00 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    89e0:	ab09      	add	r3, sp, #36	; 0x24
    89e2:	4642      	mov	r2, r8
    89e4:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    89e6:	2300      	movs	r3, #0
    89e8:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    89ea:	4b20      	ldr	r3, [pc, #128]	; (8a6c <m2m_ip_cb+0x2f8>)
    89ec:	681b      	ldr	r3, [r3, #0]
    89ee:	2b00      	cmp	r3, #0
    89f0:	d100      	bne.n	89f4 <m2m_ip_cb+0x280>
    89f2:	e71b      	b.n	882c <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    89f4:	4b1d      	ldr	r3, [pc, #116]	; (8a6c <m2m_ip_cb+0x2f8>)
    89f6:	681b      	ldr	r3, [r3, #0]
    89f8:	aa09      	add	r2, sp, #36	; 0x24
    89fa:	4651      	mov	r1, sl
    89fc:	4798      	blx	r3
    89fe:	e715      	b.n	882c <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    8a00:	0023      	movs	r3, r4
    8a02:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    8a04:	4642      	mov	r2, r8
    8a06:	4669      	mov	r1, sp
    8a08:	818a      	strh	r2, [r1, #12]
    8a0a:	898a      	ldrh	r2, [r1, #12]
    8a0c:	9200      	str	r2, [sp, #0]
    8a0e:	4652      	mov	r2, sl
    8a10:	0039      	movs	r1, r7
    8a12:	4c1a      	ldr	r4, [pc, #104]	; (8a7c <m2m_ip_cb+0x308>)
    8a14:	47a0      	blx	r4
    8a16:	e709      	b.n	882c <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    8a18:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    8a1a:	2300      	movs	r3, #0
    8a1c:	2208      	movs	r2, #8
    8a1e:	a909      	add	r1, sp, #36	; 0x24
    8a20:	0020      	movs	r0, r4
    8a22:	4c10      	ldr	r4, [pc, #64]	; (8a64 <m2m_ip_cb+0x2f0>)
    8a24:	47a0      	blx	r4
    8a26:	2800      	cmp	r0, #0
    8a28:	d000      	beq.n	8a2c <m2m_ip_cb+0x2b8>
    8a2a:	e6ff      	b.n	882c <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    8a2c:	ab09      	add	r3, sp, #36	; 0x24
    8a2e:	2000      	movs	r0, #0
    8a30:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    8a32:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    8a34:	8859      	ldrh	r1, [r3, #2]
    8a36:	ab05      	add	r3, sp, #20
    8a38:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    8a3a:	0101      	lsls	r1, r0, #4
    8a3c:	4b0c      	ldr	r3, [pc, #48]	; (8a70 <m2m_ip_cb+0x2fc>)
    8a3e:	185b      	adds	r3, r3, r1
    8a40:	88db      	ldrh	r3, [r3, #6]
    8a42:	b29b      	uxth	r3, r3
    8a44:	429a      	cmp	r2, r3
    8a46:	d000      	beq.n	8a4a <m2m_ip_cb+0x2d6>
    8a48:	e6f0      	b.n	882c <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    8a4a:	4b08      	ldr	r3, [pc, #32]	; (8a6c <m2m_ip_cb+0x2f8>)
    8a4c:	681b      	ldr	r3, [r3, #0]
    8a4e:	2b00      	cmp	r3, #0
    8a50:	d100      	bne.n	8a54 <m2m_ip_cb+0x2e0>
    8a52:	e6eb      	b.n	882c <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    8a54:	4b05      	ldr	r3, [pc, #20]	; (8a6c <m2m_ip_cb+0x2f8>)
    8a56:	681b      	ldr	r3, [r3, #0]
    8a58:	aa05      	add	r2, sp, #20
    8a5a:	0029      	movs	r1, r5
    8a5c:	4798      	blx	r3
	{
    8a5e:	e6e5      	b.n	882c <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    8a60:	2508      	movs	r5, #8
    8a62:	e7da      	b.n	8a1a <m2m_ip_cb+0x2a6>
    8a64:	00006a01 	.word	0x00006a01
    8a68:	20000774 	.word	0x20000774
    8a6c:	20000770 	.word	0x20000770
    8a70:	200006c0 	.word	0x200006c0
    8a74:	2000042a 	.word	0x2000042a
    8a78:	20000778 	.word	0x20000778
    8a7c:	00008661 	.word	0x00008661

00008a80 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    8a80:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    8a82:	4b0a      	ldr	r3, [pc, #40]	; (8aac <socketInit+0x2c>)
    8a84:	781b      	ldrb	r3, [r3, #0]
    8a86:	2b00      	cmp	r3, #0
    8a88:	d000      	beq.n	8a8c <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    8a8a:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    8a8c:	22b0      	movs	r2, #176	; 0xb0
    8a8e:	2100      	movs	r1, #0
    8a90:	4807      	ldr	r0, [pc, #28]	; (8ab0 <socketInit+0x30>)
    8a92:	4b08      	ldr	r3, [pc, #32]	; (8ab4 <socketInit+0x34>)
    8a94:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    8a96:	4908      	ldr	r1, [pc, #32]	; (8ab8 <socketInit+0x38>)
    8a98:	2002      	movs	r0, #2
    8a9a:	4b08      	ldr	r3, [pc, #32]	; (8abc <socketInit+0x3c>)
    8a9c:	4798      	blx	r3
		gbSocketInit	= 1;
    8a9e:	2201      	movs	r2, #1
    8aa0:	4b02      	ldr	r3, [pc, #8]	; (8aac <socketInit+0x2c>)
    8aa2:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    8aa4:	2200      	movs	r2, #0
    8aa6:	4b06      	ldr	r3, [pc, #24]	; (8ac0 <socketInit+0x40>)
    8aa8:	801a      	strh	r2, [r3, #0]
}
    8aaa:	e7ee      	b.n	8a8a <socketInit+0xa>
    8aac:	20000429 	.word	0x20000429
    8ab0:	200006c0 	.word	0x200006c0
    8ab4:	000062e1 	.word	0x000062e1
    8ab8:	00008775 	.word	0x00008775
    8abc:	00006aed 	.word	0x00006aed
    8ac0:	2000042a 	.word	0x2000042a

00008ac4 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    8ac4:	4b02      	ldr	r3, [pc, #8]	; (8ad0 <registerSocketCallback+0xc>)
    8ac6:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    8ac8:	4b02      	ldr	r3, [pc, #8]	; (8ad4 <registerSocketCallback+0x10>)
    8aca:	6019      	str	r1, [r3, #0]
}
    8acc:	4770      	bx	lr
    8ace:	46c0      	nop			; (mov r8, r8)
    8ad0:	20000770 	.word	0x20000770
    8ad4:	20000778 	.word	0x20000778

00008ad8 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    8ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ada:	46d6      	mov	lr, sl
    8adc:	4647      	mov	r7, r8
    8ade:	b580      	push	{r7, lr}
    8ae0:	b089      	sub	sp, #36	; 0x24
    8ae2:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    8ae4:	2802      	cmp	r0, #2
    8ae6:	d000      	beq.n	8aea <socket+0x12>
    8ae8:	e09c      	b.n	8c24 <socket+0x14c>
	{
		if(u8Type == SOCK_STREAM)
    8aea:	2901      	cmp	r1, #1
    8aec:	d00a      	beq.n	8b04 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    8aee:	2902      	cmp	r1, #2
    8af0:	d100      	bne.n	8af4 <socket+0x1c>
    8af2:	e070      	b.n	8bd6 <socket+0xfe>
	SOCKET					sock = -1;
    8af4:	2501      	movs	r5, #1
    8af6:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    8af8:	0028      	movs	r0, r5
    8afa:	b009      	add	sp, #36	; 0x24
    8afc:	bc0c      	pop	{r2, r3}
    8afe:	4690      	mov	r8, r2
    8b00:	469a      	mov	sl, r3
    8b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    8b04:	4c49      	ldr	r4, [pc, #292]	; (8c2c <socket+0x154>)
    8b06:	7827      	ldrb	r7, [r4, #0]
    8b08:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    8b0a:	7826      	ldrb	r6, [r4, #0]
    8b0c:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    8b0e:	7820      	ldrb	r0, [r4, #0]
    8b10:	3001      	adds	r0, #1
    8b12:	3106      	adds	r1, #6
    8b14:	4b46      	ldr	r3, [pc, #280]	; (8c30 <socket+0x158>)
    8b16:	4798      	blx	r3
    8b18:	b2c9      	uxtb	r1, r1
    8b1a:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    8b1c:	0132      	lsls	r2, r6, #4
    8b1e:	4b45      	ldr	r3, [pc, #276]	; (8c34 <socket+0x15c>)
    8b20:	189b      	adds	r3, r3, r2
    8b22:	7a9b      	ldrb	r3, [r3, #10]
    8b24:	2506      	movs	r5, #6
    8b26:	2b00      	cmp	r3, #0
    8b28:	d018      	beq.n	8b5c <socket+0x84>
				u8SockID	= u8NextTcpSock;
    8b2a:	4e40      	ldr	r6, [pc, #256]	; (8c2c <socket+0x154>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    8b2c:	4b40      	ldr	r3, [pc, #256]	; (8c30 <socket+0x158>)
    8b2e:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    8b30:	4b40      	ldr	r3, [pc, #256]	; (8c34 <socket+0x15c>)
    8b32:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    8b34:	7837      	ldrb	r7, [r6, #0]
    8b36:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    8b38:	7834      	ldrb	r4, [r6, #0]
    8b3a:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    8b3c:	7830      	ldrb	r0, [r6, #0]
    8b3e:	3001      	adds	r0, #1
    8b40:	2107      	movs	r1, #7
    8b42:	47d0      	blx	sl
    8b44:	b2c9      	uxtb	r1, r1
    8b46:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    8b48:	0123      	lsls	r3, r4, #4
    8b4a:	4443      	add	r3, r8
    8b4c:	7a9b      	ldrb	r3, [r3, #10]
    8b4e:	2b00      	cmp	r3, #0
    8b50:	d007      	beq.n	8b62 <socket+0x8a>
    8b52:	3d01      	subs	r5, #1
    8b54:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    8b56:	2d00      	cmp	r5, #0
    8b58:	d1ec      	bne.n	8b34 <socket+0x5c>
    8b5a:	e7cb      	b.n	8af4 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    8b5c:	4b35      	ldr	r3, [pc, #212]	; (8c34 <socket+0x15c>)
    8b5e:	18d4      	adds	r4, r2, r3
    8b60:	e002      	b.n	8b68 <socket+0x90>
    8b62:	0124      	lsls	r4, r4, #4
    8b64:	4b33      	ldr	r3, [pc, #204]	; (8c34 <socket+0x15c>)
    8b66:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    8b68:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    8b6a:	2d00      	cmp	r5, #0
    8b6c:	dbc4      	blt.n	8af8 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    8b6e:	2210      	movs	r2, #16
    8b70:	2100      	movs	r1, #0
    8b72:	0020      	movs	r0, r4
    8b74:	4b30      	ldr	r3, [pc, #192]	; (8c38 <socket+0x160>)
    8b76:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    8b78:	2301      	movs	r3, #1
    8b7a:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    8b7c:	4a2f      	ldr	r2, [pc, #188]	; (8c3c <socket+0x164>)
    8b7e:	8813      	ldrh	r3, [r2, #0]
    8b80:	3301      	adds	r3, #1
    8b82:	b29b      	uxth	r3, r3
    8b84:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    8b86:	8813      	ldrh	r3, [r2, #0]
    8b88:	b29b      	uxth	r3, r3
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d103      	bne.n	8b96 <socket+0xbe>
				++gu16SessionID;
    8b8e:	8813      	ldrh	r3, [r2, #0]
    8b90:	3301      	adds	r3, #1
    8b92:	b29b      	uxth	r3, r3
    8b94:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    8b96:	4e29      	ldr	r6, [pc, #164]	; (8c3c <socket+0x164>)
    8b98:	8833      	ldrh	r3, [r6, #0]
    8b9a:	b29b      	uxth	r3, r3
    8b9c:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    8b9e:	4828      	ldr	r0, [pc, #160]	; (8c40 <socket+0x168>)
    8ba0:	4f28      	ldr	r7, [pc, #160]	; (8c44 <socket+0x16c>)
    8ba2:	47b8      	blx	r7
    8ba4:	8832      	ldrh	r2, [r6, #0]
    8ba6:	b292      	uxth	r2, r2
    8ba8:	0029      	movs	r1, r5
    8baa:	4827      	ldr	r0, [pc, #156]	; (8c48 <socket+0x170>)
    8bac:	47b8      	blx	r7
    8bae:	200d      	movs	r0, #13
    8bb0:	4b26      	ldr	r3, [pc, #152]	; (8c4c <socket+0x174>)
    8bb2:	4798      	blx	r3
			if(u8Flags & SOCKET_FLAGS_SSL)
    8bb4:	9b05      	ldr	r3, [sp, #20]
    8bb6:	07db      	lsls	r3, r3, #31
    8bb8:	d59e      	bpl.n	8af8 <socket+0x20>
				strSSLCreate.sslSock = sock;
    8bba:	aa07      	add	r2, sp, #28
    8bbc:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    8bbe:	2321      	movs	r3, #33	; 0x21
    8bc0:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    8bc2:	2300      	movs	r3, #0
    8bc4:	9302      	str	r3, [sp, #8]
    8bc6:	9301      	str	r3, [sp, #4]
    8bc8:	9300      	str	r3, [sp, #0]
    8bca:	3304      	adds	r3, #4
    8bcc:	2150      	movs	r1, #80	; 0x50
    8bce:	2002      	movs	r0, #2
    8bd0:	4c1f      	ldr	r4, [pc, #124]	; (8c50 <socket+0x178>)
    8bd2:	47a0      	blx	r4
    8bd4:	e790      	b.n	8af8 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    8bd6:	4b1f      	ldr	r3, [pc, #124]	; (8c54 <socket+0x17c>)
    8bd8:	781d      	ldrb	r5, [r3, #0]
    8bda:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    8bdc:	781c      	ldrb	r4, [r3, #0]
    8bde:	0124      	lsls	r4, r4, #4
    8be0:	4a1d      	ldr	r2, [pc, #116]	; (8c58 <socket+0x180>)
    8be2:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    8be4:	7819      	ldrb	r1, [r3, #0]
    8be6:	3101      	adds	r1, #1
    8be8:	2203      	movs	r2, #3
    8bea:	400a      	ands	r2, r1
    8bec:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    8bee:	7aa3      	ldrb	r3, [r4, #10]
    8bf0:	2b00      	cmp	r3, #0
    8bf2:	d014      	beq.n	8c1e <socket+0x146>
    8bf4:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    8bf6:	4917      	ldr	r1, [pc, #92]	; (8c54 <socket+0x17c>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    8bf8:	4f17      	ldr	r7, [pc, #92]	; (8c58 <socket+0x180>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    8bfa:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    8bfc:	780d      	ldrb	r5, [r1, #0]
    8bfe:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    8c00:	780c      	ldrb	r4, [r1, #0]
    8c02:	0124      	lsls	r4, r4, #4
    8c04:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    8c06:	780b      	ldrb	r3, [r1, #0]
    8c08:	3301      	adds	r3, #1
    8c0a:	4003      	ands	r3, r0
    8c0c:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    8c0e:	7aa3      	ldrb	r3, [r4, #10]
    8c10:	2b00      	cmp	r3, #0
    8c12:	d004      	beq.n	8c1e <socket+0x146>
    8c14:	3a01      	subs	r2, #1
    8c16:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    8c18:	2a00      	cmp	r2, #0
    8c1a:	d1ef      	bne.n	8bfc <socket+0x124>
    8c1c:	e76a      	b.n	8af4 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    8c1e:	3507      	adds	r5, #7
    8c20:	b26d      	sxtb	r5, r5
					break;
    8c22:	e7a2      	b.n	8b6a <socket+0x92>
	SOCKET					sock = -1;
    8c24:	2501      	movs	r5, #1
    8c26:	426d      	negs	r5, r5
    8c28:	e766      	b.n	8af8 <socket+0x20>
    8c2a:	46c0      	nop			; (mov r8, r8)
    8c2c:	2000042c 	.word	0x2000042c
    8c30:	0000cbb5 	.word	0x0000cbb5
    8c34:	200006c0 	.word	0x200006c0
    8c38:	000062e1 	.word	0x000062e1
    8c3c:	2000042a 	.word	0x2000042a
    8c40:	0000f0a4 	.word	0x0000f0a4
    8c44:	0000ce29 	.word	0x0000ce29
    8c48:	0000fb34 	.word	0x0000fb34
    8c4c:	0000ce5d 	.word	0x0000ce5d
    8c50:	000063f5 	.word	0x000063f5
    8c54:	2000042d 	.word	0x2000042d
    8c58:	20000730 	.word	0x20000730

00008c5c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    8c5c:	b570      	push	{r4, r5, r6, lr}
    8c5e:	b088      	sub	sp, #32
    8c60:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    8c62:	db30      	blt.n	8cc6 <connect+0x6a>
    8c64:	2900      	cmp	r1, #0
    8c66:	d031      	beq.n	8ccc <connect+0x70>
    8c68:	0100      	lsls	r0, r0, #4
    8c6a:	4b1d      	ldr	r3, [pc, #116]	; (8ce0 <connect+0x84>)
    8c6c:	181b      	adds	r3, r3, r0
    8c6e:	7a9b      	ldrb	r3, [r3, #10]
    8c70:	2b01      	cmp	r3, #1
    8c72:	d12e      	bne.n	8cd2 <connect+0x76>
    8c74:	2a00      	cmp	r2, #0
    8c76:	d02f      	beq.n	8cd8 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    8c78:	4b19      	ldr	r3, [pc, #100]	; (8ce0 <connect+0x84>)
    8c7a:	181b      	adds	r3, r3, r0
    8c7c:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    8c7e:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    8c80:	07db      	lsls	r3, r3, #31
    8c82:	d505      	bpl.n	8c90 <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    8c84:	4b16      	ldr	r3, [pc, #88]	; (8ce0 <connect+0x84>)
    8c86:	181b      	adds	r3, r3, r0
    8c88:	7ada      	ldrb	r2, [r3, #11]
    8c8a:	ab05      	add	r3, sp, #20
    8c8c:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    8c8e:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    8c90:	ad05      	add	r5, sp, #20
    8c92:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    8c94:	2208      	movs	r2, #8
    8c96:	0028      	movs	r0, r5
    8c98:	4b12      	ldr	r3, [pc, #72]	; (8ce4 <connect+0x88>)
    8c9a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    8c9c:	0124      	lsls	r4, r4, #4
    8c9e:	4b10      	ldr	r3, [pc, #64]	; (8ce0 <connect+0x84>)
    8ca0:	191c      	adds	r4, r3, r4
    8ca2:	88e3      	ldrh	r3, [r4, #6]
    8ca4:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    8ca6:	2300      	movs	r3, #0
    8ca8:	9302      	str	r3, [sp, #8]
    8caa:	9301      	str	r3, [sp, #4]
    8cac:	9300      	str	r3, [sp, #0]
    8cae:	330c      	adds	r3, #12
    8cb0:	002a      	movs	r2, r5
    8cb2:	0031      	movs	r1, r6
    8cb4:	2002      	movs	r0, #2
    8cb6:	4c0c      	ldr	r4, [pc, #48]	; (8ce8 <connect+0x8c>)
    8cb8:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    8cba:	2800      	cmp	r0, #0
    8cbc:	d001      	beq.n	8cc2 <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    8cbe:	2009      	movs	r0, #9
    8cc0:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    8cc2:	b008      	add	sp, #32
    8cc4:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    8cc6:	2006      	movs	r0, #6
    8cc8:	4240      	negs	r0, r0
    8cca:	e7fa      	b.n	8cc2 <connect+0x66>
    8ccc:	2006      	movs	r0, #6
    8cce:	4240      	negs	r0, r0
    8cd0:	e7f7      	b.n	8cc2 <connect+0x66>
    8cd2:	2006      	movs	r0, #6
    8cd4:	4240      	negs	r0, r0
    8cd6:	e7f4      	b.n	8cc2 <connect+0x66>
    8cd8:	2006      	movs	r0, #6
    8cda:	4240      	negs	r0, r0
    8cdc:	e7f1      	b.n	8cc2 <connect+0x66>
    8cde:	46c0      	nop			; (mov r8, r8)
    8ce0:	200006c0 	.word	0x200006c0
    8ce4:	000062cd 	.word	0x000062cd
    8ce8:	000063f5 	.word	0x000063f5

00008cec <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    8cec:	b530      	push	{r4, r5, lr}
    8cee:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    8cf0:	2800      	cmp	r0, #0
    8cf2:	db36      	blt.n	8d62 <send+0x76>
    8cf4:	2900      	cmp	r1, #0
    8cf6:	d037      	beq.n	8d68 <send+0x7c>
    8cf8:	23af      	movs	r3, #175	; 0xaf
    8cfa:	00db      	lsls	r3, r3, #3
    8cfc:	429a      	cmp	r2, r3
    8cfe:	d836      	bhi.n	8d6e <send+0x82>
    8d00:	0104      	lsls	r4, r0, #4
    8d02:	4b1e      	ldr	r3, [pc, #120]	; (8d7c <send+0x90>)
    8d04:	191b      	adds	r3, r3, r4
    8d06:	7a9b      	ldrb	r3, [r3, #10]
    8d08:	2b01      	cmp	r3, #1
    8d0a:	d133      	bne.n	8d74 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    8d0c:	ab04      	add	r3, sp, #16
    8d0e:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    8d10:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    8d12:	0025      	movs	r5, r4
    8d14:	4c19      	ldr	r4, [pc, #100]	; (8d7c <send+0x90>)
    8d16:	1964      	adds	r4, r4, r5
    8d18:	88e4      	ldrh	r4, [r4, #6]
    8d1a:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    8d1c:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    8d1e:	2806      	cmp	r0, #6
    8d20:	dd00      	ble.n	8d24 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    8d22:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8d24:	0104      	lsls	r4, r0, #4
    8d26:	4b15      	ldr	r3, [pc, #84]	; (8d7c <send+0x90>)
    8d28:	191b      	adds	r3, r3, r4
    8d2a:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    8d2c:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8d2e:	07e4      	lsls	r4, r4, #31
    8d30:	d505      	bpl.n	8d3e <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    8d32:	0100      	lsls	r0, r0, #4
    8d34:	4b11      	ldr	r3, [pc, #68]	; (8d7c <send+0x90>)
    8d36:	1818      	adds	r0, r3, r0
    8d38:	8905      	ldrh	r5, [r0, #8]
    8d3a:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    8d3c:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    8d3e:	2080      	movs	r0, #128	; 0x80
    8d40:	4318      	orrs	r0, r3
    8d42:	9502      	str	r5, [sp, #8]
    8d44:	9201      	str	r2, [sp, #4]
    8d46:	9100      	str	r1, [sp, #0]
    8d48:	2310      	movs	r3, #16
    8d4a:	aa04      	add	r2, sp, #16
    8d4c:	0001      	movs	r1, r0
    8d4e:	2002      	movs	r0, #2
    8d50:	4c0b      	ldr	r4, [pc, #44]	; (8d80 <send+0x94>)
    8d52:	47a0      	blx	r4
    8d54:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    8d56:	2800      	cmp	r0, #0
    8d58:	d000      	beq.n	8d5c <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    8d5a:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    8d5c:	0018      	movs	r0, r3
    8d5e:	b009      	add	sp, #36	; 0x24
    8d60:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    8d62:	2306      	movs	r3, #6
    8d64:	425b      	negs	r3, r3
    8d66:	e7f9      	b.n	8d5c <send+0x70>
    8d68:	2306      	movs	r3, #6
    8d6a:	425b      	negs	r3, r3
    8d6c:	e7f6      	b.n	8d5c <send+0x70>
    8d6e:	2306      	movs	r3, #6
    8d70:	425b      	negs	r3, r3
    8d72:	e7f3      	b.n	8d5c <send+0x70>
    8d74:	2306      	movs	r3, #6
    8d76:	425b      	negs	r3, r3
    8d78:	e7f0      	b.n	8d5c <send+0x70>
    8d7a:	46c0      	nop			; (mov r8, r8)
    8d7c:	200006c0 	.word	0x200006c0
    8d80:	000063f5 	.word	0x000063f5

00008d84 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    8d84:	b530      	push	{r4, r5, lr}
    8d86:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    8d88:	2800      	cmp	r0, #0
    8d8a:	db34      	blt.n	8df6 <recv+0x72>
    8d8c:	2900      	cmp	r1, #0
    8d8e:	d035      	beq.n	8dfc <recv+0x78>
    8d90:	2a00      	cmp	r2, #0
    8d92:	d036      	beq.n	8e02 <recv+0x7e>
    8d94:	0105      	lsls	r5, r0, #4
    8d96:	4c1e      	ldr	r4, [pc, #120]	; (8e10 <recv+0x8c>)
    8d98:	1964      	adds	r4, r4, r5
    8d9a:	7aa4      	ldrb	r4, [r4, #10]
    8d9c:	2c01      	cmp	r4, #1
    8d9e:	d133      	bne.n	8e08 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    8da0:	4c1b      	ldr	r4, [pc, #108]	; (8e10 <recv+0x8c>)
    8da2:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    8da4:	1964      	adds	r4, r4, r5
    8da6:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    8da8:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    8daa:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    8dac:	2900      	cmp	r1, #0
    8dae:	d11d      	bne.n	8dec <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    8db0:	2101      	movs	r1, #1
    8db2:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8db4:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    8db6:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8db8:	07d2      	lsls	r2, r2, #31
    8dba:	d500      	bpl.n	8dbe <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    8dbc:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    8dbe:	2b00      	cmp	r3, #0
    8dc0:	d117      	bne.n	8df2 <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    8dc2:	3b01      	subs	r3, #1
    8dc4:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    8dc6:	aa04      	add	r2, sp, #16
    8dc8:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    8dca:	0100      	lsls	r0, r0, #4
    8dcc:	4b10      	ldr	r3, [pc, #64]	; (8e10 <recv+0x8c>)
    8dce:	1818      	adds	r0, r3, r0
    8dd0:	88c3      	ldrh	r3, [r0, #6]
    8dd2:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    8dd4:	2300      	movs	r3, #0
    8dd6:	9302      	str	r3, [sp, #8]
    8dd8:	9301      	str	r3, [sp, #4]
    8dda:	9300      	str	r3, [sp, #0]
    8ddc:	3308      	adds	r3, #8
    8dde:	2002      	movs	r0, #2
    8de0:	4c0c      	ldr	r4, [pc, #48]	; (8e14 <recv+0x90>)
    8de2:	47a0      	blx	r4
    8de4:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    8de6:	2800      	cmp	r0, #0
    8de8:	d000      	beq.n	8dec <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    8dea:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    8dec:	0010      	movs	r0, r2
    8dee:	b007      	add	sp, #28
    8df0:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    8df2:	9304      	str	r3, [sp, #16]
    8df4:	e7e7      	b.n	8dc6 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    8df6:	2206      	movs	r2, #6
    8df8:	4252      	negs	r2, r2
    8dfa:	e7f7      	b.n	8dec <recv+0x68>
    8dfc:	2206      	movs	r2, #6
    8dfe:	4252      	negs	r2, r2
    8e00:	e7f4      	b.n	8dec <recv+0x68>
    8e02:	2206      	movs	r2, #6
    8e04:	4252      	negs	r2, r2
    8e06:	e7f1      	b.n	8dec <recv+0x68>
    8e08:	2206      	movs	r2, #6
    8e0a:	4252      	negs	r2, r2
    8e0c:	e7ee      	b.n	8dec <recv+0x68>
    8e0e:	46c0      	nop			; (mov r8, r8)
    8e10:	200006c0 	.word	0x200006c0
    8e14:	000063f5 	.word	0x000063f5

00008e18 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    8e18:	b530      	push	{r4, r5, lr}
    8e1a:	b087      	sub	sp, #28
    8e1c:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    8e1e:	481e      	ldr	r0, [pc, #120]	; (8e98 <close+0x80>)
    8e20:	4d1e      	ldr	r5, [pc, #120]	; (8e9c <close+0x84>)
    8e22:	47a8      	blx	r5
    8e24:	0021      	movs	r1, r4
    8e26:	481e      	ldr	r0, [pc, #120]	; (8ea0 <close+0x88>)
    8e28:	47a8      	blx	r5
    8e2a:	200d      	movs	r0, #13
    8e2c:	4b1d      	ldr	r3, [pc, #116]	; (8ea4 <close+0x8c>)
    8e2e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    8e30:	2c00      	cmp	r4, #0
    8e32:	db2a      	blt.n	8e8a <close+0x72>
    8e34:	0122      	lsls	r2, r4, #4
    8e36:	4b1c      	ldr	r3, [pc, #112]	; (8ea8 <close+0x90>)
    8e38:	189b      	adds	r3, r3, r2
    8e3a:	7a9b      	ldrb	r3, [r3, #10]
    8e3c:	2b01      	cmp	r3, #1
    8e3e:	d127      	bne.n	8e90 <close+0x78>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    8e40:	a905      	add	r1, sp, #20
    8e42:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    8e44:	4b18      	ldr	r3, [pc, #96]	; (8ea8 <close+0x90>)
    8e46:	189b      	adds	r3, r3, r2
    8e48:	88da      	ldrh	r2, [r3, #6]
    8e4a:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    8e4c:	2200      	movs	r2, #0
    8e4e:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    8e50:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8e52:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    8e54:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    8e56:	07db      	lsls	r3, r3, #31
    8e58:	d500      	bpl.n	8e5c <close+0x44>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    8e5a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    8e5c:	2300      	movs	r3, #0
    8e5e:	9302      	str	r3, [sp, #8]
    8e60:	9301      	str	r3, [sp, #4]
    8e62:	9300      	str	r3, [sp, #0]
    8e64:	3304      	adds	r3, #4
    8e66:	aa05      	add	r2, sp, #20
    8e68:	2002      	movs	r0, #2
    8e6a:	4d10      	ldr	r5, [pc, #64]	; (8eac <close+0x94>)
    8e6c:	47a8      	blx	r5
    8e6e:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    8e70:	d001      	beq.n	8e76 <close+0x5e>
		{
			s8Ret = SOCK_ERR_INVALID;
    8e72:	2509      	movs	r5, #9
    8e74:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    8e76:	0124      	lsls	r4, r4, #4
    8e78:	480b      	ldr	r0, [pc, #44]	; (8ea8 <close+0x90>)
    8e7a:	1820      	adds	r0, r4, r0
    8e7c:	2210      	movs	r2, #16
    8e7e:	2100      	movs	r1, #0
    8e80:	4b0b      	ldr	r3, [pc, #44]	; (8eb0 <close+0x98>)
    8e82:	4798      	blx	r3
	}
	return s8Ret;
}
    8e84:	0028      	movs	r0, r5
    8e86:	b007      	add	sp, #28
    8e88:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    8e8a:	2506      	movs	r5, #6
    8e8c:	426d      	negs	r5, r5
    8e8e:	e7f9      	b.n	8e84 <close+0x6c>
    8e90:	2506      	movs	r5, #6
    8e92:	426d      	negs	r5, r5
    8e94:	e7f6      	b.n	8e84 <close+0x6c>
    8e96:	46c0      	nop			; (mov r8, r8)
    8e98:	0000f0a4 	.word	0x0000f0a4
    8e9c:	0000ce29 	.word	0x0000ce29
    8ea0:	0000fb1c 	.word	0x0000fb1c
    8ea4:	0000ce5d 	.word	0x0000ce5d
    8ea8:	200006c0 	.word	0x200006c0
    8eac:	000063f5 	.word	0x000063f5
    8eb0:	000062e1 	.word	0x000062e1

00008eb4 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    8eb4:	b570      	push	{r4, r5, r6, lr}
    8eb6:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    8eb8:	2300      	movs	r3, #0
    8eba:	9301      	str	r3, [sp, #4]
    8ebc:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    8ebe:	2100      	movs	r1, #0
    8ec0:	7802      	ldrb	r2, [r0, #0]
    8ec2:	1c44      	adds	r4, r0, #1
    8ec4:	3005      	adds	r0, #5
    8ec6:	000b      	movs	r3, r1
    8ec8:	e009      	b.n	8ede <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    8eca:	009d      	lsls	r5, r3, #2
    8ecc:	195b      	adds	r3, r3, r5
    8ece:	005b      	lsls	r3, r3, #1
    8ed0:	189b      	adds	r3, r3, r2
    8ed2:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    8ed4:	0022      	movs	r2, r4
    8ed6:	3401      	adds	r4, #1
			if(j > 4)
    8ed8:	42a0      	cmp	r0, r4
    8eda:	d00a      	beq.n	8ef2 <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    8edc:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    8ede:	2a2e      	cmp	r2, #46	; 0x2e
    8ee0:	d00a      	beq.n	8ef8 <nmi_inet_addr+0x44>
    8ee2:	2a00      	cmp	r2, #0
    8ee4:	d00c      	beq.n	8f00 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    8ee6:	3a30      	subs	r2, #48	; 0x30
    8ee8:	b2d2      	uxtb	r2, r2
    8eea:	2a09      	cmp	r2, #9
    8eec:	d9ed      	bls.n	8eca <nmi_inet_addr+0x16>
				return 0;
    8eee:	2000      	movs	r0, #0
    8ef0:	e000      	b.n	8ef4 <nmi_inet_addr+0x40>
				return 0;
    8ef2:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    8ef4:	b002      	add	sp, #8
    8ef6:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    8ef8:	466a      	mov	r2, sp
    8efa:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    8efc:	0020      	movs	r0, r4
    8efe:	e002      	b.n	8f06 <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    8f00:	466a      	mov	r2, sp
    8f02:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    8f04:	0020      	movs	r0, r4
    8f06:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    8f08:	2e04      	cmp	r6, #4
    8f0a:	d1d9      	bne.n	8ec0 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    8f0c:	2204      	movs	r2, #4
    8f0e:	4669      	mov	r1, sp
    8f10:	a801      	add	r0, sp, #4
    8f12:	4b02      	ldr	r3, [pc, #8]	; (8f1c <nmi_inet_addr+0x68>)
    8f14:	4798      	blx	r3
	return u32IP;
    8f16:	9801      	ldr	r0, [sp, #4]
    8f18:	e7ec      	b.n	8ef4 <nmi_inet_addr+0x40>
    8f1a:	46c0      	nop			; (mov r8, r8)
    8f1c:	000062cd 	.word	0x000062cd

00008f20 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    8f20:	b510      	push	{r4, lr}
    8f22:	b084      	sub	sp, #16
    8f24:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    8f26:	4b0b      	ldr	r3, [pc, #44]	; (8f54 <gethostbyname+0x34>)
    8f28:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    8f2a:	b2c3      	uxtb	r3, r0
    8f2c:	2b40      	cmp	r3, #64	; 0x40
    8f2e:	d80d      	bhi.n	8f4c <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    8f30:	23ff      	movs	r3, #255	; 0xff
    8f32:	4003      	ands	r3, r0
    8f34:	3301      	adds	r3, #1
    8f36:	2200      	movs	r2, #0
    8f38:	9202      	str	r2, [sp, #8]
    8f3a:	9201      	str	r2, [sp, #4]
    8f3c:	9200      	str	r2, [sp, #0]
    8f3e:	0022      	movs	r2, r4
    8f40:	214a      	movs	r1, #74	; 0x4a
    8f42:	2002      	movs	r0, #2
    8f44:	4c04      	ldr	r4, [pc, #16]	; (8f58 <gethostbyname+0x38>)
    8f46:	47a0      	blx	r4
	}
	return s8Err;
}
    8f48:	b004      	add	sp, #16
    8f4a:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    8f4c:	2006      	movs	r0, #6
    8f4e:	4240      	negs	r0, r0
    8f50:	e7fa      	b.n	8f48 <gethostbyname+0x28>
    8f52:	46c0      	nop			; (mov r8, r8)
    8f54:	000062f1 	.word	0x000062f1
    8f58:	000063f5 	.word	0x000063f5

00008f5c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    8f5c:	b570      	push	{r4, r5, r6, lr}
    8f5e:	b082      	sub	sp, #8
    8f60:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    8f62:	4b2a      	ldr	r3, [pc, #168]	; (900c <spi_flash_enable+0xb0>)
    8f64:	4798      	blx	r3
    8f66:	0500      	lsls	r0, r0, #20
    8f68:	0d00      	lsrs	r0, r0, #20
    8f6a:	4b29      	ldr	r3, [pc, #164]	; (9010 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    8f6c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    8f6e:	4298      	cmp	r0, r3
    8f70:	d802      	bhi.n	8f78 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    8f72:	0028      	movs	r0, r5
    8f74:	b002      	add	sp, #8
    8f76:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    8f78:	a901      	add	r1, sp, #4
    8f7a:	4826      	ldr	r0, [pc, #152]	; (9014 <spi_flash_enable+0xb8>)
    8f7c:	4b26      	ldr	r3, [pc, #152]	; (9018 <spi_flash_enable+0xbc>)
    8f7e:	4798      	blx	r3
    8f80:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    8f82:	d1f6      	bne.n	8f72 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    8f84:	4b25      	ldr	r3, [pc, #148]	; (901c <spi_flash_enable+0xc0>)
    8f86:	9a01      	ldr	r2, [sp, #4]
    8f88:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    8f8a:	4925      	ldr	r1, [pc, #148]	; (9020 <spi_flash_enable+0xc4>)
    8f8c:	4319      	orrs	r1, r3
    8f8e:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    8f90:	4820      	ldr	r0, [pc, #128]	; (9014 <spi_flash_enable+0xb8>)
    8f92:	4b24      	ldr	r3, [pc, #144]	; (9024 <spi_flash_enable+0xc8>)
    8f94:	4798      	blx	r3
		if(enable) {
    8f96:	2c00      	cmp	r4, #0
    8f98:	d020      	beq.n	8fdc <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8f9a:	2100      	movs	r1, #0
    8f9c:	4822      	ldr	r0, [pc, #136]	; (9028 <spi_flash_enable+0xcc>)
    8f9e:	4c21      	ldr	r4, [pc, #132]	; (9024 <spi_flash_enable+0xc8>)
    8fa0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8fa2:	21ab      	movs	r1, #171	; 0xab
    8fa4:	4821      	ldr	r0, [pc, #132]	; (902c <spi_flash_enable+0xd0>)
    8fa6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8fa8:	2101      	movs	r1, #1
    8faa:	4821      	ldr	r0, [pc, #132]	; (9030 <spi_flash_enable+0xd4>)
    8fac:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    8fae:	2100      	movs	r1, #0
    8fb0:	4820      	ldr	r0, [pc, #128]	; (9034 <spi_flash_enable+0xd8>)
    8fb2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    8fb4:	2181      	movs	r1, #129	; 0x81
    8fb6:	4820      	ldr	r0, [pc, #128]	; (9038 <spi_flash_enable+0xdc>)
    8fb8:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8fba:	4e20      	ldr	r6, [pc, #128]	; (903c <spi_flash_enable+0xe0>)
    8fbc:	4c20      	ldr	r4, [pc, #128]	; (9040 <spi_flash_enable+0xe4>)
    8fbe:	0030      	movs	r0, r6
    8fc0:	47a0      	blx	r4
    8fc2:	2801      	cmp	r0, #1
    8fc4:	d1fb      	bne.n	8fbe <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    8fc6:	4b15      	ldr	r3, [pc, #84]	; (901c <spi_flash_enable+0xc0>)
    8fc8:	9a01      	ldr	r2, [sp, #4]
    8fca:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    8fcc:	2180      	movs	r1, #128	; 0x80
    8fce:	0249      	lsls	r1, r1, #9
    8fd0:	4319      	orrs	r1, r3
    8fd2:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    8fd4:	480f      	ldr	r0, [pc, #60]	; (9014 <spi_flash_enable+0xb8>)
    8fd6:	4b13      	ldr	r3, [pc, #76]	; (9024 <spi_flash_enable+0xc8>)
    8fd8:	4798      	blx	r3
    8fda:	e7ca      	b.n	8f72 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    8fdc:	2100      	movs	r1, #0
    8fde:	4812      	ldr	r0, [pc, #72]	; (9028 <spi_flash_enable+0xcc>)
    8fe0:	4c10      	ldr	r4, [pc, #64]	; (9024 <spi_flash_enable+0xc8>)
    8fe2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    8fe4:	21b9      	movs	r1, #185	; 0xb9
    8fe6:	4811      	ldr	r0, [pc, #68]	; (902c <spi_flash_enable+0xd0>)
    8fe8:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    8fea:	2101      	movs	r1, #1
    8fec:	4810      	ldr	r0, [pc, #64]	; (9030 <spi_flash_enable+0xd4>)
    8fee:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    8ff0:	2100      	movs	r1, #0
    8ff2:	4810      	ldr	r0, [pc, #64]	; (9034 <spi_flash_enable+0xd8>)
    8ff4:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    8ff6:	2181      	movs	r1, #129	; 0x81
    8ff8:	480f      	ldr	r0, [pc, #60]	; (9038 <spi_flash_enable+0xdc>)
    8ffa:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    8ffc:	4e0f      	ldr	r6, [pc, #60]	; (903c <spi_flash_enable+0xe0>)
    8ffe:	4c10      	ldr	r4, [pc, #64]	; (9040 <spi_flash_enable+0xe4>)
    9000:	0030      	movs	r0, r6
    9002:	47a0      	blx	r4
    9004:	2801      	cmp	r0, #1
    9006:	d1fb      	bne.n	9000 <spi_flash_enable+0xa4>
    9008:	e7dd      	b.n	8fc6 <spi_flash_enable+0x6a>
    900a:	46c0      	nop			; (mov r8, r8)
    900c:	000072d9 	.word	0x000072d9
    9010:	0000039f 	.word	0x0000039f
    9014:	00001410 	.word	0x00001410
    9018:	00007729 	.word	0x00007729
    901c:	f8888fff 	.word	0xf8888fff
    9020:	01111000 	.word	0x01111000
    9024:	00007735 	.word	0x00007735
    9028:	00010208 	.word	0x00010208
    902c:	0001020c 	.word	0x0001020c
    9030:	00010214 	.word	0x00010214
    9034:	0001021c 	.word	0x0001021c
    9038:	00010204 	.word	0x00010204
    903c:	00010218 	.word	0x00010218
    9040:	0000771d 	.word	0x0000771d

00009044 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    9044:	4b0c      	ldr	r3, [pc, #48]	; (9078 <cpu_irq_enter_critical+0x34>)
    9046:	681b      	ldr	r3, [r3, #0]
    9048:	2b00      	cmp	r3, #0
    904a:	d106      	bne.n	905a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    904c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    9050:	2b00      	cmp	r3, #0
    9052:	d007      	beq.n	9064 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    9054:	2200      	movs	r2, #0
    9056:	4b09      	ldr	r3, [pc, #36]	; (907c <cpu_irq_enter_critical+0x38>)
    9058:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    905a:	4a07      	ldr	r2, [pc, #28]	; (9078 <cpu_irq_enter_critical+0x34>)
    905c:	6813      	ldr	r3, [r2, #0]
    905e:	3301      	adds	r3, #1
    9060:	6013      	str	r3, [r2, #0]
}
    9062:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    9064:	b672      	cpsid	i
    9066:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    906a:	2200      	movs	r2, #0
    906c:	4b04      	ldr	r3, [pc, #16]	; (9080 <cpu_irq_enter_critical+0x3c>)
    906e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    9070:	3201      	adds	r2, #1
    9072:	4b02      	ldr	r3, [pc, #8]	; (907c <cpu_irq_enter_critical+0x38>)
    9074:	701a      	strb	r2, [r3, #0]
    9076:	e7f0      	b.n	905a <cpu_irq_enter_critical+0x16>
    9078:	20000430 	.word	0x20000430
    907c:	20000434 	.word	0x20000434
    9080:	2000000a 	.word	0x2000000a

00009084 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    9084:	4b08      	ldr	r3, [pc, #32]	; (90a8 <cpu_irq_leave_critical+0x24>)
    9086:	681a      	ldr	r2, [r3, #0]
    9088:	3a01      	subs	r2, #1
    908a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    908c:	681b      	ldr	r3, [r3, #0]
    908e:	2b00      	cmp	r3, #0
    9090:	d109      	bne.n	90a6 <cpu_irq_leave_critical+0x22>
    9092:	4b06      	ldr	r3, [pc, #24]	; (90ac <cpu_irq_leave_critical+0x28>)
    9094:	781b      	ldrb	r3, [r3, #0]
    9096:	2b00      	cmp	r3, #0
    9098:	d005      	beq.n	90a6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    909a:	2201      	movs	r2, #1
    909c:	4b04      	ldr	r3, [pc, #16]	; (90b0 <cpu_irq_leave_critical+0x2c>)
    909e:	701a      	strb	r2, [r3, #0]
    90a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    90a4:	b662      	cpsie	i
	}
}
    90a6:	4770      	bx	lr
    90a8:	20000430 	.word	0x20000430
    90ac:	20000434 	.word	0x20000434
    90b0:	2000000a 	.word	0x2000000a

000090b4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    90b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    90b6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    90b8:	ac01      	add	r4, sp, #4
    90ba:	2501      	movs	r5, #1
    90bc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    90be:	2700      	movs	r7, #0
    90c0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    90c2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    90c4:	0021      	movs	r1, r4
    90c6:	2017      	movs	r0, #23
    90c8:	4e06      	ldr	r6, [pc, #24]	; (90e4 <system_board_init+0x30>)
    90ca:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    90cc:	2280      	movs	r2, #128	; 0x80
    90ce:	0412      	lsls	r2, r2, #16
    90d0:	4b05      	ldr	r3, [pc, #20]	; (90e8 <system_board_init+0x34>)
    90d2:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    90d4:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    90d6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    90d8:	0021      	movs	r1, r4
    90da:	2037      	movs	r0, #55	; 0x37
    90dc:	47b0      	blx	r6
}
    90de:	b003      	add	sp, #12
    90e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    90e2:	46c0      	nop			; (mov r8, r8)
    90e4:	000092bd 	.word	0x000092bd
    90e8:	41004400 	.word	0x41004400

000090ec <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    90ec:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    90ee:	2a00      	cmp	r2, #0
    90f0:	d001      	beq.n	90f6 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    90f2:	0018      	movs	r0, r3
    90f4:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    90f6:	008b      	lsls	r3, r1, #2
    90f8:	4a06      	ldr	r2, [pc, #24]	; (9114 <extint_register_callback+0x28>)
    90fa:	589b      	ldr	r3, [r3, r2]
    90fc:	2b00      	cmp	r3, #0
    90fe:	d003      	beq.n	9108 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    9100:	4283      	cmp	r3, r0
    9102:	d005      	beq.n	9110 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    9104:	231d      	movs	r3, #29
    9106:	e7f4      	b.n	90f2 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    9108:	0089      	lsls	r1, r1, #2
    910a:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    910c:	2300      	movs	r3, #0
    910e:	e7f0      	b.n	90f2 <extint_register_callback+0x6>
		return STATUS_OK;
    9110:	2300      	movs	r3, #0
    9112:	e7ee      	b.n	90f2 <extint_register_callback+0x6>
    9114:	20000780 	.word	0x20000780

00009118 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9118:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    911a:	2900      	cmp	r1, #0
    911c:	d001      	beq.n	9122 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    911e:	0018      	movs	r0, r3
    9120:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    9122:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    9124:	281f      	cmp	r0, #31
    9126:	d800      	bhi.n	912a <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    9128:	4a02      	ldr	r2, [pc, #8]	; (9134 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    912a:	2301      	movs	r3, #1
    912c:	4083      	lsls	r3, r0
    912e:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    9130:	2300      	movs	r3, #0
    9132:	e7f4      	b.n	911e <extint_chan_enable_callback+0x6>
    9134:	40001800 	.word	0x40001800

00009138 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9138:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    913a:	2900      	cmp	r1, #0
    913c:	d001      	beq.n	9142 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    913e:	0018      	movs	r0, r3
    9140:	4770      	bx	lr
		return NULL;
    9142:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    9144:	281f      	cmp	r0, #31
    9146:	d800      	bhi.n	914a <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    9148:	4a02      	ldr	r2, [pc, #8]	; (9154 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    914a:	2301      	movs	r3, #1
    914c:	4083      	lsls	r3, r0
    914e:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    9150:	2300      	movs	r3, #0
    9152:	e7f4      	b.n	913e <extint_chan_disable_callback+0x6>
    9154:	40001800 	.word	0x40001800

00009158 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    9158:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    915a:	2200      	movs	r2, #0
    915c:	4b10      	ldr	r3, [pc, #64]	; (91a0 <EIC_Handler+0x48>)
    915e:	701a      	strb	r2, [r3, #0]
    9160:	2300      	movs	r3, #0
    9162:	4910      	ldr	r1, [pc, #64]	; (91a4 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    9164:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    9166:	4e10      	ldr	r6, [pc, #64]	; (91a8 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    9168:	4c0d      	ldr	r4, [pc, #52]	; (91a0 <EIC_Handler+0x48>)
    916a:	e00a      	b.n	9182 <EIC_Handler+0x2a>
		return eics[eic_index];
    916c:	490d      	ldr	r1, [pc, #52]	; (91a4 <EIC_Handler+0x4c>)
    916e:	e008      	b.n	9182 <EIC_Handler+0x2a>
    9170:	7823      	ldrb	r3, [r4, #0]
    9172:	3301      	adds	r3, #1
    9174:	b2db      	uxtb	r3, r3
    9176:	7023      	strb	r3, [r4, #0]
    9178:	2b0f      	cmp	r3, #15
    917a:	d810      	bhi.n	919e <EIC_Handler+0x46>
		return NULL;
    917c:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    917e:	2b1f      	cmp	r3, #31
    9180:	d9f4      	bls.n	916c <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    9182:	0028      	movs	r0, r5
    9184:	4018      	ands	r0, r3
    9186:	2201      	movs	r2, #1
    9188:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    918a:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    918c:	4210      	tst	r0, r2
    918e:	d0ef      	beq.n	9170 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    9190:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    9192:	009b      	lsls	r3, r3, #2
    9194:	599b      	ldr	r3, [r3, r6]
    9196:	2b00      	cmp	r3, #0
    9198:	d0ea      	beq.n	9170 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    919a:	4798      	blx	r3
    919c:	e7e8      	b.n	9170 <EIC_Handler+0x18>
			}
		}
	}
}
    919e:	bd70      	pop	{r4, r5, r6, pc}
    91a0:	2000077c 	.word	0x2000077c
    91a4:	40001800 	.word	0x40001800
    91a8:	20000780 	.word	0x20000780

000091ac <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    91ac:	4a04      	ldr	r2, [pc, #16]	; (91c0 <_extint_enable+0x14>)
    91ae:	7813      	ldrb	r3, [r2, #0]
    91b0:	2102      	movs	r1, #2
    91b2:	430b      	orrs	r3, r1
    91b4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    91b6:	7853      	ldrb	r3, [r2, #1]
    91b8:	b25b      	sxtb	r3, r3
    91ba:	2b00      	cmp	r3, #0
    91bc:	dbfb      	blt.n	91b6 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    91be:	4770      	bx	lr
    91c0:	40001800 	.word	0x40001800

000091c4 <_system_extint_init>:
{
    91c4:	b500      	push	{lr}
    91c6:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    91c8:	4a12      	ldr	r2, [pc, #72]	; (9214 <_system_extint_init+0x50>)
    91ca:	6993      	ldr	r3, [r2, #24]
    91cc:	2140      	movs	r1, #64	; 0x40
    91ce:	430b      	orrs	r3, r1
    91d0:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    91d2:	a901      	add	r1, sp, #4
    91d4:	2300      	movs	r3, #0
    91d6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    91d8:	2005      	movs	r0, #5
    91da:	4b0f      	ldr	r3, [pc, #60]	; (9218 <_system_extint_init+0x54>)
    91dc:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    91de:	2005      	movs	r0, #5
    91e0:	4b0e      	ldr	r3, [pc, #56]	; (921c <_system_extint_init+0x58>)
    91e2:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    91e4:	4a0e      	ldr	r2, [pc, #56]	; (9220 <_system_extint_init+0x5c>)
    91e6:	7813      	ldrb	r3, [r2, #0]
    91e8:	2101      	movs	r1, #1
    91ea:	430b      	orrs	r3, r1
    91ec:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    91ee:	7853      	ldrb	r3, [r2, #1]
    91f0:	b25b      	sxtb	r3, r3
    91f2:	2b00      	cmp	r3, #0
    91f4:	dbfb      	blt.n	91ee <_system_extint_init+0x2a>
    91f6:	4b0b      	ldr	r3, [pc, #44]	; (9224 <_system_extint_init+0x60>)
    91f8:	0019      	movs	r1, r3
    91fa:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    91fc:	2200      	movs	r2, #0
    91fe:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    9200:	4299      	cmp	r1, r3
    9202:	d1fc      	bne.n	91fe <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    9204:	2210      	movs	r2, #16
    9206:	4b08      	ldr	r3, [pc, #32]	; (9228 <_system_extint_init+0x64>)
    9208:	601a      	str	r2, [r3, #0]
	_extint_enable();
    920a:	4b08      	ldr	r3, [pc, #32]	; (922c <_system_extint_init+0x68>)
    920c:	4798      	blx	r3
}
    920e:	b003      	add	sp, #12
    9210:	bd00      	pop	{pc}
    9212:	46c0      	nop			; (mov r8, r8)
    9214:	40000400 	.word	0x40000400
    9218:	0000abc5 	.word	0x0000abc5
    921c:	0000ab39 	.word	0x0000ab39
    9220:	40001800 	.word	0x40001800
    9224:	20000780 	.word	0x20000780
    9228:	e000e100 	.word	0xe000e100
    922c:	000091ad 	.word	0x000091ad

00009230 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    9230:	2300      	movs	r3, #0
    9232:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    9234:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    9236:	2201      	movs	r2, #1
    9238:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    923a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    923c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    923e:	3302      	adds	r3, #2
    9240:	72c3      	strb	r3, [r0, #11]
}
    9242:	4770      	bx	lr

00009244 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    9244:	b5f0      	push	{r4, r5, r6, r7, lr}
    9246:	b083      	sub	sp, #12
    9248:	0005      	movs	r5, r0
    924a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    924c:	a901      	add	r1, sp, #4
    924e:	2300      	movs	r3, #0
    9250:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    9252:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    9254:	7923      	ldrb	r3, [r4, #4]
    9256:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    9258:	7a23      	ldrb	r3, [r4, #8]
    925a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    925c:	7820      	ldrb	r0, [r4, #0]
    925e:	4b15      	ldr	r3, [pc, #84]	; (92b4 <extint_chan_set_config+0x70>)
    9260:	4798      	blx	r3
		return NULL;
    9262:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    9264:	2d1f      	cmp	r5, #31
    9266:	d800      	bhi.n	926a <extint_chan_set_config+0x26>
		return eics[eic_index];
    9268:	4813      	ldr	r0, [pc, #76]	; (92b8 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    926a:	2207      	movs	r2, #7
    926c:	402a      	ands	r2, r5
    926e:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    9270:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    9272:	7aa3      	ldrb	r3, [r4, #10]
    9274:	2b00      	cmp	r3, #0
    9276:	d001      	beq.n	927c <extint_chan_set_config+0x38>
    9278:	2308      	movs	r3, #8
    927a:	431f      	orrs	r7, r3
    927c:	08eb      	lsrs	r3, r5, #3
    927e:	009b      	lsls	r3, r3, #2
    9280:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    9282:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    9284:	260f      	movs	r6, #15
    9286:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    9288:	43b1      	bics	r1, r6
			(new_config << config_pos);
    928a:	4097      	lsls	r7, r2
    928c:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    928e:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    9290:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    9292:	7a63      	ldrb	r3, [r4, #9]
    9294:	2b00      	cmp	r3, #0
    9296:	d106      	bne.n	92a6 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    9298:	6943      	ldr	r3, [r0, #20]
    929a:	2201      	movs	r2, #1
    929c:	40aa      	lsls	r2, r5
    929e:	4393      	bics	r3, r2
    92a0:	6143      	str	r3, [r0, #20]
	}
}
    92a2:	b003      	add	sp, #12
    92a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    92a6:	6942      	ldr	r2, [r0, #20]
    92a8:	2301      	movs	r3, #1
    92aa:	40ab      	lsls	r3, r5
    92ac:	4313      	orrs	r3, r2
    92ae:	6143      	str	r3, [r0, #20]
    92b0:	e7f7      	b.n	92a2 <extint_chan_set_config+0x5e>
    92b2:	46c0      	nop			; (mov r8, r8)
    92b4:	0000acbd 	.word	0x0000acbd
    92b8:	40001800 	.word	0x40001800

000092bc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    92bc:	b500      	push	{lr}
    92be:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    92c0:	ab01      	add	r3, sp, #4
    92c2:	2280      	movs	r2, #128	; 0x80
    92c4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    92c6:	780a      	ldrb	r2, [r1, #0]
    92c8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    92ca:	784a      	ldrb	r2, [r1, #1]
    92cc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    92ce:	788a      	ldrb	r2, [r1, #2]
    92d0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    92d2:	0019      	movs	r1, r3
    92d4:	4b01      	ldr	r3, [pc, #4]	; (92dc <port_pin_set_config+0x20>)
    92d6:	4798      	blx	r3
}
    92d8:	b003      	add	sp, #12
    92da:	bd00      	pop	{pc}
    92dc:	0000acbd 	.word	0x0000acbd

000092e0 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    92e0:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    92e2:	4b0f      	ldr	r3, [pc, #60]	; (9320 <RTC_Handler+0x40>)
    92e4:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    92e6:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    92e8:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    92ea:	8a13      	ldrh	r3, [r2, #16]
    92ec:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    92ee:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    92f0:	79e3      	ldrb	r3, [r4, #7]
    92f2:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    92f4:	b258      	sxtb	r0, r3
    92f6:	2800      	cmp	r0, #0
    92f8:	db06      	blt.n	9308 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    92fa:	07db      	lsls	r3, r3, #31
    92fc:	d503      	bpl.n	9306 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    92fe:	07cb      	lsls	r3, r1, #31
    9300:	d40a      	bmi.n	9318 <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    9302:	2301      	movs	r3, #1
    9304:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    9306:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    9308:	078b      	lsls	r3, r1, #30
    930a:	d402      	bmi.n	9312 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    930c:	2380      	movs	r3, #128	; 0x80
    930e:	7223      	strb	r3, [r4, #8]
    9310:	e7f9      	b.n	9306 <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    9312:	68d3      	ldr	r3, [r2, #12]
    9314:	4798      	blx	r3
    9316:	e7f9      	b.n	930c <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    9318:	6893      	ldr	r3, [r2, #8]
    931a:	4798      	blx	r3
    931c:	e7f1      	b.n	9302 <RTC_Handler+0x22>
    931e:	46c0      	nop			; (mov r8, r8)
    9320:	200007c0 	.word	0x200007c0

00009324 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    9324:	b5f0      	push	{r4, r5, r6, r7, lr}
    9326:	46de      	mov	lr, fp
    9328:	4657      	mov	r7, sl
    932a:	464e      	mov	r6, r9
    932c:	4645      	mov	r5, r8
    932e:	b5e0      	push	{r5, r6, r7, lr}
    9330:	b087      	sub	sp, #28
    9332:	4680      	mov	r8, r0
    9334:	9104      	str	r1, [sp, #16]
    9336:	0016      	movs	r6, r2
    9338:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    933a:	2200      	movs	r2, #0
    933c:	2300      	movs	r3, #0
    933e:	2100      	movs	r1, #0
    9340:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    9342:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    9344:	2001      	movs	r0, #1
    9346:	0021      	movs	r1, r4
    9348:	9600      	str	r6, [sp, #0]
    934a:	9701      	str	r7, [sp, #4]
    934c:	465c      	mov	r4, fp
    934e:	9403      	str	r4, [sp, #12]
    9350:	4644      	mov	r4, r8
    9352:	9405      	str	r4, [sp, #20]
    9354:	e013      	b.n	937e <long_division+0x5a>
    9356:	2420      	movs	r4, #32
    9358:	1a64      	subs	r4, r4, r1
    935a:	0005      	movs	r5, r0
    935c:	40e5      	lsrs	r5, r4
    935e:	46a8      	mov	r8, r5
    9360:	e014      	b.n	938c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    9362:	9c00      	ldr	r4, [sp, #0]
    9364:	9d01      	ldr	r5, [sp, #4]
    9366:	1b12      	subs	r2, r2, r4
    9368:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    936a:	465c      	mov	r4, fp
    936c:	464d      	mov	r5, r9
    936e:	432c      	orrs	r4, r5
    9370:	46a3      	mov	fp, r4
    9372:	9c03      	ldr	r4, [sp, #12]
    9374:	4645      	mov	r5, r8
    9376:	432c      	orrs	r4, r5
    9378:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    937a:	3901      	subs	r1, #1
    937c:	d325      	bcc.n	93ca <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    937e:	2420      	movs	r4, #32
    9380:	4264      	negs	r4, r4
    9382:	190c      	adds	r4, r1, r4
    9384:	d4e7      	bmi.n	9356 <long_division+0x32>
    9386:	0005      	movs	r5, r0
    9388:	40a5      	lsls	r5, r4
    938a:	46a8      	mov	r8, r5
    938c:	0004      	movs	r4, r0
    938e:	408c      	lsls	r4, r1
    9390:	46a1      	mov	r9, r4
		r = r << 1;
    9392:	1892      	adds	r2, r2, r2
    9394:	415b      	adcs	r3, r3
    9396:	0014      	movs	r4, r2
    9398:	001d      	movs	r5, r3
		if (n & bit_shift) {
    939a:	9e05      	ldr	r6, [sp, #20]
    939c:	464f      	mov	r7, r9
    939e:	403e      	ands	r6, r7
    93a0:	46b4      	mov	ip, r6
    93a2:	9e04      	ldr	r6, [sp, #16]
    93a4:	4647      	mov	r7, r8
    93a6:	403e      	ands	r6, r7
    93a8:	46b2      	mov	sl, r6
    93aa:	4666      	mov	r6, ip
    93ac:	4657      	mov	r7, sl
    93ae:	433e      	orrs	r6, r7
    93b0:	d003      	beq.n	93ba <long_division+0x96>
			r |= 0x01;
    93b2:	0006      	movs	r6, r0
    93b4:	4326      	orrs	r6, r4
    93b6:	0032      	movs	r2, r6
    93b8:	002b      	movs	r3, r5
		if (r >= d) {
    93ba:	9c00      	ldr	r4, [sp, #0]
    93bc:	9d01      	ldr	r5, [sp, #4]
    93be:	429d      	cmp	r5, r3
    93c0:	d8db      	bhi.n	937a <long_division+0x56>
    93c2:	d1ce      	bne.n	9362 <long_division+0x3e>
    93c4:	4294      	cmp	r4, r2
    93c6:	d8d8      	bhi.n	937a <long_division+0x56>
    93c8:	e7cb      	b.n	9362 <long_division+0x3e>
    93ca:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    93cc:	4658      	mov	r0, fp
    93ce:	0019      	movs	r1, r3
    93d0:	b007      	add	sp, #28
    93d2:	bc3c      	pop	{r2, r3, r4, r5}
    93d4:	4690      	mov	r8, r2
    93d6:	4699      	mov	r9, r3
    93d8:	46a2      	mov	sl, r4
    93da:	46ab      	mov	fp, r5
    93dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000093de <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    93de:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    93e0:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    93e2:	2340      	movs	r3, #64	; 0x40
    93e4:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    93e6:	4281      	cmp	r1, r0
    93e8:	d202      	bcs.n	93f0 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    93ea:	0018      	movs	r0, r3
    93ec:	bd10      	pop	{r4, pc}
		baud_calculated++;
    93ee:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    93f0:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    93f2:	1c63      	adds	r3, r4, #1
    93f4:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    93f6:	4288      	cmp	r0, r1
    93f8:	d9f9      	bls.n	93ee <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    93fa:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    93fc:	2cff      	cmp	r4, #255	; 0xff
    93fe:	d8f4      	bhi.n	93ea <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    9400:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    9402:	2300      	movs	r3, #0
    9404:	e7f1      	b.n	93ea <_sercom_get_sync_baud_val+0xc>
	...

00009408 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    9408:	b5f0      	push	{r4, r5, r6, r7, lr}
    940a:	b083      	sub	sp, #12
    940c:	000f      	movs	r7, r1
    940e:	0016      	movs	r6, r2
    9410:	aa08      	add	r2, sp, #32
    9412:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    9414:	0004      	movs	r4, r0
    9416:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9418:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    941a:	42bc      	cmp	r4, r7
    941c:	d902      	bls.n	9424 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    941e:	0010      	movs	r0, r2
    9420:	b003      	add	sp, #12
    9422:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    9424:	2b00      	cmp	r3, #0
    9426:	d114      	bne.n	9452 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    9428:	0002      	movs	r2, r0
    942a:	0008      	movs	r0, r1
    942c:	2100      	movs	r1, #0
    942e:	4c19      	ldr	r4, [pc, #100]	; (9494 <_sercom_get_async_baud_val+0x8c>)
    9430:	47a0      	blx	r4
    9432:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    9434:	003a      	movs	r2, r7
    9436:	2300      	movs	r3, #0
    9438:	2000      	movs	r0, #0
    943a:	4c17      	ldr	r4, [pc, #92]	; (9498 <_sercom_get_async_baud_val+0x90>)
    943c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    943e:	2200      	movs	r2, #0
    9440:	2301      	movs	r3, #1
    9442:	1a12      	subs	r2, r2, r0
    9444:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    9446:	0c12      	lsrs	r2, r2, #16
    9448:	041b      	lsls	r3, r3, #16
    944a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    944c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    944e:	2200      	movs	r2, #0
    9450:	e7e5      	b.n	941e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    9452:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    9454:	2b01      	cmp	r3, #1
    9456:	d1f9      	bne.n	944c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    9458:	000a      	movs	r2, r1
    945a:	2300      	movs	r3, #0
    945c:	2100      	movs	r1, #0
    945e:	4c0d      	ldr	r4, [pc, #52]	; (9494 <_sercom_get_async_baud_val+0x8c>)
    9460:	47a0      	blx	r4
    9462:	0002      	movs	r2, r0
    9464:	000b      	movs	r3, r1
    9466:	9200      	str	r2, [sp, #0]
    9468:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    946a:	0038      	movs	r0, r7
    946c:	2100      	movs	r1, #0
    946e:	4c0a      	ldr	r4, [pc, #40]	; (9498 <_sercom_get_async_baud_val+0x90>)
    9470:	47a0      	blx	r4
    9472:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    9474:	2380      	movs	r3, #128	; 0x80
    9476:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    9478:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    947a:	4298      	cmp	r0, r3
    947c:	d8cf      	bhi.n	941e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    947e:	0f79      	lsrs	r1, r7, #29
    9480:	00f8      	lsls	r0, r7, #3
    9482:	9a00      	ldr	r2, [sp, #0]
    9484:	9b01      	ldr	r3, [sp, #4]
    9486:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    9488:	00ea      	lsls	r2, r5, #3
    948a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    948c:	b2d2      	uxtb	r2, r2
    948e:	0352      	lsls	r2, r2, #13
    9490:	432a      	orrs	r2, r5
    9492:	e7db      	b.n	944c <_sercom_get_async_baud_val+0x44>
    9494:	0000cbc1 	.word	0x0000cbc1
    9498:	00009325 	.word	0x00009325

0000949c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    949c:	b510      	push	{r4, lr}
    949e:	b082      	sub	sp, #8
    94a0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    94a2:	4b0e      	ldr	r3, [pc, #56]	; (94dc <sercom_set_gclk_generator+0x40>)
    94a4:	781b      	ldrb	r3, [r3, #0]
    94a6:	2b00      	cmp	r3, #0
    94a8:	d007      	beq.n	94ba <sercom_set_gclk_generator+0x1e>
    94aa:	2900      	cmp	r1, #0
    94ac:	d105      	bne.n	94ba <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    94ae:	4b0b      	ldr	r3, [pc, #44]	; (94dc <sercom_set_gclk_generator+0x40>)
    94b0:	785b      	ldrb	r3, [r3, #1]
    94b2:	4283      	cmp	r3, r0
    94b4:	d010      	beq.n	94d8 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    94b6:	201d      	movs	r0, #29
    94b8:	e00c      	b.n	94d4 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    94ba:	a901      	add	r1, sp, #4
    94bc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    94be:	2013      	movs	r0, #19
    94c0:	4b07      	ldr	r3, [pc, #28]	; (94e0 <sercom_set_gclk_generator+0x44>)
    94c2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    94c4:	2013      	movs	r0, #19
    94c6:	4b07      	ldr	r3, [pc, #28]	; (94e4 <sercom_set_gclk_generator+0x48>)
    94c8:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    94ca:	4b04      	ldr	r3, [pc, #16]	; (94dc <sercom_set_gclk_generator+0x40>)
    94cc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    94ce:	2201      	movs	r2, #1
    94d0:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    94d2:	2000      	movs	r0, #0
}
    94d4:	b002      	add	sp, #8
    94d6:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    94d8:	2000      	movs	r0, #0
    94da:	e7fb      	b.n	94d4 <sercom_set_gclk_generator+0x38>
    94dc:	20000438 	.word	0x20000438
    94e0:	0000abc5 	.word	0x0000abc5
    94e4:	0000ab39 	.word	0x0000ab39

000094e8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    94e8:	4b40      	ldr	r3, [pc, #256]	; (95ec <_sercom_get_default_pad+0x104>)
    94ea:	4298      	cmp	r0, r3
    94ec:	d031      	beq.n	9552 <_sercom_get_default_pad+0x6a>
    94ee:	d90a      	bls.n	9506 <_sercom_get_default_pad+0x1e>
    94f0:	4b3f      	ldr	r3, [pc, #252]	; (95f0 <_sercom_get_default_pad+0x108>)
    94f2:	4298      	cmp	r0, r3
    94f4:	d04d      	beq.n	9592 <_sercom_get_default_pad+0xaa>
    94f6:	4b3f      	ldr	r3, [pc, #252]	; (95f4 <_sercom_get_default_pad+0x10c>)
    94f8:	4298      	cmp	r0, r3
    94fa:	d05a      	beq.n	95b2 <_sercom_get_default_pad+0xca>
    94fc:	4b3e      	ldr	r3, [pc, #248]	; (95f8 <_sercom_get_default_pad+0x110>)
    94fe:	4298      	cmp	r0, r3
    9500:	d037      	beq.n	9572 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    9502:	2000      	movs	r0, #0
}
    9504:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    9506:	4b3d      	ldr	r3, [pc, #244]	; (95fc <_sercom_get_default_pad+0x114>)
    9508:	4298      	cmp	r0, r3
    950a:	d00c      	beq.n	9526 <_sercom_get_default_pad+0x3e>
    950c:	4b3c      	ldr	r3, [pc, #240]	; (9600 <_sercom_get_default_pad+0x118>)
    950e:	4298      	cmp	r0, r3
    9510:	d1f7      	bne.n	9502 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    9512:	2901      	cmp	r1, #1
    9514:	d017      	beq.n	9546 <_sercom_get_default_pad+0x5e>
    9516:	2900      	cmp	r1, #0
    9518:	d05d      	beq.n	95d6 <_sercom_get_default_pad+0xee>
    951a:	2902      	cmp	r1, #2
    951c:	d015      	beq.n	954a <_sercom_get_default_pad+0x62>
    951e:	2903      	cmp	r1, #3
    9520:	d015      	beq.n	954e <_sercom_get_default_pad+0x66>
	return 0;
    9522:	2000      	movs	r0, #0
    9524:	e7ee      	b.n	9504 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    9526:	2901      	cmp	r1, #1
    9528:	d007      	beq.n	953a <_sercom_get_default_pad+0x52>
    952a:	2900      	cmp	r1, #0
    952c:	d051      	beq.n	95d2 <_sercom_get_default_pad+0xea>
    952e:	2902      	cmp	r1, #2
    9530:	d005      	beq.n	953e <_sercom_get_default_pad+0x56>
    9532:	2903      	cmp	r1, #3
    9534:	d005      	beq.n	9542 <_sercom_get_default_pad+0x5a>
	return 0;
    9536:	2000      	movs	r0, #0
    9538:	e7e4      	b.n	9504 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    953a:	4832      	ldr	r0, [pc, #200]	; (9604 <_sercom_get_default_pad+0x11c>)
    953c:	e7e2      	b.n	9504 <_sercom_get_default_pad+0x1c>
    953e:	4832      	ldr	r0, [pc, #200]	; (9608 <_sercom_get_default_pad+0x120>)
    9540:	e7e0      	b.n	9504 <_sercom_get_default_pad+0x1c>
    9542:	4832      	ldr	r0, [pc, #200]	; (960c <_sercom_get_default_pad+0x124>)
    9544:	e7de      	b.n	9504 <_sercom_get_default_pad+0x1c>
    9546:	4832      	ldr	r0, [pc, #200]	; (9610 <_sercom_get_default_pad+0x128>)
    9548:	e7dc      	b.n	9504 <_sercom_get_default_pad+0x1c>
    954a:	4832      	ldr	r0, [pc, #200]	; (9614 <_sercom_get_default_pad+0x12c>)
    954c:	e7da      	b.n	9504 <_sercom_get_default_pad+0x1c>
    954e:	4832      	ldr	r0, [pc, #200]	; (9618 <_sercom_get_default_pad+0x130>)
    9550:	e7d8      	b.n	9504 <_sercom_get_default_pad+0x1c>
    9552:	2901      	cmp	r1, #1
    9554:	d007      	beq.n	9566 <_sercom_get_default_pad+0x7e>
    9556:	2900      	cmp	r1, #0
    9558:	d03f      	beq.n	95da <_sercom_get_default_pad+0xf2>
    955a:	2902      	cmp	r1, #2
    955c:	d005      	beq.n	956a <_sercom_get_default_pad+0x82>
    955e:	2903      	cmp	r1, #3
    9560:	d005      	beq.n	956e <_sercom_get_default_pad+0x86>
	return 0;
    9562:	2000      	movs	r0, #0
    9564:	e7ce      	b.n	9504 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    9566:	482d      	ldr	r0, [pc, #180]	; (961c <_sercom_get_default_pad+0x134>)
    9568:	e7cc      	b.n	9504 <_sercom_get_default_pad+0x1c>
    956a:	482d      	ldr	r0, [pc, #180]	; (9620 <_sercom_get_default_pad+0x138>)
    956c:	e7ca      	b.n	9504 <_sercom_get_default_pad+0x1c>
    956e:	482d      	ldr	r0, [pc, #180]	; (9624 <_sercom_get_default_pad+0x13c>)
    9570:	e7c8      	b.n	9504 <_sercom_get_default_pad+0x1c>
    9572:	2901      	cmp	r1, #1
    9574:	d007      	beq.n	9586 <_sercom_get_default_pad+0x9e>
    9576:	2900      	cmp	r1, #0
    9578:	d031      	beq.n	95de <_sercom_get_default_pad+0xf6>
    957a:	2902      	cmp	r1, #2
    957c:	d005      	beq.n	958a <_sercom_get_default_pad+0xa2>
    957e:	2903      	cmp	r1, #3
    9580:	d005      	beq.n	958e <_sercom_get_default_pad+0xa6>
	return 0;
    9582:	2000      	movs	r0, #0
    9584:	e7be      	b.n	9504 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    9586:	4828      	ldr	r0, [pc, #160]	; (9628 <_sercom_get_default_pad+0x140>)
    9588:	e7bc      	b.n	9504 <_sercom_get_default_pad+0x1c>
    958a:	4828      	ldr	r0, [pc, #160]	; (962c <_sercom_get_default_pad+0x144>)
    958c:	e7ba      	b.n	9504 <_sercom_get_default_pad+0x1c>
    958e:	4828      	ldr	r0, [pc, #160]	; (9630 <_sercom_get_default_pad+0x148>)
    9590:	e7b8      	b.n	9504 <_sercom_get_default_pad+0x1c>
    9592:	2901      	cmp	r1, #1
    9594:	d007      	beq.n	95a6 <_sercom_get_default_pad+0xbe>
    9596:	2900      	cmp	r1, #0
    9598:	d023      	beq.n	95e2 <_sercom_get_default_pad+0xfa>
    959a:	2902      	cmp	r1, #2
    959c:	d005      	beq.n	95aa <_sercom_get_default_pad+0xc2>
    959e:	2903      	cmp	r1, #3
    95a0:	d005      	beq.n	95ae <_sercom_get_default_pad+0xc6>
	return 0;
    95a2:	2000      	movs	r0, #0
    95a4:	e7ae      	b.n	9504 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    95a6:	4823      	ldr	r0, [pc, #140]	; (9634 <_sercom_get_default_pad+0x14c>)
    95a8:	e7ac      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95aa:	4823      	ldr	r0, [pc, #140]	; (9638 <_sercom_get_default_pad+0x150>)
    95ac:	e7aa      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95ae:	4823      	ldr	r0, [pc, #140]	; (963c <_sercom_get_default_pad+0x154>)
    95b0:	e7a8      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95b2:	2901      	cmp	r1, #1
    95b4:	d007      	beq.n	95c6 <_sercom_get_default_pad+0xde>
    95b6:	2900      	cmp	r1, #0
    95b8:	d015      	beq.n	95e6 <_sercom_get_default_pad+0xfe>
    95ba:	2902      	cmp	r1, #2
    95bc:	d005      	beq.n	95ca <_sercom_get_default_pad+0xe2>
    95be:	2903      	cmp	r1, #3
    95c0:	d005      	beq.n	95ce <_sercom_get_default_pad+0xe6>
	return 0;
    95c2:	2000      	movs	r0, #0
    95c4:	e79e      	b.n	9504 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    95c6:	481e      	ldr	r0, [pc, #120]	; (9640 <_sercom_get_default_pad+0x158>)
    95c8:	e79c      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95ca:	481e      	ldr	r0, [pc, #120]	; (9644 <_sercom_get_default_pad+0x15c>)
    95cc:	e79a      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95ce:	481e      	ldr	r0, [pc, #120]	; (9648 <_sercom_get_default_pad+0x160>)
    95d0:	e798      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95d2:	481e      	ldr	r0, [pc, #120]	; (964c <_sercom_get_default_pad+0x164>)
    95d4:	e796      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95d6:	2003      	movs	r0, #3
    95d8:	e794      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95da:	481d      	ldr	r0, [pc, #116]	; (9650 <_sercom_get_default_pad+0x168>)
    95dc:	e792      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95de:	481d      	ldr	r0, [pc, #116]	; (9654 <_sercom_get_default_pad+0x16c>)
    95e0:	e790      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95e2:	481d      	ldr	r0, [pc, #116]	; (9658 <_sercom_get_default_pad+0x170>)
    95e4:	e78e      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95e6:	481d      	ldr	r0, [pc, #116]	; (965c <_sercom_get_default_pad+0x174>)
    95e8:	e78c      	b.n	9504 <_sercom_get_default_pad+0x1c>
    95ea:	46c0      	nop			; (mov r8, r8)
    95ec:	42001000 	.word	0x42001000
    95f0:	42001800 	.word	0x42001800
    95f4:	42001c00 	.word	0x42001c00
    95f8:	42001400 	.word	0x42001400
    95fc:	42000800 	.word	0x42000800
    9600:	42000c00 	.word	0x42000c00
    9604:	00050003 	.word	0x00050003
    9608:	00060003 	.word	0x00060003
    960c:	00070003 	.word	0x00070003
    9610:	00010003 	.word	0x00010003
    9614:	001e0003 	.word	0x001e0003
    9618:	001f0003 	.word	0x001f0003
    961c:	00090003 	.word	0x00090003
    9620:	000a0003 	.word	0x000a0003
    9624:	000b0003 	.word	0x000b0003
    9628:	00110003 	.word	0x00110003
    962c:	00120003 	.word	0x00120003
    9630:	00130003 	.word	0x00130003
    9634:	000d0003 	.word	0x000d0003
    9638:	000e0003 	.word	0x000e0003
    963c:	000f0003 	.word	0x000f0003
    9640:	00170003 	.word	0x00170003
    9644:	00180003 	.word	0x00180003
    9648:	00190003 	.word	0x00190003
    964c:	00040003 	.word	0x00040003
    9650:	00080003 	.word	0x00080003
    9654:	00100003 	.word	0x00100003
    9658:	000c0003 	.word	0x000c0003
    965c:	00160003 	.word	0x00160003

00009660 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    9660:	b530      	push	{r4, r5, lr}
    9662:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    9664:	4b0b      	ldr	r3, [pc, #44]	; (9694 <_sercom_get_sercom_inst_index+0x34>)
    9666:	466a      	mov	r2, sp
    9668:	cb32      	ldmia	r3!, {r1, r4, r5}
    966a:	c232      	stmia	r2!, {r1, r4, r5}
    966c:	cb32      	ldmia	r3!, {r1, r4, r5}
    966e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    9670:	9b00      	ldr	r3, [sp, #0]
    9672:	4283      	cmp	r3, r0
    9674:	d00b      	beq.n	968e <_sercom_get_sercom_inst_index+0x2e>
    9676:	2301      	movs	r3, #1
    9678:	009a      	lsls	r2, r3, #2
    967a:	4669      	mov	r1, sp
    967c:	5852      	ldr	r2, [r2, r1]
    967e:	4282      	cmp	r2, r0
    9680:	d006      	beq.n	9690 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    9682:	3301      	adds	r3, #1
    9684:	2b06      	cmp	r3, #6
    9686:	d1f7      	bne.n	9678 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    9688:	2000      	movs	r0, #0
}
    968a:	b007      	add	sp, #28
    968c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    968e:	2300      	movs	r3, #0
			return i;
    9690:	b2d8      	uxtb	r0, r3
    9692:	e7fa      	b.n	968a <_sercom_get_sercom_inst_index+0x2a>
    9694:	0000fb50 	.word	0x0000fb50

00009698 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    9698:	4770      	bx	lr
	...

0000969c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    969c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    969e:	4b0a      	ldr	r3, [pc, #40]	; (96c8 <_sercom_set_handler+0x2c>)
    96a0:	781b      	ldrb	r3, [r3, #0]
    96a2:	2b00      	cmp	r3, #0
    96a4:	d10c      	bne.n	96c0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    96a6:	4f09      	ldr	r7, [pc, #36]	; (96cc <_sercom_set_handler+0x30>)
    96a8:	4e09      	ldr	r6, [pc, #36]	; (96d0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    96aa:	4d0a      	ldr	r5, [pc, #40]	; (96d4 <_sercom_set_handler+0x38>)
    96ac:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    96ae:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    96b0:	195a      	adds	r2, r3, r5
    96b2:	6014      	str	r4, [r2, #0]
    96b4:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    96b6:	2b18      	cmp	r3, #24
    96b8:	d1f9      	bne.n	96ae <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    96ba:	2201      	movs	r2, #1
    96bc:	4b02      	ldr	r3, [pc, #8]	; (96c8 <_sercom_set_handler+0x2c>)
    96be:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    96c0:	0080      	lsls	r0, r0, #2
    96c2:	4b02      	ldr	r3, [pc, #8]	; (96cc <_sercom_set_handler+0x30>)
    96c4:	50c1      	str	r1, [r0, r3]
}
    96c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    96c8:	2000043a 	.word	0x2000043a
    96cc:	2000043c 	.word	0x2000043c
    96d0:	00009699 	.word	0x00009699
    96d4:	200007c4 	.word	0x200007c4

000096d8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    96d8:	b500      	push	{lr}
    96da:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    96dc:	2309      	movs	r3, #9
    96de:	466a      	mov	r2, sp
    96e0:	7013      	strb	r3, [r2, #0]
    96e2:	3301      	adds	r3, #1
    96e4:	7053      	strb	r3, [r2, #1]
    96e6:	3301      	adds	r3, #1
    96e8:	7093      	strb	r3, [r2, #2]
    96ea:	3301      	adds	r3, #1
    96ec:	70d3      	strb	r3, [r2, #3]
    96ee:	3301      	adds	r3, #1
    96f0:	7113      	strb	r3, [r2, #4]
    96f2:	3301      	adds	r3, #1
    96f4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    96f6:	4b03      	ldr	r3, [pc, #12]	; (9704 <_sercom_get_interrupt_vector+0x2c>)
    96f8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    96fa:	466b      	mov	r3, sp
    96fc:	5618      	ldrsb	r0, [r3, r0]
}
    96fe:	b003      	add	sp, #12
    9700:	bd00      	pop	{pc}
    9702:	46c0      	nop			; (mov r8, r8)
    9704:	00009661 	.word	0x00009661

00009708 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    9708:	b510      	push	{r4, lr}
    970a:	4b02      	ldr	r3, [pc, #8]	; (9714 <SERCOM0_Handler+0xc>)
    970c:	681b      	ldr	r3, [r3, #0]
    970e:	2000      	movs	r0, #0
    9710:	4798      	blx	r3
    9712:	bd10      	pop	{r4, pc}
    9714:	2000043c 	.word	0x2000043c

00009718 <SERCOM1_Handler>:
    9718:	b510      	push	{r4, lr}
    971a:	4b02      	ldr	r3, [pc, #8]	; (9724 <SERCOM1_Handler+0xc>)
    971c:	685b      	ldr	r3, [r3, #4]
    971e:	2001      	movs	r0, #1
    9720:	4798      	blx	r3
    9722:	bd10      	pop	{r4, pc}
    9724:	2000043c 	.word	0x2000043c

00009728 <SERCOM2_Handler>:
    9728:	b510      	push	{r4, lr}
    972a:	4b02      	ldr	r3, [pc, #8]	; (9734 <SERCOM2_Handler+0xc>)
    972c:	689b      	ldr	r3, [r3, #8]
    972e:	2002      	movs	r0, #2
    9730:	4798      	blx	r3
    9732:	bd10      	pop	{r4, pc}
    9734:	2000043c 	.word	0x2000043c

00009738 <SERCOM3_Handler>:
    9738:	b510      	push	{r4, lr}
    973a:	4b02      	ldr	r3, [pc, #8]	; (9744 <SERCOM3_Handler+0xc>)
    973c:	68db      	ldr	r3, [r3, #12]
    973e:	2003      	movs	r0, #3
    9740:	4798      	blx	r3
    9742:	bd10      	pop	{r4, pc}
    9744:	2000043c 	.word	0x2000043c

00009748 <SERCOM4_Handler>:
    9748:	b510      	push	{r4, lr}
    974a:	4b02      	ldr	r3, [pc, #8]	; (9754 <SERCOM4_Handler+0xc>)
    974c:	691b      	ldr	r3, [r3, #16]
    974e:	2004      	movs	r0, #4
    9750:	4798      	blx	r3
    9752:	bd10      	pop	{r4, pc}
    9754:	2000043c 	.word	0x2000043c

00009758 <SERCOM5_Handler>:
    9758:	b510      	push	{r4, lr}
    975a:	4b02      	ldr	r3, [pc, #8]	; (9764 <SERCOM5_Handler+0xc>)
    975c:	695b      	ldr	r3, [r3, #20]
    975e:	2005      	movs	r0, #5
    9760:	4798      	blx	r3
    9762:	bd10      	pop	{r4, pc}
    9764:	2000043c 	.word	0x2000043c

00009768 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    9768:	b5f0      	push	{r4, r5, r6, r7, lr}
    976a:	b08b      	sub	sp, #44	; 0x2c
    976c:	0005      	movs	r5, r0
    976e:	000c      	movs	r4, r1
    9770:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    9772:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    9774:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    9776:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    9778:	079b      	lsls	r3, r3, #30
    977a:	d501      	bpl.n	9780 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    977c:	b00b      	add	sp, #44	; 0x2c
    977e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    9780:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    9782:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    9784:	07db      	lsls	r3, r3, #31
    9786:	d4f9      	bmi.n	977c <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9788:	0008      	movs	r0, r1
    978a:	4b6f      	ldr	r3, [pc, #444]	; (9948 <spi_init+0x1e0>)
    978c:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    978e:	4a6f      	ldr	r2, [pc, #444]	; (994c <spi_init+0x1e4>)
    9790:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    9792:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    9794:	2301      	movs	r3, #1
    9796:	40bb      	lsls	r3, r7
    9798:	430b      	orrs	r3, r1
    979a:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    979c:	a909      	add	r1, sp, #36	; 0x24
    979e:	2724      	movs	r7, #36	; 0x24
    97a0:	5df3      	ldrb	r3, [r6, r7]
    97a2:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    97a4:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    97a6:	b2c3      	uxtb	r3, r0
    97a8:	9301      	str	r3, [sp, #4]
    97aa:	0018      	movs	r0, r3
    97ac:	4b68      	ldr	r3, [pc, #416]	; (9950 <spi_init+0x1e8>)
    97ae:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    97b0:	9801      	ldr	r0, [sp, #4]
    97b2:	4b68      	ldr	r3, [pc, #416]	; (9954 <spi_init+0x1ec>)
    97b4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    97b6:	5df0      	ldrb	r0, [r6, r7]
    97b8:	2100      	movs	r1, #0
    97ba:	4b67      	ldr	r3, [pc, #412]	; (9958 <spi_init+0x1f0>)
    97bc:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    97be:	7833      	ldrb	r3, [r6, #0]
    97c0:	2b01      	cmp	r3, #1
    97c2:	d03f      	beq.n	9844 <spi_init+0xdc>
	if (config->mode == SPI_MODE_SLAVE) {
    97c4:	7833      	ldrb	r3, [r6, #0]
    97c6:	2b00      	cmp	r3, #0
    97c8:	d103      	bne.n	97d2 <spi_init+0x6a>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
    97ca:	6823      	ldr	r3, [r4, #0]
    97cc:	2208      	movs	r2, #8
    97ce:	4313      	orrs	r3, r2
    97d0:	6023      	str	r3, [r4, #0]
    97d2:	002b      	movs	r3, r5
    97d4:	330c      	adds	r3, #12
    97d6:	0029      	movs	r1, r5
    97d8:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    97da:	2200      	movs	r2, #0
    97dc:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    97de:	428b      	cmp	r3, r1
    97e0:	d1fc      	bne.n	97dc <spi_init+0x74>
	module->tx_buffer_ptr              = NULL;
    97e2:	2300      	movs	r3, #0
    97e4:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    97e6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    97e8:	2400      	movs	r4, #0
    97ea:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    97ec:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    97ee:	3336      	adds	r3, #54	; 0x36
    97f0:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    97f2:	3301      	adds	r3, #1
    97f4:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    97f6:	3301      	adds	r3, #1
    97f8:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    97fa:	3b35      	subs	r3, #53	; 0x35
    97fc:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    97fe:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    9800:	6828      	ldr	r0, [r5, #0]
    9802:	4b51      	ldr	r3, [pc, #324]	; (9948 <spi_init+0x1e0>)
    9804:	4798      	blx	r3
    9806:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    9808:	4954      	ldr	r1, [pc, #336]	; (995c <spi_init+0x1f4>)
    980a:	4b55      	ldr	r3, [pc, #340]	; (9960 <spi_init+0x1f8>)
    980c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    980e:	00bf      	lsls	r7, r7, #2
    9810:	4b54      	ldr	r3, [pc, #336]	; (9964 <spi_init+0x1fc>)
    9812:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    9814:	682f      	ldr	r7, [r5, #0]
    9816:	ab04      	add	r3, sp, #16
    9818:	2280      	movs	r2, #128	; 0x80
    981a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    981c:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    981e:	3a7f      	subs	r2, #127	; 0x7f
    9820:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9822:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    9824:	7833      	ldrb	r3, [r6, #0]
    9826:	2b00      	cmp	r3, #0
    9828:	d102      	bne.n	9830 <spi_init+0xc8>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    982a:	2200      	movs	r2, #0
    982c:	ab04      	add	r3, sp, #16
    982e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    9830:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    9832:	9305      	str	r3, [sp, #20]
    9834:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    9836:	9306      	str	r3, [sp, #24]
    9838:	6b33      	ldr	r3, [r6, #48]	; 0x30
    983a:	9307      	str	r3, [sp, #28]
    983c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    983e:	9308      	str	r3, [sp, #32]
    9840:	2400      	movs	r4, #0
    9842:	e00b      	b.n	985c <spi_init+0xf4>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    9844:	6823      	ldr	r3, [r4, #0]
    9846:	220c      	movs	r2, #12
    9848:	4313      	orrs	r3, r2
    984a:	6023      	str	r3, [r4, #0]
    984c:	e7ba      	b.n	97c4 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    984e:	0038      	movs	r0, r7
    9850:	4b45      	ldr	r3, [pc, #276]	; (9968 <spi_init+0x200>)
    9852:	4798      	blx	r3
    9854:	e00a      	b.n	986c <spi_init+0x104>
    9856:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    9858:	2c04      	cmp	r4, #4
    985a:	d010      	beq.n	987e <spi_init+0x116>
    985c:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    985e:	00a3      	lsls	r3, r4, #2
    9860:	aa02      	add	r2, sp, #8
    9862:	200c      	movs	r0, #12
    9864:	1812      	adds	r2, r2, r0
    9866:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    9868:	2800      	cmp	r0, #0
    986a:	d0f0      	beq.n	984e <spi_init+0xe6>
		if (current_pinmux != PINMUX_UNUSED) {
    986c:	1c43      	adds	r3, r0, #1
    986e:	d0f2      	beq.n	9856 <spi_init+0xee>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    9870:	a904      	add	r1, sp, #16
    9872:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    9874:	0c00      	lsrs	r0, r0, #16
    9876:	b2c0      	uxtb	r0, r0
    9878:	4b3c      	ldr	r3, [pc, #240]	; (996c <spi_init+0x204>)
    987a:	4798      	blx	r3
    987c:	e7eb      	b.n	9856 <spi_init+0xee>
	module->mode             = config->mode;
    987e:	7833      	ldrb	r3, [r6, #0]
    9880:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    9882:	7c33      	ldrb	r3, [r6, #16]
    9884:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    9886:	7cb3      	ldrb	r3, [r6, #18]
    9888:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    988a:	7d33      	ldrb	r3, [r6, #20]
    988c:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    988e:	2200      	movs	r2, #0
    9890:	ab02      	add	r3, sp, #8
    9892:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    9894:	7833      	ldrb	r3, [r6, #0]
    9896:	2b01      	cmp	r3, #1
    9898:	d012      	beq.n	98c0 <spi_init+0x158>
	if (config->mode == SPI_MODE_SLAVE) {
    989a:	7833      	ldrb	r3, [r6, #0]
    989c:	2b00      	cmp	r3, #0
    989e:	d126      	bne.n	98ee <spi_init+0x186>
		ctrla = config->mode_specific.slave.frame_format;
    98a0:	69b0      	ldr	r0, [r6, #24]
		ctrlb = config->mode_specific.slave.address_mode;
    98a2:	8bb2      	ldrh	r2, [r6, #28]
		spi_module->ADDR.reg |=
    98a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
    98a6:	7ff1      	ldrb	r1, [r6, #31]
    98a8:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
    98aa:	7fb4      	ldrb	r4, [r6, #30]
    98ac:	4321      	orrs	r1, r4
		spi_module->ADDR.reg |=
    98ae:	4319      	orrs	r1, r3
    98b0:	6279      	str	r1, [r7, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
    98b2:	2320      	movs	r3, #32
    98b4:	5cf3      	ldrb	r3, [r6, r3]
    98b6:	2b00      	cmp	r3, #0
    98b8:	d01b      	beq.n	98f2 <spi_init+0x18a>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
    98ba:	2340      	movs	r3, #64	; 0x40
    98bc:	431a      	orrs	r2, r3
    98be:	e018      	b.n	98f2 <spi_init+0x18a>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    98c0:	6828      	ldr	r0, [r5, #0]
    98c2:	4b21      	ldr	r3, [pc, #132]	; (9948 <spi_init+0x1e0>)
    98c4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    98c6:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    98c8:	b2c0      	uxtb	r0, r0
    98ca:	4b29      	ldr	r3, [pc, #164]	; (9970 <spi_init+0x208>)
    98cc:	4798      	blx	r3
    98ce:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    98d0:	ab02      	add	r3, sp, #8
    98d2:	1d9a      	adds	r2, r3, #6
    98d4:	69b0      	ldr	r0, [r6, #24]
    98d6:	4b27      	ldr	r3, [pc, #156]	; (9974 <spi_init+0x20c>)
    98d8:	4798      	blx	r3
    98da:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    98dc:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    98de:	2b00      	cmp	r3, #0
    98e0:	d000      	beq.n	98e4 <spi_init+0x17c>
    98e2:	e74b      	b.n	977c <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    98e4:	ab02      	add	r3, sp, #8
    98e6:	3306      	adds	r3, #6
    98e8:	781b      	ldrb	r3, [r3, #0]
    98ea:	733b      	strb	r3, [r7, #12]
    98ec:	e7d5      	b.n	989a <spi_init+0x132>
	uint32_t ctrlb = 0;
    98ee:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
    98f0:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
    98f2:	6873      	ldr	r3, [r6, #4]
    98f4:	68b1      	ldr	r1, [r6, #8]
    98f6:	430b      	orrs	r3, r1
    98f8:	68f1      	ldr	r1, [r6, #12]
    98fa:	430b      	orrs	r3, r1
    98fc:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
    98fe:	7c31      	ldrb	r1, [r6, #16]
    9900:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
    9902:	7c71      	ldrb	r1, [r6, #17]
    9904:	2900      	cmp	r1, #0
    9906:	d103      	bne.n	9910 <spi_init+0x1a8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    9908:	491b      	ldr	r1, [pc, #108]	; (9978 <spi_init+0x210>)
    990a:	7889      	ldrb	r1, [r1, #2]
    990c:	0789      	lsls	r1, r1, #30
    990e:	d501      	bpl.n	9914 <spi_init+0x1ac>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    9910:	2180      	movs	r1, #128	; 0x80
    9912:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    9914:	7cb1      	ldrb	r1, [r6, #18]
    9916:	2900      	cmp	r1, #0
    9918:	d002      	beq.n	9920 <spi_init+0x1b8>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    991a:	2180      	movs	r1, #128	; 0x80
    991c:	0289      	lsls	r1, r1, #10
    991e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    9920:	7cf1      	ldrb	r1, [r6, #19]
    9922:	2900      	cmp	r1, #0
    9924:	d002      	beq.n	992c <spi_init+0x1c4>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    9926:	2180      	movs	r1, #128	; 0x80
    9928:	0089      	lsls	r1, r1, #2
    992a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    992c:	7d31      	ldrb	r1, [r6, #20]
    992e:	2900      	cmp	r1, #0
    9930:	d002      	beq.n	9938 <spi_init+0x1d0>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    9932:	2180      	movs	r1, #128	; 0x80
    9934:	0189      	lsls	r1, r1, #6
    9936:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    9938:	6839      	ldr	r1, [r7, #0]
    993a:	430b      	orrs	r3, r1
    993c:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    993e:	687b      	ldr	r3, [r7, #4]
    9940:	431a      	orrs	r2, r3
    9942:	607a      	str	r2, [r7, #4]
	return STATUS_OK;
    9944:	2000      	movs	r0, #0
    9946:	e719      	b.n	977c <spi_init+0x14>
    9948:	00009661 	.word	0x00009661
    994c:	40000400 	.word	0x40000400
    9950:	0000abc5 	.word	0x0000abc5
    9954:	0000ab39 	.word	0x0000ab39
    9958:	0000949d 	.word	0x0000949d
    995c:	00009a71 	.word	0x00009a71
    9960:	0000969d 	.word	0x0000969d
    9964:	200007c4 	.word	0x200007c4
    9968:	000094e9 	.word	0x000094e9
    996c:	0000acbd 	.word	0x0000acbd
    9970:	0000abe1 	.word	0x0000abe1
    9974:	000093df 	.word	0x000093df
    9978:	41002000 	.word	0x41002000

0000997c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    997c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    997e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    9980:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    9982:	2c01      	cmp	r4, #1
    9984:	d001      	beq.n	998a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    9986:	0018      	movs	r0, r3
    9988:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    998a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    998c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    998e:	2c00      	cmp	r4, #0
    9990:	d1f9      	bne.n	9986 <spi_select_slave+0xa>
		if (select) {
    9992:	2a00      	cmp	r2, #0
    9994:	d058      	beq.n	9a48 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    9996:	784b      	ldrb	r3, [r1, #1]
    9998:	2b00      	cmp	r3, #0
    999a:	d044      	beq.n	9a26 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    999c:	6803      	ldr	r3, [r0, #0]
    999e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    99a0:	07db      	lsls	r3, r3, #31
    99a2:	d410      	bmi.n	99c6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    99a4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    99a6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    99a8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    99aa:	2900      	cmp	r1, #0
    99ac:	d104      	bne.n	99b8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    99ae:	0953      	lsrs	r3, r2, #5
    99b0:	01db      	lsls	r3, r3, #7
    99b2:	492e      	ldr	r1, [pc, #184]	; (9a6c <spi_select_slave+0xf0>)
    99b4:	468c      	mov	ip, r1
    99b6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    99b8:	211f      	movs	r1, #31
    99ba:	4011      	ands	r1, r2
    99bc:	2201      	movs	r2, #1
    99be:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    99c0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    99c2:	2305      	movs	r3, #5
    99c4:	e7df      	b.n	9986 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    99c6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    99c8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    99ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    99cc:	2c00      	cmp	r4, #0
    99ce:	d104      	bne.n	99da <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    99d0:	0953      	lsrs	r3, r2, #5
    99d2:	01db      	lsls	r3, r3, #7
    99d4:	4c25      	ldr	r4, [pc, #148]	; (9a6c <spi_select_slave+0xf0>)
    99d6:	46a4      	mov	ip, r4
    99d8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    99da:	241f      	movs	r4, #31
    99dc:	4014      	ands	r4, r2
    99de:	2201      	movs	r2, #1
    99e0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    99e2:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    99e4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    99e6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    99e8:	07d2      	lsls	r2, r2, #31
    99ea:	d501      	bpl.n	99f0 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    99ec:	788a      	ldrb	r2, [r1, #2]
    99ee:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    99f0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    99f2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    99f4:	2a00      	cmp	r2, #0
    99f6:	d1c6      	bne.n	9986 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    99f8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    99fa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    99fc:	7e13      	ldrb	r3, [r2, #24]
    99fe:	420b      	tst	r3, r1
    9a00:	d0fc      	beq.n	99fc <spi_select_slave+0x80>
    9a02:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    9a04:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    9a06:	0749      	lsls	r1, r1, #29
    9a08:	d5bd      	bpl.n	9986 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9a0a:	8b53      	ldrh	r3, [r2, #26]
    9a0c:	075b      	lsls	r3, r3, #29
    9a0e:	d501      	bpl.n	9a14 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9a10:	2304      	movs	r3, #4
    9a12:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9a14:	7983      	ldrb	r3, [r0, #6]
    9a16:	2b01      	cmp	r3, #1
    9a18:	d002      	beq.n	9a20 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    9a1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9a1c:	2300      	movs	r3, #0
    9a1e:	e7b2      	b.n	9986 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    9a20:	6a93      	ldr	r3, [r2, #40]	; 0x28
    9a22:	2300      	movs	r3, #0
    9a24:	e7af      	b.n	9986 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    9a26:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    9a28:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9a2a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9a2c:	2900      	cmp	r1, #0
    9a2e:	d104      	bne.n	9a3a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    9a30:	0953      	lsrs	r3, r2, #5
    9a32:	01db      	lsls	r3, r3, #7
    9a34:	490d      	ldr	r1, [pc, #52]	; (9a6c <spi_select_slave+0xf0>)
    9a36:	468c      	mov	ip, r1
    9a38:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9a3a:	211f      	movs	r1, #31
    9a3c:	4011      	ands	r1, r2
    9a3e:	2201      	movs	r2, #1
    9a40:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    9a42:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    9a44:	2300      	movs	r3, #0
    9a46:	e79e      	b.n	9986 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    9a48:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    9a4a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    9a4c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9a4e:	2900      	cmp	r1, #0
    9a50:	d104      	bne.n	9a5c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    9a52:	0953      	lsrs	r3, r2, #5
    9a54:	01db      	lsls	r3, r3, #7
    9a56:	4905      	ldr	r1, [pc, #20]	; (9a6c <spi_select_slave+0xf0>)
    9a58:	468c      	mov	ip, r1
    9a5a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9a5c:	211f      	movs	r1, #31
    9a5e:	4011      	ands	r1, r2
    9a60:	2201      	movs	r2, #1
    9a62:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    9a64:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    9a66:	2300      	movs	r3, #0
    9a68:	e78d      	b.n	9986 <spi_select_slave+0xa>
    9a6a:	46c0      	nop			; (mov r8, r8)
    9a6c:	41004400 	.word	0x41004400

00009a70 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    9a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    9a72:	0080      	lsls	r0, r0, #2
    9a74:	4b85      	ldr	r3, [pc, #532]	; (9c8c <_spi_interrupt_handler+0x21c>)
    9a76:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9a78:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    9a7a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    9a7c:	5ce3      	ldrb	r3, [r4, r3]
    9a7e:	2236      	movs	r2, #54	; 0x36
    9a80:	5ca7      	ldrb	r7, [r4, r2]
    9a82:	401f      	ands	r7, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    9a84:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    9a86:	7db5      	ldrb	r5, [r6, #22]
    9a88:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    9a8a:	07eb      	lsls	r3, r5, #31
    9a8c:	d52e      	bpl.n	9aec <_spi_interrupt_handler+0x7c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    9a8e:	7963      	ldrb	r3, [r4, #5]
    9a90:	2b01      	cmp	r3, #1
    9a92:	d025      	beq.n	9ae0 <_spi_interrupt_handler+0x70>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
#  if CONF_SPI_SLAVE_ENABLE == true
		|| ((module->mode == SPI_MODE_SLAVE) &&
    9a94:	2b00      	cmp	r3, #0
    9a96:	d129      	bne.n	9aec <_spi_interrupt_handler+0x7c>
			(module->dir != SPI_DIRECTION_READ))
    9a98:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_SLAVE) &&
    9a9a:	2b00      	cmp	r3, #0
    9a9c:	d026      	beq.n	9aec <_spi_interrupt_handler+0x7c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9a9e:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    9aa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    9aa2:	7813      	ldrb	r3, [r2, #0]
    9aa4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    9aa6:	1c50      	adds	r0, r2, #1
    9aa8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9aaa:	79a0      	ldrb	r0, [r4, #6]
    9aac:	2801      	cmp	r0, #1
    9aae:	d100      	bne.n	9ab2 <_spi_interrupt_handler+0x42>
    9ab0:	e069      	b.n	9b86 <_spi_interrupt_handler+0x116>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    9ab2:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    9ab4:	05db      	lsls	r3, r3, #23
    9ab6:	0ddb      	lsrs	r3, r3, #23
    9ab8:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    9aba:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    9abc:	3b01      	subs	r3, #1
    9abe:	b29b      	uxth	r3, r3
    9ac0:	86a3      	strh	r3, [r4, #52]	; 0x34
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    9ac2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    9ac4:	b29b      	uxth	r3, r3
    9ac6:	2b00      	cmp	r3, #0
    9ac8:	d110      	bne.n	9aec <_spi_interrupt_handler+0x7c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    9aca:	3301      	adds	r3, #1
    9acc:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    9ace:	7a63      	ldrb	r3, [r4, #9]
    9ad0:	2b01      	cmp	r3, #1
    9ad2:	d10b      	bne.n	9aec <_spi_interrupt_handler+0x7c>
    9ad4:	79e3      	ldrb	r3, [r4, #7]
    9ad6:	2b00      	cmp	r3, #0
    9ad8:	d108      	bne.n	9aec <_spi_interrupt_handler+0x7c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9ada:	3302      	adds	r3, #2
    9adc:	75b3      	strb	r3, [r6, #22]
    9ade:	e005      	b.n	9aec <_spi_interrupt_handler+0x7c>
			(module->dir == SPI_DIRECTION_READ)) {
    9ae0:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    9ae2:	2b00      	cmp	r3, #0
    9ae4:	d03e      	beq.n	9b64 <_spi_interrupt_handler+0xf4>
			(module->dir != SPI_DIRECTION_READ))
    9ae6:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    9ae8:	2b00      	cmp	r3, #0
    9aea:	d1d8      	bne.n	9a9e <_spi_interrupt_handler+0x2e>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    9aec:	076b      	lsls	r3, r5, #29
    9aee:	d511      	bpl.n	9b14 <_spi_interrupt_handler+0xa4>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9af0:	8b73      	ldrh	r3, [r6, #26]
    9af2:	075b      	lsls	r3, r3, #29
    9af4:	d551      	bpl.n	9b9a <_spi_interrupt_handler+0x12a>
			if (module->dir != SPI_DIRECTION_WRITE) {
    9af6:	7a63      	ldrb	r3, [r4, #9]
    9af8:	2b01      	cmp	r3, #1
    9afa:	d008      	beq.n	9b0e <_spi_interrupt_handler+0x9e>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    9afc:	221e      	movs	r2, #30
    9afe:	2338      	movs	r3, #56	; 0x38
    9b00:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    9b02:	3b35      	subs	r3, #53	; 0x35
    9b04:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    9b06:	3302      	adds	r3, #2
    9b08:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    9b0a:	073b      	lsls	r3, r7, #28
    9b0c:	d441      	bmi.n	9b92 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    9b0e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9b10:	2304      	movs	r3, #4
    9b12:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    9b14:	07ab      	lsls	r3, r5, #30
    9b16:	d515      	bpl.n	9b44 <_spi_interrupt_handler+0xd4>
#  if CONF_SPI_SLAVE_ENABLE == true
		if (module->mode == SPI_MODE_SLAVE) {
    9b18:	7963      	ldrb	r3, [r4, #5]
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	d10e      	bne.n	9b3c <_spi_interrupt_handler+0xcc>
			/* Transaction ended by master */

			/* Disable interrupts */
			spi_hw->INTENCLR.reg =
    9b1e:	3307      	adds	r3, #7
    9b20:	7533      	strb	r3, [r6, #20]
					SPI_INTERRUPT_FLAG_TX_COMPLETE |
					SPI_INTERRUPT_FLAG_RX_COMPLETE |
					SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			/* Clear interrupt flag */
			spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9b22:	3b05      	subs	r3, #5
    9b24:	7633      	strb	r3, [r6, #24]


			/* Reset all status information */
			module->dir = SPI_DIRECTION_IDLE;
    9b26:	3301      	adds	r3, #1
    9b28:	7263      	strb	r3, [r4, #9]
			module->remaining_tx_buffer_length = 0;
    9b2a:	2300      	movs	r3, #0
    9b2c:	86a3      	strh	r3, [r4, #52]	; 0x34
			module->remaining_rx_buffer_length = 0;
    9b2e:	8623      	strh	r3, [r4, #48]	; 0x30
			module->status = STATUS_OK;
    9b30:	3338      	adds	r3, #56	; 0x38
    9b32:	2200      	movs	r2, #0
    9b34:	54e2      	strb	r2, [r4, r3]

			if (callback_mask &
    9b36:	06fb      	lsls	r3, r7, #27
    9b38:	d500      	bpl.n	9b3c <_spi_interrupt_handler+0xcc>
    9b3a:	e07f      	b.n	9c3c <_spi_interrupt_handler+0x1cc>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    9b3c:	7963      	ldrb	r3, [r4, #5]
    9b3e:	2b01      	cmp	r3, #1
    9b40:	d100      	bne.n	9b44 <_spi_interrupt_handler+0xd4>
    9b42:	e07f      	b.n	9c44 <_spi_interrupt_handler+0x1d4>
	}

#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
#  if CONF_SPI_SLAVE_ENABLE == true
		/* When a high to low transition is detected on the _SS pin in slave mode */
		if (interrupt_status & SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW) {
    9b44:	072b      	lsls	r3, r5, #28
    9b46:	d508      	bpl.n	9b5a <_spi_interrupt_handler+0xea>
			if (module->mode == SPI_MODE_SLAVE) {
    9b48:	7963      	ldrb	r3, [r4, #5]
    9b4a:	2b00      	cmp	r3, #0
    9b4c:	d105      	bne.n	9b5a <_spi_interrupt_handler+0xea>
				/* Disable interrupts */
				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    9b4e:	3308      	adds	r3, #8
    9b50:	7533      	strb	r3, [r6, #20]
				/* Clear interrupt flag */
				spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_SLAVE_SELECT_LOW;
    9b52:	7633      	strb	r3, [r6, #24]

				if (callback_mask & (1 << SPI_CALLBACK_SLAVE_SELECT_LOW)) {
    9b54:	06bb      	lsls	r3, r7, #26
    9b56:	d500      	bpl.n	9b5a <_spi_interrupt_handler+0xea>
    9b58:	e08a      	b.n	9c70 <_spi_interrupt_handler+0x200>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    9b5a:	b26d      	sxtb	r5, r5
    9b5c:	2d00      	cmp	r5, #0
    9b5e:	da00      	bge.n	9b62 <_spi_interrupt_handler+0xf2>
    9b60:	e08a      	b.n	9c78 <_spi_interrupt_handler+0x208>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    9b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	spi_hw->DATA.reg = dummy_write;
    9b64:	4b4a      	ldr	r3, [pc, #296]	; (9c90 <_spi_interrupt_handler+0x220>)
    9b66:	881b      	ldrh	r3, [r3, #0]
    9b68:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    9b6a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    9b6c:	3b01      	subs	r3, #1
    9b6e:	b29b      	uxth	r3, r3
    9b70:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    9b72:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    9b74:	b29b      	uxth	r3, r3
    9b76:	2b00      	cmp	r3, #0
    9b78:	d101      	bne.n	9b7e <_spi_interrupt_handler+0x10e>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    9b7a:	3301      	adds	r3, #1
    9b7c:	7533      	strb	r3, [r6, #20]
		|| ((module->mode == SPI_MODE_MASTER) &&
    9b7e:	7963      	ldrb	r3, [r4, #5]
		if (0
    9b80:	2b01      	cmp	r3, #1
    9b82:	d0b0      	beq.n	9ae6 <_spi_interrupt_handler+0x76>
    9b84:	e786      	b.n	9a94 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    9b86:	7850      	ldrb	r0, [r2, #1]
    9b88:	0200      	lsls	r0, r0, #8
    9b8a:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    9b8c:	3202      	adds	r2, #2
    9b8e:	62e2      	str	r2, [r4, #44]	; 0x2c
    9b90:	e790      	b.n	9ab4 <_spi_interrupt_handler+0x44>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    9b92:	0020      	movs	r0, r4
    9b94:	69a3      	ldr	r3, [r4, #24]
    9b96:	4798      	blx	r3
    9b98:	e7b9      	b.n	9b0e <_spi_interrupt_handler+0x9e>
			if (module->dir == SPI_DIRECTION_WRITE) {
    9b9a:	7a63      	ldrb	r3, [r4, #9]
    9b9c:	2b01      	cmp	r3, #1
    9b9e:	d027      	beq.n	9bf0 <_spi_interrupt_handler+0x180>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9ba0:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    9ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9ba4:	05db      	lsls	r3, r3, #23
    9ba6:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    9ba8:	b2da      	uxtb	r2, r3
    9baa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    9bac:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    9bae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    9bb0:	1c51      	adds	r1, r2, #1
    9bb2:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    9bb4:	79a1      	ldrb	r1, [r4, #6]
    9bb6:	2901      	cmp	r1, #1
    9bb8:	d033      	beq.n	9c22 <_spi_interrupt_handler+0x1b2>
	module->remaining_rx_buffer_length--;
    9bba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    9bbc:	3b01      	subs	r3, #1
    9bbe:	b29b      	uxth	r3, r3
    9bc0:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    9bc2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    9bc4:	b29b      	uxth	r3, r3
    9bc6:	2b00      	cmp	r3, #0
    9bc8:	d1a4      	bne.n	9b14 <_spi_interrupt_handler+0xa4>
					module->status = STATUS_OK;
    9bca:	2200      	movs	r2, #0
    9bcc:	3338      	adds	r3, #56	; 0x38
    9bce:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    9bd0:	3b34      	subs	r3, #52	; 0x34
    9bd2:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    9bd4:	7a63      	ldrb	r3, [r4, #9]
    9bd6:	2b02      	cmp	r3, #2
    9bd8:	d029      	beq.n	9c2e <_spi_interrupt_handler+0x1be>
					} else if (module->dir == SPI_DIRECTION_READ) {
    9bda:	7a63      	ldrb	r3, [r4, #9]
    9bdc:	2b00      	cmp	r3, #0
    9bde:	d000      	beq.n	9be2 <_spi_interrupt_handler+0x172>
    9be0:	e798      	b.n	9b14 <_spi_interrupt_handler+0xa4>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    9be2:	07bb      	lsls	r3, r7, #30
    9be4:	d400      	bmi.n	9be8 <_spi_interrupt_handler+0x178>
    9be6:	e795      	b.n	9b14 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    9be8:	0020      	movs	r0, r4
    9bea:	6923      	ldr	r3, [r4, #16]
    9bec:	4798      	blx	r3
    9bee:	e791      	b.n	9b14 <_spi_interrupt_handler+0xa4>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    9bf0:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    9bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    9bf4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    9bf6:	3b01      	subs	r3, #1
    9bf8:	b29b      	uxth	r3, r3
    9bfa:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    9bfc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    9bfe:	b29b      	uxth	r3, r3
    9c00:	2b00      	cmp	r3, #0
    9c02:	d000      	beq.n	9c06 <_spi_interrupt_handler+0x196>
    9c04:	e786      	b.n	9b14 <_spi_interrupt_handler+0xa4>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    9c06:	3304      	adds	r3, #4
    9c08:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    9c0a:	2200      	movs	r2, #0
    9c0c:	3334      	adds	r3, #52	; 0x34
    9c0e:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    9c10:	3b35      	subs	r3, #53	; 0x35
    9c12:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    9c14:	07fb      	lsls	r3, r7, #31
    9c16:	d400      	bmi.n	9c1a <_spi_interrupt_handler+0x1aa>
    9c18:	e77c      	b.n	9b14 <_spi_interrupt_handler+0xa4>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    9c1a:	0020      	movs	r0, r4
    9c1c:	68e3      	ldr	r3, [r4, #12]
    9c1e:	4798      	blx	r3
    9c20:	e778      	b.n	9b14 <_spi_interrupt_handler+0xa4>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    9c22:	0a1b      	lsrs	r3, r3, #8
    9c24:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    9c26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9c28:	3301      	adds	r3, #1
    9c2a:	62a3      	str	r3, [r4, #40]	; 0x28
    9c2c:	e7c5      	b.n	9bba <_spi_interrupt_handler+0x14a>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    9c2e:	077b      	lsls	r3, r7, #29
    9c30:	d400      	bmi.n	9c34 <_spi_interrupt_handler+0x1c4>
    9c32:	e76f      	b.n	9b14 <_spi_interrupt_handler+0xa4>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    9c34:	0020      	movs	r0, r4
    9c36:	6963      	ldr	r3, [r4, #20]
    9c38:	4798      	blx	r3
    9c3a:	e76b      	b.n	9b14 <_spi_interrupt_handler+0xa4>
			(module->callback[SPI_CALLBACK_SLAVE_TRANSMISSION_COMPLETE])
    9c3c:	0020      	movs	r0, r4
    9c3e:	69e3      	ldr	r3, [r4, #28]
    9c40:	4798      	blx	r3
    9c42:	e77b      	b.n	9b3c <_spi_interrupt_handler+0xcc>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9c44:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    9c46:	2b01      	cmp	r3, #1
    9c48:	d000      	beq.n	9c4c <_spi_interrupt_handler+0x1dc>
    9c4a:	e786      	b.n	9b5a <_spi_interrupt_handler+0xea>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9c4c:	79e3      	ldrb	r3, [r4, #7]
    9c4e:	2b00      	cmp	r3, #0
    9c50:	d000      	beq.n	9c54 <_spi_interrupt_handler+0x1e4>
    9c52:	e782      	b.n	9b5a <_spi_interrupt_handler+0xea>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    9c54:	3302      	adds	r3, #2
    9c56:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    9c58:	3301      	adds	r3, #1
    9c5a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    9c5c:	2200      	movs	r2, #0
    9c5e:	3335      	adds	r3, #53	; 0x35
    9c60:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    9c62:	07fb      	lsls	r3, r7, #31
    9c64:	d400      	bmi.n	9c68 <_spi_interrupt_handler+0x1f8>
    9c66:	e76d      	b.n	9b44 <_spi_interrupt_handler+0xd4>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    9c68:	0020      	movs	r0, r4
    9c6a:	68e3      	ldr	r3, [r4, #12]
    9c6c:	4798      	blx	r3
    9c6e:	e769      	b.n	9b44 <_spi_interrupt_handler+0xd4>
					(module->callback[SPI_CALLBACK_SLAVE_SELECT_LOW])(module);
    9c70:	0020      	movs	r0, r4
    9c72:	6a23      	ldr	r3, [r4, #32]
    9c74:	4798      	blx	r3
    9c76:	e770      	b.n	9b5a <_spi_interrupt_handler+0xea>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    9c78:	2380      	movs	r3, #128	; 0x80
    9c7a:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    9c7c:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    9c7e:	067b      	lsls	r3, r7, #25
    9c80:	d400      	bmi.n	9c84 <_spi_interrupt_handler+0x214>
    9c82:	e76e      	b.n	9b62 <_spi_interrupt_handler+0xf2>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    9c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9c86:	0020      	movs	r0, r4
    9c88:	4798      	blx	r3
}
    9c8a:	e76a      	b.n	9b62 <_spi_interrupt_handler+0xf2>
    9c8c:	200007c4 	.word	0x200007c4
    9c90:	200007dc 	.word	0x200007dc

00009c94 <_spi_master_vec_int_handler>:
 *
 * \param[in] sercom_index SERCOM instance number passed from the master SERCOM
 * driver.
 */
static void _spi_master_vec_int_handler(uint8_t sercom_index)
{
    9c94:	b570      	push	{r4, r5, r6, lr}
	struct spi_master_vec_module *const module =
    9c96:	0080      	lsls	r0, r0, #2
    9c98:	4b40      	ldr	r3, [pc, #256]	; (9d9c <_spi_master_vec_int_handler+0x108>)
    9c9a:	58c3      	ldr	r3, [r0, r3]
			_sercom_instances[sercom_index];
	enum _spi_master_vec_direction dir = module->direction;
    9c9c:	795c      	ldrb	r4, [r3, #5]
    9c9e:	b2e4      	uxtb	r4, r4
	SercomSpi *const spi_hw = &(module->sercom->SPI);
    9ca0:	6818      	ldr	r0, [r3, #0]
	uint8_t int_status;

	int_status = spi_hw->INTFLAG.reg ;
    9ca2:	7e02      	ldrb	r2, [r0, #24]
    int_status &= spi_hw->INTENSET.reg;
    9ca4:	7d81      	ldrb	r1, [r0, #22]
    9ca6:	400a      	ands	r2, r1

	if (int_status & SERCOM_SPI_INTFLAG_DRE) {
    9ca8:	07d1      	lsls	r1, r2, #31
    9caa:	d504      	bpl.n	9cb6 <_spi_master_vec_int_handler+0x22>
		uint_fast8_t tx_lead_on_rx = module->tx_lead_on_rx;
    9cac:	6959      	ldr	r1, [r3, #20]

		/* If TX is ahead of RX by 2+ bytes, allow RX to catch up.
		 * Note: will only happen _once_ per READ or BOTH.
		 */
		if ((tx_lead_on_rx >= 2) && (dir != SPI_MASTER_VEC_DIRECTION_WRITE)) {
    9cae:	2901      	cmp	r1, #1
    9cb0:	d91c      	bls.n	9cec <_spi_master_vec_int_handler+0x58>
    9cb2:	2c01      	cmp	r4, #1
    9cb4:	d063      	beq.n	9d7e <_spi_master_vec_int_handler+0xea>
			}
		}
	}

	/* For READ and BOTH, store the received byte */
	if (int_status & SERCOM_SPI_INTFLAG_RXC) {
    9cb6:	0751      	lsls	r1, r2, #29
    9cb8:	d50f      	bpl.n	9cda <_spi_master_vec_int_handler+0x46>
		spi_master_vec_buflen_t rx_length;
		uint8_t *rx_head_ptr;

		rx_head_ptr = module->rx_head_ptr;
    9cba:	68d9      	ldr	r1, [r3, #12]
		if (rx_head_ptr != NULL) {
    9cbc:	2900      	cmp	r1, #0
    9cbe:	d041      	beq.n	9d44 <_spi_master_vec_int_handler+0xb0>
			*(rx_head_ptr++) = spi_hw->DATA.reg;
    9cc0:	1c4e      	adds	r6, r1, #1
    9cc2:	6a85      	ldr	r5, [r0, #40]	; 0x28
    9cc4:	700d      	strb	r5, [r1, #0]
		} else {
			uint8_t dummy;
			dummy = spi_hw->DATA.reg;
			UNUSED(dummy);
		}
		module->tx_lead_on_rx--;
    9cc6:	6959      	ldr	r1, [r3, #20]
    9cc8:	3901      	subs	r1, #1
    9cca:	6159      	str	r1, [r3, #20]

		/* Check if this was the last byte to receive */
		rx_length = module->rx_length - 1;
    9ccc:	8919      	ldrh	r1, [r3, #8]
    9cce:	3901      	subs	r1, #1
    9cd0:	b289      	uxth	r1, r1

		if (rx_length) {
    9cd2:	2900      	cmp	r1, #0
    9cd4:	d039      	beq.n	9d4a <_spi_master_vec_int_handler+0xb6>
			module->rx_head_ptr = rx_head_ptr;
    9cd6:	60de      	str	r6, [r3, #12]
			module->rx_length = rx_length;
    9cd8:	8119      	strh	r1, [r3, #8]
			}
		}
	}

	/* For WRITE */
	if (int_status & SERCOM_SPI_INTFLAG_TXC) {
    9cda:	0792      	lsls	r2, r2, #30
    9cdc:	d505      	bpl.n	9cea <_spi_master_vec_int_handler+0x56>
		/* End transaction here, since last byte has been sent */
		spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_TXC;
    9cde:	2202      	movs	r2, #2
    9ce0:	7502      	strb	r2, [r0, #20]

		dir = SPI_MASTER_VEC_DIRECTION_IDLE;
		module->direction = dir;
    9ce2:	3201      	adds	r2, #1
    9ce4:	715a      	strb	r2, [r3, #5]
		module->status = STATUS_OK;
    9ce6:	2200      	movs	r2, #0
    9ce8:	719a      	strb	r2, [r3, #6]
#ifdef CONF_SPI_MASTER_VEC_OS_SUPPORT
		CONF_SPI_MASTER_VEC_GIVE_SEMAPHORE_FROM_ISR(module->busy_semaphore);
#endif
	}
}
    9cea:	bd70      	pop	{r4, r5, r6, pc}
			module->tx_lead_on_rx = ++tx_lead_on_rx;
    9cec:	3101      	adds	r1, #1
    9cee:	6159      	str	r1, [r3, #20]
			if (dir == SPI_MASTER_VEC_DIRECTION_READ) {
    9cf0:	2c00      	cmp	r4, #0
    9cf2:	d146      	bne.n	9d82 <_spi_master_vec_int_handler+0xee>
				spi_hw->DATA.reg = 0;
    9cf4:	6284      	str	r4, [r0, #40]	; 0x28
				tx_lead_limit = (module->rx_bufdesc_ptr + 1)->length;
    9cf6:	699c      	ldr	r4, [r3, #24]
    9cf8:	89a6      	ldrh	r6, [r4, #12]
				if (!tx_lead_limit || !(module->rx_bufdesc_ptr + 2)->length) {
    9cfa:	2e00      	cmp	r6, #0
    9cfc:	d004      	beq.n	9d08 <_spi_master_vec_int_handler+0x74>
    9cfe:	699c      	ldr	r4, [r3, #24]
    9d00:	8aa5      	ldrh	r5, [r4, #20]
    9d02:	2400      	movs	r4, #0
    9d04:	2d00      	cmp	r5, #0
    9d06:	d1d6      	bne.n	9cb6 <_spi_master_vec_int_handler+0x22>
					tx_lead_limit += module->rx_length;
    9d08:	891d      	ldrh	r5, [r3, #8]
    9d0a:	19ad      	adds	r5, r5, r6
    9d0c:	2400      	movs	r4, #0
					if (tx_lead_on_rx >= tx_lead_limit) {
    9d0e:	428d      	cmp	r5, r1
    9d10:	d8d1      	bhi.n	9cb6 <_spi_master_vec_int_handler+0x22>
						spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_DRE;
    9d12:	2101      	movs	r1, #1
    9d14:	7501      	strb	r1, [r0, #20]
    9d16:	e7ce      	b.n	9cb6 <_spi_master_vec_int_handler+0x22>
					tx_length = (++module->tx_bufdesc_ptr)->length;
    9d18:	69dd      	ldr	r5, [r3, #28]
    9d1a:	002e      	movs	r6, r5
    9d1c:	3608      	adds	r6, #8
    9d1e:	61de      	str	r6, [r3, #28]
    9d20:	89ad      	ldrh	r5, [r5, #12]
					if (tx_length) {
    9d22:	2d00      	cmp	r5, #0
    9d24:	d004      	beq.n	9d30 <_spi_master_vec_int_handler+0x9c>
						module->tx_head_ptr = module->tx_bufdesc_ptr->data;
    9d26:	69d9      	ldr	r1, [r3, #28]
    9d28:	6809      	ldr	r1, [r1, #0]
    9d2a:	6119      	str	r1, [r3, #16]
						module->tx_length = tx_length;
    9d2c:	815d      	strh	r5, [r3, #10]
    9d2e:	e7c2      	b.n	9cb6 <_spi_master_vec_int_handler+0x22>
						if (dir == SPI_MASTER_VEC_DIRECTION_WRITE) {
    9d30:	2c01      	cmp	r4, #1
    9d32:	d002      	beq.n	9d3a <_spi_master_vec_int_handler+0xa6>
							module->direction = dir;
    9d34:	2400      	movs	r4, #0
    9d36:	715c      	strb	r4, [r3, #5]
							goto check_for_read_end;
    9d38:	e7dd      	b.n	9cf6 <_spi_master_vec_int_handler+0x62>
							spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_DRE;
    9d3a:	2101      	movs	r1, #1
    9d3c:	7501      	strb	r1, [r0, #20]
							spi_hw->INTENSET.reg = SERCOM_SPI_INTFLAG_TXC;
    9d3e:	3101      	adds	r1, #1
    9d40:	7581      	strb	r1, [r0, #22]
    9d42:	e7b8      	b.n	9cb6 <_spi_master_vec_int_handler+0x22>
			dummy = spi_hw->DATA.reg;
    9d44:	6a85      	ldr	r5, [r0, #40]	; 0x28
		rx_head_ptr = module->rx_head_ptr;
    9d46:	000e      	movs	r6, r1
    9d48:	e7bd      	b.n	9cc6 <_spi_master_vec_int_handler+0x32>
			rx_length = (++module->rx_bufdesc_ptr)->length;
    9d4a:	6999      	ldr	r1, [r3, #24]
    9d4c:	000d      	movs	r5, r1
    9d4e:	3508      	adds	r5, #8
    9d50:	619d      	str	r5, [r3, #24]
    9d52:	8989      	ldrh	r1, [r1, #12]
			if (rx_length) {
    9d54:	2900      	cmp	r1, #0
    9d56:	d004      	beq.n	9d62 <_spi_master_vec_int_handler+0xce>
				module->rx_head_ptr = module->rx_bufdesc_ptr->data;
    9d58:	699c      	ldr	r4, [r3, #24]
    9d5a:	6824      	ldr	r4, [r4, #0]
    9d5c:	60dc      	str	r4, [r3, #12]
				module->rx_length = rx_length;
    9d5e:	8119      	strh	r1, [r3, #8]
    9d60:	e7bb      	b.n	9cda <_spi_master_vec_int_handler+0x46>
				spi_hw->CTRLB.reg = 0;
    9d62:	2100      	movs	r1, #0
    9d64:	6041      	str	r1, [r0, #4]
				spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_RXC;
    9d66:	3104      	adds	r1, #4
    9d68:	7501      	strb	r1, [r0, #20]
				if (dir == SPI_MASTER_VEC_DIRECTION_READ) {
    9d6a:	2c00      	cmp	r4, #0
    9d6c:	d104      	bne.n	9d78 <_spi_master_vec_int_handler+0xe4>
					module->direction = dir;
    9d6e:	3901      	subs	r1, #1
    9d70:	7159      	strb	r1, [r3, #5]
					module->status = STATUS_OK;
    9d72:	2100      	movs	r1, #0
    9d74:	7199      	strb	r1, [r3, #6]
    9d76:	e7b0      	b.n	9cda <_spi_master_vec_int_handler+0x46>
					module->direction = dir;
    9d78:	2101      	movs	r1, #1
    9d7a:	7159      	strb	r1, [r3, #5]
    9d7c:	e7ad      	b.n	9cda <_spi_master_vec_int_handler+0x46>
			module->tx_lead_on_rx = ++tx_lead_on_rx;
    9d7e:	3101      	adds	r1, #1
    9d80:	6159      	str	r1, [r3, #20]
				tx_head_ptr = module->tx_head_ptr;
    9d82:	691e      	ldr	r6, [r3, #16]
				spi_hw->DATA.reg = *(tx_head_ptr++);
    9d84:	7835      	ldrb	r5, [r6, #0]
    9d86:	6285      	str	r5, [r0, #40]	; 0x28
				tx_length = module->tx_length - 1;
    9d88:	895d      	ldrh	r5, [r3, #10]
    9d8a:	3d01      	subs	r5, #1
    9d8c:	b2ad      	uxth	r5, r5
				if (tx_length) {
    9d8e:	2d00      	cmp	r5, #0
    9d90:	d0c2      	beq.n	9d18 <_spi_master_vec_int_handler+0x84>
				spi_hw->DATA.reg = *(tx_head_ptr++);
    9d92:	3601      	adds	r6, #1
					module->tx_head_ptr = tx_head_ptr;
    9d94:	611e      	str	r6, [r3, #16]
					module->tx_length = tx_length;
    9d96:	815d      	strh	r5, [r3, #10]
    9d98:	e78d      	b.n	9cb6 <_spi_master_vec_int_handler+0x22>
    9d9a:	46c0      	nop			; (mov r8, r8)
    9d9c:	200007c4 	.word	0x200007c4

00009da0 <spi_master_vec_init>:
{
    9da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9da2:	46c6      	mov	lr, r8
    9da4:	b500      	push	{lr}
    9da6:	b084      	sub	sp, #16
    9da8:	4680      	mov	r8, r0
    9daa:	000c      	movs	r4, r1
    9dac:	0015      	movs	r5, r2
	uint32_t sercom_index = _sercom_get_sercom_inst_index((Sercom *)spi_hw);
    9dae:	0008      	movs	r0, r1
    9db0:	4b59      	ldr	r3, [pc, #356]	; (9f18 <spi_master_vec_init+0x178>)
    9db2:	4798      	blx	r3
    9db4:	0007      	movs	r7, r0
	module->sercom = sercom;
    9db6:	4643      	mov	r3, r8
    9db8:	601c      	str	r4, [r3, #0]
    9dba:	4a58      	ldr	r2, [pc, #352]	; (9f1c <spi_master_vec_init+0x17c>)
    9dbc:	6a11      	ldr	r1, [r2, #32]
	uint32_t pm_index = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    9dbe:	3002      	adds	r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    9dc0:	2301      	movs	r3, #1
    9dc2:	4083      	lsls	r3, r0
    9dc4:	430b      	orrs	r3, r1
    9dc6:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->gclk_generator;
    9dc8:	a903      	add	r1, sp, #12
    9dca:	792b      	ldrb	r3, [r5, #4]
    9dcc:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index = sercom_index + SERCOM0_GCLK_ID_CORE;
    9dce:	003e      	movs	r6, r7
    9dd0:	3614      	adds	r6, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    9dd2:	b2f6      	uxtb	r6, r6
    9dd4:	0030      	movs	r0, r6
    9dd6:	4b52      	ldr	r3, [pc, #328]	; (9f20 <spi_master_vec_init+0x180>)
    9dd8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    9dda:	0030      	movs	r0, r6
    9ddc:	4b51      	ldr	r3, [pc, #324]	; (9f24 <spi_master_vec_init+0x184>)
    9dde:	4798      	blx	r3
	sercom_set_gclk_generator(config->gclk_generator, false);
    9de0:	7928      	ldrb	r0, [r5, #4]
    9de2:	2100      	movs	r1, #0
    9de4:	4b50      	ldr	r3, [pc, #320]	; (9f28 <spi_master_vec_init+0x188>)
    9de6:	4798      	blx	r3
	while (sercom_spi->SYNCBUSY.reg) {
    9de8:	69e3      	ldr	r3, [r4, #28]
    9dea:	2b00      	cmp	r3, #0
    9dec:	d1fc      	bne.n	9de8 <spi_master_vec_init+0x48>
	spi_hw->CTRLA.reg = SERCOM_SPI_CTRLA_MODE(0x3);
    9dee:	330c      	adds	r3, #12
    9df0:	6023      	str	r3, [r4, #0]
    9df2:	68aa      	ldr	r2, [r5, #8]
    9df4:	68eb      	ldr	r3, [r5, #12]
    9df6:	431a      	orrs	r2, r3
    9df8:	692b      	ldr	r3, [r5, #16]
    9dfa:	431a      	orrs	r2, r3
					SERCOM_SPI_CTRLA_RUNSTDBY : 0);
    9dfc:	796b      	ldrb	r3, [r5, #5]
    9dfe:	2180      	movs	r1, #128	; 0x80
    9e00:	2b00      	cmp	r3, #0
    9e02:	d104      	bne.n	9e0e <spi_master_vec_init+0x6e>
    9e04:	4b49      	ldr	r3, [pc, #292]	; (9f2c <spi_master_vec_init+0x18c>)
    9e06:	789b      	ldrb	r3, [r3, #2]
			| ((config->run_in_standby || system_is_debugger_present()) ?
    9e08:	079b      	lsls	r3, r3, #30
					SERCOM_SPI_CTRLA_RUNSTDBY : 0);
    9e0a:	0fdb      	lsrs	r3, r3, #31
    9e0c:	01d9      	lsls	r1, r3, #7
	spi_hw->CTRLA.reg |= (uint32_t)config->mux_setting
    9e0e:	6823      	ldr	r3, [r4, #0]
    9e10:	4313      	orrs	r3, r2
    9e12:	430b      	orrs	r3, r1
    9e14:	6023      	str	r3, [r4, #0]
	gclk_hz = system_gclk_chan_get_hz(gclk_index);
    9e16:	0030      	movs	r0, r6
    9e18:	4b45      	ldr	r3, [pc, #276]	; (9f30 <spi_master_vec_init+0x190>)
    9e1a:	4798      	blx	r3
    9e1c:	0001      	movs	r1, r0
	status = _sercom_get_sync_baud_val(config->baudrate, gclk_hz, &tmp_baud);
    9e1e:	220a      	movs	r2, #10
    9e20:	446a      	add	r2, sp
    9e22:	6828      	ldr	r0, [r5, #0]
    9e24:	4b43      	ldr	r3, [pc, #268]	; (9f34 <spi_master_vec_init+0x194>)
    9e26:	4798      	blx	r3
    9e28:	1e06      	subs	r6, r0, #0
	if (status != STATUS_OK) {
    9e2a:	d005      	beq.n	9e38 <spi_master_vec_init+0x98>
		return STATUS_ERR_INVALID_ARG;
    9e2c:	2617      	movs	r6, #23
}
    9e2e:	0030      	movs	r0, r6
    9e30:	b004      	add	sp, #16
    9e32:	bc04      	pop	{r2}
    9e34:	4690      	mov	r8, r2
    9e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	spi_hw->BAUD.reg = (uint8_t)tmp_baud;
    9e38:	230a      	movs	r3, #10
    9e3a:	446b      	add	r3, sp
    9e3c:	781b      	ldrb	r3, [r3, #0]
    9e3e:	7323      	strb	r3, [r4, #12]
	_spi_master_vec_pinmux_helper(config->pinmux_pad0, sercom, 0);
    9e40:	6968      	ldr	r0, [r5, #20]
	if (pinmux == PINMUX_DEFAULT) {
    9e42:	2800      	cmp	r0, #0
    9e44:	d01f      	beq.n	9e86 <spi_master_vec_init+0xe6>
	if (pinmux == PINMUX_UNUSED) {
    9e46:	1c43      	adds	r3, r0, #1
    9e48:	d122      	bne.n	9e90 <spi_master_vec_init+0xf0>
	_spi_master_vec_pinmux_helper(config->pinmux_pad3, sercom, 3);
    9e4a:	6a28      	ldr	r0, [r5, #32]
	if (pinmux == PINMUX_DEFAULT) {
    9e4c:	2800      	cmp	r0, #0
    9e4e:	d02b      	beq.n	9ea8 <spi_master_vec_init+0x108>
	if (pinmux == PINMUX_UNUSED) {
    9e50:	1c43      	adds	r3, r0, #1
    9e52:	d12e      	bne.n	9eb2 <spi_master_vec_init+0x112>
	if (config->mux_setting & (1 << SERCOM_SPI_CTRLA_DOPO_Pos)) {
    9e54:	68ab      	ldr	r3, [r5, #8]
    9e56:	03db      	lsls	r3, r3, #15
    9e58:	d548      	bpl.n	9eec <spi_master_vec_init+0x14c>
		_spi_master_vec_pinmux_helper(config->pinmux_pad2, sercom, 2);
    9e5a:	69e8      	ldr	r0, [r5, #28]
	if (pinmux == PINMUX_DEFAULT) {
    9e5c:	2800      	cmp	r0, #0
    9e5e:	d034      	beq.n	9eca <spi_master_vec_init+0x12a>
	if (pinmux == PINMUX_UNUSED) {
    9e60:	1c43      	adds	r3, r0, #1
    9e62:	d137      	bne.n	9ed4 <spi_master_vec_init+0x134>
	module->rx_bufdesc_ptr = NULL;
    9e64:	2300      	movs	r3, #0
    9e66:	4642      	mov	r2, r8
    9e68:	6193      	str	r3, [r2, #24]
	module->tx_bufdesc_ptr = NULL;
    9e6a:	61d3      	str	r3, [r2, #28]
	module->direction = SPI_MASTER_VEC_DIRECTION_IDLE;
    9e6c:	2203      	movs	r2, #3
    9e6e:	4641      	mov	r1, r8
    9e70:	714a      	strb	r2, [r1, #5]
	module->status = STATUS_OK;
    9e72:	718b      	strb	r3, [r1, #6]
	_sercom_set_handler(sercom_index, _spi_master_vec_int_handler);
    9e74:	4930      	ldr	r1, [pc, #192]	; (9f38 <spi_master_vec_init+0x198>)
    9e76:	0038      	movs	r0, r7
    9e78:	4b30      	ldr	r3, [pc, #192]	; (9f3c <spi_master_vec_init+0x19c>)
    9e7a:	4798      	blx	r3
	_sercom_instances[sercom_index] = module;
    9e7c:	00bf      	lsls	r7, r7, #2
    9e7e:	4b30      	ldr	r3, [pc, #192]	; (9f40 <spi_master_vec_init+0x1a0>)
    9e80:	4642      	mov	r2, r8
    9e82:	50fa      	str	r2, [r7, r3]
	return STATUS_OK;
    9e84:	e7d3      	b.n	9e2e <spi_master_vec_init+0x8e>
		pinmux = _sercom_get_default_pad(sercom, padnum);
    9e86:	2100      	movs	r1, #0
    9e88:	0020      	movs	r0, r4
    9e8a:	4b2e      	ldr	r3, [pc, #184]	; (9f44 <spi_master_vec_init+0x1a4>)
    9e8c:	4798      	blx	r3
    9e8e:	e7da      	b.n	9e46 <spi_master_vec_init+0xa6>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9e90:	a901      	add	r1, sp, #4
    9e92:	2300      	movs	r3, #0
    9e94:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9e96:	2201      	movs	r2, #1
    9e98:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    9e9a:	70cb      	strb	r3, [r1, #3]
	pin_conf.mux_position = pinmux & 0xFFFF;
    9e9c:	7008      	strb	r0, [r1, #0]
	system_pinmux_pin_set_config(pinmux >> 16, &pin_conf);
    9e9e:	0c00      	lsrs	r0, r0, #16
    9ea0:	b2c0      	uxtb	r0, r0
    9ea2:	4b29      	ldr	r3, [pc, #164]	; (9f48 <spi_master_vec_init+0x1a8>)
    9ea4:	4798      	blx	r3
    9ea6:	e7d0      	b.n	9e4a <spi_master_vec_init+0xaa>
		pinmux = _sercom_get_default_pad(sercom, padnum);
    9ea8:	2103      	movs	r1, #3
    9eaa:	0020      	movs	r0, r4
    9eac:	4b25      	ldr	r3, [pc, #148]	; (9f44 <spi_master_vec_init+0x1a4>)
    9eae:	4798      	blx	r3
    9eb0:	e7ce      	b.n	9e50 <spi_master_vec_init+0xb0>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9eb2:	a901      	add	r1, sp, #4
    9eb4:	2300      	movs	r3, #0
    9eb6:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9eb8:	2201      	movs	r2, #1
    9eba:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    9ebc:	70cb      	strb	r3, [r1, #3]
	pin_conf.mux_position = pinmux & 0xFFFF;
    9ebe:	7008      	strb	r0, [r1, #0]
	system_pinmux_pin_set_config(pinmux >> 16, &pin_conf);
    9ec0:	0c00      	lsrs	r0, r0, #16
    9ec2:	b2c0      	uxtb	r0, r0
    9ec4:	4b20      	ldr	r3, [pc, #128]	; (9f48 <spi_master_vec_init+0x1a8>)
    9ec6:	4798      	blx	r3
    9ec8:	e7c4      	b.n	9e54 <spi_master_vec_init+0xb4>
		pinmux = _sercom_get_default_pad(sercom, padnum);
    9eca:	2102      	movs	r1, #2
    9ecc:	0020      	movs	r0, r4
    9ece:	4b1d      	ldr	r3, [pc, #116]	; (9f44 <spi_master_vec_init+0x1a4>)
    9ed0:	4798      	blx	r3
    9ed2:	e7c5      	b.n	9e60 <spi_master_vec_init+0xc0>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9ed4:	a901      	add	r1, sp, #4
    9ed6:	2300      	movs	r3, #0
    9ed8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9eda:	2201      	movs	r2, #1
    9edc:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    9ede:	70cb      	strb	r3, [r1, #3]
	pin_conf.mux_position = pinmux & 0xFFFF;
    9ee0:	7008      	strb	r0, [r1, #0]
	system_pinmux_pin_set_config(pinmux >> 16, &pin_conf);
    9ee2:	0c00      	lsrs	r0, r0, #16
    9ee4:	b2c0      	uxtb	r0, r0
    9ee6:	4b18      	ldr	r3, [pc, #96]	; (9f48 <spi_master_vec_init+0x1a8>)
    9ee8:	4798      	blx	r3
    9eea:	e7bb      	b.n	9e64 <spi_master_vec_init+0xc4>
		_spi_master_vec_pinmux_helper(config->pinmux_pad1, sercom, 1);
    9eec:	69a8      	ldr	r0, [r5, #24]
	if (pinmux == PINMUX_DEFAULT) {
    9eee:	2800      	cmp	r0, #0
    9ef0:	d00d      	beq.n	9f0e <spi_master_vec_init+0x16e>
	if (pinmux == PINMUX_UNUSED) {
    9ef2:	1c43      	adds	r3, r0, #1
    9ef4:	d0b6      	beq.n	9e64 <spi_master_vec_init+0xc4>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9ef6:	a901      	add	r1, sp, #4
    9ef8:	2300      	movs	r3, #0
    9efa:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    9efc:	2201      	movs	r2, #1
    9efe:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    9f00:	70cb      	strb	r3, [r1, #3]
	pin_conf.mux_position = pinmux & 0xFFFF;
    9f02:	7008      	strb	r0, [r1, #0]
	system_pinmux_pin_set_config(pinmux >> 16, &pin_conf);
    9f04:	0c00      	lsrs	r0, r0, #16
    9f06:	b2c0      	uxtb	r0, r0
    9f08:	4b0f      	ldr	r3, [pc, #60]	; (9f48 <spi_master_vec_init+0x1a8>)
    9f0a:	4798      	blx	r3
    9f0c:	e7aa      	b.n	9e64 <spi_master_vec_init+0xc4>
		pinmux = _sercom_get_default_pad(sercom, padnum);
    9f0e:	2101      	movs	r1, #1
    9f10:	0020      	movs	r0, r4
    9f12:	4b0c      	ldr	r3, [pc, #48]	; (9f44 <spi_master_vec_init+0x1a4>)
    9f14:	4798      	blx	r3
    9f16:	e7ec      	b.n	9ef2 <spi_master_vec_init+0x152>
    9f18:	00009661 	.word	0x00009661
    9f1c:	40000400 	.word	0x40000400
    9f20:	0000abc5 	.word	0x0000abc5
    9f24:	0000ab39 	.word	0x0000ab39
    9f28:	0000949d 	.word	0x0000949d
    9f2c:	41002000 	.word	0x41002000
    9f30:	0000abe1 	.word	0x0000abe1
    9f34:	000093df 	.word	0x000093df
    9f38:	00009c95 	.word	0x00009c95
    9f3c:	0000969d 	.word	0x0000969d
    9f40:	200007c4 	.word	0x200007c4
    9f44:	000094e9 	.word	0x000094e9
    9f48:	0000acbd 	.word	0x0000acbd

00009f4c <spi_master_vec_enable>:
{
    9f4c:	b510      	push	{r4, lr}
	SercomSpi *const spi_hw = &(module->sercom->SPI);
    9f4e:	6802      	ldr	r2, [r0, #0]
	spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_DRE | SERCOM_SPI_INTFLAG_RXC
    9f50:	2307      	movs	r3, #7
    9f52:	7513      	strb	r3, [r2, #20]
	while (sercom_spi->SYNCBUSY.reg) {
    9f54:	69d3      	ldr	r3, [r2, #28]
    9f56:	2b00      	cmp	r3, #0
    9f58:	d1fc      	bne.n	9f54 <spi_master_vec_enable+0x8>
	spi_hw->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    9f5a:	6813      	ldr	r3, [r2, #0]
    9f5c:	2102      	movs	r1, #2
    9f5e:	430b      	orrs	r3, r1
    9f60:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->sercom));
    9f62:	6800      	ldr	r0, [r0, #0]
    9f64:	4b04      	ldr	r3, [pc, #16]	; (9f78 <spi_master_vec_enable+0x2c>)
    9f66:	4798      	blx	r3
    9f68:	231f      	movs	r3, #31
    9f6a:	4018      	ands	r0, r3
    9f6c:	3b1e      	subs	r3, #30
    9f6e:	4083      	lsls	r3, r0
    9f70:	4a02      	ldr	r2, [pc, #8]	; (9f7c <spi_master_vec_enable+0x30>)
    9f72:	6013      	str	r3, [r2, #0]
}
    9f74:	bd10      	pop	{r4, pc}
    9f76:	46c0      	nop			; (mov r8, r8)
    9f78:	000096d9 	.word	0x000096d9
    9f7c:	e000e100 	.word	0xe000e100

00009f80 <spi_master_vec_transceive_buffer_job>:
{
    9f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f82:	0005      	movs	r5, r0
    9f84:	000e      	movs	r6, r1
    9f86:	0017      	movs	r7, r2
	SercomSpi *const spi_hw = &(module->sercom->SPI);
    9f88:	6804      	ldr	r4, [r0, #0]
	cpu_irq_enter_critical();
    9f8a:	4b1e      	ldr	r3, [pc, #120]	; (a004 <spi_master_vec_transceive_buffer_job+0x84>)
    9f8c:	4798      	blx	r3
	if (module->status == STATUS_BUSY) {
    9f8e:	79ab      	ldrb	r3, [r5, #6]
    9f90:	2b05      	cmp	r3, #5
    9f92:	d01f      	beq.n	9fd4 <spi_master_vec_transceive_buffer_job+0x54>
		module->status = STATUS_BUSY;
    9f94:	2305      	movs	r3, #5
    9f96:	71ab      	strb	r3, [r5, #6]
	cpu_irq_leave_critical();
    9f98:	4b1b      	ldr	r3, [pc, #108]	; (a008 <spi_master_vec_transceive_buffer_job+0x88>)
    9f9a:	4798      	blx	r3
	module->tx_bufdesc_ptr = tx_bufdescs;
    9f9c:	61ee      	str	r6, [r5, #28]
	module->rx_bufdesc_ptr = rx_bufdescs;
    9f9e:	61af      	str	r7, [r5, #24]
	if (tx_bufdescs && rx_bufdescs) {
    9fa0:	2e00      	cmp	r6, #0
    9fa2:	d024      	beq.n	9fee <spi_master_vec_transceive_buffer_job+0x6e>
    9fa4:	2f00      	cmp	r7, #0
    9fa6:	d019      	beq.n	9fdc <spi_master_vec_transceive_buffer_job+0x5c>
		module->direction = SPI_MASTER_VEC_DIRECTION_BOTH;
    9fa8:	2302      	movs	r3, #2
    9faa:	716b      	strb	r3, [r5, #5]
		module->tx_length = tx_bufdescs[0].length;
    9fac:	88b3      	ldrh	r3, [r6, #4]
    9fae:	816b      	strh	r3, [r5, #10]
		module->tx_head_ptr = tx_bufdescs[0].data;
    9fb0:	6833      	ldr	r3, [r6, #0]
    9fb2:	612b      	str	r3, [r5, #16]
		module->rx_length = rx_bufdescs[0].length;
    9fb4:	88bb      	ldrh	r3, [r7, #4]
    9fb6:	812b      	strh	r3, [r5, #8]
		module->rx_head_ptr = rx_bufdescs[0].data;
    9fb8:	683b      	ldr	r3, [r7, #0]
    9fba:	60eb      	str	r3, [r5, #12]
		module->tx_lead_on_rx = 0;
    9fbc:	2300      	movs	r3, #0
    9fbe:	616b      	str	r3, [r5, #20]
		tmp_intenset = SERCOM_SPI_INTFLAG_DRE | SERCOM_SPI_INTFLAG_RXC;
    9fc0:	2205      	movs	r2, #5
		tmp_ctrlb = SERCOM_SPI_CTRLB_RXEN;
    9fc2:	2180      	movs	r1, #128	; 0x80
    9fc4:	0289      	lsls	r1, r1, #10
	while (sercom_spi->SYNCBUSY.reg) {
    9fc6:	69e3      	ldr	r3, [r4, #28]
    9fc8:	2b00      	cmp	r3, #0
    9fca:	d1fc      	bne.n	9fc6 <spi_master_vec_transceive_buffer_job+0x46>
	spi_hw->CTRLB.reg = tmp_ctrlb;
    9fcc:	6061      	str	r1, [r4, #4]
	spi_hw->INTENSET.reg = tmp_intenset;
    9fce:	75a2      	strb	r2, [r4, #22]
	return STATUS_OK;
    9fd0:	2000      	movs	r0, #0
}
    9fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9fd4:	4b0c      	ldr	r3, [pc, #48]	; (a008 <spi_master_vec_transceive_buffer_job+0x88>)
    9fd6:	4798      	blx	r3
		return STATUS_BUSY;
    9fd8:	2005      	movs	r0, #5
    9fda:	e7fa      	b.n	9fd2 <spi_master_vec_transceive_buffer_job+0x52>
			module->direction = SPI_MASTER_VEC_DIRECTION_WRITE;
    9fdc:	2301      	movs	r3, #1
    9fde:	716b      	strb	r3, [r5, #5]
			module->tx_length = tx_bufdescs[0].length;
    9fe0:	88b3      	ldrh	r3, [r6, #4]
    9fe2:	816b      	strh	r3, [r5, #10]
			module->tx_head_ptr = tx_bufdescs[0].data;
    9fe4:	6833      	ldr	r3, [r6, #0]
    9fe6:	612b      	str	r3, [r5, #16]
			tmp_intenset = SERCOM_SPI_INTFLAG_DRE;
    9fe8:	2201      	movs	r2, #1
			tmp_ctrlb = 0;
    9fea:	2100      	movs	r1, #0
    9fec:	e7eb      	b.n	9fc6 <spi_master_vec_transceive_buffer_job+0x46>
			module->direction = SPI_MASTER_VEC_DIRECTION_READ;
    9fee:	2300      	movs	r3, #0
    9ff0:	716b      	strb	r3, [r5, #5]
			module->rx_length = rx_bufdescs[0].length;
    9ff2:	88ba      	ldrh	r2, [r7, #4]
    9ff4:	812a      	strh	r2, [r5, #8]
			module->rx_head_ptr = rx_bufdescs[0].data;
    9ff6:	683a      	ldr	r2, [r7, #0]
    9ff8:	60ea      	str	r2, [r5, #12]
			module->tx_lead_on_rx = 0;
    9ffa:	616b      	str	r3, [r5, #20]
			tmp_intenset = SERCOM_SPI_INTFLAG_DRE | SERCOM_SPI_INTFLAG_RXC;
    9ffc:	2205      	movs	r2, #5
			tmp_ctrlb = SERCOM_SPI_CTRLB_RXEN;
    9ffe:	2180      	movs	r1, #128	; 0x80
    a000:	0289      	lsls	r1, r1, #10
    a002:	e7e0      	b.n	9fc6 <spi_master_vec_transceive_buffer_job+0x46>
    a004:	00009045 	.word	0x00009045
    a008:	00009085 	.word	0x00009085

0000a00c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    a00c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a00e:	46de      	mov	lr, fp
    a010:	4657      	mov	r7, sl
    a012:	464e      	mov	r6, r9
    a014:	4645      	mov	r5, r8
    a016:	b5e0      	push	{r5, r6, r7, lr}
    a018:	b091      	sub	sp, #68	; 0x44
    a01a:	0005      	movs	r5, r0
    a01c:	000c      	movs	r4, r1
    a01e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    a020:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a022:	0008      	movs	r0, r1
    a024:	4bbc      	ldr	r3, [pc, #752]	; (a318 <usart_init+0x30c>)
    a026:	4798      	blx	r3
    a028:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    a02a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    a02c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    a02e:	07db      	lsls	r3, r3, #31
    a030:	d506      	bpl.n	a040 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    a032:	b011      	add	sp, #68	; 0x44
    a034:	bc3c      	pop	{r2, r3, r4, r5}
    a036:	4690      	mov	r8, r2
    a038:	4699      	mov	r9, r3
    a03a:	46a2      	mov	sl, r4
    a03c:	46ab      	mov	fp, r5
    a03e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    a040:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    a042:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    a044:	079b      	lsls	r3, r3, #30
    a046:	d4f4      	bmi.n	a032 <usart_init+0x26>
    a048:	49b4      	ldr	r1, [pc, #720]	; (a31c <usart_init+0x310>)
    a04a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    a04c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    a04e:	2301      	movs	r3, #1
    a050:	40bb      	lsls	r3, r7
    a052:	4303      	orrs	r3, r0
    a054:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    a056:	a90f      	add	r1, sp, #60	; 0x3c
    a058:	272d      	movs	r7, #45	; 0x2d
    a05a:	5df3      	ldrb	r3, [r6, r7]
    a05c:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a05e:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    a060:	b2d3      	uxtb	r3, r2
    a062:	9302      	str	r3, [sp, #8]
    a064:	0018      	movs	r0, r3
    a066:	4bae      	ldr	r3, [pc, #696]	; (a320 <usart_init+0x314>)
    a068:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    a06a:	9802      	ldr	r0, [sp, #8]
    a06c:	4bad      	ldr	r3, [pc, #692]	; (a324 <usart_init+0x318>)
    a06e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    a070:	5df0      	ldrb	r0, [r6, r7]
    a072:	2100      	movs	r1, #0
    a074:	4bac      	ldr	r3, [pc, #688]	; (a328 <usart_init+0x31c>)
    a076:	4798      	blx	r3
	module->character_size = config->character_size;
    a078:	7af3      	ldrb	r3, [r6, #11]
    a07a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    a07c:	2324      	movs	r3, #36	; 0x24
    a07e:	5cf3      	ldrb	r3, [r6, r3]
    a080:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    a082:	2325      	movs	r3, #37	; 0x25
    a084:	5cf3      	ldrb	r3, [r6, r3]
    a086:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    a088:	7ef3      	ldrb	r3, [r6, #27]
    a08a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    a08c:	7f33      	ldrb	r3, [r6, #28]
    a08e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    a090:	682b      	ldr	r3, [r5, #0]
    a092:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    a094:	0018      	movs	r0, r3
    a096:	4ba0      	ldr	r3, [pc, #640]	; (a318 <usart_init+0x30c>)
    a098:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    a09a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    a09c:	2200      	movs	r2, #0
    a09e:	230e      	movs	r3, #14
    a0a0:	a906      	add	r1, sp, #24
    a0a2:	468c      	mov	ip, r1
    a0a4:	4463      	add	r3, ip
    a0a6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    a0a8:	8a32      	ldrh	r2, [r6, #16]
    a0aa:	9202      	str	r2, [sp, #8]
    a0ac:	2380      	movs	r3, #128	; 0x80
    a0ae:	01db      	lsls	r3, r3, #7
    a0b0:	429a      	cmp	r2, r3
    a0b2:	d100      	bne.n	a0b6 <usart_init+0xaa>
    a0b4:	e09e      	b.n	a1f4 <usart_init+0x1e8>
    a0b6:	d90f      	bls.n	a0d8 <usart_init+0xcc>
    a0b8:	23c0      	movs	r3, #192	; 0xc0
    a0ba:	01db      	lsls	r3, r3, #7
    a0bc:	9a02      	ldr	r2, [sp, #8]
    a0be:	429a      	cmp	r2, r3
    a0c0:	d100      	bne.n	a0c4 <usart_init+0xb8>
    a0c2:	e092      	b.n	a1ea <usart_init+0x1de>
    a0c4:	2380      	movs	r3, #128	; 0x80
    a0c6:	021b      	lsls	r3, r3, #8
    a0c8:	429a      	cmp	r2, r3
    a0ca:	d000      	beq.n	a0ce <usart_init+0xc2>
    a0cc:	e11f      	b.n	a30e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    a0ce:	2303      	movs	r3, #3
    a0d0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    a0d2:	2300      	movs	r3, #0
    a0d4:	9307      	str	r3, [sp, #28]
    a0d6:	e008      	b.n	a0ea <usart_init+0xde>
	switch (config->sample_rate) {
    a0d8:	2380      	movs	r3, #128	; 0x80
    a0da:	019b      	lsls	r3, r3, #6
    a0dc:	429a      	cmp	r2, r3
    a0de:	d000      	beq.n	a0e2 <usart_init+0xd6>
    a0e0:	e115      	b.n	a30e <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    a0e2:	2310      	movs	r3, #16
    a0e4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    a0e6:	3b0f      	subs	r3, #15
    a0e8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    a0ea:	6833      	ldr	r3, [r6, #0]
    a0ec:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    a0ee:	68f3      	ldr	r3, [r6, #12]
    a0f0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    a0f2:	6973      	ldr	r3, [r6, #20]
    a0f4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    a0f6:	7e33      	ldrb	r3, [r6, #24]
    a0f8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    a0fa:	2326      	movs	r3, #38	; 0x26
    a0fc:	5cf3      	ldrb	r3, [r6, r3]
    a0fe:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    a100:	6873      	ldr	r3, [r6, #4]
    a102:	4699      	mov	r9, r3
	switch (transfer_mode)
    a104:	2b00      	cmp	r3, #0
    a106:	d100      	bne.n	a10a <usart_init+0xfe>
    a108:	e0a0      	b.n	a24c <usart_init+0x240>
    a10a:	2380      	movs	r3, #128	; 0x80
    a10c:	055b      	lsls	r3, r3, #21
    a10e:	4599      	cmp	r9, r3
    a110:	d100      	bne.n	a114 <usart_init+0x108>
    a112:	e084      	b.n	a21e <usart_init+0x212>
	if(config->encoding_format_enable) {
    a114:	7e73      	ldrb	r3, [r6, #25]
    a116:	2b00      	cmp	r3, #0
    a118:	d002      	beq.n	a120 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    a11a:	7eb3      	ldrb	r3, [r6, #26]
    a11c:	4642      	mov	r2, r8
    a11e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    a120:	682a      	ldr	r2, [r5, #0]
    a122:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    a124:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    a126:	2b00      	cmp	r3, #0
    a128:	d1fc      	bne.n	a124 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    a12a:	330e      	adds	r3, #14
    a12c:	aa06      	add	r2, sp, #24
    a12e:	4694      	mov	ip, r2
    a130:	4463      	add	r3, ip
    a132:	881b      	ldrh	r3, [r3, #0]
    a134:	4642      	mov	r2, r8
    a136:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    a138:	9b05      	ldr	r3, [sp, #20]
    a13a:	9a03      	ldr	r2, [sp, #12]
    a13c:	4313      	orrs	r3, r2
    a13e:	9a04      	ldr	r2, [sp, #16]
    a140:	4313      	orrs	r3, r2
    a142:	464a      	mov	r2, r9
    a144:	4313      	orrs	r3, r2
    a146:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    a148:	465b      	mov	r3, fp
    a14a:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    a14c:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    a14e:	4653      	mov	r3, sl
    a150:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    a152:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    a154:	2327      	movs	r3, #39	; 0x27
    a156:	5cf3      	ldrb	r3, [r6, r3]
    a158:	2b00      	cmp	r3, #0
    a15a:	d101      	bne.n	a160 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    a15c:	3304      	adds	r3, #4
    a15e:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    a160:	7e73      	ldrb	r3, [r6, #25]
    a162:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    a164:	7f32      	ldrb	r2, [r6, #28]
    a166:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    a168:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    a16a:	7f72      	ldrb	r2, [r6, #29]
    a16c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    a16e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    a170:	2224      	movs	r2, #36	; 0x24
    a172:	5cb2      	ldrb	r2, [r6, r2]
    a174:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    a176:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    a178:	2225      	movs	r2, #37	; 0x25
    a17a:	5cb2      	ldrb	r2, [r6, r2]
    a17c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    a17e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    a180:	7ab1      	ldrb	r1, [r6, #10]
    a182:	7af2      	ldrb	r2, [r6, #11]
    a184:	4311      	orrs	r1, r2
    a186:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    a188:	8933      	ldrh	r3, [r6, #8]
    a18a:	2bff      	cmp	r3, #255	; 0xff
    a18c:	d100      	bne.n	a190 <usart_init+0x184>
    a18e:	e081      	b.n	a294 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    a190:	2280      	movs	r2, #128	; 0x80
    a192:	0452      	lsls	r2, r2, #17
    a194:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    a196:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    a198:	232c      	movs	r3, #44	; 0x2c
    a19a:	5cf3      	ldrb	r3, [r6, r3]
    a19c:	2b00      	cmp	r3, #0
    a19e:	d103      	bne.n	a1a8 <usart_init+0x19c>
    a1a0:	4b62      	ldr	r3, [pc, #392]	; (a32c <usart_init+0x320>)
    a1a2:	789b      	ldrb	r3, [r3, #2]
    a1a4:	079b      	lsls	r3, r3, #30
    a1a6:	d501      	bpl.n	a1ac <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    a1a8:	2380      	movs	r3, #128	; 0x80
    a1aa:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    a1ac:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    a1ae:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	d1fc      	bne.n	a1ae <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    a1b4:	4643      	mov	r3, r8
    a1b6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    a1b8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    a1ba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    a1bc:	2b00      	cmp	r3, #0
    a1be:	d1fc      	bne.n	a1ba <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    a1c0:	4643      	mov	r3, r8
    a1c2:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    a1c4:	ab0e      	add	r3, sp, #56	; 0x38
    a1c6:	2280      	movs	r2, #128	; 0x80
    a1c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a1ca:	2200      	movs	r2, #0
    a1cc:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    a1ce:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    a1d0:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    a1d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    a1d4:	930a      	str	r3, [sp, #40]	; 0x28
    a1d6:	6b73      	ldr	r3, [r6, #52]	; 0x34
    a1d8:	930b      	str	r3, [sp, #44]	; 0x2c
    a1da:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    a1dc:	930c      	str	r3, [sp, #48]	; 0x30
    a1de:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    a1e0:	9302      	str	r3, [sp, #8]
    a1e2:	930d      	str	r3, [sp, #52]	; 0x34
    a1e4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    a1e6:	ae0a      	add	r6, sp, #40	; 0x28
    a1e8:	e063      	b.n	a2b2 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    a1ea:	2308      	movs	r3, #8
    a1ec:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    a1ee:	3b07      	subs	r3, #7
    a1f0:	9307      	str	r3, [sp, #28]
    a1f2:	e77a      	b.n	a0ea <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    a1f4:	6833      	ldr	r3, [r6, #0]
    a1f6:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    a1f8:	68f3      	ldr	r3, [r6, #12]
    a1fa:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    a1fc:	6973      	ldr	r3, [r6, #20]
    a1fe:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    a200:	7e33      	ldrb	r3, [r6, #24]
    a202:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    a204:	2326      	movs	r3, #38	; 0x26
    a206:	5cf3      	ldrb	r3, [r6, r3]
    a208:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    a20a:	6873      	ldr	r3, [r6, #4]
    a20c:	4699      	mov	r9, r3
	switch (transfer_mode)
    a20e:	2b00      	cmp	r3, #0
    a210:	d018      	beq.n	a244 <usart_init+0x238>
    a212:	2380      	movs	r3, #128	; 0x80
    a214:	055b      	lsls	r3, r3, #21
    a216:	4599      	cmp	r9, r3
    a218:	d001      	beq.n	a21e <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    a21a:	2000      	movs	r0, #0
    a21c:	e025      	b.n	a26a <usart_init+0x25e>
			if (!config->use_external_clock) {
    a21e:	2327      	movs	r3, #39	; 0x27
    a220:	5cf3      	ldrb	r3, [r6, r3]
    a222:	2b00      	cmp	r3, #0
    a224:	d000      	beq.n	a228 <usart_init+0x21c>
    a226:	e775      	b.n	a114 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    a228:	6a33      	ldr	r3, [r6, #32]
    a22a:	001f      	movs	r7, r3
    a22c:	b2c0      	uxtb	r0, r0
    a22e:	4b40      	ldr	r3, [pc, #256]	; (a330 <usart_init+0x324>)
    a230:	4798      	blx	r3
    a232:	0001      	movs	r1, r0
    a234:	220e      	movs	r2, #14
    a236:	ab06      	add	r3, sp, #24
    a238:	469c      	mov	ip, r3
    a23a:	4462      	add	r2, ip
    a23c:	0038      	movs	r0, r7
    a23e:	4b3d      	ldr	r3, [pc, #244]	; (a334 <usart_init+0x328>)
    a240:	4798      	blx	r3
    a242:	e012      	b.n	a26a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    a244:	2308      	movs	r3, #8
    a246:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    a248:	2300      	movs	r3, #0
    a24a:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    a24c:	2327      	movs	r3, #39	; 0x27
    a24e:	5cf3      	ldrb	r3, [r6, r3]
    a250:	2b00      	cmp	r3, #0
    a252:	d00e      	beq.n	a272 <usart_init+0x266>
				status_code =
    a254:	9b06      	ldr	r3, [sp, #24]
    a256:	9300      	str	r3, [sp, #0]
    a258:	9b07      	ldr	r3, [sp, #28]
    a25a:	220e      	movs	r2, #14
    a25c:	a906      	add	r1, sp, #24
    a25e:	468c      	mov	ip, r1
    a260:	4462      	add	r2, ip
    a262:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    a264:	6a30      	ldr	r0, [r6, #32]
    a266:	4f34      	ldr	r7, [pc, #208]	; (a338 <usart_init+0x32c>)
    a268:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    a26a:	2800      	cmp	r0, #0
    a26c:	d000      	beq.n	a270 <usart_init+0x264>
    a26e:	e6e0      	b.n	a032 <usart_init+0x26>
    a270:	e750      	b.n	a114 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    a272:	6a33      	ldr	r3, [r6, #32]
    a274:	001f      	movs	r7, r3
    a276:	b2c0      	uxtb	r0, r0
    a278:	4b2d      	ldr	r3, [pc, #180]	; (a330 <usart_init+0x324>)
    a27a:	4798      	blx	r3
    a27c:	0001      	movs	r1, r0
				status_code =
    a27e:	9b06      	ldr	r3, [sp, #24]
    a280:	9300      	str	r3, [sp, #0]
    a282:	9b07      	ldr	r3, [sp, #28]
    a284:	220e      	movs	r2, #14
    a286:	a806      	add	r0, sp, #24
    a288:	4684      	mov	ip, r0
    a28a:	4462      	add	r2, ip
    a28c:	0038      	movs	r0, r7
    a28e:	4f2a      	ldr	r7, [pc, #168]	; (a338 <usart_init+0x32c>)
    a290:	47b8      	blx	r7
    a292:	e7ea      	b.n	a26a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    a294:	7ef3      	ldrb	r3, [r6, #27]
    a296:	2b00      	cmp	r3, #0
    a298:	d100      	bne.n	a29c <usart_init+0x290>
    a29a:	e77d      	b.n	a198 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    a29c:	2380      	movs	r3, #128	; 0x80
    a29e:	04db      	lsls	r3, r3, #19
    a2a0:	431f      	orrs	r7, r3
    a2a2:	e779      	b.n	a198 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    a2a4:	0020      	movs	r0, r4
    a2a6:	4b25      	ldr	r3, [pc, #148]	; (a33c <usart_init+0x330>)
    a2a8:	4798      	blx	r3
    a2aa:	e007      	b.n	a2bc <usart_init+0x2b0>
    a2ac:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    a2ae:	2f04      	cmp	r7, #4
    a2b0:	d00d      	beq.n	a2ce <usart_init+0x2c2>
    a2b2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    a2b4:	00bb      	lsls	r3, r7, #2
    a2b6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    a2b8:	2800      	cmp	r0, #0
    a2ba:	d0f3      	beq.n	a2a4 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    a2bc:	1c43      	adds	r3, r0, #1
    a2be:	d0f5      	beq.n	a2ac <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    a2c0:	a90e      	add	r1, sp, #56	; 0x38
    a2c2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    a2c4:	0c00      	lsrs	r0, r0, #16
    a2c6:	b2c0      	uxtb	r0, r0
    a2c8:	4b1d      	ldr	r3, [pc, #116]	; (a340 <usart_init+0x334>)
    a2ca:	4798      	blx	r3
    a2cc:	e7ee      	b.n	a2ac <usart_init+0x2a0>
		module->callback[i]            = NULL;
    a2ce:	2300      	movs	r3, #0
    a2d0:	60eb      	str	r3, [r5, #12]
    a2d2:	612b      	str	r3, [r5, #16]
    a2d4:	616b      	str	r3, [r5, #20]
    a2d6:	61ab      	str	r3, [r5, #24]
    a2d8:	61eb      	str	r3, [r5, #28]
    a2da:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    a2dc:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    a2de:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    a2e0:	2200      	movs	r2, #0
    a2e2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    a2e4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    a2e6:	3330      	adds	r3, #48	; 0x30
    a2e8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    a2ea:	3301      	adds	r3, #1
    a2ec:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    a2ee:	3301      	adds	r3, #1
    a2f0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    a2f2:	3301      	adds	r3, #1
    a2f4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    a2f6:	6828      	ldr	r0, [r5, #0]
    a2f8:	4b07      	ldr	r3, [pc, #28]	; (a318 <usart_init+0x30c>)
    a2fa:	4798      	blx	r3
    a2fc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    a2fe:	4911      	ldr	r1, [pc, #68]	; (a344 <usart_init+0x338>)
    a300:	4b11      	ldr	r3, [pc, #68]	; (a348 <usart_init+0x33c>)
    a302:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    a304:	00a4      	lsls	r4, r4, #2
    a306:	4b11      	ldr	r3, [pc, #68]	; (a34c <usart_init+0x340>)
    a308:	50e5      	str	r5, [r4, r3]
	return status_code;
    a30a:	2000      	movs	r0, #0
    a30c:	e691      	b.n	a032 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    a30e:	2310      	movs	r3, #16
    a310:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    a312:	2300      	movs	r3, #0
    a314:	9307      	str	r3, [sp, #28]
    a316:	e6e8      	b.n	a0ea <usart_init+0xde>
    a318:	00009661 	.word	0x00009661
    a31c:	40000400 	.word	0x40000400
    a320:	0000abc5 	.word	0x0000abc5
    a324:	0000ab39 	.word	0x0000ab39
    a328:	0000949d 	.word	0x0000949d
    a32c:	41002000 	.word	0x41002000
    a330:	0000abe1 	.word	0x0000abe1
    a334:	000093df 	.word	0x000093df
    a338:	00009409 	.word	0x00009409
    a33c:	000094e9 	.word	0x000094e9
    a340:	0000acbd 	.word	0x0000acbd
    a344:	0000a3ed 	.word	0x0000a3ed
    a348:	0000969d 	.word	0x0000969d
    a34c:	200007c4 	.word	0x200007c4

0000a350 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    a350:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    a352:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    a354:	2a00      	cmp	r2, #0
    a356:	d101      	bne.n	a35c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    a358:	0018      	movs	r0, r3
    a35a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    a35c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    a35e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    a360:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    a362:	2a00      	cmp	r2, #0
    a364:	d1f8      	bne.n	a358 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    a366:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    a368:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    a36a:	2a00      	cmp	r2, #0
    a36c:	d1fc      	bne.n	a368 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    a36e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    a370:	2102      	movs	r1, #2
    a372:	7e1a      	ldrb	r2, [r3, #24]
    a374:	420a      	tst	r2, r1
    a376:	d0fc      	beq.n	a372 <usart_write_wait+0x22>
	return STATUS_OK;
    a378:	2300      	movs	r3, #0
    a37a:	e7ed      	b.n	a358 <usart_write_wait+0x8>

0000a37c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    a37c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    a37e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    a380:	2a00      	cmp	r2, #0
    a382:	d101      	bne.n	a388 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    a384:	0018      	movs	r0, r3
    a386:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    a388:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    a38a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    a38c:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    a38e:	2a00      	cmp	r2, #0
    a390:	d1f8      	bne.n	a384 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    a392:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    a394:	7e10      	ldrb	r0, [r2, #24]
    a396:	0740      	lsls	r0, r0, #29
    a398:	d5f4      	bpl.n	a384 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    a39a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    a39c:	2b00      	cmp	r3, #0
    a39e:	d1fc      	bne.n	a39a <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    a3a0:	8b53      	ldrh	r3, [r2, #26]
    a3a2:	b2db      	uxtb	r3, r3
	if (error_code) {
    a3a4:	0698      	lsls	r0, r3, #26
    a3a6:	d01d      	beq.n	a3e4 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    a3a8:	0798      	lsls	r0, r3, #30
    a3aa:	d503      	bpl.n	a3b4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    a3ac:	2302      	movs	r3, #2
    a3ae:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    a3b0:	3318      	adds	r3, #24
    a3b2:	e7e7      	b.n	a384 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    a3b4:	0758      	lsls	r0, r3, #29
    a3b6:	d503      	bpl.n	a3c0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    a3b8:	2304      	movs	r3, #4
    a3ba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    a3bc:	331a      	adds	r3, #26
    a3be:	e7e1      	b.n	a384 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    a3c0:	07d8      	lsls	r0, r3, #31
    a3c2:	d503      	bpl.n	a3cc <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    a3c4:	2301      	movs	r3, #1
    a3c6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    a3c8:	3312      	adds	r3, #18
    a3ca:	e7db      	b.n	a384 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    a3cc:	06d8      	lsls	r0, r3, #27
    a3ce:	d503      	bpl.n	a3d8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    a3d0:	2310      	movs	r3, #16
    a3d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    a3d4:	3332      	adds	r3, #50	; 0x32
    a3d6:	e7d5      	b.n	a384 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    a3d8:	069b      	lsls	r3, r3, #26
    a3da:	d503      	bpl.n	a3e4 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    a3dc:	2320      	movs	r3, #32
    a3de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    a3e0:	3321      	adds	r3, #33	; 0x21
    a3e2:	e7cf      	b.n	a384 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    a3e4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    a3e6:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    a3e8:	2300      	movs	r3, #0
    a3ea:	e7cb      	b.n	a384 <usart_read_wait+0x8>

0000a3ec <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    a3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    a3ee:	0080      	lsls	r0, r0, #2
    a3f0:	4b62      	ldr	r3, [pc, #392]	; (a57c <_usart_interrupt_handler+0x190>)
    a3f2:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    a3f4:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    a3f6:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    a3f8:	2b00      	cmp	r3, #0
    a3fa:	d1fc      	bne.n	a3f6 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    a3fc:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    a3fe:	7da6      	ldrb	r6, [r4, #22]
    a400:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    a402:	2330      	movs	r3, #48	; 0x30
    a404:	5ceb      	ldrb	r3, [r5, r3]
    a406:	2231      	movs	r2, #49	; 0x31
    a408:	5caf      	ldrb	r7, [r5, r2]
    a40a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    a40c:	07f3      	lsls	r3, r6, #31
    a40e:	d522      	bpl.n	a456 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    a410:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    a412:	b29b      	uxth	r3, r3
    a414:	2b00      	cmp	r3, #0
    a416:	d01c      	beq.n	a452 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    a418:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    a41a:	7813      	ldrb	r3, [r2, #0]
    a41c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    a41e:	1c51      	adds	r1, r2, #1
    a420:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    a422:	7969      	ldrb	r1, [r5, #5]
    a424:	2901      	cmp	r1, #1
    a426:	d00e      	beq.n	a446 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    a428:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    a42a:	05db      	lsls	r3, r3, #23
    a42c:	0ddb      	lsrs	r3, r3, #23
    a42e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    a430:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    a432:	3b01      	subs	r3, #1
    a434:	b29b      	uxth	r3, r3
    a436:	85eb      	strh	r3, [r5, #46]	; 0x2e
    a438:	2b00      	cmp	r3, #0
    a43a:	d10c      	bne.n	a456 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    a43c:	3301      	adds	r3, #1
    a43e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    a440:	3301      	adds	r3, #1
    a442:	75a3      	strb	r3, [r4, #22]
    a444:	e007      	b.n	a456 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    a446:	7851      	ldrb	r1, [r2, #1]
    a448:	0209      	lsls	r1, r1, #8
    a44a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    a44c:	3202      	adds	r2, #2
    a44e:	62aa      	str	r2, [r5, #40]	; 0x28
    a450:	e7eb      	b.n	a42a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    a452:	2301      	movs	r3, #1
    a454:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    a456:	07b3      	lsls	r3, r6, #30
    a458:	d506      	bpl.n	a468 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    a45a:	2302      	movs	r3, #2
    a45c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    a45e:	2200      	movs	r2, #0
    a460:	3331      	adds	r3, #49	; 0x31
    a462:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    a464:	07fb      	lsls	r3, r7, #31
    a466:	d41a      	bmi.n	a49e <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    a468:	0773      	lsls	r3, r6, #29
    a46a:	d565      	bpl.n	a538 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    a46c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    a46e:	b29b      	uxth	r3, r3
    a470:	2b00      	cmp	r3, #0
    a472:	d05f      	beq.n	a534 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    a474:	8b63      	ldrh	r3, [r4, #26]
    a476:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    a478:	071a      	lsls	r2, r3, #28
    a47a:	d414      	bmi.n	a4a6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    a47c:	223f      	movs	r2, #63	; 0x3f
    a47e:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    a480:	2b00      	cmp	r3, #0
    a482:	d034      	beq.n	a4ee <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    a484:	079a      	lsls	r2, r3, #30
    a486:	d511      	bpl.n	a4ac <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    a488:	221a      	movs	r2, #26
    a48a:	2332      	movs	r3, #50	; 0x32
    a48c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    a48e:	3b30      	subs	r3, #48	; 0x30
    a490:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    a492:	077b      	lsls	r3, r7, #29
    a494:	d550      	bpl.n	a538 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    a496:	0028      	movs	r0, r5
    a498:	696b      	ldr	r3, [r5, #20]
    a49a:	4798      	blx	r3
    a49c:	e04c      	b.n	a538 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    a49e:	0028      	movs	r0, r5
    a4a0:	68eb      	ldr	r3, [r5, #12]
    a4a2:	4798      	blx	r3
    a4a4:	e7e0      	b.n	a468 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    a4a6:	2237      	movs	r2, #55	; 0x37
    a4a8:	4013      	ands	r3, r2
    a4aa:	e7e9      	b.n	a480 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    a4ac:	075a      	lsls	r2, r3, #29
    a4ae:	d505      	bpl.n	a4bc <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    a4b0:	221e      	movs	r2, #30
    a4b2:	2332      	movs	r3, #50	; 0x32
    a4b4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    a4b6:	3b2e      	subs	r3, #46	; 0x2e
    a4b8:	8363      	strh	r3, [r4, #26]
    a4ba:	e7ea      	b.n	a492 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    a4bc:	07da      	lsls	r2, r3, #31
    a4be:	d505      	bpl.n	a4cc <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    a4c0:	2213      	movs	r2, #19
    a4c2:	2332      	movs	r3, #50	; 0x32
    a4c4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    a4c6:	3b31      	subs	r3, #49	; 0x31
    a4c8:	8363      	strh	r3, [r4, #26]
    a4ca:	e7e2      	b.n	a492 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    a4cc:	06da      	lsls	r2, r3, #27
    a4ce:	d505      	bpl.n	a4dc <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    a4d0:	2242      	movs	r2, #66	; 0x42
    a4d2:	2332      	movs	r3, #50	; 0x32
    a4d4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    a4d6:	3b22      	subs	r3, #34	; 0x22
    a4d8:	8363      	strh	r3, [r4, #26]
    a4da:	e7da      	b.n	a492 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    a4dc:	2220      	movs	r2, #32
    a4de:	421a      	tst	r2, r3
    a4e0:	d0d7      	beq.n	a492 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    a4e2:	3221      	adds	r2, #33	; 0x21
    a4e4:	2332      	movs	r3, #50	; 0x32
    a4e6:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    a4e8:	3b12      	subs	r3, #18
    a4ea:	8363      	strh	r3, [r4, #26]
    a4ec:	e7d1      	b.n	a492 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    a4ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    a4f0:	05db      	lsls	r3, r3, #23
    a4f2:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    a4f4:	b2da      	uxtb	r2, r3
    a4f6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    a4f8:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    a4fa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    a4fc:	1c51      	adds	r1, r2, #1
    a4fe:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    a500:	7969      	ldrb	r1, [r5, #5]
    a502:	2901      	cmp	r1, #1
    a504:	d010      	beq.n	a528 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    a506:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    a508:	3b01      	subs	r3, #1
    a50a:	b29b      	uxth	r3, r3
    a50c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    a50e:	2b00      	cmp	r3, #0
    a510:	d112      	bne.n	a538 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    a512:	3304      	adds	r3, #4
    a514:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    a516:	2200      	movs	r2, #0
    a518:	332e      	adds	r3, #46	; 0x2e
    a51a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    a51c:	07bb      	lsls	r3, r7, #30
    a51e:	d50b      	bpl.n	a538 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    a520:	0028      	movs	r0, r5
    a522:	692b      	ldr	r3, [r5, #16]
    a524:	4798      	blx	r3
    a526:	e007      	b.n	a538 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    a528:	0a1b      	lsrs	r3, r3, #8
    a52a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    a52c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a52e:	3301      	adds	r3, #1
    a530:	626b      	str	r3, [r5, #36]	; 0x24
    a532:	e7e8      	b.n	a506 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    a534:	2304      	movs	r3, #4
    a536:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    a538:	06f3      	lsls	r3, r6, #27
    a53a:	d504      	bpl.n	a546 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    a53c:	2310      	movs	r3, #16
    a53e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    a540:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    a542:	06fb      	lsls	r3, r7, #27
    a544:	d40e      	bmi.n	a564 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    a546:	06b3      	lsls	r3, r6, #26
    a548:	d504      	bpl.n	a554 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    a54a:	2320      	movs	r3, #32
    a54c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    a54e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    a550:	073b      	lsls	r3, r7, #28
    a552:	d40b      	bmi.n	a56c <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    a554:	0733      	lsls	r3, r6, #28
    a556:	d504      	bpl.n	a562 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    a558:	2308      	movs	r3, #8
    a55a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    a55c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    a55e:	06bb      	lsls	r3, r7, #26
    a560:	d408      	bmi.n	a574 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    a562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    a564:	0028      	movs	r0, r5
    a566:	69eb      	ldr	r3, [r5, #28]
    a568:	4798      	blx	r3
    a56a:	e7ec      	b.n	a546 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    a56c:	0028      	movs	r0, r5
    a56e:	69ab      	ldr	r3, [r5, #24]
    a570:	4798      	blx	r3
    a572:	e7ef      	b.n	a554 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    a574:	6a2b      	ldr	r3, [r5, #32]
    a576:	0028      	movs	r0, r5
    a578:	4798      	blx	r3
}
    a57a:	e7f2      	b.n	a562 <_usart_interrupt_handler+0x176>
    a57c:	200007c4 	.word	0x200007c4

0000a580 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    a580:	b510      	push	{r4, lr}
	switch (clock_source) {
    a582:	2808      	cmp	r0, #8
    a584:	d803      	bhi.n	a58e <system_clock_source_get_hz+0xe>
    a586:	0080      	lsls	r0, r0, #2
    a588:	4b1b      	ldr	r3, [pc, #108]	; (a5f8 <system_clock_source_get_hz+0x78>)
    a58a:	581b      	ldr	r3, [r3, r0]
    a58c:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    a58e:	2000      	movs	r0, #0
    a590:	e030      	b.n	a5f4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    a592:	4b1a      	ldr	r3, [pc, #104]	; (a5fc <system_clock_source_get_hz+0x7c>)
    a594:	6918      	ldr	r0, [r3, #16]
    a596:	e02d      	b.n	a5f4 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    a598:	4b19      	ldr	r3, [pc, #100]	; (a600 <system_clock_source_get_hz+0x80>)
    a59a:	6a1b      	ldr	r3, [r3, #32]
    a59c:	059b      	lsls	r3, r3, #22
    a59e:	0f9b      	lsrs	r3, r3, #30
    a5a0:	4818      	ldr	r0, [pc, #96]	; (a604 <system_clock_source_get_hz+0x84>)
    a5a2:	40d8      	lsrs	r0, r3
    a5a4:	e026      	b.n	a5f4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    a5a6:	4b15      	ldr	r3, [pc, #84]	; (a5fc <system_clock_source_get_hz+0x7c>)
    a5a8:	6958      	ldr	r0, [r3, #20]
    a5aa:	e023      	b.n	a5f4 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    a5ac:	4b13      	ldr	r3, [pc, #76]	; (a5fc <system_clock_source_get_hz+0x7c>)
    a5ae:	681b      	ldr	r3, [r3, #0]
			return 0;
    a5b0:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    a5b2:	079b      	lsls	r3, r3, #30
    a5b4:	d51e      	bpl.n	a5f4 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    a5b6:	4912      	ldr	r1, [pc, #72]	; (a600 <system_clock_source_get_hz+0x80>)
    a5b8:	2210      	movs	r2, #16
    a5ba:	68cb      	ldr	r3, [r1, #12]
    a5bc:	421a      	tst	r2, r3
    a5be:	d0fc      	beq.n	a5ba <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    a5c0:	4b0e      	ldr	r3, [pc, #56]	; (a5fc <system_clock_source_get_hz+0x7c>)
    a5c2:	681b      	ldr	r3, [r3, #0]
    a5c4:	075b      	lsls	r3, r3, #29
    a5c6:	d401      	bmi.n	a5cc <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    a5c8:	480f      	ldr	r0, [pc, #60]	; (a608 <system_clock_source_get_hz+0x88>)
    a5ca:	e013      	b.n	a5f4 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    a5cc:	2000      	movs	r0, #0
    a5ce:	4b0f      	ldr	r3, [pc, #60]	; (a60c <system_clock_source_get_hz+0x8c>)
    a5d0:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    a5d2:	4b0a      	ldr	r3, [pc, #40]	; (a5fc <system_clock_source_get_hz+0x7c>)
    a5d4:	689b      	ldr	r3, [r3, #8]
    a5d6:	041b      	lsls	r3, r3, #16
    a5d8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    a5da:	4358      	muls	r0, r3
    a5dc:	e00a      	b.n	a5f4 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    a5de:	2350      	movs	r3, #80	; 0x50
    a5e0:	4a07      	ldr	r2, [pc, #28]	; (a600 <system_clock_source_get_hz+0x80>)
    a5e2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    a5e4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    a5e6:	075b      	lsls	r3, r3, #29
    a5e8:	d504      	bpl.n	a5f4 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    a5ea:	4b04      	ldr	r3, [pc, #16]	; (a5fc <system_clock_source_get_hz+0x7c>)
    a5ec:	68d8      	ldr	r0, [r3, #12]
    a5ee:	e001      	b.n	a5f4 <system_clock_source_get_hz+0x74>
		return 32768UL;
    a5f0:	2080      	movs	r0, #128	; 0x80
    a5f2:	0200      	lsls	r0, r0, #8
	}
}
    a5f4:	bd10      	pop	{r4, pc}
    a5f6:	46c0      	nop			; (mov r8, r8)
    a5f8:	0000fb68 	.word	0x0000fb68
    a5fc:	20000454 	.word	0x20000454
    a600:	40000800 	.word	0x40000800
    a604:	007a1200 	.word	0x007a1200
    a608:	02dc6c00 	.word	0x02dc6c00
    a60c:	0000abe1 	.word	0x0000abe1

0000a610 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    a610:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    a612:	490c      	ldr	r1, [pc, #48]	; (a644 <system_clock_source_osc8m_set_config+0x34>)
    a614:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    a616:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    a618:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    a61a:	7840      	ldrb	r0, [r0, #1]
    a61c:	2201      	movs	r2, #1
    a61e:	4010      	ands	r0, r2
    a620:	0180      	lsls	r0, r0, #6
    a622:	2640      	movs	r6, #64	; 0x40
    a624:	43b3      	bics	r3, r6
    a626:	4303      	orrs	r3, r0
    a628:	402a      	ands	r2, r5
    a62a:	01d2      	lsls	r2, r2, #7
    a62c:	2080      	movs	r0, #128	; 0x80
    a62e:	4383      	bics	r3, r0
    a630:	4313      	orrs	r3, r2
    a632:	2203      	movs	r2, #3
    a634:	4022      	ands	r2, r4
    a636:	0212      	lsls	r2, r2, #8
    a638:	4803      	ldr	r0, [pc, #12]	; (a648 <system_clock_source_osc8m_set_config+0x38>)
    a63a:	4003      	ands	r3, r0
    a63c:	4313      	orrs	r3, r2
    a63e:	620b      	str	r3, [r1, #32]
}
    a640:	bd70      	pop	{r4, r5, r6, pc}
    a642:	46c0      	nop			; (mov r8, r8)
    a644:	40000800 	.word	0x40000800
    a648:	fffffcff 	.word	0xfffffcff

0000a64c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    a64c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a64e:	46de      	mov	lr, fp
    a650:	4657      	mov	r7, sl
    a652:	464e      	mov	r6, r9
    a654:	4645      	mov	r5, r8
    a656:	b5e0      	push	{r5, r6, r7, lr}
    a658:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    a65a:	4b26      	ldr	r3, [pc, #152]	; (a6f4 <system_clock_source_xosc32k_set_config+0xa8>)
    a65c:	469b      	mov	fp, r3
    a65e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    a660:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    a662:	7800      	ldrb	r0, [r0, #0]
    a664:	4242      	negs	r2, r0
    a666:	4142      	adcs	r2, r0
    a668:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    a66a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    a66c:	78ca      	ldrb	r2, [r1, #3]
    a66e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    a670:	790a      	ldrb	r2, [r1, #4]
    a672:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    a674:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    a676:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    a678:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    a67a:	688a      	ldr	r2, [r1, #8]
    a67c:	491e      	ldr	r1, [pc, #120]	; (a6f8 <system_clock_source_xosc32k_set_config+0xac>)
    a67e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    a680:	2101      	movs	r1, #1
    a682:	464a      	mov	r2, r9
    a684:	0092      	lsls	r2, r2, #2
    a686:	4691      	mov	r9, r2
    a688:	2204      	movs	r2, #4
    a68a:	4393      	bics	r3, r2
    a68c:	464a      	mov	r2, r9
    a68e:	4313      	orrs	r3, r2
    a690:	4642      	mov	r2, r8
    a692:	400a      	ands	r2, r1
    a694:	00d2      	lsls	r2, r2, #3
    a696:	4690      	mov	r8, r2
    a698:	2208      	movs	r2, #8
    a69a:	4393      	bics	r3, r2
    a69c:	4642      	mov	r2, r8
    a69e:	4313      	orrs	r3, r2
    a6a0:	4662      	mov	r2, ip
    a6a2:	400a      	ands	r2, r1
    a6a4:	0112      	lsls	r2, r2, #4
    a6a6:	4694      	mov	ip, r2
    a6a8:	2210      	movs	r2, #16
    a6aa:	4393      	bics	r3, r2
    a6ac:	4662      	mov	r2, ip
    a6ae:	4313      	orrs	r3, r2
    a6b0:	4008      	ands	r0, r1
    a6b2:	0140      	lsls	r0, r0, #5
    a6b4:	2220      	movs	r2, #32
    a6b6:	4393      	bics	r3, r2
    a6b8:	4303      	orrs	r3, r0
    a6ba:	400f      	ands	r7, r1
    a6bc:	01bf      	lsls	r7, r7, #6
    a6be:	2040      	movs	r0, #64	; 0x40
    a6c0:	4383      	bics	r3, r0
    a6c2:	433b      	orrs	r3, r7
    a6c4:	400e      	ands	r6, r1
    a6c6:	01f6      	lsls	r6, r6, #7
    a6c8:	3040      	adds	r0, #64	; 0x40
    a6ca:	4383      	bics	r3, r0
    a6cc:	4333      	orrs	r3, r6
    a6ce:	3879      	subs	r0, #121	; 0x79
    a6d0:	4005      	ands	r5, r0
    a6d2:	022d      	lsls	r5, r5, #8
    a6d4:	4809      	ldr	r0, [pc, #36]	; (a6fc <system_clock_source_xosc32k_set_config+0xb0>)
    a6d6:	4003      	ands	r3, r0
    a6d8:	432b      	orrs	r3, r5
    a6da:	4021      	ands	r1, r4
    a6dc:	0309      	lsls	r1, r1, #12
    a6de:	4808      	ldr	r0, [pc, #32]	; (a700 <system_clock_source_xosc32k_set_config+0xb4>)
    a6e0:	4003      	ands	r3, r0
    a6e2:	430b      	orrs	r3, r1
    a6e4:	465a      	mov	r2, fp
    a6e6:	8293      	strh	r3, [r2, #20]
}
    a6e8:	bc3c      	pop	{r2, r3, r4, r5}
    a6ea:	4690      	mov	r8, r2
    a6ec:	4699      	mov	r9, r3
    a6ee:	46a2      	mov	sl, r4
    a6f0:	46ab      	mov	fp, r5
    a6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a6f4:	40000800 	.word	0x40000800
    a6f8:	20000454 	.word	0x20000454
    a6fc:	fffff8ff 	.word	0xfffff8ff
    a700:	ffffefff 	.word	0xffffefff

0000a704 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    a704:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    a706:	7a03      	ldrb	r3, [r0, #8]
    a708:	069b      	lsls	r3, r3, #26
    a70a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    a70c:	8942      	ldrh	r2, [r0, #10]
    a70e:	0592      	lsls	r2, r2, #22
    a710:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    a712:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    a714:	4918      	ldr	r1, [pc, #96]	; (a778 <system_clock_source_dfll_set_config+0x74>)
    a716:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    a718:	7983      	ldrb	r3, [r0, #6]
    a71a:	79c2      	ldrb	r2, [r0, #7]
    a71c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    a71e:	8842      	ldrh	r2, [r0, #2]
    a720:	8884      	ldrh	r4, [r0, #4]
    a722:	4322      	orrs	r2, r4
    a724:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    a726:	7842      	ldrb	r2, [r0, #1]
    a728:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    a72a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    a72c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    a72e:	7803      	ldrb	r3, [r0, #0]
    a730:	2b04      	cmp	r3, #4
    a732:	d011      	beq.n	a758 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    a734:	2b20      	cmp	r3, #32
    a736:	d10e      	bne.n	a756 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a738:	7b03      	ldrb	r3, [r0, #12]
    a73a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    a73c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a73e:	4313      	orrs	r3, r2
    a740:	89c2      	ldrh	r2, [r0, #14]
    a742:	0412      	lsls	r2, r2, #16
    a744:	490d      	ldr	r1, [pc, #52]	; (a77c <system_clock_source_dfll_set_config+0x78>)
    a746:	400a      	ands	r2, r1
    a748:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    a74a:	4a0b      	ldr	r2, [pc, #44]	; (a778 <system_clock_source_dfll_set_config+0x74>)
    a74c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    a74e:	6811      	ldr	r1, [r2, #0]
    a750:	4b0b      	ldr	r3, [pc, #44]	; (a780 <system_clock_source_dfll_set_config+0x7c>)
    a752:	430b      	orrs	r3, r1
    a754:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    a756:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a758:	7b03      	ldrb	r3, [r0, #12]
    a75a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    a75c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a75e:	4313      	orrs	r3, r2
    a760:	89c2      	ldrh	r2, [r0, #14]
    a762:	0412      	lsls	r2, r2, #16
    a764:	4905      	ldr	r1, [pc, #20]	; (a77c <system_clock_source_dfll_set_config+0x78>)
    a766:	400a      	ands	r2, r1
    a768:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    a76a:	4a03      	ldr	r2, [pc, #12]	; (a778 <system_clock_source_dfll_set_config+0x74>)
    a76c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    a76e:	6813      	ldr	r3, [r2, #0]
    a770:	2104      	movs	r1, #4
    a772:	430b      	orrs	r3, r1
    a774:	6013      	str	r3, [r2, #0]
    a776:	e7ee      	b.n	a756 <system_clock_source_dfll_set_config+0x52>
    a778:	20000454 	.word	0x20000454
    a77c:	03ff0000 	.word	0x03ff0000
    a780:	00000424 	.word	0x00000424

0000a784 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    a784:	2808      	cmp	r0, #8
    a786:	d803      	bhi.n	a790 <system_clock_source_enable+0xc>
    a788:	0080      	lsls	r0, r0, #2
    a78a:	4b25      	ldr	r3, [pc, #148]	; (a820 <system_clock_source_enable+0x9c>)
    a78c:	581b      	ldr	r3, [r3, r0]
    a78e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    a790:	2017      	movs	r0, #23
    a792:	e044      	b.n	a81e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    a794:	4a23      	ldr	r2, [pc, #140]	; (a824 <system_clock_source_enable+0xa0>)
    a796:	6a13      	ldr	r3, [r2, #32]
    a798:	2102      	movs	r1, #2
    a79a:	430b      	orrs	r3, r1
    a79c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    a79e:	2000      	movs	r0, #0
    a7a0:	e03d      	b.n	a81e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    a7a2:	4a20      	ldr	r2, [pc, #128]	; (a824 <system_clock_source_enable+0xa0>)
    a7a4:	6993      	ldr	r3, [r2, #24]
    a7a6:	2102      	movs	r1, #2
    a7a8:	430b      	orrs	r3, r1
    a7aa:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    a7ac:	2000      	movs	r0, #0
		break;
    a7ae:	e036      	b.n	a81e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    a7b0:	4a1c      	ldr	r2, [pc, #112]	; (a824 <system_clock_source_enable+0xa0>)
    a7b2:	8a13      	ldrh	r3, [r2, #16]
    a7b4:	2102      	movs	r1, #2
    a7b6:	430b      	orrs	r3, r1
    a7b8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    a7ba:	2000      	movs	r0, #0
		break;
    a7bc:	e02f      	b.n	a81e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    a7be:	4a19      	ldr	r2, [pc, #100]	; (a824 <system_clock_source_enable+0xa0>)
    a7c0:	8a93      	ldrh	r3, [r2, #20]
    a7c2:	2102      	movs	r1, #2
    a7c4:	430b      	orrs	r3, r1
    a7c6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    a7c8:	2000      	movs	r0, #0
		break;
    a7ca:	e028      	b.n	a81e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    a7cc:	4916      	ldr	r1, [pc, #88]	; (a828 <system_clock_source_enable+0xa4>)
    a7ce:	680b      	ldr	r3, [r1, #0]
    a7d0:	2202      	movs	r2, #2
    a7d2:	4313      	orrs	r3, r2
    a7d4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    a7d6:	4b13      	ldr	r3, [pc, #76]	; (a824 <system_clock_source_enable+0xa0>)
    a7d8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    a7da:	0019      	movs	r1, r3
    a7dc:	320e      	adds	r2, #14
    a7de:	68cb      	ldr	r3, [r1, #12]
    a7e0:	421a      	tst	r2, r3
    a7e2:	d0fc      	beq.n	a7de <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    a7e4:	4a10      	ldr	r2, [pc, #64]	; (a828 <system_clock_source_enable+0xa4>)
    a7e6:	6891      	ldr	r1, [r2, #8]
    a7e8:	4b0e      	ldr	r3, [pc, #56]	; (a824 <system_clock_source_enable+0xa0>)
    a7ea:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    a7ec:	6852      	ldr	r2, [r2, #4]
    a7ee:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    a7f0:	2200      	movs	r2, #0
    a7f2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    a7f4:	0019      	movs	r1, r3
    a7f6:	3210      	adds	r2, #16
    a7f8:	68cb      	ldr	r3, [r1, #12]
    a7fa:	421a      	tst	r2, r3
    a7fc:	d0fc      	beq.n	a7f8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    a7fe:	4b0a      	ldr	r3, [pc, #40]	; (a828 <system_clock_source_enable+0xa4>)
    a800:	681b      	ldr	r3, [r3, #0]
    a802:	b29b      	uxth	r3, r3
    a804:	4a07      	ldr	r2, [pc, #28]	; (a824 <system_clock_source_enable+0xa0>)
    a806:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    a808:	2000      	movs	r0, #0
    a80a:	e008      	b.n	a81e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    a80c:	4905      	ldr	r1, [pc, #20]	; (a824 <system_clock_source_enable+0xa0>)
    a80e:	2244      	movs	r2, #68	; 0x44
    a810:	5c8b      	ldrb	r3, [r1, r2]
    a812:	2002      	movs	r0, #2
    a814:	4303      	orrs	r3, r0
    a816:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    a818:	2000      	movs	r0, #0
		break;
    a81a:	e000      	b.n	a81e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    a81c:	2000      	movs	r0, #0
}
    a81e:	4770      	bx	lr
    a820:	0000fb8c 	.word	0x0000fb8c
    a824:	40000800 	.word	0x40000800
    a828:	20000454 	.word	0x20000454

0000a82c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    a82c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a82e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    a830:	22c2      	movs	r2, #194	; 0xc2
    a832:	00d2      	lsls	r2, r2, #3
    a834:	4b47      	ldr	r3, [pc, #284]	; (a954 <system_clock_init+0x128>)
    a836:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    a838:	4a47      	ldr	r2, [pc, #284]	; (a958 <system_clock_init+0x12c>)
    a83a:	6853      	ldr	r3, [r2, #4]
    a83c:	211e      	movs	r1, #30
    a83e:	438b      	bics	r3, r1
    a840:	391a      	subs	r1, #26
    a842:	430b      	orrs	r3, r1
    a844:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    a846:	2202      	movs	r2, #2
    a848:	ab01      	add	r3, sp, #4
    a84a:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    a84c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    a84e:	4d43      	ldr	r5, [pc, #268]	; (a95c <system_clock_init+0x130>)
    a850:	b2e0      	uxtb	r0, r4
    a852:	a901      	add	r1, sp, #4
    a854:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    a856:	3401      	adds	r4, #1
    a858:	2c25      	cmp	r4, #37	; 0x25
    a85a:	d1f9      	bne.n	a850 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    a85c:	a80a      	add	r0, sp, #40	; 0x28
    a85e:	2300      	movs	r3, #0
    a860:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    a862:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    a864:	2280      	movs	r2, #128	; 0x80
    a866:	0212      	lsls	r2, r2, #8
    a868:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    a86a:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    a86c:	2201      	movs	r2, #1
    a86e:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    a870:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    a872:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    a874:	3202      	adds	r2, #2
    a876:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    a878:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    a87a:	4b39      	ldr	r3, [pc, #228]	; (a960 <system_clock_init+0x134>)
    a87c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    a87e:	2005      	movs	r0, #5
    a880:	4b38      	ldr	r3, [pc, #224]	; (a964 <system_clock_init+0x138>)
    a882:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    a884:	4933      	ldr	r1, [pc, #204]	; (a954 <system_clock_init+0x128>)
    a886:	2202      	movs	r2, #2
    a888:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    a88a:	421a      	tst	r2, r3
    a88c:	d0fc      	beq.n	a888 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    a88e:	4a31      	ldr	r2, [pc, #196]	; (a954 <system_clock_init+0x128>)
    a890:	8a93      	ldrh	r3, [r2, #20]
    a892:	2180      	movs	r1, #128	; 0x80
    a894:	430b      	orrs	r3, r1
    a896:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    a898:	ab05      	add	r3, sp, #20
    a89a:	2100      	movs	r1, #0
    a89c:	2200      	movs	r2, #0
    a89e:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    a8a0:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    a8a2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    a8a4:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    a8a6:	313f      	adds	r1, #63	; 0x3f
    a8a8:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    a8aa:	393b      	subs	r1, #59	; 0x3b
    a8ac:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    a8ae:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    a8b0:	4b2d      	ldr	r3, [pc, #180]	; (a968 <system_clock_init+0x13c>)
    a8b2:	681b      	ldr	r3, [r3, #0]
    a8b4:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    a8b6:	2b3f      	cmp	r3, #63	; 0x3f
    a8b8:	d04a      	beq.n	a950 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    a8ba:	a805      	add	r0, sp, #20
    a8bc:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    a8be:	4b2b      	ldr	r3, [pc, #172]	; (a96c <system_clock_init+0x140>)
    a8c0:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    a8c2:	2307      	movs	r3, #7
    a8c4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    a8c6:	3338      	adds	r3, #56	; 0x38
    a8c8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    a8ca:	4b29      	ldr	r3, [pc, #164]	; (a970 <system_clock_init+0x144>)
    a8cc:	4798      	blx	r3
	config->run_in_standby  = false;
    a8ce:	a804      	add	r0, sp, #16
    a8d0:	2500      	movs	r5, #0
    a8d2:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    a8d4:	2601      	movs	r6, #1
    a8d6:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    a8d8:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    a8da:	4b26      	ldr	r3, [pc, #152]	; (a974 <system_clock_init+0x148>)
    a8dc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    a8de:	2006      	movs	r0, #6
    a8e0:	4f20      	ldr	r7, [pc, #128]	; (a964 <system_clock_init+0x138>)
    a8e2:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    a8e4:	4b24      	ldr	r3, [pc, #144]	; (a978 <system_clock_init+0x14c>)
    a8e6:	4798      	blx	r3
	config->division_factor    = 1;
    a8e8:	ac01      	add	r4, sp, #4
    a8ea:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    a8ec:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    a8ee:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    a8f0:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    a8f2:	2305      	movs	r3, #5
    a8f4:	7023      	strb	r3, [r4, #0]
    a8f6:	0021      	movs	r1, r4
    a8f8:	2001      	movs	r0, #1
    a8fa:	4b20      	ldr	r3, [pc, #128]	; (a97c <system_clock_init+0x150>)
    a8fc:	4798      	blx	r3
    a8fe:	2001      	movs	r0, #1
    a900:	4b1f      	ldr	r3, [pc, #124]	; (a980 <system_clock_init+0x154>)
    a902:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    a904:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    a906:	0021      	movs	r1, r4
    a908:	2000      	movs	r0, #0
    a90a:	4b14      	ldr	r3, [pc, #80]	; (a95c <system_clock_init+0x130>)
    a90c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    a90e:	2000      	movs	r0, #0
    a910:	4b1c      	ldr	r3, [pc, #112]	; (a984 <system_clock_init+0x158>)
    a912:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    a914:	2007      	movs	r0, #7
    a916:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    a918:	490e      	ldr	r1, [pc, #56]	; (a954 <system_clock_init+0x128>)
    a91a:	22d0      	movs	r2, #208	; 0xd0
    a91c:	68cb      	ldr	r3, [r1, #12]
    a91e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    a920:	2bd0      	cmp	r3, #208	; 0xd0
    a922:	d1fb      	bne.n	a91c <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    a924:	4a18      	ldr	r2, [pc, #96]	; (a988 <system_clock_init+0x15c>)
    a926:	2300      	movs	r3, #0
    a928:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    a92a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    a92c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    a92e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    a930:	a901      	add	r1, sp, #4
    a932:	2201      	movs	r2, #1
    a934:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    a936:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    a938:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    a93a:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    a93c:	3307      	adds	r3, #7
    a93e:	700b      	strb	r3, [r1, #0]
    a940:	2000      	movs	r0, #0
    a942:	4b0e      	ldr	r3, [pc, #56]	; (a97c <system_clock_init+0x150>)
    a944:	4798      	blx	r3
    a946:	2000      	movs	r0, #0
    a948:	4b0d      	ldr	r3, [pc, #52]	; (a980 <system_clock_init+0x154>)
    a94a:	4798      	blx	r3
#endif
}
    a94c:	b00f      	add	sp, #60	; 0x3c
    a94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    a950:	3b20      	subs	r3, #32
    a952:	e7b2      	b.n	a8ba <system_clock_init+0x8e>
    a954:	40000800 	.word	0x40000800
    a958:	41004000 	.word	0x41004000
    a95c:	0000abc5 	.word	0x0000abc5
    a960:	0000a64d 	.word	0x0000a64d
    a964:	0000a785 	.word	0x0000a785
    a968:	00806024 	.word	0x00806024
    a96c:	000005b9 	.word	0x000005b9
    a970:	0000a705 	.word	0x0000a705
    a974:	0000a611 	.word	0x0000a611
    a978:	0000a98d 	.word	0x0000a98d
    a97c:	0000a9b1 	.word	0x0000a9b1
    a980:	0000aa69 	.word	0x0000aa69
    a984:	0000ab39 	.word	0x0000ab39
    a988:	40000400 	.word	0x40000400

0000a98c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    a98c:	4a06      	ldr	r2, [pc, #24]	; (a9a8 <system_gclk_init+0x1c>)
    a98e:	6993      	ldr	r3, [r2, #24]
    a990:	2108      	movs	r1, #8
    a992:	430b      	orrs	r3, r1
    a994:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    a996:	2201      	movs	r2, #1
    a998:	4b04      	ldr	r3, [pc, #16]	; (a9ac <system_gclk_init+0x20>)
    a99a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    a99c:	0019      	movs	r1, r3
    a99e:	780b      	ldrb	r3, [r1, #0]
    a9a0:	4213      	tst	r3, r2
    a9a2:	d1fc      	bne.n	a99e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    a9a4:	4770      	bx	lr
    a9a6:	46c0      	nop			; (mov r8, r8)
    a9a8:	40000400 	.word	0x40000400
    a9ac:	40000c00 	.word	0x40000c00

0000a9b0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    a9b0:	b570      	push	{r4, r5, r6, lr}
    a9b2:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    a9b4:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    a9b6:	780d      	ldrb	r5, [r1, #0]
    a9b8:	022d      	lsls	r5, r5, #8
    a9ba:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    a9bc:	784b      	ldrb	r3, [r1, #1]
    a9be:	2b00      	cmp	r3, #0
    a9c0:	d002      	beq.n	a9c8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    a9c2:	2380      	movs	r3, #128	; 0x80
    a9c4:	02db      	lsls	r3, r3, #11
    a9c6:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    a9c8:	7a4b      	ldrb	r3, [r1, #9]
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	d002      	beq.n	a9d4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    a9ce:	2380      	movs	r3, #128	; 0x80
    a9d0:	031b      	lsls	r3, r3, #12
    a9d2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    a9d4:	6848      	ldr	r0, [r1, #4]
    a9d6:	2801      	cmp	r0, #1
    a9d8:	d910      	bls.n	a9fc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    a9da:	1e43      	subs	r3, r0, #1
    a9dc:	4218      	tst	r0, r3
    a9de:	d134      	bne.n	aa4a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    a9e0:	2802      	cmp	r0, #2
    a9e2:	d930      	bls.n	aa46 <system_gclk_gen_set_config+0x96>
    a9e4:	2302      	movs	r3, #2
    a9e6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    a9e8:	3201      	adds	r2, #1
						mask <<= 1) {
    a9ea:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    a9ec:	4298      	cmp	r0, r3
    a9ee:	d8fb      	bhi.n	a9e8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    a9f0:	0212      	lsls	r2, r2, #8
    a9f2:	4332      	orrs	r2, r6
    a9f4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    a9f6:	2380      	movs	r3, #128	; 0x80
    a9f8:	035b      	lsls	r3, r3, #13
    a9fa:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    a9fc:	7a0b      	ldrb	r3, [r1, #8]
    a9fe:	2b00      	cmp	r3, #0
    aa00:	d002      	beq.n	aa08 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    aa02:	2380      	movs	r3, #128	; 0x80
    aa04:	039b      	lsls	r3, r3, #14
    aa06:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    aa08:	4a13      	ldr	r2, [pc, #76]	; (aa58 <system_gclk_gen_set_config+0xa8>)
    aa0a:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    aa0c:	b25b      	sxtb	r3, r3
    aa0e:	2b00      	cmp	r3, #0
    aa10:	dbfb      	blt.n	aa0a <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    aa12:	4b12      	ldr	r3, [pc, #72]	; (aa5c <system_gclk_gen_set_config+0xac>)
    aa14:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    aa16:	4b12      	ldr	r3, [pc, #72]	; (aa60 <system_gclk_gen_set_config+0xb0>)
    aa18:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    aa1a:	4a0f      	ldr	r2, [pc, #60]	; (aa58 <system_gclk_gen_set_config+0xa8>)
    aa1c:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    aa1e:	b25b      	sxtb	r3, r3
    aa20:	2b00      	cmp	r3, #0
    aa22:	dbfb      	blt.n	aa1c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    aa24:	4b0c      	ldr	r3, [pc, #48]	; (aa58 <system_gclk_gen_set_config+0xa8>)
    aa26:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    aa28:	001a      	movs	r2, r3
    aa2a:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    aa2c:	b25b      	sxtb	r3, r3
    aa2e:	2b00      	cmp	r3, #0
    aa30:	dbfb      	blt.n	aa2a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    aa32:	4a09      	ldr	r2, [pc, #36]	; (aa58 <system_gclk_gen_set_config+0xa8>)
    aa34:	6853      	ldr	r3, [r2, #4]
    aa36:	2180      	movs	r1, #128	; 0x80
    aa38:	0249      	lsls	r1, r1, #9
    aa3a:	400b      	ands	r3, r1
    aa3c:	431d      	orrs	r5, r3
    aa3e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    aa40:	4b08      	ldr	r3, [pc, #32]	; (aa64 <system_gclk_gen_set_config+0xb4>)
    aa42:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    aa44:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    aa46:	2200      	movs	r2, #0
    aa48:	e7d2      	b.n	a9f0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    aa4a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    aa4c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    aa4e:	2380      	movs	r3, #128	; 0x80
    aa50:	029b      	lsls	r3, r3, #10
    aa52:	431d      	orrs	r5, r3
    aa54:	e7d2      	b.n	a9fc <system_gclk_gen_set_config+0x4c>
    aa56:	46c0      	nop			; (mov r8, r8)
    aa58:	40000c00 	.word	0x40000c00
    aa5c:	00009045 	.word	0x00009045
    aa60:	40000c08 	.word	0x40000c08
    aa64:	00009085 	.word	0x00009085

0000aa68 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    aa68:	b510      	push	{r4, lr}
    aa6a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    aa6c:	4a0b      	ldr	r2, [pc, #44]	; (aa9c <system_gclk_gen_enable+0x34>)
    aa6e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    aa70:	b25b      	sxtb	r3, r3
    aa72:	2b00      	cmp	r3, #0
    aa74:	dbfb      	blt.n	aa6e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    aa76:	4b0a      	ldr	r3, [pc, #40]	; (aaa0 <system_gclk_gen_enable+0x38>)
    aa78:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    aa7a:	4b0a      	ldr	r3, [pc, #40]	; (aaa4 <system_gclk_gen_enable+0x3c>)
    aa7c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    aa7e:	4a07      	ldr	r2, [pc, #28]	; (aa9c <system_gclk_gen_enable+0x34>)
    aa80:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    aa82:	b25b      	sxtb	r3, r3
    aa84:	2b00      	cmp	r3, #0
    aa86:	dbfb      	blt.n	aa80 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    aa88:	4a04      	ldr	r2, [pc, #16]	; (aa9c <system_gclk_gen_enable+0x34>)
    aa8a:	6851      	ldr	r1, [r2, #4]
    aa8c:	2380      	movs	r3, #128	; 0x80
    aa8e:	025b      	lsls	r3, r3, #9
    aa90:	430b      	orrs	r3, r1
    aa92:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    aa94:	4b04      	ldr	r3, [pc, #16]	; (aaa8 <system_gclk_gen_enable+0x40>)
    aa96:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    aa98:	bd10      	pop	{r4, pc}
    aa9a:	46c0      	nop			; (mov r8, r8)
    aa9c:	40000c00 	.word	0x40000c00
    aaa0:	00009045 	.word	0x00009045
    aaa4:	40000c04 	.word	0x40000c04
    aaa8:	00009085 	.word	0x00009085

0000aaac <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    aaac:	b570      	push	{r4, r5, r6, lr}
    aaae:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    aab0:	4a1a      	ldr	r2, [pc, #104]	; (ab1c <system_gclk_gen_get_hz+0x70>)
    aab2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    aab4:	b25b      	sxtb	r3, r3
    aab6:	2b00      	cmp	r3, #0
    aab8:	dbfb      	blt.n	aab2 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    aaba:	4b19      	ldr	r3, [pc, #100]	; (ab20 <system_gclk_gen_get_hz+0x74>)
    aabc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    aabe:	4b19      	ldr	r3, [pc, #100]	; (ab24 <system_gclk_gen_get_hz+0x78>)
    aac0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    aac2:	4a16      	ldr	r2, [pc, #88]	; (ab1c <system_gclk_gen_get_hz+0x70>)
    aac4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    aac6:	b25b      	sxtb	r3, r3
    aac8:	2b00      	cmp	r3, #0
    aaca:	dbfb      	blt.n	aac4 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    aacc:	4e13      	ldr	r6, [pc, #76]	; (ab1c <system_gclk_gen_get_hz+0x70>)
    aace:	6870      	ldr	r0, [r6, #4]
    aad0:	04c0      	lsls	r0, r0, #19
    aad2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    aad4:	4b14      	ldr	r3, [pc, #80]	; (ab28 <system_gclk_gen_get_hz+0x7c>)
    aad6:	4798      	blx	r3
    aad8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    aada:	4b12      	ldr	r3, [pc, #72]	; (ab24 <system_gclk_gen_get_hz+0x78>)
    aadc:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    aade:	6876      	ldr	r6, [r6, #4]
    aae0:	02f6      	lsls	r6, r6, #11
    aae2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    aae4:	4b11      	ldr	r3, [pc, #68]	; (ab2c <system_gclk_gen_get_hz+0x80>)
    aae6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    aae8:	4a0c      	ldr	r2, [pc, #48]	; (ab1c <system_gclk_gen_get_hz+0x70>)
    aaea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    aaec:	b25b      	sxtb	r3, r3
    aaee:	2b00      	cmp	r3, #0
    aaf0:	dbfb      	blt.n	aaea <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    aaf2:	4b0a      	ldr	r3, [pc, #40]	; (ab1c <system_gclk_gen_get_hz+0x70>)
    aaf4:	689c      	ldr	r4, [r3, #8]
    aaf6:	0224      	lsls	r4, r4, #8
    aaf8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    aafa:	4b0d      	ldr	r3, [pc, #52]	; (ab30 <system_gclk_gen_get_hz+0x84>)
    aafc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    aafe:	2e00      	cmp	r6, #0
    ab00:	d107      	bne.n	ab12 <system_gclk_gen_get_hz+0x66>
    ab02:	2c01      	cmp	r4, #1
    ab04:	d907      	bls.n	ab16 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    ab06:	0021      	movs	r1, r4
    ab08:	0028      	movs	r0, r5
    ab0a:	4b0a      	ldr	r3, [pc, #40]	; (ab34 <system_gclk_gen_get_hz+0x88>)
    ab0c:	4798      	blx	r3
    ab0e:	0005      	movs	r5, r0
    ab10:	e001      	b.n	ab16 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    ab12:	3401      	adds	r4, #1
    ab14:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    ab16:	0028      	movs	r0, r5
    ab18:	bd70      	pop	{r4, r5, r6, pc}
    ab1a:	46c0      	nop			; (mov r8, r8)
    ab1c:	40000c00 	.word	0x40000c00
    ab20:	00009045 	.word	0x00009045
    ab24:	40000c04 	.word	0x40000c04
    ab28:	0000a581 	.word	0x0000a581
    ab2c:	40000c08 	.word	0x40000c08
    ab30:	00009085 	.word	0x00009085
    ab34:	0000c8d5 	.word	0x0000c8d5

0000ab38 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    ab38:	b510      	push	{r4, lr}
    ab3a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    ab3c:	4b06      	ldr	r3, [pc, #24]	; (ab58 <system_gclk_chan_enable+0x20>)
    ab3e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    ab40:	4b06      	ldr	r3, [pc, #24]	; (ab5c <system_gclk_chan_enable+0x24>)
    ab42:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    ab44:	4a06      	ldr	r2, [pc, #24]	; (ab60 <system_gclk_chan_enable+0x28>)
    ab46:	8853      	ldrh	r3, [r2, #2]
    ab48:	2180      	movs	r1, #128	; 0x80
    ab4a:	01c9      	lsls	r1, r1, #7
    ab4c:	430b      	orrs	r3, r1
    ab4e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    ab50:	4b04      	ldr	r3, [pc, #16]	; (ab64 <system_gclk_chan_enable+0x2c>)
    ab52:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    ab54:	bd10      	pop	{r4, pc}
    ab56:	46c0      	nop			; (mov r8, r8)
    ab58:	00009045 	.word	0x00009045
    ab5c:	40000c02 	.word	0x40000c02
    ab60:	40000c00 	.word	0x40000c00
    ab64:	00009085 	.word	0x00009085

0000ab68 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    ab68:	b510      	push	{r4, lr}
    ab6a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    ab6c:	4b0f      	ldr	r3, [pc, #60]	; (abac <system_gclk_chan_disable+0x44>)
    ab6e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    ab70:	4b0f      	ldr	r3, [pc, #60]	; (abb0 <system_gclk_chan_disable+0x48>)
    ab72:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    ab74:	4a0f      	ldr	r2, [pc, #60]	; (abb4 <system_gclk_chan_disable+0x4c>)
    ab76:	8853      	ldrh	r3, [r2, #2]
    ab78:	051b      	lsls	r3, r3, #20
    ab7a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    ab7c:	8853      	ldrh	r3, [r2, #2]
    ab7e:	490e      	ldr	r1, [pc, #56]	; (abb8 <system_gclk_chan_disable+0x50>)
    ab80:	400b      	ands	r3, r1
    ab82:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    ab84:	8853      	ldrh	r3, [r2, #2]
    ab86:	490d      	ldr	r1, [pc, #52]	; (abbc <system_gclk_chan_disable+0x54>)
    ab88:	400b      	ands	r3, r1
    ab8a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    ab8c:	0011      	movs	r1, r2
    ab8e:	2280      	movs	r2, #128	; 0x80
    ab90:	01d2      	lsls	r2, r2, #7
    ab92:	884b      	ldrh	r3, [r1, #2]
    ab94:	4213      	tst	r3, r2
    ab96:	d1fc      	bne.n	ab92 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    ab98:	4906      	ldr	r1, [pc, #24]	; (abb4 <system_gclk_chan_disable+0x4c>)
    ab9a:	884a      	ldrh	r2, [r1, #2]
    ab9c:	0203      	lsls	r3, r0, #8
    ab9e:	4806      	ldr	r0, [pc, #24]	; (abb8 <system_gclk_chan_disable+0x50>)
    aba0:	4002      	ands	r2, r0
    aba2:	4313      	orrs	r3, r2
    aba4:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    aba6:	4b06      	ldr	r3, [pc, #24]	; (abc0 <system_gclk_chan_disable+0x58>)
    aba8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    abaa:	bd10      	pop	{r4, pc}
    abac:	00009045 	.word	0x00009045
    abb0:	40000c02 	.word	0x40000c02
    abb4:	40000c00 	.word	0x40000c00
    abb8:	fffff0ff 	.word	0xfffff0ff
    abbc:	ffffbfff 	.word	0xffffbfff
    abc0:	00009085 	.word	0x00009085

0000abc4 <system_gclk_chan_set_config>:
{
    abc4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    abc6:	780c      	ldrb	r4, [r1, #0]
    abc8:	0224      	lsls	r4, r4, #8
    abca:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    abcc:	4b02      	ldr	r3, [pc, #8]	; (abd8 <system_gclk_chan_set_config+0x14>)
    abce:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    abd0:	b2a4      	uxth	r4, r4
    abd2:	4b02      	ldr	r3, [pc, #8]	; (abdc <system_gclk_chan_set_config+0x18>)
    abd4:	805c      	strh	r4, [r3, #2]
}
    abd6:	bd10      	pop	{r4, pc}
    abd8:	0000ab69 	.word	0x0000ab69
    abdc:	40000c00 	.word	0x40000c00

0000abe0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    abe0:	b510      	push	{r4, lr}
    abe2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    abe4:	4b06      	ldr	r3, [pc, #24]	; (ac00 <system_gclk_chan_get_hz+0x20>)
    abe6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    abe8:	4b06      	ldr	r3, [pc, #24]	; (ac04 <system_gclk_chan_get_hz+0x24>)
    abea:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    abec:	4b06      	ldr	r3, [pc, #24]	; (ac08 <system_gclk_chan_get_hz+0x28>)
    abee:	885c      	ldrh	r4, [r3, #2]
    abf0:	0524      	lsls	r4, r4, #20
    abf2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    abf4:	4b05      	ldr	r3, [pc, #20]	; (ac0c <system_gclk_chan_get_hz+0x2c>)
    abf6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    abf8:	0020      	movs	r0, r4
    abfa:	4b05      	ldr	r3, [pc, #20]	; (ac10 <system_gclk_chan_get_hz+0x30>)
    abfc:	4798      	blx	r3
}
    abfe:	bd10      	pop	{r4, pc}
    ac00:	00009045 	.word	0x00009045
    ac04:	40000c02 	.word	0x40000c02
    ac08:	40000c00 	.word	0x40000c00
    ac0c:	00009085 	.word	0x00009085
    ac10:	0000aaad 	.word	0x0000aaad

0000ac14 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    ac14:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    ac16:	78d3      	ldrb	r3, [r2, #3]
    ac18:	2b00      	cmp	r3, #0
    ac1a:	d135      	bne.n	ac88 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    ac1c:	7813      	ldrb	r3, [r2, #0]
    ac1e:	2b80      	cmp	r3, #128	; 0x80
    ac20:	d029      	beq.n	ac76 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    ac22:	061b      	lsls	r3, r3, #24
    ac24:	2480      	movs	r4, #128	; 0x80
    ac26:	0264      	lsls	r4, r4, #9
    ac28:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    ac2a:	7854      	ldrb	r4, [r2, #1]
    ac2c:	2502      	movs	r5, #2
    ac2e:	43ac      	bics	r4, r5
    ac30:	d106      	bne.n	ac40 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    ac32:	7894      	ldrb	r4, [r2, #2]
    ac34:	2c00      	cmp	r4, #0
    ac36:	d120      	bne.n	ac7a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    ac38:	2480      	movs	r4, #128	; 0x80
    ac3a:	02a4      	lsls	r4, r4, #10
    ac3c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    ac3e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    ac40:	7854      	ldrb	r4, [r2, #1]
    ac42:	3c01      	subs	r4, #1
    ac44:	2c01      	cmp	r4, #1
    ac46:	d91c      	bls.n	ac82 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    ac48:	040d      	lsls	r5, r1, #16
    ac4a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    ac4c:	24a0      	movs	r4, #160	; 0xa0
    ac4e:	05e4      	lsls	r4, r4, #23
    ac50:	432c      	orrs	r4, r5
    ac52:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ac54:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    ac56:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    ac58:	24d0      	movs	r4, #208	; 0xd0
    ac5a:	0624      	lsls	r4, r4, #24
    ac5c:	432c      	orrs	r4, r5
    ac5e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ac60:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    ac62:	78d4      	ldrb	r4, [r2, #3]
    ac64:	2c00      	cmp	r4, #0
    ac66:	d122      	bne.n	acae <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    ac68:	035b      	lsls	r3, r3, #13
    ac6a:	d51c      	bpl.n	aca6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    ac6c:	7893      	ldrb	r3, [r2, #2]
    ac6e:	2b01      	cmp	r3, #1
    ac70:	d01e      	beq.n	acb0 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    ac72:	6141      	str	r1, [r0, #20]
    ac74:	e017      	b.n	aca6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    ac76:	2300      	movs	r3, #0
    ac78:	e7d7      	b.n	ac2a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    ac7a:	24c0      	movs	r4, #192	; 0xc0
    ac7c:	02e4      	lsls	r4, r4, #11
    ac7e:	4323      	orrs	r3, r4
    ac80:	e7dd      	b.n	ac3e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    ac82:	4c0d      	ldr	r4, [pc, #52]	; (acb8 <_system_pinmux_config+0xa4>)
    ac84:	4023      	ands	r3, r4
    ac86:	e7df      	b.n	ac48 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    ac88:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    ac8a:	040c      	lsls	r4, r1, #16
    ac8c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    ac8e:	23a0      	movs	r3, #160	; 0xa0
    ac90:	05db      	lsls	r3, r3, #23
    ac92:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ac94:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    ac96:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    ac98:	23d0      	movs	r3, #208	; 0xd0
    ac9a:	061b      	lsls	r3, r3, #24
    ac9c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ac9e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    aca0:	78d3      	ldrb	r3, [r2, #3]
    aca2:	2b00      	cmp	r3, #0
    aca4:	d103      	bne.n	acae <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    aca6:	7853      	ldrb	r3, [r2, #1]
    aca8:	3b01      	subs	r3, #1
    acaa:	2b01      	cmp	r3, #1
    acac:	d902      	bls.n	acb4 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    acae:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    acb0:	6181      	str	r1, [r0, #24]
    acb2:	e7f8      	b.n	aca6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    acb4:	6081      	str	r1, [r0, #8]
}
    acb6:	e7fa      	b.n	acae <_system_pinmux_config+0x9a>
    acb8:	fffbffff 	.word	0xfffbffff

0000acbc <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    acbc:	b510      	push	{r4, lr}
    acbe:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    acc0:	09c1      	lsrs	r1, r0, #7
		return NULL;
    acc2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    acc4:	2900      	cmp	r1, #0
    acc6:	d104      	bne.n	acd2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    acc8:	0943      	lsrs	r3, r0, #5
    acca:	01db      	lsls	r3, r3, #7
    accc:	4905      	ldr	r1, [pc, #20]	; (ace4 <system_pinmux_pin_set_config+0x28>)
    acce:	468c      	mov	ip, r1
    acd0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    acd2:	241f      	movs	r4, #31
    acd4:	4020      	ands	r0, r4
    acd6:	2101      	movs	r1, #1
    acd8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    acda:	0018      	movs	r0, r3
    acdc:	4b02      	ldr	r3, [pc, #8]	; (ace8 <system_pinmux_pin_set_config+0x2c>)
    acde:	4798      	blx	r3
}
    ace0:	bd10      	pop	{r4, pc}
    ace2:	46c0      	nop			; (mov r8, r8)
    ace4:	41004400 	.word	0x41004400
    ace8:	0000ac15 	.word	0x0000ac15

0000acec <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    acec:	4770      	bx	lr
	...

0000acf0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    acf0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    acf2:	4b05      	ldr	r3, [pc, #20]	; (ad08 <system_init+0x18>)
    acf4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    acf6:	4b05      	ldr	r3, [pc, #20]	; (ad0c <system_init+0x1c>)
    acf8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    acfa:	4b05      	ldr	r3, [pc, #20]	; (ad10 <system_init+0x20>)
    acfc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    acfe:	4b05      	ldr	r3, [pc, #20]	; (ad14 <system_init+0x24>)
    ad00:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    ad02:	4b05      	ldr	r3, [pc, #20]	; (ad18 <system_init+0x28>)
    ad04:	4798      	blx	r3
}
    ad06:	bd10      	pop	{r4, pc}
    ad08:	0000a82d 	.word	0x0000a82d
    ad0c:	000090b5 	.word	0x000090b5
    ad10:	0000aced 	.word	0x0000aced
    ad14:	000091c5 	.word	0x000091c5
    ad18:	0000aced 	.word	0x0000aced

0000ad1c <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    ad1c:	4b09      	ldr	r3, [pc, #36]	; (ad44 <_tcc_get_inst_index+0x28>)
    ad1e:	4298      	cmp	r0, r3
    ad20:	d00c      	beq.n	ad3c <_tcc_get_inst_index+0x20>
    ad22:	4b09      	ldr	r3, [pc, #36]	; (ad48 <_tcc_get_inst_index+0x2c>)
    ad24:	4298      	cmp	r0, r3
    ad26:	d007      	beq.n	ad38 <_tcc_get_inst_index+0x1c>
    ad28:	4a08      	ldr	r2, [pc, #32]	; (ad4c <_tcc_get_inst_index+0x30>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    ad2a:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
    ad2c:	4290      	cmp	r0, r2
    ad2e:	d001      	beq.n	ad34 <_tcc_get_inst_index+0x18>
}
    ad30:	0018      	movs	r0, r3
    ad32:	4770      	bx	lr
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    ad34:	3302      	adds	r3, #2
    ad36:	e002      	b.n	ad3e <_tcc_get_inst_index+0x22>
    ad38:	2301      	movs	r3, #1
    ad3a:	e000      	b.n	ad3e <_tcc_get_inst_index+0x22>
    ad3c:	2300      	movs	r3, #0
			return i;
    ad3e:	b2db      	uxtb	r3, r3
    ad40:	e7f6      	b.n	ad30 <_tcc_get_inst_index+0x14>
    ad42:	46c0      	nop			; (mov r8, r8)
    ad44:	42002000 	.word	0x42002000
    ad48:	42002400 	.word	0x42002400
    ad4c:	42002800 	.word	0x42002800

0000ad50 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    ad50:	b510      	push	{r4, lr}
    ad52:	0004      	movs	r4, r0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    ad54:	0008      	movs	r0, r1
    ad56:	4b4f      	ldr	r3, [pc, #316]	; (ae94 <tcc_get_config_defaults+0x144>)
    ad58:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    ad5a:	2300      	movs	r3, #0
    ad5c:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    ad5e:	0080      	lsls	r0, r0, #2
    ad60:	4a4d      	ldr	r2, [pc, #308]	; (ae98 <tcc_get_config_defaults+0x148>)
    ad62:	5882      	ldr	r2, [r0, r2]
    ad64:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    ad66:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    ad68:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    ad6a:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    ad6c:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    ad6e:	7223      	strb	r3, [r4, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    ad70:	61e3      	str	r3, [r4, #28]
    ad72:	6223      	str	r3, [r4, #32]
    ad74:	6263      	str	r3, [r4, #36]	; 0x24
    ad76:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    ad78:	7523      	strb	r3, [r4, #20]
    ad7a:	7563      	strb	r3, [r4, #21]
    ad7c:	75a3      	strb	r3, [r4, #22]
    ad7e:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    ad80:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    ad82:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    ad84:	7423      	strb	r3, [r4, #16]
    ad86:	7463      	strb	r3, [r4, #17]
    ad88:	74a3      	strb	r3, [r4, #18]
    ad8a:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    ad8c:	222c      	movs	r2, #44	; 0x2c
    ad8e:	54a3      	strb	r3, [r4, r2]
    ad90:	3201      	adds	r2, #1
    ad92:	54a3      	strb	r3, [r4, r2]
    ad94:	3201      	adds	r2, #1
    ad96:	54a3      	strb	r3, [r4, r2]
    ad98:	3201      	adds	r2, #1
    ad9a:	54a3      	strb	r3, [r4, r2]
    ad9c:	3201      	adds	r2, #1
    ad9e:	54a3      	strb	r3, [r4, r2]
    ada0:	3201      	adds	r2, #1
    ada2:	54a3      	strb	r3, [r4, r2]
    ada4:	3201      	adds	r2, #1
    ada6:	54a3      	strb	r3, [r4, r2]
    ada8:	3201      	adds	r2, #1
    adaa:	54a3      	strb	r3, [r4, r2]
    adac:	3201      	adds	r2, #1
    adae:	54a3      	strb	r3, [r4, r2]
    adb0:	3201      	adds	r2, #1
    adb2:	54a3      	strb	r3, [r4, r2]
    adb4:	3201      	adds	r2, #1
    adb6:	54a3      	strb	r3, [r4, r2]
    adb8:	3201      	adds	r2, #1
    adba:	54a3      	strb	r3, [r4, r2]
    adbc:	3201      	adds	r2, #1
    adbe:	54a3      	strb	r3, [r4, r2]
    adc0:	3201      	adds	r2, #1
    adc2:	54a3      	strb	r3, [r4, r2]
    adc4:	3201      	adds	r2, #1
    adc6:	54a3      	strb	r3, [r4, r2]
    adc8:	3201      	adds	r2, #1
    adca:	54a3      	strb	r3, [r4, r2]
    adcc:	3201      	adds	r2, #1
    adce:	54a3      	strb	r3, [r4, r2]
    add0:	3201      	adds	r2, #1
    add2:	54a3      	strb	r3, [r4, r2]
    add4:	3201      	adds	r2, #1
    add6:	54a3      	strb	r3, [r4, r2]
    add8:	3201      	adds	r2, #1
    adda:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    addc:	3201      	adds	r2, #1
    adde:	54a3      	strb	r3, [r4, r2]
    ade0:	3201      	adds	r2, #1
    ade2:	54a3      	strb	r3, [r4, r2]
    ade4:	3201      	adds	r2, #1
    ade6:	54a3      	strb	r3, [r4, r2]
    ade8:	3201      	adds	r2, #1
    adea:	54a3      	strb	r3, [r4, r2]
    adec:	3201      	adds	r2, #1
    adee:	54a3      	strb	r3, [r4, r2]
    adf0:	3201      	adds	r2, #1
    adf2:	54a3      	strb	r3, [r4, r2]
    adf4:	3201      	adds	r2, #1
    adf6:	54a3      	strb	r3, [r4, r2]
    adf8:	3201      	adds	r2, #1
    adfa:	54a3      	strb	r3, [r4, r2]
    adfc:	3201      	adds	r2, #1
    adfe:	54a3      	strb	r3, [r4, r2]
    ae00:	3201      	adds	r2, #1
    ae02:	54a3      	strb	r3, [r4, r2]
    ae04:	3201      	adds	r2, #1
    ae06:	54a3      	strb	r3, [r4, r2]
    ae08:	3201      	adds	r2, #1
    ae0a:	54a3      	strb	r3, [r4, r2]
    ae0c:	3201      	adds	r2, #1
    ae0e:	54a3      	strb	r3, [r4, r2]
    ae10:	3201      	adds	r2, #1
    ae12:	54a3      	strb	r3, [r4, r2]
    ae14:	3201      	adds	r2, #1
    ae16:	54a3      	strb	r3, [r4, r2]
    ae18:	3201      	adds	r2, #1
    ae1a:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    ae1c:	3201      	adds	r2, #1
    ae1e:	54a3      	strb	r3, [r4, r2]
    ae20:	3201      	adds	r2, #1
    ae22:	54a3      	strb	r3, [r4, r2]
    ae24:	3201      	adds	r2, #1
    ae26:	54a3      	strb	r3, [r4, r2]
    ae28:	3201      	adds	r2, #1
    ae2a:	54a3      	strb	r3, [r4, r2]
    ae2c:	3201      	adds	r2, #1
    ae2e:	54a3      	strb	r3, [r4, r2]
    ae30:	3201      	adds	r2, #1
    ae32:	54a3      	strb	r3, [r4, r2]
    ae34:	3201      	adds	r2, #1
    ae36:	54a3      	strb	r3, [r4, r2]
    ae38:	3201      	adds	r2, #1
    ae3a:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    ae3c:	3241      	adds	r2, #65	; 0x41
    ae3e:	54a3      	strb	r3, [r4, r2]
    ae40:	65a3      	str	r3, [r4, #88]	; 0x58
    ae42:	67a3      	str	r3, [r4, #120]	; 0x78
    ae44:	3201      	adds	r2, #1
    ae46:	54a3      	strb	r3, [r4, r2]
    ae48:	65e3      	str	r3, [r4, #92]	; 0x5c
    ae4a:	67e3      	str	r3, [r4, #124]	; 0x7c
    ae4c:	3201      	adds	r2, #1
    ae4e:	54a3      	strb	r3, [r4, r2]
    ae50:	6623      	str	r3, [r4, #96]	; 0x60
    ae52:	3a1a      	subs	r2, #26
    ae54:	50a3      	str	r3, [r4, r2]
    ae56:	321b      	adds	r2, #27
    ae58:	54a3      	strb	r3, [r4, r2]
    ae5a:	6663      	str	r3, [r4, #100]	; 0x64
    ae5c:	3a17      	subs	r2, #23
    ae5e:	50a3      	str	r3, [r4, r2]
    ae60:	3218      	adds	r2, #24
    ae62:	54a3      	strb	r3, [r4, r2]
    ae64:	66a3      	str	r3, [r4, #104]	; 0x68
    ae66:	3a14      	subs	r2, #20
    ae68:	50a3      	str	r3, [r4, r2]
    ae6a:	3215      	adds	r2, #21
    ae6c:	54a3      	strb	r3, [r4, r2]
    ae6e:	66e3      	str	r3, [r4, #108]	; 0x6c
    ae70:	3a11      	subs	r2, #17
    ae72:	50a3      	str	r3, [r4, r2]
    ae74:	3212      	adds	r2, #18
    ae76:	54a3      	strb	r3, [r4, r2]
    ae78:	6723      	str	r3, [r4, #112]	; 0x70
    ae7a:	3a0e      	subs	r2, #14
    ae7c:	50a3      	str	r3, [r4, r2]
    ae7e:	320f      	adds	r2, #15
    ae80:	54a3      	strb	r3, [r4, r2]
    ae82:	6763      	str	r3, [r4, #116]	; 0x74
    ae84:	3a0b      	subs	r2, #11
    ae86:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    ae88:	2101      	movs	r1, #1
    ae8a:	320c      	adds	r2, #12
    ae8c:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    ae8e:	3201      	adds	r2, #1
    ae90:	54a3      	strb	r3, [r4, r2]
}
    ae92:	bd10      	pop	{r4, pc}
    ae94:	0000ad1d 	.word	0x0000ad1d
    ae98:	0000fbc4 	.word	0x0000fbc4

0000ae9c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    ae9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae9e:	46de      	mov	lr, fp
    aea0:	4657      	mov	r7, sl
    aea2:	464e      	mov	r6, r9
    aea4:	4645      	mov	r5, r8
    aea6:	b5e0      	push	{r5, r6, r7, lr}
    aea8:	b091      	sub	sp, #68	; 0x44
    aeaa:	9001      	str	r0, [sp, #4]
    aeac:	000c      	movs	r4, r1
    aeae:	0015      	movs	r5, r2
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    aeb0:	0008      	movs	r0, r1
    aeb2:	4bc3      	ldr	r3, [pc, #780]	; (b1c0 <tcc_init+0x324>)
    aeb4:	4798      	blx	r3
    aeb6:	0003      	movs	r3, r0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    aeb8:	0001      	movs	r1, r0
			PM->APBCMASK.reg |= mask;
    aeba:	48c2      	ldr	r0, [pc, #776]	; (b1c4 <tcc_init+0x328>)
    aebc:	6a02      	ldr	r2, [r0, #32]
    aebe:	009e      	lsls	r6, r3, #2
    aec0:	4fc1      	ldr	r7, [pc, #772]	; (b1c8 <tcc_init+0x32c>)
    aec2:	59f7      	ldr	r7, [r6, r7]
    aec4:	433a      	orrs	r2, r7
    aec6:	6202      	str	r2, [r0, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    aec8:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    aeca:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    aecc:	0792      	lsls	r2, r2, #30
    aece:	d506      	bpl.n	aede <tcc_init+0x42>
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    aed0:	b011      	add	sp, #68	; 0x44
    aed2:	bc3c      	pop	{r2, r3, r4, r5}
    aed4:	4690      	mov	r8, r2
    aed6:	4699      	mov	r9, r3
    aed8:	46a2      	mov	sl, r4
    aeda:	46ab      	mov	fp, r5
    aedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    aede:	6822      	ldr	r2, [r4, #0]
    aee0:	2701      	movs	r7, #1
    aee2:	4017      	ands	r7, r2
    aee4:	d1f4      	bne.n	aed0 <tcc_init+0x34>
	uint32_t count_max  = _tcc_maxs[module_index];
    aee6:	48b9      	ldr	r0, [pc, #740]	; (b1cc <tcc_init+0x330>)
    aee8:	5832      	ldr	r2, [r6, r0]
		return STATUS_ERR_INVALID_ARG;
    aeea:	2017      	movs	r0, #23
	if ((config->counter.count > count_max)
    aeec:	682e      	ldr	r6, [r5, #0]
    aeee:	42b2      	cmp	r2, r6
    aef0:	d3ee      	bcc.n	aed0 <tcc_init+0x34>
		|| (config->counter.period > count_max)
    aef2:	686e      	ldr	r6, [r5, #4]
    aef4:	42b2      	cmp	r2, r6
    aef6:	d3eb      	bcc.n	aed0 <tcc_init+0x34>
		if ((config->compare.match[i] > count_max)
    aef8:	69e8      	ldr	r0, [r5, #28]
    aefa:	4282      	cmp	r2, r0
    aefc:	d200      	bcs.n	af00 <tcc_init+0x64>
    aefe:	e1b9      	b.n	b274 <tcc_init+0x3d8>
    af00:	6a28      	ldr	r0, [r5, #32]
    af02:	4282      	cmp	r2, r0
    af04:	d200      	bcs.n	af08 <tcc_init+0x6c>
    af06:	e1b7      	b.n	b278 <tcc_init+0x3dc>
    af08:	6a68      	ldr	r0, [r5, #36]	; 0x24
    af0a:	4282      	cmp	r2, r0
    af0c:	d200      	bcs.n	af10 <tcc_init+0x74>
    af0e:	e1b5      	b.n	b27c <tcc_init+0x3e0>
    af10:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    af12:	4282      	cmp	r2, r0
    af14:	d200      	bcs.n	af18 <tcc_init+0x7c>
    af16:	e1b3      	b.n	b280 <tcc_init+0x3e4>
    af18:	2298      	movs	r2, #152	; 0x98
    af1a:	4694      	mov	ip, r2
    af1c:	44ac      	add	ip, r5
    af1e:	4662      	mov	r2, ip
    af20:	9208      	str	r2, [sp, #32]
    af22:	2000      	movs	r0, #0
    af24:	e003      	b.n	af2e <tcc_init+0x92>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    af26:	3001      	adds	r0, #1
    af28:	3201      	adds	r2, #1
    af2a:	2808      	cmp	r0, #8
    af2c:	d008      	beq.n	af40 <tcc_init+0xa4>
		if (!config->pins.enable_wave_out_pin[i]) {
    af2e:	7816      	ldrb	r6, [r2, #0]
    af30:	2e00      	cmp	r6, #0
    af32:	d0f8      	beq.n	af26 <tcc_init+0x8a>
		if (i >= _tcc_ow_nums[module_index]) {
    af34:	4ea6      	ldr	r6, [pc, #664]	; (b1d0 <tcc_init+0x334>)
    af36:	5c76      	ldrb	r6, [r6, r1]
    af38:	4286      	cmp	r6, r0
    af3a:	dcf4      	bgt.n	af26 <tcc_init+0x8a>
			return STATUS_ERR_INVALID_ARG;
    af3c:	2017      	movs	r0, #23
    af3e:	e7c7      	b.n	aed0 <tcc_init+0x34>
    af40:	2200      	movs	r2, #0
    af42:	9202      	str	r2, [sp, #8]
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    af44:	2080      	movs	r0, #128	; 0x80
    af46:	0440      	lsls	r0, r0, #17
    af48:	4684      	mov	ip, r0
    af4a:	e002      	b.n	af52 <tcc_init+0xb6>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    af4c:	3201      	adds	r2, #1
    af4e:	2a04      	cmp	r2, #4
    af50:	d00e      	beq.n	af70 <tcc_init+0xd4>
		if (config->capture.channel_function[i] ==
    af52:	18a8      	adds	r0, r5, r2
    af54:	7c00      	ldrb	r0, [r0, #16]
    af56:	2801      	cmp	r0, #1
    af58:	d1f8      	bne.n	af4c <tcc_init+0xb0>
			if (i > _tcc_cc_nums[module_index]) {
    af5a:	489e      	ldr	r0, [pc, #632]	; (b1d4 <tcc_init+0x338>)
    af5c:	5c40      	ldrb	r0, [r0, r1]
    af5e:	4290      	cmp	r0, r2
    af60:	da00      	bge.n	af64 <tcc_init+0xc8>
    af62:	e18f      	b.n	b284 <tcc_init+0x3e8>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    af64:	4660      	mov	r0, ip
    af66:	4090      	lsls	r0, r2
    af68:	9e02      	ldr	r6, [sp, #8]
    af6a:	4306      	orrs	r6, r0
    af6c:	9602      	str	r6, [sp, #8]
    af6e:	e7ed      	b.n	af4c <tcc_init+0xb0>
	if (config->run_in_standby) {
    af70:	329d      	adds	r2, #157	; 0x9d
    af72:	5caa      	ldrb	r2, [r5, r2]
    af74:	2a00      	cmp	r2, #0
    af76:	d004      	beq.n	af82 <tcc_init+0xe6>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    af78:	2280      	movs	r2, #128	; 0x80
    af7a:	0112      	lsls	r2, r2, #4
    af7c:	9902      	ldr	r1, [sp, #8]
    af7e:	4311      	orrs	r1, r2
    af80:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    af82:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    af84:	1e51      	subs	r1, r2, #1
    af86:	418a      	sbcs	r2, r1
    af88:	0092      	lsls	r2, r2, #2
    af8a:	9206      	str	r2, [sp, #24]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    af8c:	7a6a      	ldrb	r2, [r5, #9]
    af8e:	2a01      	cmp	r2, #1
    af90:	d022      	beq.n	afd8 <tcc_init+0x13c>
	uint8_t cc_num = _tcc_cc_nums[module_index];
    af92:	4a90      	ldr	r2, [pc, #576]	; (b1d4 <tcc_init+0x338>)
    af94:	5cd2      	ldrb	r2, [r2, r3]
    af96:	0011      	movs	r1, r2
    af98:	9205      	str	r2, [sp, #20]
		if (cfg->capture_channel >= cc_num) {
    af9a:	2235      	movs	r2, #53	; 0x35
    af9c:	5caa      	ldrb	r2, [r5, r2]
    af9e:	428a      	cmp	r2, r1
    afa0:	d300      	bcc.n	afa4 <tcc_init+0x108>
    afa2:	e179      	b.n	b298 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    afa4:	212c      	movs	r1, #44	; 0x2c
    afa6:	5c69      	ldrb	r1, [r5, r1]
    afa8:	290f      	cmp	r1, #15
    afaa:	d900      	bls.n	afae <tcc_init+0x112>
    afac:	e174      	b.n	b298 <tcc_init+0x3fc>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    afae:	7b28      	ldrb	r0, [r5, #12]
    afb0:	900a      	str	r0, [sp, #40]	; 0x28
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    afb2:	7ae8      	ldrb	r0, [r5, #11]
    afb4:	900b      	str	r0, [sp, #44]	; 0x2c
    afb6:	202d      	movs	r0, #45	; 0x2d
    afb8:	4682      	mov	sl, r0
    afba:	44aa      	add	sl, r5
    afbc:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    afbe:	9704      	str	r7, [sp, #16]
		value_buffer[i] = fault;
    afc0:	ae0e      	add	r6, sp, #56	; 0x38
    afc2:	9607      	str	r6, [sp, #28]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    afc4:	26c0      	movs	r6, #192	; 0xc0
    afc6:	0136      	lsls	r6, r6, #4
    afc8:	46b1      	mov	r9, r6
    afca:	4684      	mov	ip, r0
    afcc:	46a0      	mov	r8, r4
    afce:	0028      	movs	r0, r5
    afd0:	4655      	mov	r5, sl
    afd2:	9309      	str	r3, [sp, #36]	; 0x24
    afd4:	4682      	mov	sl, r0
    afd6:	e035      	b.n	b044 <tcc_init+0x1a8>
		ctrlb |= TCC_CTRLBSET_DIR;
    afd8:	9906      	ldr	r1, [sp, #24]
    afda:	4311      	orrs	r1, r2
    afdc:	9106      	str	r1, [sp, #24]
    afde:	e7d8      	b.n	af92 <tcc_init+0xf6>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    afe0:	0292      	lsls	r2, r2, #10
    afe2:	464f      	mov	r7, r9
    afe4:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    afe6:	430a      	orrs	r2, r1
				| TCC_FCTRLA_SRC(cfg->source)
    afe8:	7919      	ldrb	r1, [r3, #4]
    afea:	468b      	mov	fp, r1
    afec:	2103      	movs	r1, #3
    afee:	465f      	mov	r7, fp
    aff0:	4039      	ands	r1, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    aff2:	430a      	orrs	r2, r1
    aff4:	4316      	orrs	r6, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
    aff6:	795a      	ldrb	r2, [r3, #5]
    aff8:	0152      	lsls	r2, r2, #5
    affa:	2160      	movs	r1, #96	; 0x60
    affc:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    affe:	4332      	orrs	r2, r6
				| TCC_FCTRLA_HALT(cfg->halt_action)
    b000:	7999      	ldrb	r1, [r3, #6]
    b002:	0209      	lsls	r1, r1, #8
    b004:	26c0      	movs	r6, #192	; 0xc0
    b006:	00b6      	lsls	r6, r6, #2
    b008:	400e      	ands	r6, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    b00a:	4316      	orrs	r6, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    b00c:	79da      	ldrb	r2, [r3, #7]
    b00e:	0312      	lsls	r2, r2, #12
    b010:	21e0      	movs	r1, #224	; 0xe0
    b012:	01c9      	lsls	r1, r1, #7
    b014:	400a      	ands	r2, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    b016:	4316      	orrs	r6, r2
    b018:	4334      	orrs	r4, r6
    b01a:	9a03      	ldr	r2, [sp, #12]
    b01c:	4314      	orrs	r4, r2
    b01e:	4320      	orrs	r0, r4
		value_buffer[i] = fault;
    b020:	4662      	mov	r2, ip
    b022:	9907      	ldr	r1, [sp, #28]
    b024:	5050      	str	r0, [r2, r1]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    b026:	2a04      	cmp	r2, #4
    b028:	d02a      	beq.n	b080 <tcc_init+0x1e4>
		if (cfg->capture_channel >= cc_num) {
    b02a:	7c9a      	ldrb	r2, [r3, #18]
    b02c:	9905      	ldr	r1, [sp, #20]
    b02e:	4291      	cmp	r1, r2
    b030:	d800      	bhi.n	b034 <tcc_init+0x198>
    b032:	e131      	b.n	b298 <tcc_init+0x3fc>
		if (cfg->filter_value > 0xF) {
    b034:	7a59      	ldrb	r1, [r3, #9]
    b036:	350a      	adds	r5, #10
    b038:	2304      	movs	r3, #4
    b03a:	469b      	mov	fp, r3
    b03c:	44dc      	add	ip, fp
    b03e:	290f      	cmp	r1, #15
    b040:	d900      	bls.n	b044 <tcc_init+0x1a8>
    b042:	e129      	b.n	b298 <tcc_init+0x3fc>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    b044:	0609      	lsls	r1, r1, #24
    b046:	23f0      	movs	r3, #240	; 0xf0
    b048:	051b      	lsls	r3, r3, #20
    b04a:	4019      	ands	r1, r3
    b04c:	002b      	movs	r3, r5
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    b04e:	782e      	ldrb	r6, [r5, #0]
    b050:	0436      	lsls	r6, r6, #16
    b052:	20ff      	movs	r0, #255	; 0xff
    b054:	0400      	lsls	r0, r0, #16
    b056:	4006      	ands	r6, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    b058:	7868      	ldrb	r0, [r5, #1]
    b05a:	2480      	movs	r4, #128	; 0x80
    b05c:	2800      	cmp	r0, #0
    b05e:	d100      	bne.n	b062 <tcc_init+0x1c6>
    b060:	9c04      	ldr	r4, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    b062:	7898      	ldrb	r0, [r3, #2]
    b064:	2708      	movs	r7, #8
    b066:	9703      	str	r7, [sp, #12]
    b068:	2800      	cmp	r0, #0
    b06a:	d101      	bne.n	b070 <tcc_init+0x1d4>
    b06c:	9804      	ldr	r0, [sp, #16]
    b06e:	9003      	str	r0, [sp, #12]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    b070:	78d8      	ldrb	r0, [r3, #3]
    b072:	4683      	mov	fp, r0
    b074:	2010      	movs	r0, #16
    b076:	465f      	mov	r7, fp
    b078:	2f00      	cmp	r7, #0
    b07a:	d1b1      	bne.n	afe0 <tcc_init+0x144>
    b07c:	9804      	ldr	r0, [sp, #16]
    b07e:	e7af      	b.n	afe0 <tcc_init+0x144>
    b080:	4644      	mov	r4, r8
    b082:	4655      	mov	r5, sl
    b084:	9b09      	ldr	r3, [sp, #36]	; 0x24
	uint8_t ow_num = _tcc_ow_nums[module_index];
    b086:	4a52      	ldr	r2, [pc, #328]	; (b1d0 <tcc_init+0x334>)
    b088:	5cd2      	ldrb	r2, [r2, r3]
    b08a:	4691      	mov	r9, r2
    b08c:	4651      	mov	r1, sl
    b08e:	3150      	adds	r1, #80	; 0x50
    b090:	4650      	mov	r0, sl
    b092:	3041      	adds	r0, #65	; 0x41
	drvctrl = 0;
    b094:	2700      	movs	r7, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    b096:	2200      	movs	r2, #0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    b098:	2601      	movs	r6, #1
    b09a:	46b2      	mov	sl, r6
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    b09c:	2602      	movs	r6, #2
    b09e:	36ff      	adds	r6, #255	; 0xff
    b0a0:	46b3      	mov	fp, r6
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    b0a2:	2680      	movs	r6, #128	; 0x80
    b0a4:	0276      	lsls	r6, r6, #9
    b0a6:	46b0      	mov	r8, r6
    b0a8:	46a4      	mov	ip, r4
    b0aa:	001c      	movs	r4, r3
    b0ac:	464b      	mov	r3, r9
    b0ae:	e00f      	b.n	b0d0 <tcc_init+0x234>
		if (config->wave_ext.non_recoverable_fault[i].output !=
    b0b0:	7806      	ldrb	r6, [r0, #0]
    b0b2:	2e00      	cmp	r6, #0
    b0b4:	d007      	beq.n	b0c6 <tcc_init+0x22a>
			if (i >= ow_num) {
    b0b6:	4293      	cmp	r3, r2
    b0b8:	d800      	bhi.n	b0bc <tcc_init+0x220>
    b0ba:	e0e7      	b.n	b28c <tcc_init+0x3f0>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    b0bc:	2e02      	cmp	r6, #2
    b0be:	d014      	beq.n	b0ea <tcc_init+0x24e>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    b0c0:	4656      	mov	r6, sl
    b0c2:	4096      	lsls	r6, r2
    b0c4:	4337      	orrs	r7, r6
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    b0c6:	3201      	adds	r2, #1
    b0c8:	3101      	adds	r1, #1
    b0ca:	3002      	adds	r0, #2
    b0cc:	2a08      	cmp	r2, #8
    b0ce:	d010      	beq.n	b0f2 <tcc_init+0x256>
		if (config->wave_ext.invert[i]) {
    b0d0:	780e      	ldrb	r6, [r1, #0]
    b0d2:	2e00      	cmp	r6, #0
    b0d4:	d0ec      	beq.n	b0b0 <tcc_init+0x214>
			if (i >= ow_num) {
    b0d6:	4293      	cmp	r3, r2
    b0d8:	d800      	bhi.n	b0dc <tcc_init+0x240>
    b0da:	e0d5      	b.n	b288 <tcc_init+0x3ec>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    b0dc:	4646      	mov	r6, r8
    b0de:	4096      	lsls	r6, r2
    b0e0:	4337      	orrs	r7, r6
		if (config->wave_ext.non_recoverable_fault[i].output !=
    b0e2:	7806      	ldrb	r6, [r0, #0]
    b0e4:	2e00      	cmp	r6, #0
    b0e6:	d1e9      	bne.n	b0bc <tcc_init+0x220>
    b0e8:	e7ed      	b.n	b0c6 <tcc_init+0x22a>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    b0ea:	465e      	mov	r6, fp
    b0ec:	4096      	lsls	r6, r2
    b0ee:	4337      	orrs	r7, r6
    b0f0:	e7e9      	b.n	b0c6 <tcc_init+0x22a>
    b0f2:	4699      	mov	r9, r3
    b0f4:	0023      	movs	r3, r4
    b0f6:	4664      	mov	r4, ip
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    b0f8:	7e6a      	ldrb	r2, [r5, #25]
    b0fa:	0112      	lsls	r2, r2, #4
    b0fc:	2130      	movs	r1, #48	; 0x30
    b0fe:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    b100:	7e28      	ldrb	r0, [r5, #24]
    b102:	2207      	movs	r2, #7
    b104:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    b106:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    b108:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    b10a:	2080      	movs	r0, #128	; 0x80
    b10c:	0240      	lsls	r0, r0, #9
    b10e:	000e      	movs	r6, r1
    b110:	e002      	b.n	b118 <tcc_init+0x27c>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    b112:	3201      	adds	r2, #1
    b114:	2a04      	cmp	r2, #4
    b116:	d00b      	beq.n	b130 <tcc_init+0x294>
		if (wav_cfg->wave_polarity[n]) {
    b118:	18a9      	adds	r1, r5, r2
    b11a:	7d09      	ldrb	r1, [r1, #20]
    b11c:	2900      	cmp	r1, #0
    b11e:	d0f8      	beq.n	b112 <tcc_init+0x276>
			if (n >= cc_num) {
    b120:	9905      	ldr	r1, [sp, #20]
    b122:	4291      	cmp	r1, r2
    b124:	dc00      	bgt.n	b128 <tcc_init+0x28c>
    b126:	e0b3      	b.n	b290 <tcc_init+0x3f4>
			wave |= (TCC_WAVE_POL0 << n);
    b128:	0001      	movs	r1, r0
    b12a:	4091      	lsls	r1, r2
    b12c:	430e      	orrs	r6, r1
    b12e:	e7f0      	b.n	b112 <tcc_init+0x276>
    b130:	46b2      	mov	sl, r6
    b132:	9801      	ldr	r0, [sp, #4]
    b134:	0002      	movs	r2, r0
    b136:	3204      	adds	r2, #4
    b138:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    b13a:	2100      	movs	r1, #0
    b13c:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    b13e:	4282      	cmp	r2, r0
    b140:	d1fc      	bne.n	b13c <tcc_init+0x2a0>
	module_inst->register_callback_mask = 0;
    b142:	2200      	movs	r2, #0
    b144:	9801      	ldr	r0, [sp, #4]
    b146:	6342      	str	r2, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    b148:	6382      	str	r2, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    b14a:	0099      	lsls	r1, r3, #2
    b14c:	4a22      	ldr	r2, [pc, #136]	; (b1d8 <tcc_init+0x33c>)
    b14e:	5088      	str	r0, [r1, r2]
	module_inst->hw = hw;
    b150:	6004      	str	r4, [r0, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    b152:	22a0      	movs	r2, #160	; 0xa0
    b154:	5ca9      	ldrb	r1, [r5, r2]
    b156:	3a64      	subs	r2, #100	; 0x64
    b158:	5481      	strb	r1, [r0, r2]
	gclk_chan_config.source_generator = config->counter.clock_source;
    b15a:	a90d      	add	r1, sp, #52	; 0x34
    b15c:	7aaa      	ldrb	r2, [r5, #10]
    b15e:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    b160:	4a1e      	ldr	r2, [pc, #120]	; (b1dc <tcc_init+0x340>)
    b162:	5cd6      	ldrb	r6, [r2, r3]
    b164:	0030      	movs	r0, r6
    b166:	4b1e      	ldr	r3, [pc, #120]	; (b1e0 <tcc_init+0x344>)
    b168:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    b16a:	0030      	movs	r0, r6
    b16c:	4b1d      	ldr	r3, [pc, #116]	; (b1e4 <tcc_init+0x348>)
    b16e:	4798      	blx	r3
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    b170:	464b      	mov	r3, r9
    b172:	2b00      	cmp	r3, #0
    b174:	dd3c      	ble.n	b1f0 <tcc_init+0x354>
    b176:	002e      	movs	r6, r5
    b178:	3658      	adds	r6, #88	; 0x58
    b17a:	3398      	adds	r3, #152	; 0x98
    b17c:	4698      	mov	r8, r3
    b17e:	44a8      	add	r8, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    b180:	2301      	movs	r3, #1
    b182:	4699      	mov	r9, r3
		system_pinmux_pin_set_config(
    b184:	46ab      	mov	fp, r5
    b186:	4645      	mov	r5, r8
    b188:	46a0      	mov	r8, r4
    b18a:	9c08      	ldr	r4, [sp, #32]
    b18c:	e003      	b.n	b196 <tcc_init+0x2fa>
    b18e:	3401      	adds	r4, #1
    b190:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    b192:	42ac      	cmp	r4, r5
    b194:	d02a      	beq.n	b1ec <tcc_init+0x350>
		if (!config->pins.enable_wave_out_pin[i]) {
    b196:	7823      	ldrb	r3, [r4, #0]
    b198:	2b00      	cmp	r3, #0
    b19a:	d0f8      	beq.n	b18e <tcc_init+0x2f2>
    b19c:	ab0c      	add	r3, sp, #48	; 0x30
    b19e:	464a      	mov	r2, r9
    b1a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    b1a2:	2300      	movs	r3, #0
    b1a4:	aa0c      	add	r2, sp, #48	; 0x30
    b1a6:	70d3      	strb	r3, [r2, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    b1a8:	0013      	movs	r3, r2
    b1aa:	2220      	movs	r2, #32
    b1ac:	18b2      	adds	r2, r6, r2
    b1ae:	7812      	ldrb	r2, [r2, #0]
    b1b0:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    b1b2:	464a      	mov	r2, r9
    b1b4:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    b1b6:	7830      	ldrb	r0, [r6, #0]
    b1b8:	0019      	movs	r1, r3
    b1ba:	4b0b      	ldr	r3, [pc, #44]	; (b1e8 <tcc_init+0x34c>)
    b1bc:	4798      	blx	r3
    b1be:	e7e6      	b.n	b18e <tcc_init+0x2f2>
    b1c0:	0000ad1d 	.word	0x0000ad1d
    b1c4:	40000400 	.word	0x40000400
    b1c8:	0000fbb0 	.word	0x0000fbb0
    b1cc:	0000fbc4 	.word	0x0000fbc4
    b1d0:	0000fbd0 	.word	0x0000fbd0
    b1d4:	0000fbbc 	.word	0x0000fbbc
    b1d8:	200007e0 	.word	0x200007e0
    b1dc:	0000fbc0 	.word	0x0000fbc0
    b1e0:	0000abc5 	.word	0x0000abc5
    b1e4:	0000ab39 	.word	0x0000ab39
    b1e8:	0000acbd 	.word	0x0000acbd
    b1ec:	4644      	mov	r4, r8
    b1ee:	465d      	mov	r5, fp
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    b1f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1f2:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    b1f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b1f6:	0212      	lsls	r2, r2, #8
    b1f8:	4313      	orrs	r3, r2
    b1fa:	9a02      	ldr	r2, [sp, #8]
    b1fc:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    b1fe:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    b200:	2204      	movs	r2, #4
    b202:	68a3      	ldr	r3, [r4, #8]
    b204:	421a      	tst	r2, r3
    b206:	d1fc      	bne.n	b202 <tcc_init+0x366>
	hw->CTRLBCLR.reg = 0xFF;
    b208:	23ff      	movs	r3, #255	; 0xff
    b20a:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    b20c:	2204      	movs	r2, #4
    b20e:	68a3      	ldr	r3, [r4, #8]
    b210:	421a      	tst	r2, r3
    b212:	d1fc      	bne.n	b20e <tcc_init+0x372>
	hw->CTRLBSET.reg = ctrlb;
    b214:	466b      	mov	r3, sp
    b216:	7e1b      	ldrb	r3, [r3, #24]
    b218:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    b21a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b21c:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    b21e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b220:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    b222:	61a7      	str	r7, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    b224:	4a1d      	ldr	r2, [pc, #116]	; (b29c <tcc_init+0x400>)
    b226:	68a3      	ldr	r3, [r4, #8]
    b228:	4213      	tst	r3, r2
    b22a:	d1fc      	bne.n	b226 <tcc_init+0x38a>
	hw->WAVE.reg = waves[0];
    b22c:	4653      	mov	r3, sl
    b22e:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    b230:	2210      	movs	r2, #16
    b232:	68a3      	ldr	r3, [r4, #8]
    b234:	421a      	tst	r2, r3
    b236:	d1fc      	bne.n	b232 <tcc_init+0x396>
	hw->COUNT.reg = config->counter.count;
    b238:	682b      	ldr	r3, [r5, #0]
    b23a:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    b23c:	4a18      	ldr	r2, [pc, #96]	; (b2a0 <tcc_init+0x404>)
    b23e:	68a3      	ldr	r3, [r4, #8]
    b240:	4213      	tst	r3, r2
    b242:	d1fc      	bne.n	b23e <tcc_init+0x3a2>
	hw->PER.reg = (config->counter.period);
    b244:	686b      	ldr	r3, [r5, #4]
    b246:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    b248:	9805      	ldr	r0, [sp, #20]
    b24a:	2800      	cmp	r0, #0
    b24c:	dd22      	ble.n	b294 <tcc_init+0x3f8>
    b24e:	351c      	adds	r5, #28
    b250:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    b252:	4e14      	ldr	r6, [pc, #80]	; (b2a4 <tcc_init+0x408>)
    b254:	0032      	movs	r2, r6
    b256:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    b258:	68a3      	ldr	r3, [r4, #8]
    b25a:	421a      	tst	r2, r3
    b25c:	d1fc      	bne.n	b258 <tcc_init+0x3bc>
		hw->CC[i].reg = (config->compare.match[i]);
    b25e:	cd04      	ldmia	r5!, {r2}
    b260:	000b      	movs	r3, r1
    b262:	3310      	adds	r3, #16
    b264:	009b      	lsls	r3, r3, #2
    b266:	18e3      	adds	r3, r4, r3
    b268:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    b26a:	3101      	adds	r1, #1
    b26c:	4288      	cmp	r0, r1
    b26e:	dcf1      	bgt.n	b254 <tcc_init+0x3b8>
	return STATUS_OK;
    b270:	2000      	movs	r0, #0
    b272:	e62d      	b.n	aed0 <tcc_init+0x34>
			return STATUS_ERR_INVALID_ARG;
    b274:	2017      	movs	r0, #23
    b276:	e62b      	b.n	aed0 <tcc_init+0x34>
    b278:	2017      	movs	r0, #23
    b27a:	e629      	b.n	aed0 <tcc_init+0x34>
    b27c:	2017      	movs	r0, #23
    b27e:	e627      	b.n	aed0 <tcc_init+0x34>
    b280:	2017      	movs	r0, #23
    b282:	e625      	b.n	aed0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    b284:	2017      	movs	r0, #23
    b286:	e623      	b.n	aed0 <tcc_init+0x34>
			if (i >= ow_num) {
    b288:	2017      	movs	r0, #23
    b28a:	e621      	b.n	aed0 <tcc_init+0x34>
			if (i >= ow_num) {
    b28c:	2017      	movs	r0, #23
    b28e:	e61f      	b.n	aed0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    b290:	2017      	movs	r0, #23
    b292:	e61d      	b.n	aed0 <tcc_init+0x34>
	return STATUS_OK;
    b294:	2000      	movs	r0, #0
    b296:	e61b      	b.n	aed0 <tcc_init+0x34>
				return STATUS_ERR_INVALID_ARG;
    b298:	2017      	movs	r0, #23
    b29a:	e619      	b.n	aed0 <tcc_init+0x34>
    b29c:	00020040 	.word	0x00020040
    b2a0:	00040080 	.word	0x00040080
    b2a4:	00080100 	.word	0x00080100

0000b2a8 <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    b2a8:	0092      	lsls	r2, r2, #2
    b2aa:	1883      	adds	r3, r0, r2
    b2ac:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    b2ae:	4b03      	ldr	r3, [pc, #12]	; (b2bc <tcc_register_callback+0x14>)
    b2b0:	58d3      	ldr	r3, [r2, r3]
    b2b2:	6b42      	ldr	r2, [r0, #52]	; 0x34
    b2b4:	4313      	orrs	r3, r2
    b2b6:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    b2b8:	2000      	movs	r0, #0
    b2ba:	4770      	bx	lr
    b2bc:	0000fbd4 	.word	0x0000fbd4

0000b2c0 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    b2c0:	b570      	push	{r4, r5, r6, lr}
    b2c2:	0004      	movs	r4, r0
    b2c4:	000d      	movs	r5, r1
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    b2c6:	6800      	ldr	r0, [r0, #0]
    b2c8:	4b09      	ldr	r3, [pc, #36]	; (b2f0 <tcc_enable_callback+0x30>)
    b2ca:	4798      	blx	r3
	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    b2cc:	4b09      	ldr	r3, [pc, #36]	; (b2f4 <tcc_enable_callback+0x34>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b2ce:	5c1b      	ldrb	r3, [r3, r0]
    b2d0:	221f      	movs	r2, #31
    b2d2:	401a      	ands	r2, r3
    b2d4:	2301      	movs	r3, #1
    b2d6:	4093      	lsls	r3, r2
    b2d8:	4a07      	ldr	r2, [pc, #28]	; (b2f8 <tcc_enable_callback+0x38>)
    b2da:	6013      	str	r3, [r2, #0]

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    b2dc:	00ad      	lsls	r5, r5, #2
    b2de:	4b07      	ldr	r3, [pc, #28]	; (b2fc <tcc_enable_callback+0x3c>)
    b2e0:	58ea      	ldr	r2, [r5, r3]
    b2e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b2e4:	4313      	orrs	r3, r2
    b2e6:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    b2e8:	6823      	ldr	r3, [r4, #0]
    b2ea:	629a      	str	r2, [r3, #40]	; 0x28
}
    b2ec:	bd70      	pop	{r4, r5, r6, pc}
    b2ee:	46c0      	nop			; (mov r8, r8)
    b2f0:	0000ad1d 	.word	0x0000ad1d
    b2f4:	0000fc04 	.word	0x0000fc04
    b2f8:	e000e100 	.word	0xe000e100
    b2fc:	0000fbd4 	.word	0x0000fbd4

0000b300 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    b300:	b5f0      	push	{r4, r5, r6, r7, lr}
    b302:	46c6      	mov	lr, r8
    b304:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    b306:	0080      	lsls	r0, r0, #2
    b308:	4b0e      	ldr	r3, [pc, #56]	; (b344 <_tcc_interrupt_handler+0x44>)
    b30a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    b30c:	683b      	ldr	r3, [r7, #0]
    b30e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    b312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    b314:	4013      	ands	r3, r2
    b316:	401e      	ands	r6, r3
    b318:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    b31a:	4b0b      	ldr	r3, [pc, #44]	; (b348 <_tcc_interrupt_handler+0x48>)
    b31c:	4698      	mov	r8, r3
    b31e:	e002      	b.n	b326 <_tcc_interrupt_handler+0x26>
    b320:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    b322:	2c30      	cmp	r4, #48	; 0x30
    b324:	d00a      	beq.n	b33c <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    b326:	4643      	mov	r3, r8
    b328:	58e5      	ldr	r5, [r4, r3]
    b32a:	4235      	tst	r5, r6
    b32c:	d0f8      	beq.n	b320 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    b32e:	193b      	adds	r3, r7, r4
    b330:	685b      	ldr	r3, [r3, #4]
    b332:	0038      	movs	r0, r7
    b334:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    b336:	683b      	ldr	r3, [r7, #0]
    b338:	62dd      	str	r5, [r3, #44]	; 0x2c
    b33a:	e7f1      	b.n	b320 <_tcc_interrupt_handler+0x20>
		}
	}
}
    b33c:	bc04      	pop	{r2}
    b33e:	4690      	mov	r8, r2
    b340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b342:	46c0      	nop			; (mov r8, r8)
    b344:	200007e0 	.word	0x200007e0
    b348:	0000fbd4 	.word	0x0000fbd4

0000b34c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    b34c:	b510      	push	{r4, lr}
    b34e:	2000      	movs	r0, #0
    b350:	4b01      	ldr	r3, [pc, #4]	; (b358 <TCC0_Handler+0xc>)
    b352:	4798      	blx	r3
    b354:	bd10      	pop	{r4, pc}
    b356:	46c0      	nop			; (mov r8, r8)
    b358:	0000b301 	.word	0x0000b301

0000b35c <TCC1_Handler>:
    b35c:	b510      	push	{r4, lr}
    b35e:	2001      	movs	r0, #1
    b360:	4b01      	ldr	r3, [pc, #4]	; (b368 <TCC1_Handler+0xc>)
    b362:	4798      	blx	r3
    b364:	bd10      	pop	{r4, pc}
    b366:	46c0      	nop			; (mov r8, r8)
    b368:	0000b301 	.word	0x0000b301

0000b36c <TCC2_Handler>:
    b36c:	b510      	push	{r4, lr}
    b36e:	2002      	movs	r0, #2
    b370:	4b01      	ldr	r3, [pc, #4]	; (b378 <TCC2_Handler+0xc>)
    b372:	4798      	blx	r3
    b374:	bd10      	pop	{r4, pc}
    b376:	46c0      	nop			; (mov r8, r8)
    b378:	0000b301 	.word	0x0000b301

0000b37c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    b37c:	e7fe      	b.n	b37c <Dummy_Handler>
	...

0000b380 <Reset_Handler>:
{
    b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    b382:	4a2a      	ldr	r2, [pc, #168]	; (b42c <Reset_Handler+0xac>)
    b384:	4b2a      	ldr	r3, [pc, #168]	; (b430 <Reset_Handler+0xb0>)
    b386:	429a      	cmp	r2, r3
    b388:	d011      	beq.n	b3ae <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    b38a:	001a      	movs	r2, r3
    b38c:	4b29      	ldr	r3, [pc, #164]	; (b434 <Reset_Handler+0xb4>)
    b38e:	429a      	cmp	r2, r3
    b390:	d20d      	bcs.n	b3ae <Reset_Handler+0x2e>
    b392:	4a29      	ldr	r2, [pc, #164]	; (b438 <Reset_Handler+0xb8>)
    b394:	3303      	adds	r3, #3
    b396:	1a9b      	subs	r3, r3, r2
    b398:	089b      	lsrs	r3, r3, #2
    b39a:	3301      	adds	r3, #1
    b39c:	009b      	lsls	r3, r3, #2
    b39e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    b3a0:	4823      	ldr	r0, [pc, #140]	; (b430 <Reset_Handler+0xb0>)
    b3a2:	4922      	ldr	r1, [pc, #136]	; (b42c <Reset_Handler+0xac>)
    b3a4:	588c      	ldr	r4, [r1, r2]
    b3a6:	5084      	str	r4, [r0, r2]
    b3a8:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    b3aa:	429a      	cmp	r2, r3
    b3ac:	d1fa      	bne.n	b3a4 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    b3ae:	4a23      	ldr	r2, [pc, #140]	; (b43c <Reset_Handler+0xbc>)
    b3b0:	4b23      	ldr	r3, [pc, #140]	; (b440 <Reset_Handler+0xc0>)
    b3b2:	429a      	cmp	r2, r3
    b3b4:	d20a      	bcs.n	b3cc <Reset_Handler+0x4c>
    b3b6:	43d3      	mvns	r3, r2
    b3b8:	4921      	ldr	r1, [pc, #132]	; (b440 <Reset_Handler+0xc0>)
    b3ba:	185b      	adds	r3, r3, r1
    b3bc:	2103      	movs	r1, #3
    b3be:	438b      	bics	r3, r1
    b3c0:	3304      	adds	r3, #4
    b3c2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    b3c4:	2100      	movs	r1, #0
    b3c6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    b3c8:	4293      	cmp	r3, r2
    b3ca:	d1fc      	bne.n	b3c6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    b3cc:	4a1d      	ldr	r2, [pc, #116]	; (b444 <Reset_Handler+0xc4>)
    b3ce:	21ff      	movs	r1, #255	; 0xff
    b3d0:	4b1d      	ldr	r3, [pc, #116]	; (b448 <Reset_Handler+0xc8>)
    b3d2:	438b      	bics	r3, r1
    b3d4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    b3d6:	39fd      	subs	r1, #253	; 0xfd
    b3d8:	2390      	movs	r3, #144	; 0x90
    b3da:	005b      	lsls	r3, r3, #1
    b3dc:	4a1b      	ldr	r2, [pc, #108]	; (b44c <Reset_Handler+0xcc>)
    b3de:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    b3e0:	4a1b      	ldr	r2, [pc, #108]	; (b450 <Reset_Handler+0xd0>)
    b3e2:	78d3      	ldrb	r3, [r2, #3]
    b3e4:	2503      	movs	r5, #3
    b3e6:	43ab      	bics	r3, r5
    b3e8:	2402      	movs	r4, #2
    b3ea:	4323      	orrs	r3, r4
    b3ec:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    b3ee:	78d3      	ldrb	r3, [r2, #3]
    b3f0:	270c      	movs	r7, #12
    b3f2:	43bb      	bics	r3, r7
    b3f4:	2608      	movs	r6, #8
    b3f6:	4333      	orrs	r3, r6
    b3f8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    b3fa:	4b16      	ldr	r3, [pc, #88]	; (b454 <Reset_Handler+0xd4>)
    b3fc:	7b98      	ldrb	r0, [r3, #14]
    b3fe:	2230      	movs	r2, #48	; 0x30
    b400:	4390      	bics	r0, r2
    b402:	2220      	movs	r2, #32
    b404:	4310      	orrs	r0, r2
    b406:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    b408:	7b99      	ldrb	r1, [r3, #14]
    b40a:	43b9      	bics	r1, r7
    b40c:	4331      	orrs	r1, r6
    b40e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    b410:	7b9a      	ldrb	r2, [r3, #14]
    b412:	43aa      	bics	r2, r5
    b414:	4322      	orrs	r2, r4
    b416:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    b418:	4a0f      	ldr	r2, [pc, #60]	; (b458 <Reset_Handler+0xd8>)
    b41a:	6853      	ldr	r3, [r2, #4]
    b41c:	2180      	movs	r1, #128	; 0x80
    b41e:	430b      	orrs	r3, r1
    b420:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    b422:	4b0e      	ldr	r3, [pc, #56]	; (b45c <Reset_Handler+0xdc>)
    b424:	4798      	blx	r3
        main();
    b426:	4b0e      	ldr	r3, [pc, #56]	; (b460 <Reset_Handler+0xe0>)
    b428:	4798      	blx	r3
    b42a:	e7fe      	b.n	b42a <Reset_Handler+0xaa>
    b42c:	0001001c 	.word	0x0001001c
    b430:	20000000 	.word	0x20000000
    b434:	200001dc 	.word	0x200001dc
    b438:	20000004 	.word	0x20000004
    b43c:	200001dc 	.word	0x200001dc
    b440:	200007fc 	.word	0x200007fc
    b444:	e000ed00 	.word	0xe000ed00
    b448:	00004000 	.word	0x00004000
    b44c:	41007000 	.word	0x41007000
    b450:	41005000 	.word	0x41005000
    b454:	41004800 	.word	0x41004800
    b458:	41004000 	.word	0x41004000
    b45c:	0000cc21 	.word	0x0000cc21
    b460:	0000c765 	.word	0x0000c765

0000b464 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    b464:	b5f0      	push	{r4, r5, r6, r7, lr}
    b466:	46c6      	mov	lr, r8
    b468:	b500      	push	{lr}
    b46a:	000c      	movs	r4, r1
    b46c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    b46e:	2800      	cmp	r0, #0
    b470:	d10f      	bne.n	b492 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    b472:	2a00      	cmp	r2, #0
    b474:	dd11      	ble.n	b49a <_read+0x36>
    b476:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    b478:	4e09      	ldr	r6, [pc, #36]	; (b4a0 <_read+0x3c>)
    b47a:	4d0a      	ldr	r5, [pc, #40]	; (b4a4 <_read+0x40>)
    b47c:	6830      	ldr	r0, [r6, #0]
    b47e:	0021      	movs	r1, r4
    b480:	682b      	ldr	r3, [r5, #0]
    b482:	4798      	blx	r3
		ptr++;
    b484:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    b486:	42bc      	cmp	r4, r7
    b488:	d1f8      	bne.n	b47c <_read+0x18>
		nChars++;
	}
	return nChars;
}
    b48a:	4640      	mov	r0, r8
    b48c:	bc04      	pop	{r2}
    b48e:	4690      	mov	r8, r2
    b490:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    b492:	2301      	movs	r3, #1
    b494:	425b      	negs	r3, r3
    b496:	4698      	mov	r8, r3
    b498:	e7f7      	b.n	b48a <_read+0x26>
	for (; len > 0; --len) {
    b49a:	4680      	mov	r8, r0
    b49c:	e7f5      	b.n	b48a <_read+0x26>
    b49e:	46c0      	nop			; (mov r8, r8)
    b4a0:	200007f4 	.word	0x200007f4
    b4a4:	200007ec 	.word	0x200007ec

0000b4a8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4aa:	46c6      	mov	lr, r8
    b4ac:	b500      	push	{lr}
    b4ae:	000e      	movs	r6, r1
    b4b0:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    b4b2:	3801      	subs	r0, #1
    b4b4:	2802      	cmp	r0, #2
    b4b6:	d810      	bhi.n	b4da <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    b4b8:	2a00      	cmp	r2, #0
    b4ba:	d011      	beq.n	b4e0 <_write+0x38>
    b4bc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    b4be:	4b0c      	ldr	r3, [pc, #48]	; (b4f0 <_write+0x48>)
    b4c0:	4698      	mov	r8, r3
    b4c2:	4f0c      	ldr	r7, [pc, #48]	; (b4f4 <_write+0x4c>)
    b4c4:	4643      	mov	r3, r8
    b4c6:	6818      	ldr	r0, [r3, #0]
    b4c8:	5d31      	ldrb	r1, [r6, r4]
    b4ca:	683b      	ldr	r3, [r7, #0]
    b4cc:	4798      	blx	r3
    b4ce:	2800      	cmp	r0, #0
    b4d0:	db08      	blt.n	b4e4 <_write+0x3c>
			return -1;
		}
		++nChars;
    b4d2:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    b4d4:	42a5      	cmp	r5, r4
    b4d6:	d1f5      	bne.n	b4c4 <_write+0x1c>
    b4d8:	e006      	b.n	b4e8 <_write+0x40>
		return -1;
    b4da:	2401      	movs	r4, #1
    b4dc:	4264      	negs	r4, r4
    b4de:	e003      	b.n	b4e8 <_write+0x40>
	for (; len != 0; --len) {
    b4e0:	0014      	movs	r4, r2
    b4e2:	e001      	b.n	b4e8 <_write+0x40>
			return -1;
    b4e4:	2401      	movs	r4, #1
    b4e6:	4264      	negs	r4, r4
	}
	return nChars;
}
    b4e8:	0020      	movs	r0, r4
    b4ea:	bc04      	pop	{r2}
    b4ec:	4690      	mov	r8, r2
    b4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b4f0:	200007f4 	.word	0x200007f4
    b4f4:	200007f0 	.word	0x200007f0

0000b4f8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    b4f8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    b4fa:	4a06      	ldr	r2, [pc, #24]	; (b514 <_sbrk+0x1c>)
    b4fc:	6812      	ldr	r2, [r2, #0]
    b4fe:	2a00      	cmp	r2, #0
    b500:	d004      	beq.n	b50c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    b502:	4a04      	ldr	r2, [pc, #16]	; (b514 <_sbrk+0x1c>)
    b504:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    b506:	18c3      	adds	r3, r0, r3
    b508:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    b50a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    b50c:	4902      	ldr	r1, [pc, #8]	; (b518 <_sbrk+0x20>)
    b50e:	4a01      	ldr	r2, [pc, #4]	; (b514 <_sbrk+0x1c>)
    b510:	6011      	str	r1, [r2, #0]
    b512:	e7f6      	b.n	b502 <_sbrk+0xa>
    b514:	2000046c 	.word	0x2000046c
    b518:	20002800 	.word	0x20002800

0000b51c <_close>:
}

extern int _close(int file)
{
	return -1;
}
    b51c:	2001      	movs	r0, #1
    b51e:	4240      	negs	r0, r0
    b520:	4770      	bx	lr

0000b522 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    b522:	2380      	movs	r3, #128	; 0x80
    b524:	019b      	lsls	r3, r3, #6
    b526:	604b      	str	r3, [r1, #4]

	return 0;
}
    b528:	2000      	movs	r0, #0
    b52a:	4770      	bx	lr

0000b52c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    b52c:	2001      	movs	r0, #1
    b52e:	4770      	bx	lr

0000b530 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    b530:	2000      	movs	r0, #0
    b532:	4770      	bx	lr

0000b534 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    b534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b536:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    b538:	2041      	movs	r0, #65	; 0x41
    b53a:	5c23      	ldrb	r3, [r4, r0]
    b53c:	2501      	movs	r5, #1
    b53e:	432b      	orrs	r3, r5
    b540:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    b542:	b292      	uxth	r2, r2
    b544:	2000      	movs	r0, #0
    b546:	5620      	ldrsb	r0, [r4, r0]
    b548:	2300      	movs	r3, #0
    b54a:	4d12      	ldr	r5, [pc, #72]	; (b594 <_http_client_send_wait+0x60>)
    b54c:	47a8      	blx	r5
    b54e:	2800      	cmp	r0, #0
    b550:	db16      	blt.n	b580 <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    b552:	2341      	movs	r3, #65	; 0x41
    b554:	5ce3      	ldrb	r3, [r4, r3]
    b556:	07db      	lsls	r3, r3, #31
    b558:	d518      	bpl.n	b58c <_http_client_send_wait+0x58>
    b55a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    b55c:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    b55e:	2b02      	cmp	r3, #2
    b560:	d917      	bls.n	b592 <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
    b562:	4f0d      	ldr	r7, [pc, #52]	; (b598 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
    b564:	4e0d      	ldr	r6, [pc, #52]	; (b59c <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    b566:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    b568:	2000      	movs	r0, #0
    b56a:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    b56c:	6d60      	ldr	r0, [r4, #84]	; 0x54
    b56e:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    b570:	5d63      	ldrb	r3, [r4, r5]
    b572:	07db      	lsls	r3, r3, #31
    b574:	d50c      	bpl.n	b590 <_http_client_send_wait+0x5c>
    b576:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    b578:	2b02      	cmp	r3, #2
    b57a:	d8f5      	bhi.n	b568 <_http_client_send_wait+0x34>
	return 0;
    b57c:	2000      	movs	r0, #0
    b57e:	e008      	b.n	b592 <_http_client_send_wait+0x5e>
		module->sending = 0;
    b580:	2241      	movs	r2, #65	; 0x41
    b582:	5ca3      	ldrb	r3, [r4, r2]
    b584:	2101      	movs	r1, #1
    b586:	438b      	bics	r3, r1
    b588:	54a3      	strb	r3, [r4, r2]
		return result;
    b58a:	e002      	b.n	b592 <_http_client_send_wait+0x5e>
	return 0;
    b58c:	2000      	movs	r0, #0
    b58e:	e000      	b.n	b592 <_http_client_send_wait+0x5e>
    b590:	2000      	movs	r0, #0
}
    b592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b594:	00008ced 	.word	0x00008ced
    b598:	00006f89 	.word	0x00006f89
    b59c:	0000c6c9 	.word	0x0000c6c9

0000b5a0 <http_client_get_config_defaults>:
	config->port = 80;
    b5a0:	2350      	movs	r3, #80	; 0x50
    b5a2:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    b5a4:	2300      	movs	r3, #0
    b5a6:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    b5a8:	4a05      	ldr	r2, [pc, #20]	; (b5c0 <http_client_get_config_defaults+0x20>)
    b5aa:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    b5ac:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    b5ae:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    b5b0:	3301      	adds	r3, #1
    b5b2:	33ff      	adds	r3, #255	; 0xff
    b5b4:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    b5b6:	3bae      	subs	r3, #174	; 0xae
    b5b8:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    b5ba:	4b02      	ldr	r3, [pc, #8]	; (b5c4 <http_client_get_config_defaults+0x24>)
    b5bc:	6183      	str	r3, [r0, #24]
}
    b5be:	4770      	bx	lr
    b5c0:	00004e20 	.word	0x00004e20
    b5c4:	0000fdd0 	.word	0x0000fdd0

0000b5c8 <http_client_init>:
{
    b5c8:	b570      	push	{r4, r5, r6, lr}
    b5ca:	0004      	movs	r4, r0
    b5cc:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
    b5ce:	2800      	cmp	r0, #0
    b5d0:	d038      	beq.n	b644 <http_client_init+0x7c>
    b5d2:	2900      	cmp	r1, #0
    b5d4:	d039      	beq.n	b64a <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
    b5d6:	690b      	ldr	r3, [r1, #16]
    b5d8:	2b00      	cmp	r3, #0
    b5da:	d039      	beq.n	b650 <http_client_init+0x88>
	if (config->timer_inst == NULL) {
    b5dc:	684b      	ldr	r3, [r1, #4]
    b5de:	2b00      	cmp	r3, #0
    b5e0:	d039      	beq.n	b656 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    b5e2:	694b      	ldr	r3, [r1, #20]
    b5e4:	2b51      	cmp	r3, #81	; 0x51
    b5e6:	d939      	bls.n	b65c <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
    b5e8:	22e8      	movs	r2, #232	; 0xe8
    b5ea:	2100      	movs	r1, #0
    b5ec:	4b1e      	ldr	r3, [pc, #120]	; (b668 <http_client_init+0xa0>)
    b5ee:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    b5f0:	0020      	movs	r0, r4
    b5f2:	3050      	adds	r0, #80	; 0x50
    b5f4:	221c      	movs	r2, #28
    b5f6:	0029      	movs	r1, r5
    b5f8:	4b1c      	ldr	r3, [pc, #112]	; (b66c <http_client_init+0xa4>)
    b5fa:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
    b5fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    b5fe:	2b00      	cmp	r3, #0
    b600:	d008      	beq.n	b614 <http_client_init+0x4c>
	if (config->timeout > 0) {
    b602:	892b      	ldrh	r3, [r5, #8]
    b604:	2b00      	cmp	r3, #0
    b606:	d111      	bne.n	b62c <http_client_init+0x64>
	module->req.state = STATE_INIT;
    b608:	2300      	movs	r3, #0
    b60a:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    b60c:	22d8      	movs	r2, #216	; 0xd8
    b60e:	50a3      	str	r3, [r4, r2]
	return 0;
    b610:	2000      	movs	r0, #0
}
    b612:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    b614:	6928      	ldr	r0, [r5, #16]
    b616:	4b16      	ldr	r3, [pc, #88]	; (b670 <http_client_init+0xa8>)
    b618:	4798      	blx	r3
    b61a:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    b61c:	2800      	cmp	r0, #0
    b61e:	d020      	beq.n	b662 <http_client_init+0x9a>
		module->alloc_buffer = 1;
    b620:	2241      	movs	r2, #65	; 0x41
    b622:	5ca3      	ldrb	r3, [r4, r2]
    b624:	2104      	movs	r1, #4
    b626:	430b      	orrs	r3, r1
    b628:	54a3      	strb	r3, [r4, r2]
    b62a:	e7ea      	b.n	b602 <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    b62c:	6868      	ldr	r0, [r5, #4]
    b62e:	2300      	movs	r3, #0
    b630:	0022      	movs	r2, r4
    b632:	4910      	ldr	r1, [pc, #64]	; (b674 <http_client_init+0xac>)
    b634:	4d10      	ldr	r5, [pc, #64]	; (b678 <http_client_init+0xb0>)
    b636:	47a8      	blx	r5
    b638:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
    b63a:	2800      	cmp	r0, #0
    b63c:	dae4      	bge.n	b608 <http_client_init+0x40>
			return -ENOSPC;
    b63e:	201c      	movs	r0, #28
    b640:	4240      	negs	r0, r0
    b642:	e7e6      	b.n	b612 <http_client_init+0x4a>
		return -EINVAL;
    b644:	2016      	movs	r0, #22
    b646:	4240      	negs	r0, r0
    b648:	e7e3      	b.n	b612 <http_client_init+0x4a>
    b64a:	2016      	movs	r0, #22
    b64c:	4240      	negs	r0, r0
    b64e:	e7e0      	b.n	b612 <http_client_init+0x4a>
		return -EINVAL;
    b650:	2016      	movs	r0, #22
    b652:	4240      	negs	r0, r0
    b654:	e7dd      	b.n	b612 <http_client_init+0x4a>
		return -EINVAL;
    b656:	2016      	movs	r0, #22
    b658:	4240      	negs	r0, r0
    b65a:	e7da      	b.n	b612 <http_client_init+0x4a>
		return -EINVAL;
    b65c:	2016      	movs	r0, #22
    b65e:	4240      	negs	r0, r0
    b660:	e7d7      	b.n	b612 <http_client_init+0x4a>
			return -ENOMEM;
    b662:	200c      	movs	r0, #12
    b664:	4240      	negs	r0, r0
    b666:	e7d4      	b.n	b612 <http_client_init+0x4a>
    b668:	0000ccc7 	.word	0x0000ccc7
    b66c:	0000cc91 	.word	0x0000cc91
    b670:	0000cc69 	.word	0x0000cc69
    b674:	0000b78d 	.word	0x0000b78d
    b678:	0000c655 	.word	0x0000c655

0000b67c <http_client_register_callback>:
	if (module == NULL) {
    b67c:	2800      	cmp	r0, #0
    b67e:	d002      	beq.n	b686 <http_client_register_callback+0xa>
	module->cb = callback;
    b680:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
    b682:	2000      	movs	r0, #0
}
    b684:	4770      	bx	lr
		return -EINVAL;
    b686:	2016      	movs	r0, #22
    b688:	4240      	negs	r0, r0
    b68a:	e7fb      	b.n	b684 <http_client_register_callback+0x8>

0000b68c <_http_client_clear_conn>:
{
    b68c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b68e:	b085      	sub	sp, #20
    b690:	0004      	movs	r4, r0
    b692:	000e      	movs	r6, r1
	if (module->req.entity.close) {
    b694:	23c0      	movs	r3, #192	; 0xc0
    b696:	58c3      	ldr	r3, [r0, r3]
    b698:	2b00      	cmp	r3, #0
    b69a:	d002      	beq.n	b6a2 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    b69c:	22c4      	movs	r2, #196	; 0xc4
    b69e:	5880      	ldr	r0, [r0, r2]
    b6a0:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
    b6a2:	0020      	movs	r0, r4
    b6a4:	30b0      	adds	r0, #176	; 0xb0
    b6a6:	2218      	movs	r2, #24
    b6a8:	2100      	movs	r1, #0
    b6aa:	4b17      	ldr	r3, [pc, #92]	; (b708 <_http_client_clear_conn+0x7c>)
    b6ac:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    b6ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    b6b0:	2b00      	cmp	r3, #0
    b6b2:	d124      	bne.n	b6fe <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
    b6b4:	2300      	movs	r3, #0
    b6b6:	56e3      	ldrsb	r3, [r4, r3]
    b6b8:	009b      	lsls	r3, r3, #2
    b6ba:	2500      	movs	r5, #0
    b6bc:	4a13      	ldr	r2, [pc, #76]	; (b70c <_http_client_clear_conn+0x80>)
    b6be:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    b6c0:	0020      	movs	r0, r4
    b6c2:	306c      	adds	r0, #108	; 0x6c
    b6c4:	226c      	movs	r2, #108	; 0x6c
    b6c6:	2100      	movs	r1, #0
    b6c8:	4f0f      	ldr	r7, [pc, #60]	; (b708 <_http_client_clear_conn+0x7c>)
    b6ca:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    b6cc:	0020      	movs	r0, r4
    b6ce:	30d8      	adds	r0, #216	; 0xd8
    b6d0:	2210      	movs	r2, #16
    b6d2:	2100      	movs	r1, #0
    b6d4:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    b6d6:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    b6d8:	23d8      	movs	r3, #216	; 0xd8
    b6da:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
    b6dc:	2241      	movs	r2, #65	; 0x41
    b6de:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    b6e0:	2101      	movs	r1, #1
    b6e2:	438b      	bics	r3, r1
    b6e4:	3101      	adds	r1, #1
    b6e6:	438b      	bics	r3, r1
    b6e8:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    b6ea:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    b6ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b6ee:	2b00      	cmp	r3, #0
    b6f0:	d003      	beq.n	b6fa <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    b6f2:	aa01      	add	r2, sp, #4
    b6f4:	3102      	adds	r1, #2
    b6f6:	0020      	movs	r0, r4
    b6f8:	4798      	blx	r3
}
    b6fa:	b005      	add	sp, #20
    b6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
    b6fe:	2000      	movs	r0, #0
    b700:	5620      	ldrsb	r0, [r4, r0]
    b702:	4b03      	ldr	r3, [pc, #12]	; (b710 <_http_client_clear_conn+0x84>)
    b704:	4798      	blx	r3
    b706:	e7d5      	b.n	b6b4 <_http_client_clear_conn+0x28>
    b708:	0000ccc7 	.word	0x0000ccc7
    b70c:	20000470 	.word	0x20000470
    b710:	00008e19 	.word	0x00008e19

0000b714 <http_client_socket_resolve_handler>:
{
    b714:	b5f0      	push	{r4, r5, r6, r7, lr}
    b716:	b087      	sub	sp, #28
    b718:	9000      	str	r0, [sp, #0]
    b71a:	9101      	str	r1, [sp, #4]
    b71c:	4c17      	ldr	r4, [pc, #92]	; (b77c <http_client_socket_resolve_handler+0x68>)
    b71e:	0026      	movs	r6, r4
    b720:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    b722:	4f17      	ldr	r7, [pc, #92]	; (b780 <http_client_socket_resolve_handler+0x6c>)
    b724:	e015      	b.n	b752 <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
    b726:	2302      	movs	r3, #2
    b728:	aa02      	add	r2, sp, #8
    b72a:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    b72c:	334e      	adds	r3, #78	; 0x4e
    b72e:	5aeb      	ldrh	r3, [r5, r3]
    b730:	021a      	lsls	r2, r3, #8
    b732:	0a1b      	lsrs	r3, r3, #8
    b734:	4313      	orrs	r3, r2
    b736:	aa02      	add	r2, sp, #8
    b738:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
    b73a:	9b01      	ldr	r3, [sp, #4]
    b73c:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    b73e:	2000      	movs	r0, #0
    b740:	5628      	ldrsb	r0, [r5, r0]
    b742:	2210      	movs	r2, #16
    b744:	a902      	add	r1, sp, #8
    b746:	4b0f      	ldr	r3, [pc, #60]	; (b784 <http_client_socket_resolve_handler+0x70>)
    b748:	4798      	blx	r3
				return;
    b74a:	e015      	b.n	b778 <http_client_socket_resolve_handler+0x64>
    b74c:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
    b74e:	42b4      	cmp	r4, r6
    b750:	d012      	beq.n	b778 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
    b752:	6825      	ldr	r5, [r4, #0]
    b754:	2d00      	cmp	r5, #0
    b756:	d0f9      	beq.n	b74c <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
    b758:	1c69      	adds	r1, r5, #1
    b75a:	9800      	ldr	r0, [sp, #0]
    b75c:	47b8      	blx	r7
    b75e:	2800      	cmp	r0, #0
    b760:	d1f4      	bne.n	b74c <http_client_socket_resolve_handler+0x38>
    b762:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    b764:	2b01      	cmp	r3, #1
    b766:	d1f1      	bne.n	b74c <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
    b768:	9b01      	ldr	r3, [sp, #4]
    b76a:	2b00      	cmp	r3, #0
    b76c:	d1db      	bne.n	b726 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
    b76e:	2176      	movs	r1, #118	; 0x76
    b770:	4249      	negs	r1, r1
    b772:	0028      	movs	r0, r5
    b774:	4b04      	ldr	r3, [pc, #16]	; (b788 <http_client_socket_resolve_handler+0x74>)
    b776:	4798      	blx	r3
}
    b778:	b007      	add	sp, #28
    b77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b77c:	20000470 	.word	0x20000470
    b780:	0000d12d 	.word	0x0000d12d
    b784:	00008c5d 	.word	0x00008c5d
    b788:	0000b68d 	.word	0x0000b68d

0000b78c <http_client_timer_callback>:
{
    b78c:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
    b78e:	2a00      	cmp	r2, #0
    b790:	d004      	beq.n	b79c <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
    b792:	213e      	movs	r1, #62	; 0x3e
    b794:	4249      	negs	r1, r1
    b796:	0010      	movs	r0, r2
    b798:	4b01      	ldr	r3, [pc, #4]	; (b7a0 <http_client_timer_callback+0x14>)
    b79a:	4798      	blx	r3
}
    b79c:	bd10      	pop	{r4, pc}
    b79e:	46c0      	nop			; (mov r8, r8)
    b7a0:	0000b68d 	.word	0x0000b68d

0000b7a4 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
    b7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7a6:	46de      	mov	lr, fp
    b7a8:	4657      	mov	r7, sl
    b7aa:	b580      	push	{r7, lr}
    b7ac:	b095      	sub	sp, #84	; 0x54
    b7ae:	af02      	add	r7, sp, #8
    b7b0:	0004      	movs	r4, r0
    b7b2:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    b7b4:	2210      	movs	r2, #16
    b7b6:	49b2      	ldr	r1, [pc, #712]	; (ba80 <_http_client_request+0x2dc>)
    b7b8:	2310      	movs	r3, #16
    b7ba:	2008      	movs	r0, #8
    b7bc:	1838      	adds	r0, r7, r0
    b7be:	18c0      	adds	r0, r0, r3
    b7c0:	4bb0      	ldr	r3, [pc, #704]	; (ba84 <_http_client_request+0x2e0>)
    b7c2:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    b7c4:	6e62      	ldr	r2, [r4, #100]	; 0x64
    b7c6:	1dd3      	adds	r3, r2, #7
    b7c8:	08db      	lsrs	r3, r3, #3
    b7ca:	00db      	lsls	r3, r3, #3
    b7cc:	4669      	mov	r1, sp
    b7ce:	1acb      	subs	r3, r1, r3
    b7d0:	469d      	mov	sp, r3
    b7d2:	ae02      	add	r6, sp, #8

	if (module == NULL) {
    b7d4:	2c00      	cmp	r4, #0
    b7d6:	d100      	bne.n	b7da <_http_client_request+0x36>
    b7d8:	e1f1      	b.n	bbbe <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
    b7da:	2341      	movs	r3, #65	; 0x41
    b7dc:	5ce3      	ldrb	r3, [r4, r3]
    b7de:	07db      	lsls	r3, r3, #31
    b7e0:	d500      	bpl.n	b7e4 <_http_client_request+0x40>
    b7e2:	e1ec      	b.n	bbbe <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    b7e4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    b7e6:	2b03      	cmp	r3, #3
    b7e8:	d004      	beq.n	b7f4 <_http_client_request+0x50>
    b7ea:	2b04      	cmp	r3, #4
    b7ec:	d100      	bne.n	b7f0 <_http_client_request+0x4c>
    b7ee:	e120      	b.n	ba32 <_http_client_request+0x28e>
    b7f0:	46dd      	mov	sp, fp
    b7f2:	e1e5      	b.n	bbc0 <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    b7f4:	2300      	movs	r3, #0
    b7f6:	21cc      	movs	r1, #204	; 0xcc
    b7f8:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    b7fa:	3104      	adds	r1, #4
    b7fc:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    b7fe:	9400      	str	r4, [sp, #0]
    b800:	4ba1      	ldr	r3, [pc, #644]	; (ba88 <_http_client_request+0x2e4>)
    b802:	0031      	movs	r1, r6
    b804:	202c      	movs	r0, #44	; 0x2c
    b806:	2508      	movs	r5, #8
    b808:	46ac      	mov	ip, r5
    b80a:	44bc      	add	ip, r7
    b80c:	4460      	add	r0, ip
    b80e:	4d9f      	ldr	r5, [pc, #636]	; (ba8c <_http_client_request+0x2e8>)
    b810:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    b812:	23c8      	movs	r3, #200	; 0xc8
    b814:	5ce3      	ldrb	r3, [r4, r3]
    b816:	2b01      	cmp	r3, #1
    b818:	d100      	bne.n	b81c <_http_client_request+0x78>
    b81a:	e0a9      	b.n	b970 <_http_client_request+0x1cc>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
    b81c:	2b02      	cmp	r3, #2
    b81e:	d100      	bne.n	b822 <_http_client_request+0x7e>
    b820:	e0af      	b.n	b982 <_http_client_request+0x1de>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    b822:	2b03      	cmp	r3, #3
    b824:	d100      	bne.n	b828 <_http_client_request+0x84>
    b826:	e0b5      	b.n	b994 <_http_client_request+0x1f0>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
    b828:	2b04      	cmp	r3, #4
    b82a:	d100      	bne.n	b82e <_http_client_request+0x8a>
    b82c:	e0bb      	b.n	b9a6 <_http_client_request+0x202>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    b82e:	2b05      	cmp	r3, #5
    b830:	d100      	bne.n	b834 <_http_client_request+0x90>
    b832:	e0c1      	b.n	b9b8 <_http_client_request+0x214>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    b834:	2b06      	cmp	r3, #6
    b836:	d100      	bne.n	b83a <_http_client_request+0x96>
    b838:	e0c7      	b.n	b9ca <_http_client_request+0x226>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    b83a:	0025      	movs	r5, r4
    b83c:	3570      	adds	r5, #112	; 0x70
    b83e:	0028      	movs	r0, r5
    b840:	4b93      	ldr	r3, [pc, #588]	; (ba90 <_http_client_request+0x2ec>)
    b842:	469a      	mov	sl, r3
    b844:	4798      	blx	r3
    b846:	0002      	movs	r2, r0
    b848:	0029      	movs	r1, r5
    b84a:	232c      	movs	r3, #44	; 0x2c
    b84c:	2008      	movs	r0, #8
    b84e:	1838      	adds	r0, r7, r0
    b850:	18c0      	adds	r0, r0, r3
    b852:	4d90      	ldr	r5, [pc, #576]	; (ba94 <_http_client_request+0x2f0>)
    b854:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    b856:	220b      	movs	r2, #11
    b858:	498f      	ldr	r1, [pc, #572]	; (ba98 <_http_client_request+0x2f4>)
    b85a:	232c      	movs	r3, #44	; 0x2c
    b85c:	2008      	movs	r0, #8
    b85e:	1838      	adds	r0, r7, r0
    b860:	18c0      	adds	r0, r0, r3
    b862:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
    b864:	220c      	movs	r2, #12
    b866:	498d      	ldr	r1, [pc, #564]	; (ba9c <_http_client_request+0x2f8>)
    b868:	232c      	movs	r3, #44	; 0x2c
    b86a:	2008      	movs	r0, #8
    b86c:	1838      	adds	r0, r7, r0
    b86e:	18c0      	adds	r0, r0, r3
    b870:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
    b872:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    b874:	607b      	str	r3, [r7, #4]
    b876:	0018      	movs	r0, r3
    b878:	47d0      	blx	sl
    b87a:	0002      	movs	r2, r0
    b87c:	6879      	ldr	r1, [r7, #4]
    b87e:	232c      	movs	r3, #44	; 0x2c
    b880:	2008      	movs	r0, #8
    b882:	1838      	adds	r0, r7, r0
    b884:	18c0      	adds	r0, r0, r3
    b886:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    b888:	2202      	movs	r2, #2
    b88a:	4985      	ldr	r1, [pc, #532]	; (baa0 <_http_client_request+0x2fc>)
    b88c:	232c      	movs	r3, #44	; 0x2c
    b88e:	2008      	movs	r0, #8
    b890:	1838      	adds	r0, r7, r0
    b892:	18c0      	adds	r0, r0, r3
    b894:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    b896:	2206      	movs	r2, #6
    b898:	4982      	ldr	r1, [pc, #520]	; (baa4 <_http_client_request+0x300>)
    b89a:	232c      	movs	r3, #44	; 0x2c
    b89c:	2008      	movs	r0, #8
    b89e:	1838      	adds	r0, r7, r0
    b8a0:	18c0      	adds	r0, r0, r3
    b8a2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    b8a4:	1c63      	adds	r3, r4, #1
    b8a6:	607b      	str	r3, [r7, #4]
    b8a8:	0018      	movs	r0, r3
    b8aa:	47d0      	blx	sl
    b8ac:	0002      	movs	r2, r0
    b8ae:	6879      	ldr	r1, [r7, #4]
    b8b0:	232c      	movs	r3, #44	; 0x2c
    b8b2:	2008      	movs	r0, #8
    b8b4:	1838      	adds	r0, r7, r0
    b8b6:	18c0      	adds	r0, r0, r3
    b8b8:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    b8ba:	2202      	movs	r2, #2
    b8bc:	4978      	ldr	r1, [pc, #480]	; (baa0 <_http_client_request+0x2fc>)
    b8be:	232c      	movs	r3, #44	; 0x2c
    b8c0:	2008      	movs	r0, #8
    b8c2:	1838      	adds	r0, r7, r0
    b8c4:	18c0      	adds	r0, r0, r3
    b8c6:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    b8c8:	2218      	movs	r2, #24
    b8ca:	4977      	ldr	r1, [pc, #476]	; (baa8 <_http_client_request+0x304>)
    b8cc:	232c      	movs	r3, #44	; 0x2c
    b8ce:	2008      	movs	r0, #8
    b8d0:	1838      	adds	r0, r7, r0
    b8d2:	18c0      	adds	r0, r0, r3
    b8d4:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
    b8d6:	2213      	movs	r2, #19
    b8d8:	4974      	ldr	r1, [pc, #464]	; (baac <_http_client_request+0x308>)
    b8da:	232c      	movs	r3, #44	; 0x2c
    b8dc:	2008      	movs	r0, #8
    b8de:	1838      	adds	r0, r7, r0
    b8e0:	18c0      	adds	r0, r0, r3
    b8e2:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
    b8e4:	2217      	movs	r2, #23
    b8e6:	4972      	ldr	r1, [pc, #456]	; (bab0 <_http_client_request+0x30c>)
    b8e8:	232c      	movs	r3, #44	; 0x2c
    b8ea:	2008      	movs	r0, #8
    b8ec:	1838      	adds	r0, r7, r0
    b8ee:	18c0      	adds	r0, r0, r3
    b8f0:	47a8      	blx	r5

		if (entity->read != NULL) {
    b8f2:	0023      	movs	r3, r4
    b8f4:	33b0      	adds	r3, #176	; 0xb0
    b8f6:	68db      	ldr	r3, [r3, #12]
    b8f8:	2b00      	cmp	r3, #0
    b8fa:	d07b      	beq.n	b9f4 <_http_client_request+0x250>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    b8fc:	23b0      	movs	r3, #176	; 0xb0
    b8fe:	5ce3      	ldrb	r3, [r4, r3]
    b900:	2b00      	cmp	r3, #0
    b902:	d16b      	bne.n	b9dc <_http_client_request+0x238>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
    b904:	0023      	movs	r3, r4
    b906:	33b0      	adds	r3, #176	; 0xb0
    b908:	689b      	ldr	r3, [r3, #8]
    b90a:	2b00      	cmp	r3, #0
    b90c:	d072      	beq.n	b9f4 <_http_client_request+0x250>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    b90e:	0022      	movs	r2, r4
    b910:	32b0      	adds	r2, #176	; 0xb0
    b912:	6950      	ldr	r0, [r2, #20]
    b914:	4798      	blx	r3
    b916:	23cc      	movs	r3, #204	; 0xcc
    b918:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    b91a:	2800      	cmp	r0, #0
    b91c:	da00      	bge.n	b920 <_http_client_request+0x17c>
    b91e:	e0ac      	b.n	ba7a <_http_client_request+0x2d6>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    b920:	0002      	movs	r2, r0
    b922:	4964      	ldr	r1, [pc, #400]	; (bab4 <_http_client_request+0x310>)
    b924:	2320      	movs	r3, #32
    b926:	2008      	movs	r0, #8
    b928:	1838      	adds	r0, r7, r0
    b92a:	18c0      	adds	r0, r0, r3
    b92c:	4b62      	ldr	r3, [pc, #392]	; (bab8 <_http_client_request+0x314>)
    b92e:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    b930:	2210      	movs	r2, #16
    b932:	4962      	ldr	r1, [pc, #392]	; (babc <_http_client_request+0x318>)
    b934:	232c      	movs	r3, #44	; 0x2c
    b936:	2008      	movs	r0, #8
    b938:	1838      	adds	r0, r7, r0
    b93a:	18c0      	adds	r0, r0, r3
    b93c:	4d55      	ldr	r5, [pc, #340]	; (ba94 <_http_client_request+0x2f0>)
    b93e:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
    b940:	2320      	movs	r3, #32
    b942:	2208      	movs	r2, #8
    b944:	18ba      	adds	r2, r7, r2
    b946:	18d0      	adds	r0, r2, r3
    b948:	4b51      	ldr	r3, [pc, #324]	; (ba90 <_http_client_request+0x2ec>)
    b94a:	4798      	blx	r3
    b94c:	0002      	movs	r2, r0
    b94e:	2320      	movs	r3, #32
    b950:	2108      	movs	r1, #8
    b952:	1879      	adds	r1, r7, r1
    b954:	18c9      	adds	r1, r1, r3
    b956:	330c      	adds	r3, #12
    b958:	2008      	movs	r0, #8
    b95a:	1838      	adds	r0, r7, r0
    b95c:	18c0      	adds	r0, r0, r3
    b95e:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    b960:	2202      	movs	r2, #2
    b962:	494f      	ldr	r1, [pc, #316]	; (baa0 <_http_client_request+0x2fc>)
    b964:	232c      	movs	r3, #44	; 0x2c
    b966:	2008      	movs	r0, #8
    b968:	1838      	adds	r0, r7, r0
    b96a:	18c0      	adds	r0, r0, r3
    b96c:	47a8      	blx	r5
    b96e:	e041      	b.n	b9f4 <_http_client_request+0x250>
			stream_writer_send_buffer(&writer, "GET ", 4);
    b970:	2204      	movs	r2, #4
    b972:	4953      	ldr	r1, [pc, #332]	; (bac0 <_http_client_request+0x31c>)
    b974:	332b      	adds	r3, #43	; 0x2b
    b976:	2008      	movs	r0, #8
    b978:	1838      	adds	r0, r7, r0
    b97a:	18c0      	adds	r0, r0, r3
    b97c:	4b45      	ldr	r3, [pc, #276]	; (ba94 <_http_client_request+0x2f0>)
    b97e:	4798      	blx	r3
    b980:	e75b      	b.n	b83a <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "POST ", 5);
    b982:	2205      	movs	r2, #5
    b984:	494f      	ldr	r1, [pc, #316]	; (bac4 <_http_client_request+0x320>)
    b986:	332a      	adds	r3, #42	; 0x2a
    b988:	2008      	movs	r0, #8
    b98a:	1838      	adds	r0, r7, r0
    b98c:	18c0      	adds	r0, r0, r3
    b98e:	4b41      	ldr	r3, [pc, #260]	; (ba94 <_http_client_request+0x2f0>)
    b990:	4798      	blx	r3
    b992:	e752      	b.n	b83a <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    b994:	2207      	movs	r2, #7
    b996:	494c      	ldr	r1, [pc, #304]	; (bac8 <_http_client_request+0x324>)
    b998:	3329      	adds	r3, #41	; 0x29
    b99a:	2008      	movs	r0, #8
    b99c:	1838      	adds	r0, r7, r0
    b99e:	18c0      	adds	r0, r0, r3
    b9a0:	4b3c      	ldr	r3, [pc, #240]	; (ba94 <_http_client_request+0x2f0>)
    b9a2:	4798      	blx	r3
    b9a4:	e749      	b.n	b83a <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    b9a6:	2204      	movs	r2, #4
    b9a8:	4948      	ldr	r1, [pc, #288]	; (bacc <_http_client_request+0x328>)
    b9aa:	3328      	adds	r3, #40	; 0x28
    b9ac:	2008      	movs	r0, #8
    b9ae:	1838      	adds	r0, r7, r0
    b9b0:	18c0      	adds	r0, r0, r3
    b9b2:	4b38      	ldr	r3, [pc, #224]	; (ba94 <_http_client_request+0x2f0>)
    b9b4:	4798      	blx	r3
    b9b6:	e740      	b.n	b83a <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    b9b8:	2208      	movs	r2, #8
    b9ba:	4945      	ldr	r1, [pc, #276]	; (bad0 <_http_client_request+0x32c>)
    b9bc:	3327      	adds	r3, #39	; 0x27
    b9be:	2008      	movs	r0, #8
    b9c0:	1838      	adds	r0, r7, r0
    b9c2:	18c0      	adds	r0, r0, r3
    b9c4:	4b33      	ldr	r3, [pc, #204]	; (ba94 <_http_client_request+0x2f0>)
    b9c6:	4798      	blx	r3
    b9c8:	e737      	b.n	b83a <_http_client_request+0x96>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    b9ca:	2205      	movs	r2, #5
    b9cc:	4941      	ldr	r1, [pc, #260]	; (bad4 <_http_client_request+0x330>)
    b9ce:	3326      	adds	r3, #38	; 0x26
    b9d0:	2008      	movs	r0, #8
    b9d2:	1838      	adds	r0, r7, r0
    b9d4:	18c0      	adds	r0, r0, r3
    b9d6:	4b2f      	ldr	r3, [pc, #188]	; (ba94 <_http_client_request+0x2f0>)
    b9d8:	4798      	blx	r3
    b9da:	e72e      	b.n	b83a <_http_client_request+0x96>
				module->req.content_length = -1;
    b9dc:	2201      	movs	r2, #1
    b9de:	4252      	negs	r2, r2
    b9e0:	23cc      	movs	r3, #204	; 0xcc
    b9e2:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    b9e4:	321d      	adds	r2, #29
    b9e6:	493c      	ldr	r1, [pc, #240]	; (bad8 <_http_client_request+0x334>)
    b9e8:	3ba0      	subs	r3, #160	; 0xa0
    b9ea:	2008      	movs	r0, #8
    b9ec:	1838      	adds	r0, r7, r0
    b9ee:	18c0      	adds	r0, r0, r3
    b9f0:	4b28      	ldr	r3, [pc, #160]	; (ba94 <_http_client_request+0x2f0>)
    b9f2:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
    b9f4:	23d4      	movs	r3, #212	; 0xd4
    b9f6:	58e5      	ldr	r5, [r4, r3]
    b9f8:	2d00      	cmp	r5, #0
    b9fa:	d00a      	beq.n	ba12 <_http_client_request+0x26e>
			stream_writer_send_buffer(&writer,
    b9fc:	0028      	movs	r0, r5
    b9fe:	4b24      	ldr	r3, [pc, #144]	; (ba90 <_http_client_request+0x2ec>)
    ba00:	4798      	blx	r3
    ba02:	0002      	movs	r2, r0
    ba04:	0029      	movs	r1, r5
    ba06:	232c      	movs	r3, #44	; 0x2c
    ba08:	2008      	movs	r0, #8
    ba0a:	1838      	adds	r0, r7, r0
    ba0c:	18c0      	adds	r0, r0, r3
    ba0e:	4b21      	ldr	r3, [pc, #132]	; (ba94 <_http_client_request+0x2f0>)
    ba10:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    ba12:	2202      	movs	r2, #2
    ba14:	4922      	ldr	r1, [pc, #136]	; (baa0 <_http_client_request+0x2fc>)
    ba16:	232c      	movs	r3, #44	; 0x2c
    ba18:	2008      	movs	r0, #8
    ba1a:	1838      	adds	r0, r7, r0
    ba1c:	18c0      	adds	r0, r0, r3
    ba1e:	4b1d      	ldr	r3, [pc, #116]	; (ba94 <_http_client_request+0x2f0>)
    ba20:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    ba22:	232c      	movs	r3, #44	; 0x2c
    ba24:	2208      	movs	r2, #8
    ba26:	18ba      	adds	r2, r7, r2
    ba28:	18d0      	adds	r0, r2, r3
    ba2a:	4b2c      	ldr	r3, [pc, #176]	; (badc <_http_client_request+0x338>)
    ba2c:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    ba2e:	2304      	movs	r3, #4
    ba30:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    ba32:	23cc      	movs	r3, #204	; 0xcc
    ba34:	58e2      	ldr	r2, [r4, r3]
    ba36:	2a00      	cmp	r2, #0
    ba38:	db52      	blt.n	bae0 <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    ba3a:	dc00      	bgt.n	ba3e <_http_client_request+0x29a>
    ba3c:	e0f1      	b.n	bc22 <_http_client_request+0x47e>
    ba3e:	0023      	movs	r3, r4
    ba40:	33b0      	adds	r3, #176	; 0xb0
    ba42:	68dd      	ldr	r5, [r3, #12]
    ba44:	2d00      	cmp	r5, #0
    ba46:	d100      	bne.n	ba4a <_http_client_request+0x2a6>
    ba48:	e0eb      	b.n	bc22 <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    ba4a:	23d0      	movs	r3, #208	; 0xd0
    ba4c:	58e3      	ldr	r3, [r4, r3]
    ba4e:	429a      	cmp	r2, r3
    ba50:	dd00      	ble.n	ba54 <_http_client_request+0x2b0>
    ba52:	e0bb      	b.n	bbcc <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    ba54:	23c0      	movs	r3, #192	; 0xc0
    ba56:	58e3      	ldr	r3, [r4, r3]
    ba58:	2b00      	cmp	r3, #0
    ba5a:	d002      	beq.n	ba62 <_http_client_request+0x2be>
					module->req.entity.close(module->req.entity.priv_data);
    ba5c:	22c4      	movs	r2, #196	; 0xc4
    ba5e:	58a0      	ldr	r0, [r4, r2]
    ba60:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    ba62:	2302      	movs	r3, #2
    ba64:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    ba66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    ba68:	2b00      	cmp	r3, #0
    ba6a:	d100      	bne.n	ba6e <_http_client_request+0x2ca>
    ba6c:	e6c0      	b.n	b7f0 <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    ba6e:	220c      	movs	r2, #12
    ba70:	18ba      	adds	r2, r7, r2
    ba72:	2101      	movs	r1, #1
    ba74:	0020      	movs	r0, r4
    ba76:	4798      	blx	r3
    ba78:	e6ba      	b.n	b7f0 <_http_client_request+0x4c>
					module->req.content_length = 0;
    ba7a:	2200      	movs	r2, #0
    ba7c:	50e2      	str	r2, [r4, r3]
    ba7e:	e7b9      	b.n	b9f4 <_http_client_request+0x250>
    ba80:	0000fcb8 	.word	0x0000fcb8
    ba84:	0000cc91 	.word	0x0000cc91
    ba88:	0000b535 	.word	0x0000b535
    ba8c:	0000c501 	.word	0x0000c501
    ba90:	0000d18b 	.word	0x0000d18b
    ba94:	0000c555 	.word	0x0000c555
    ba98:	0000fd2c 	.word	0x0000fd2c
    ba9c:	0000fd38 	.word	0x0000fd38
    baa0:	0000ea40 	.word	0x0000ea40
    baa4:	0000fd48 	.word	0x0000fd48
    baa8:	0000fd50 	.word	0x0000fd50
    baac:	0000fd6c 	.word	0x0000fd6c
    bab0:	0000fd80 	.word	0x0000fd80
    bab4:	0000fdb8 	.word	0x0000fdb8
    bab8:	0000d0e9 	.word	0x0000d0e9
    babc:	0000fdbc 	.word	0x0000fdbc
    bac0:	0000fcf8 	.word	0x0000fcf8
    bac4:	0000fd00 	.word	0x0000fd00
    bac8:	0000fd08 	.word	0x0000fd08
    bacc:	0000fd10 	.word	0x0000fd10
    bad0:	0000fd18 	.word	0x0000fd18
    bad4:	0000fd24 	.word	0x0000fd24
    bad8:	0000fd98 	.word	0x0000fd98
    badc:	0000c511 	.word	0x0000c511
		if (module->req.content_length < 0 && entity->read) {
    bae0:	0023      	movs	r3, r4
    bae2:	33b0      	adds	r3, #176	; 0xb0
    bae4:	68dd      	ldr	r5, [r3, #12]
    bae6:	2d00      	cmp	r5, #0
    bae8:	d100      	bne.n	baec <_http_client_request+0x348>
    baea:	e09a      	b.n	bc22 <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    baec:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    baee:	58e3      	ldr	r3, [r4, r3]
    baf0:	6e62      	ldr	r2, [r4, #100]	; 0x64
    baf2:	3a07      	subs	r2, #7
    baf4:	1d71      	adds	r1, r6, #5
    baf6:	0020      	movs	r0, r4
    baf8:	30b0      	adds	r0, #176	; 0xb0
    bafa:	6940      	ldr	r0, [r0, #20]
    bafc:	47a8      	blx	r5
    bafe:	0005      	movs	r5, r0
    bb00:	43c3      	mvns	r3, r0
    bb02:	17db      	asrs	r3, r3, #31
    bb04:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    bb06:	220a      	movs	r2, #10
    bb08:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    bb0a:	210d      	movs	r1, #13
    bb0c:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    bb0e:	1973      	adds	r3, r6, r5
    bb10:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    bb12:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
    bb14:	230f      	movs	r3, #15
    bb16:	402b      	ands	r3, r5
    bb18:	3206      	adds	r2, #6
    bb1a:	3905      	subs	r1, #5
    bb1c:	468c      	mov	ip, r1
    bb1e:	44bc      	add	ip, r7
    bb20:	4462      	add	r2, ip
    bb22:	5cd3      	ldrb	r3, [r2, r3]
    bb24:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
    bb26:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
    bb28:	2d0f      	cmp	r5, #15
    bb2a:	dd0d      	ble.n	bb48 <_http_client_request+0x3a4>
				ptr = buffer + 1;
    bb2c:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
    bb2e:	17eb      	asrs	r3, r5, #31
    bb30:	220f      	movs	r2, #15
    bb32:	4013      	ands	r3, r2
    bb34:	195b      	adds	r3, r3, r5
    bb36:	111b      	asrs	r3, r3, #4
    bb38:	4013      	ands	r3, r2
    bb3a:	3201      	adds	r2, #1
    bb3c:	2008      	movs	r0, #8
    bb3e:	4684      	mov	ip, r0
    bb40:	44bc      	add	ip, r7
    bb42:	4462      	add	r2, ip
    bb44:	5cd3      	ldrb	r3, [r2, r3]
    bb46:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
    bb48:	2dff      	cmp	r5, #255	; 0xff
    bb4a:	dd0d      	ble.n	bb68 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
    bb4c:	17ea      	asrs	r2, r5, #31
    bb4e:	23ff      	movs	r3, #255	; 0xff
    bb50:	4013      	ands	r3, r2
    bb52:	195b      	adds	r3, r3, r5
    bb54:	051b      	lsls	r3, r3, #20
    bb56:	0f1b      	lsrs	r3, r3, #28
    bb58:	2210      	movs	r2, #16
    bb5a:	2108      	movs	r1, #8
    bb5c:	468c      	mov	ip, r1
    bb5e:	44bc      	add	ip, r7
    bb60:	4462      	add	r2, ip
    bb62:	5cd3      	ldrb	r3, [r2, r3]
    bb64:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
    bb66:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    bb68:	1cca      	adds	r2, r1, #3
    bb6a:	1b92      	subs	r2, r2, r6
    bb6c:	1d2b      	adds	r3, r5, #4
    bb6e:	18d2      	adds	r2, r2, r3
    bb70:	b292      	uxth	r2, r2
    bb72:	2000      	movs	r0, #0
    bb74:	5620      	ldrsb	r0, [r4, r0]
    bb76:	2300      	movs	r3, #0
    bb78:	4e30      	ldr	r6, [pc, #192]	; (bc3c <_http_client_request+0x498>)
    bb7a:	47b0      	blx	r6
    bb7c:	2800      	cmp	r0, #0
    bb7e:	db19      	blt.n	bbb4 <_http_client_request+0x410>
			module->req.sent_length += size;
    bb80:	22d0      	movs	r2, #208	; 0xd0
    bb82:	58a3      	ldr	r3, [r4, r2]
    bb84:	195b      	adds	r3, r3, r5
    bb86:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
    bb88:	2d00      	cmp	r5, #0
    bb8a:	d000      	beq.n	bb8e <_http_client_request+0x3ea>
    bb8c:	e630      	b.n	b7f0 <_http_client_request+0x4c>
				if (module->req.entity.close) {
    bb8e:	23c0      	movs	r3, #192	; 0xc0
    bb90:	58e3      	ldr	r3, [r4, r3]
    bb92:	2b00      	cmp	r3, #0
    bb94:	d002      	beq.n	bb9c <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
    bb96:	3a0c      	subs	r2, #12
    bb98:	58a0      	ldr	r0, [r4, r2]
    bb9a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
    bb9c:	2302      	movs	r3, #2
    bb9e:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    bba0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    bba2:	2b00      	cmp	r3, #0
    bba4:	d100      	bne.n	bba8 <_http_client_request+0x404>
    bba6:	e623      	b.n	b7f0 <_http_client_request+0x4c>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    bba8:	220c      	movs	r2, #12
    bbaa:	18ba      	adds	r2, r7, r2
    bbac:	2101      	movs	r1, #1
    bbae:	0020      	movs	r0, r4
    bbb0:	4798      	blx	r3
    bbb2:	e61d      	b.n	b7f0 <_http_client_request+0x4c>
				_http_client_clear_conn(module, -EIO);
    bbb4:	2105      	movs	r1, #5
    bbb6:	4249      	negs	r1, r1
    bbb8:	0020      	movs	r0, r4
    bbba:	4b21      	ldr	r3, [pc, #132]	; (bc40 <_http_client_request+0x49c>)
    bbbc:	4798      	blx	r3
    bbbe:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    bbc0:	46bd      	mov	sp, r7
    bbc2:	b013      	add	sp, #76	; 0x4c
    bbc4:	bc0c      	pop	{r2, r3}
    bbc6:	4692      	mov	sl, r2
    bbc8:	469b      	mov	fp, r3
    bbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    bbcc:	0022      	movs	r2, r4
    bbce:	32b0      	adds	r2, #176	; 0xb0
    bbd0:	6950      	ldr	r0, [r2, #20]
    bbd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    bbd4:	0031      	movs	r1, r6
    bbd6:	47a8      	blx	r5
			if (size < 0) {
    bbd8:	2800      	cmp	r0, #0
    bbda:	db16      	blt.n	bc0a <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
    bbdc:	23cc      	movs	r3, #204	; 0xcc
    bbde:	58e5      	ldr	r5, [r4, r3]
    bbe0:	3304      	adds	r3, #4
    bbe2:	58e3      	ldr	r3, [r4, r3]
    bbe4:	1aed      	subs	r5, r5, r3
    bbe6:	4285      	cmp	r5, r0
    bbe8:	dd00      	ble.n	bbec <_http_client_request+0x448>
    bbea:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    bbec:	b2aa      	uxth	r2, r5
    bbee:	2000      	movs	r0, #0
    bbf0:	5620      	ldrsb	r0, [r4, r0]
    bbf2:	2300      	movs	r3, #0
    bbf4:	0031      	movs	r1, r6
    bbf6:	4e11      	ldr	r6, [pc, #68]	; (bc3c <_http_client_request+0x498>)
    bbf8:	47b0      	blx	r6
    bbfa:	2800      	cmp	r0, #0
    bbfc:	db0b      	blt.n	bc16 <_http_client_request+0x472>
				module->req.sent_length += size;
    bbfe:	23d0      	movs	r3, #208	; 0xd0
    bc00:	58e2      	ldr	r2, [r4, r3]
    bc02:	4694      	mov	ip, r2
    bc04:	4465      	add	r5, ip
    bc06:	50e5      	str	r5, [r4, r3]
    bc08:	e5f2      	b.n	b7f0 <_http_client_request+0x4c>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    bc0a:	2105      	movs	r1, #5
    bc0c:	4249      	negs	r1, r1
    bc0e:	0020      	movs	r0, r4
    bc10:	4b0b      	ldr	r3, [pc, #44]	; (bc40 <_http_client_request+0x49c>)
    bc12:	4798      	blx	r3
    bc14:	e5ec      	b.n	b7f0 <_http_client_request+0x4c>
					_http_client_clear_conn(module, -EIO);
    bc16:	2105      	movs	r1, #5
    bc18:	4249      	negs	r1, r1
    bc1a:	0020      	movs	r0, r4
    bc1c:	4b08      	ldr	r3, [pc, #32]	; (bc40 <_http_client_request+0x49c>)
    bc1e:	4798      	blx	r3
					return;
    bc20:	e7cd      	b.n	bbbe <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
    bc22:	2302      	movs	r3, #2
    bc24:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    bc26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    bc28:	2b00      	cmp	r3, #0
    bc2a:	d100      	bne.n	bc2e <_http_client_request+0x48a>
    bc2c:	e5e0      	b.n	b7f0 <_http_client_request+0x4c>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    bc2e:	220c      	movs	r2, #12
    bc30:	18ba      	adds	r2, r7, r2
    bc32:	2101      	movs	r1, #1
    bc34:	0020      	movs	r0, r4
    bc36:	4798      	blx	r3
    bc38:	e5da      	b.n	b7f0 <_http_client_request+0x4c>
    bc3a:	46c0      	nop			; (mov r8, r8)
    bc3c:	00008ced 	.word	0x00008ced
    bc40:	0000b68d 	.word	0x0000b68d

0000bc44 <http_client_send_request>:
{
    bc44:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc46:	46d6      	mov	lr, sl
    bc48:	b500      	push	{lr}
    bc4a:	b088      	sub	sp, #32
    bc4c:	0004      	movs	r4, r0
    bc4e:	000f      	movs	r7, r1
    bc50:	4692      	mov	sl, r2
    bc52:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
    bc54:	2800      	cmp	r0, #0
    bc56:	d100      	bne.n	bc5a <http_client_send_request+0x16>
    bc58:	e0d3      	b.n	be02 <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
    bc5a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    bc5c:	2b02      	cmp	r3, #2
    bc5e:	d900      	bls.n	bc62 <http_client_send_request+0x1e>
    bc60:	e0d3      	b.n	be0a <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
    bc62:	2207      	movs	r2, #7
    bc64:	4981      	ldr	r1, [pc, #516]	; (be6c <http_client_send_request+0x228>)
    bc66:	0038      	movs	r0, r7
    bc68:	4b81      	ldr	r3, [pc, #516]	; (be70 <http_client_send_request+0x22c>)
    bc6a:	4798      	blx	r3
		i = 7;
    bc6c:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
    bc6e:	2800      	cmp	r0, #0
    bc70:	d007      	beq.n	bc82 <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
    bc72:	2208      	movs	r2, #8
    bc74:	497f      	ldr	r1, [pc, #508]	; (be74 <http_client_send_request+0x230>)
    bc76:	0038      	movs	r0, r7
    bc78:	4b7d      	ldr	r3, [pc, #500]	; (be70 <http_client_send_request+0x22c>)
    bc7a:	4798      	blx	r3
		i = 8;
    bc7c:	4246      	negs	r6, r0
    bc7e:	4146      	adcs	r6, r0
    bc80:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    bc82:	1c63      	adds	r3, r4, #1
    bc84:	19bd      	adds	r5, r7, r6
    bc86:	9302      	str	r3, [sp, #8]
    bc88:	0018      	movs	r0, r3
    bc8a:	4b7b      	ldr	r3, [pc, #492]	; (be78 <http_client_send_request+0x234>)
    bc8c:	4798      	blx	r3
    bc8e:	0002      	movs	r2, r0
    bc90:	0029      	movs	r1, r5
    bc92:	9802      	ldr	r0, [sp, #8]
    bc94:	4b76      	ldr	r3, [pc, #472]	; (be70 <http_client_send_request+0x22c>)
    bc96:	4798      	blx	r3
    bc98:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    bc9a:	782b      	ldrb	r3, [r5, #0]
    bc9c:	2b00      	cmp	r3, #0
    bc9e:	d052      	beq.n	bd46 <http_client_send_request+0x102>
    bca0:	2b2f      	cmp	r3, #47	; 0x2f
    bca2:	d052      	beq.n	bd4a <http_client_send_request+0x106>
    bca4:	1c71      	adds	r1, r6, #1
    bca6:	1879      	adds	r1, r7, r1
    bca8:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    bcaa:	3201      	adds	r2, #1
    bcac:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
    bcae:	000d      	movs	r5, r1
    bcb0:	780b      	ldrb	r3, [r1, #0]
    bcb2:	2b00      	cmp	r3, #0
    bcb4:	d002      	beq.n	bcbc <http_client_send_request+0x78>
    bcb6:	3101      	adds	r1, #1
    bcb8:	2b2f      	cmp	r3, #47	; 0x2f
    bcba:	d1f6      	bne.n	bcaa <http_client_send_request+0x66>
	module->host[j] = '\0';
    bcbc:	18a2      	adds	r2, r4, r2
    bcbe:	2300      	movs	r3, #0
    bcc0:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
    bcc2:	7863      	ldrb	r3, [r4, #1]
    bcc4:	2b00      	cmp	r3, #0
    bcc6:	d100      	bne.n	bcca <http_client_send_request+0x86>
    bcc8:	e0a3      	b.n	be12 <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    bcca:	0028      	movs	r0, r5
    bccc:	4b6a      	ldr	r3, [pc, #424]	; (be78 <http_client_send_request+0x234>)
    bcce:	4798      	blx	r3
    bcd0:	283f      	cmp	r0, #63	; 0x3f
    bcd2:	d900      	bls.n	bcd6 <http_client_send_request+0x92>
    bcd4:	e0a1      	b.n	be1a <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
    bcd6:	23d4      	movs	r3, #212	; 0xd4
    bcd8:	58e0      	ldr	r0, [r4, r3]
    bcda:	2800      	cmp	r0, #0
    bcdc:	d001      	beq.n	bce2 <http_client_send_request+0x9e>
		free(module->req.ext_header);
    bcde:	4b67      	ldr	r3, [pc, #412]	; (be7c <http_client_send_request+0x238>)
    bce0:	4798      	blx	r3
	if (ext_header != NULL) {
    bce2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bce4:	2b00      	cmp	r3, #0
    bce6:	d032      	beq.n	bd4e <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
    bce8:	0018      	movs	r0, r3
    bcea:	4b65      	ldr	r3, [pc, #404]	; (be80 <http_client_send_request+0x23c>)
    bcec:	4798      	blx	r3
    bcee:	23d4      	movs	r3, #212	; 0xd4
    bcf0:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    bcf2:	2800      	cmp	r0, #0
    bcf4:	d100      	bne.n	bcf8 <http_client_send_request+0xb4>
    bcf6:	e094      	b.n	be22 <http_client_send_request+0x1de>
	module->sending = 0;
    bcf8:	2241      	movs	r2, #65	; 0x41
    bcfa:	5ca3      	ldrb	r3, [r4, r2]
    bcfc:	2101      	movs	r1, #1
    bcfe:	438b      	bics	r3, r1
    bd00:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    bd02:	2300      	movs	r3, #0
    bd04:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    bd06:	782b      	ldrb	r3, [r5, #0]
    bd08:	2b2f      	cmp	r3, #47	; 0x2f
    bd0a:	d024      	beq.n	bd56 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
    bd0c:	222f      	movs	r2, #47	; 0x2f
    bd0e:	2370      	movs	r3, #112	; 0x70
    bd10:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    bd12:	782b      	ldrb	r3, [r5, #0]
    bd14:	2b00      	cmp	r3, #0
    bd16:	d124      	bne.n	bd62 <http_client_send_request+0x11e>
	if (entity != NULL) {
    bd18:	9b03      	ldr	r3, [sp, #12]
    bd1a:	2b00      	cmp	r3, #0
    bd1c:	d027      	beq.n	bd6e <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    bd1e:	0020      	movs	r0, r4
    bd20:	30b0      	adds	r0, #176	; 0xb0
    bd22:	2218      	movs	r2, #24
    bd24:	0019      	movs	r1, r3
    bd26:	4b57      	ldr	r3, [pc, #348]	; (be84 <http_client_send_request+0x240>)
    bd28:	4798      	blx	r3
	module->req.method = method;
    bd2a:	23c8      	movs	r3, #200	; 0xc8
    bd2c:	4652      	mov	r2, sl
    bd2e:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
    bd30:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    bd32:	2b01      	cmp	r3, #1
    bd34:	d022      	beq.n	bd7c <http_client_send_request+0x138>
    bd36:	2b00      	cmp	r3, #0
    bd38:	d027      	beq.n	bd8a <http_client_send_request+0x146>
    bd3a:	2b02      	cmp	r3, #2
    bd3c:	d03a      	beq.n	bdb4 <http_client_send_request+0x170>
		return -EAGAIN;
    bd3e:	230b      	movs	r3, #11
    bd40:	425b      	negs	r3, r3
    bd42:	9301      	str	r3, [sp, #4]
    bd44:	e08d      	b.n	be62 <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
    bd46:	2200      	movs	r2, #0
    bd48:	e7b8      	b.n	bcbc <http_client_send_request+0x78>
    bd4a:	2200      	movs	r2, #0
    bd4c:	e7b6      	b.n	bcbc <http_client_send_request+0x78>
		module->req.ext_header = NULL;
    bd4e:	2200      	movs	r2, #0
    bd50:	23d4      	movs	r3, #212	; 0xd4
    bd52:	50e2      	str	r2, [r4, r3]
    bd54:	e7d0      	b.n	bcf8 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
    bd56:	0020      	movs	r0, r4
    bd58:	3070      	adds	r0, #112	; 0x70
    bd5a:	0029      	movs	r1, r5
    bd5c:	4b4a      	ldr	r3, [pc, #296]	; (be88 <http_client_send_request+0x244>)
    bd5e:	4798      	blx	r3
    bd60:	e7da      	b.n	bd18 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
    bd62:	0029      	movs	r1, r5
    bd64:	0020      	movs	r0, r4
    bd66:	3071      	adds	r0, #113	; 0x71
    bd68:	4b47      	ldr	r3, [pc, #284]	; (be88 <http_client_send_request+0x244>)
    bd6a:	4798      	blx	r3
    bd6c:	e7d4      	b.n	bd18 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    bd6e:	0020      	movs	r0, r4
    bd70:	30b0      	adds	r0, #176	; 0xb0
    bd72:	2218      	movs	r2, #24
    bd74:	2100      	movs	r1, #0
    bd76:	4b45      	ldr	r3, [pc, #276]	; (be8c <http_client_send_request+0x248>)
    bd78:	4798      	blx	r3
    bd7a:	e7d6      	b.n	bd2a <http_client_send_request+0xe6>
		if (!reconnect) {
    bd7c:	9b01      	ldr	r3, [sp, #4]
    bd7e:	2b00      	cmp	r3, #0
    bd80:	d06f      	beq.n	be62 <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
    bd82:	2100      	movs	r1, #0
    bd84:	0020      	movs	r0, r4
    bd86:	4b42      	ldr	r3, [pc, #264]	; (be90 <http_client_send_request+0x24c>)
    bd88:	4798      	blx	r3
		if (module->config.tls) {
    bd8a:	2352      	movs	r3, #82	; 0x52
    bd8c:	5ce2      	ldrb	r2, [r4, r3]
    bd8e:	1e53      	subs	r3, r2, #1
    bd90:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    bd92:	b2d2      	uxtb	r2, r2
    bd94:	2101      	movs	r1, #1
    bd96:	2002      	movs	r0, #2
    bd98:	4b3e      	ldr	r3, [pc, #248]	; (be94 <http_client_send_request+0x250>)
    bd9a:	4798      	blx	r3
    bd9c:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    bd9e:	2800      	cmp	r0, #0
    bda0:	db43      	blt.n	be2a <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
    bda2:	0080      	lsls	r0, r0, #2
    bda4:	4b3c      	ldr	r3, [pc, #240]	; (be98 <http_client_send_request+0x254>)
    bda6:	50c4      	str	r4, [r0, r3]
    bda8:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
    bdaa:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    bdac:	2620      	movs	r6, #32
			isv6 = 1;
    bdae:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
    bdb0:	2730      	movs	r7, #48	; 0x30
    bdb2:	e00c      	b.n	bdce <http_client_send_request+0x18a>
		if (!reconnect) {
    bdb4:	9b01      	ldr	r3, [sp, #4]
    bdb6:	2b00      	cmp	r3, #0
    bdb8:	d1e3      	bne.n	bd82 <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
    bdba:	3303      	adds	r3, #3
    bdbc:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
    bdbe:	0020      	movs	r0, r4
    bdc0:	4b36      	ldr	r3, [pc, #216]	; (be9c <http_client_send_request+0x258>)
    bdc2:	4798      	blx	r3
			break;
    bdc4:	e04d      	b.n	be62 <http_client_send_request+0x21e>
			if (isv6) {
    bdc6:	2900      	cmp	r1, #0
    bdc8:	d001      	beq.n	bdce <http_client_send_request+0x18a>
    bdca:	e012      	b.n	bdf2 <http_client_send_request+0x1ae>
			isv6 = 1;
    bdcc:	0001      	movs	r1, r0
	while (*host != '\0') {
    bdce:	782a      	ldrb	r2, [r5, #0]
    bdd0:	2a00      	cmp	r2, #0
    bdd2:	d02e      	beq.n	be32 <http_client_send_request+0x1ee>
		ch = *host++;
    bdd4:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    bdd6:	0013      	movs	r3, r2
    bdd8:	43b3      	bics	r3, r6
    bdda:	3b41      	subs	r3, #65	; 0x41
    bddc:	2b05      	cmp	r3, #5
    bdde:	d9f5      	bls.n	bdcc <http_client_send_request+0x188>
    bde0:	2a3a      	cmp	r2, #58	; 0x3a
    bde2:	d00a      	beq.n	bdfa <http_client_send_request+0x1b6>
    bde4:	2a2f      	cmp	r2, #47	; 0x2f
    bde6:	d00a      	beq.n	bdfe <http_client_send_request+0x1ba>
		} else if (ch == '.') {
    bde8:	2a2e      	cmp	r2, #46	; 0x2e
    bdea:	d0ec      	beq.n	bdc6 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
    bdec:	403a      	ands	r2, r7
    bdee:	2a30      	cmp	r2, #48	; 0x30
    bdf0:	d0ed      	beq.n	bdce <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
    bdf2:	9802      	ldr	r0, [sp, #8]
    bdf4:	4b2a      	ldr	r3, [pc, #168]	; (bea0 <http_client_send_request+0x25c>)
    bdf6:	4798      	blx	r3
    bdf8:	e02f      	b.n	be5a <http_client_send_request+0x216>
			isv6 = 1;
    bdfa:	0001      	movs	r1, r0
    bdfc:	e7e7      	b.n	bdce <http_client_send_request+0x18a>
    bdfe:	0001      	movs	r1, r0
    be00:	e7e5      	b.n	bdce <http_client_send_request+0x18a>
		return -EINVAL;
    be02:	2316      	movs	r3, #22
    be04:	425b      	negs	r3, r3
    be06:	9301      	str	r3, [sp, #4]
    be08:	e02b      	b.n	be62 <http_client_send_request+0x21e>
		return -EBUSY;
    be0a:	2310      	movs	r3, #16
    be0c:	425b      	negs	r3, r3
    be0e:	9301      	str	r3, [sp, #4]
    be10:	e027      	b.n	be62 <http_client_send_request+0x21e>
		return -EINVAL;
    be12:	2316      	movs	r3, #22
    be14:	425b      	negs	r3, r3
    be16:	9301      	str	r3, [sp, #4]
    be18:	e023      	b.n	be62 <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
    be1a:	235b      	movs	r3, #91	; 0x5b
    be1c:	425b      	negs	r3, r3
    be1e:	9301      	str	r3, [sp, #4]
    be20:	e01f      	b.n	be62 <http_client_send_request+0x21e>
			return -ENOMEM;
    be22:	230c      	movs	r3, #12
    be24:	425b      	negs	r3, r3
    be26:	9301      	str	r3, [sp, #4]
    be28:	e01b      	b.n	be62 <http_client_send_request+0x21e>
			return -ENOSPC;
    be2a:	231c      	movs	r3, #28
    be2c:	425b      	negs	r3, r3
    be2e:	9301      	str	r3, [sp, #4]
    be30:	e017      	b.n	be62 <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
    be32:	2302      	movs	r3, #2
    be34:	aa04      	add	r2, sp, #16
    be36:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    be38:	334e      	adds	r3, #78	; 0x4e
    be3a:	5ae3      	ldrh	r3, [r4, r3]
    be3c:	021a      	lsls	r2, r3, #8
    be3e:	0a1b      	lsrs	r3, r3, #8
    be40:	4313      	orrs	r3, r2
    be42:	aa04      	add	r2, sp, #16
    be44:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    be46:	9802      	ldr	r0, [sp, #8]
    be48:	4b16      	ldr	r3, [pc, #88]	; (bea4 <http_client_send_request+0x260>)
    be4a:	4798      	blx	r3
    be4c:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    be4e:	2000      	movs	r0, #0
    be50:	5620      	ldrsb	r0, [r4, r0]
    be52:	2210      	movs	r2, #16
    be54:	a904      	add	r1, sp, #16
    be56:	4b14      	ldr	r3, [pc, #80]	; (bea8 <http_client_send_request+0x264>)
    be58:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
    be5a:	2301      	movs	r3, #1
    be5c:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
    be5e:	2300      	movs	r3, #0
    be60:	9301      	str	r3, [sp, #4]
}
    be62:	9801      	ldr	r0, [sp, #4]
    be64:	b008      	add	sp, #32
    be66:	bc04      	pop	{r2}
    be68:	4692      	mov	sl, r2
    be6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be6c:	0000fddc 	.word	0x0000fddc
    be70:	0000d199 	.word	0x0000d199
    be74:	0000fde4 	.word	0x0000fde4
    be78:	0000d18b 	.word	0x0000d18b
    be7c:	0000cc7d 	.word	0x0000cc7d
    be80:	0000d151 	.word	0x0000d151
    be84:	0000cc91 	.word	0x0000cc91
    be88:	0000d141 	.word	0x0000d141
    be8c:	0000ccc7 	.word	0x0000ccc7
    be90:	0000b68d 	.word	0x0000b68d
    be94:	00008ad9 	.word	0x00008ad9
    be98:	20000470 	.word	0x20000470
    be9c:	0000b7a5 	.word	0x0000b7a5
    bea0:	00008f21 	.word	0x00008f21
    bea4:	00008eb5 	.word	0x00008eb5
    bea8:	00008c5d 	.word	0x00008c5d

0000beac <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
    beac:	b510      	push	{r4, lr}
	if (module == NULL) {
    beae:	2800      	cmp	r0, #0
    beb0:	d00d      	beq.n	bece <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
    beb2:	6c41      	ldr	r1, [r0, #68]	; 0x44
    beb4:	6e02      	ldr	r2, [r0, #96]	; 0x60
    beb6:	4291      	cmp	r1, r2
    beb8:	d20a      	bcs.n	bed0 <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
    beba:	1a52      	subs	r2, r2, r1
    bebc:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
    bebe:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    bec0:	469c      	mov	ip, r3
    bec2:	4461      	add	r1, ip
	recv(module->sock,
    bec4:	7800      	ldrb	r0, [r0, #0]
    bec6:	b240      	sxtb	r0, r0
    bec8:	2300      	movs	r3, #0
    beca:	4c04      	ldr	r4, [pc, #16]	; (bedc <_http_client_recv_packet+0x30>)
    becc:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
    bece:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
    bed0:	218b      	movs	r1, #139	; 0x8b
    bed2:	4249      	negs	r1, r1
    bed4:	4b02      	ldr	r3, [pc, #8]	; (bee0 <_http_client_recv_packet+0x34>)
    bed6:	4798      	blx	r3
		return;
    bed8:	e7f9      	b.n	bece <_http_client_recv_packet+0x22>
    beda:	46c0      	nop			; (mov r8, r8)
    bedc:	00008d85 	.word	0x00008d85
    bee0:	0000b68d 	.word	0x0000b68d

0000bee4 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
    bee4:	b570      	push	{r4, r5, r6, lr}
    bee6:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
    bee8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
    beea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    beec:	1a5c      	subs	r4, r3, r1
    beee:	1904      	adds	r4, r0, r4

	if (remain > 0) {
    bef0:	2c00      	cmp	r4, #0
    bef2:	dc02      	bgt.n	befa <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
    bef4:	2300      	movs	r3, #0
    bef6:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
    bef8:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
    befa:	0022      	movs	r2, r4
    befc:	4b01      	ldr	r3, [pc, #4]	; (bf04 <_http_client_move_buffer+0x20>)
    befe:	4798      	blx	r3
		module->recved_size = remain;
    bf00:	646c      	str	r4, [r5, #68]	; 0x44
    bf02:	e7f9      	b.n	bef8 <_http_client_move_buffer+0x14>
    bf04:	0000cca3 	.word	0x0000cca3

0000bf08 <_http_client_handle_header>:
{
    bf08:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf0a:	46ce      	mov	lr, r9
    bf0c:	b500      	push	{lr}
    bf0e:	b084      	sub	sp, #16
    bf10:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
    bf12:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
    bf14:	4b62      	ldr	r3, [pc, #392]	; (c0a0 <_http_client_handle_header+0x198>)
    bf16:	4699      	mov	r9, r3
    bf18:	e049      	b.n	bfae <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
    bf1a:	0021      	movs	r1, r4
    bf1c:	0038      	movs	r0, r7
    bf1e:	4b61      	ldr	r3, [pc, #388]	; (c0a4 <_http_client_handle_header+0x19c>)
    bf20:	4798      	blx	r3
			return 0;
    bf22:	2600      	movs	r6, #0
}
    bf24:	0030      	movs	r0, r6
    bf26:	b004      	add	sp, #16
    bf28:	bc04      	pop	{r2}
    bf2a:	4691      	mov	r9, r2
    bf2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
    bf2e:	1ca1      	adds	r1, r4, #2
    bf30:	0038      	movs	r0, r7
    bf32:	4b5c      	ldr	r3, [pc, #368]	; (c0a4 <_http_client_handle_header+0x19c>)
    bf34:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
    bf36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    bf38:	2b00      	cmp	r3, #0
    bf3a:	d00a      	beq.n	bf52 <_http_client_handle_header+0x4a>
    bf3c:	22e4      	movs	r2, #228	; 0xe4
    bf3e:	5ab9      	ldrh	r1, [r7, r2]
    bf40:	2900      	cmp	r1, #0
    bf42:	d006      	beq.n	bf52 <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
    bf44:	3a08      	subs	r2, #8
    bf46:	58b8      	ldr	r0, [r7, r2]
    bf48:	2800      	cmp	r0, #0
    bf4a:	db07      	blt.n	bf5c <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
    bf4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    bf4e:	4290      	cmp	r0, r2
    bf50:	dc10      	bgt.n	bf74 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
    bf52:	2201      	movs	r2, #1
    bf54:	23d8      	movs	r3, #216	; 0xd8
    bf56:	50fa      	str	r2, [r7, r3]
			return 1;
    bf58:	2601      	movs	r6, #1
    bf5a:	e7e3      	b.n	bf24 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
    bf5c:	aa01      	add	r2, sp, #4
    bf5e:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
    bf60:	2101      	movs	r1, #1
    bf62:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
    bf64:	2100      	movs	r1, #0
    bf66:	20e0      	movs	r0, #224	; 0xe0
    bf68:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
    bf6a:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    bf6c:	3102      	adds	r1, #2
    bf6e:	0038      	movs	r0, r7
    bf70:	4798      	blx	r3
    bf72:	e7ee      	b.n	bf52 <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
    bf74:	aa01      	add	r2, sp, #4
    bf76:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
    bf78:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
    bf7a:	2100      	movs	r1, #0
    bf7c:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
    bf7e:	20e0      	movs	r0, #224	; 0xe0
    bf80:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    bf82:	3102      	adds	r1, #2
    bf84:	0038      	movs	r0, r7
    bf86:	4798      	blx	r3
    bf88:	e7e3      	b.n	bf52 <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
    bf8a:	0020      	movs	r0, r4
    bf8c:	3010      	adds	r0, #16
    bf8e:	4b46      	ldr	r3, [pc, #280]	; (c0a8 <_http_client_handle_header+0x1a0>)
    bf90:	4798      	blx	r3
    bf92:	23dc      	movs	r3, #220	; 0xdc
    bf94:	50f8      	str	r0, [r7, r3]
    bf96:	e009      	b.n	bfac <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    bf98:	3201      	adds	r2, #1
    bf9a:	4295      	cmp	r5, r2
    bf9c:	d006      	beq.n	bfac <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    bf9e:	7813      	ldrb	r3, [r2, #0]
    bfa0:	2b20      	cmp	r3, #32
    bfa2:	d12b      	bne.n	bffc <_http_client_handle_header+0xf4>
    bfa4:	e7f8      	b.n	bf98 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
    bfa6:	3a21      	subs	r2, #33	; 0x21
    bfa8:	3389      	adds	r3, #137	; 0x89
    bfaa:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
    bfac:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
    bfae:	493f      	ldr	r1, [pc, #252]	; (c0ac <_http_client_handle_header+0x1a4>)
    bfb0:	0020      	movs	r0, r4
    bfb2:	47c8      	blx	r9
    bfb4:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
    bfb6:	d0b0      	beq.n	bf1a <_http_client_handle_header+0x12>
    bfb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    bfba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    bfbc:	4694      	mov	ip, r2
    bfbe:	4463      	add	r3, ip
    bfc0:	4298      	cmp	r0, r3
    bfc2:	d2aa      	bcs.n	bf1a <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
    bfc4:	2202      	movs	r2, #2
    bfc6:	4939      	ldr	r1, [pc, #228]	; (c0ac <_http_client_handle_header+0x1a4>)
    bfc8:	0020      	movs	r0, r4
    bfca:	4b39      	ldr	r3, [pc, #228]	; (c0b0 <_http_client_handle_header+0x1a8>)
    bfcc:	4798      	blx	r3
    bfce:	2800      	cmp	r0, #0
    bfd0:	d0ad      	beq.n	bf2e <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
    bfd2:	2210      	movs	r2, #16
    bfd4:	4937      	ldr	r1, [pc, #220]	; (c0b4 <_http_client_handle_header+0x1ac>)
    bfd6:	0020      	movs	r0, r4
    bfd8:	4b35      	ldr	r3, [pc, #212]	; (c0b0 <_http_client_handle_header+0x1a8>)
    bfda:	4798      	blx	r3
    bfdc:	2800      	cmp	r0, #0
    bfde:	d0d4      	beq.n	bf8a <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
    bfe0:	2213      	movs	r2, #19
    bfe2:	4935      	ldr	r1, [pc, #212]	; (c0b8 <_http_client_handle_header+0x1b0>)
    bfe4:	0020      	movs	r0, r4
    bfe6:	4b32      	ldr	r3, [pc, #200]	; (c0b0 <_http_client_handle_header+0x1a8>)
    bfe8:	4798      	blx	r3
    bfea:	1e06      	subs	r6, r0, #0
    bfec:	d110      	bne.n	c010 <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
    bfee:	0022      	movs	r2, r4
    bff0:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
    bff2:	4295      	cmp	r5, r2
    bff4:	d9da      	bls.n	bfac <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    bff6:	7ce3      	ldrb	r3, [r4, #19]
    bff8:	2b20      	cmp	r3, #32
    bffa:	d0cd      	beq.n	bf98 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
    bffc:	2220      	movs	r2, #32
    bffe:	4393      	bics	r3, r2
    c000:	2b43      	cmp	r3, #67	; 0x43
    c002:	d0d0      	beq.n	bfa6 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
    c004:	2186      	movs	r1, #134	; 0x86
    c006:	4249      	negs	r1, r1
    c008:	0038      	movs	r0, r7
    c00a:	4b2c      	ldr	r3, [pc, #176]	; (c0bc <_http_client_handle_header+0x1b4>)
    c00c:	4798      	blx	r3
					return 0;
    c00e:	e789      	b.n	bf24 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
    c010:	220c      	movs	r2, #12
    c012:	492b      	ldr	r1, [pc, #172]	; (c0c0 <_http_client_handle_header+0x1b8>)
    c014:	0020      	movs	r0, r4
    c016:	4b26      	ldr	r3, [pc, #152]	; (c0b0 <_http_client_handle_header+0x1a8>)
    c018:	4798      	blx	r3
    c01a:	2800      	cmp	r0, #0
    c01c:	d11d      	bne.n	c05a <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
    c01e:	0022      	movs	r2, r4
    c020:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c022:	4295      	cmp	r5, r2
    c024:	d9c2      	bls.n	bfac <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    c026:	7b23      	ldrb	r3, [r4, #12]
    c028:	2b20      	cmp	r3, #32
    c02a:	d009      	beq.n	c040 <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
    c02c:	2220      	movs	r2, #32
    c02e:	4393      	bics	r3, r2
    c030:	2b4b      	cmp	r3, #75	; 0x4b
    c032:	d00c      	beq.n	c04e <_http_client_handle_header+0x146>
					module->permanent = 0;
    c034:	2241      	movs	r2, #65	; 0x41
    c036:	5cbb      	ldrb	r3, [r7, r2]
    c038:	2102      	movs	r1, #2
    c03a:	438b      	bics	r3, r1
    c03c:	54bb      	strb	r3, [r7, r2]
    c03e:	e7b5      	b.n	bfac <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
    c040:	3201      	adds	r2, #1
    c042:	4295      	cmp	r5, r2
    c044:	d0b2      	beq.n	bfac <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
    c046:	7813      	ldrb	r3, [r2, #0]
    c048:	2b20      	cmp	r3, #32
    c04a:	d1ef      	bne.n	c02c <_http_client_handle_header+0x124>
    c04c:	e7f8      	b.n	c040 <_http_client_handle_header+0x138>
					module->permanent = 1;
    c04e:	3221      	adds	r2, #33	; 0x21
    c050:	5cbb      	ldrb	r3, [r7, r2]
    c052:	2102      	movs	r1, #2
    c054:	430b      	orrs	r3, r1
    c056:	54bb      	strb	r3, [r7, r2]
    c058:	e7a8      	b.n	bfac <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
    c05a:	2205      	movs	r2, #5
    c05c:	4919      	ldr	r1, [pc, #100]	; (c0c4 <_http_client_handle_header+0x1bc>)
    c05e:	0020      	movs	r0, r4
    c060:	4b13      	ldr	r3, [pc, #76]	; (c0b0 <_http_client_handle_header+0x1a8>)
    c062:	4798      	blx	r3
    c064:	2800      	cmp	r0, #0
    c066:	d1a1      	bne.n	bfac <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
    c068:	0020      	movs	r0, r4
    c06a:	3009      	adds	r0, #9
    c06c:	4b0e      	ldr	r3, [pc, #56]	; (c0a8 <_http_client_handle_header+0x1a0>)
    c06e:	4798      	blx	r3
    c070:	23e4      	movs	r3, #228	; 0xe4
    c072:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
    c074:	2200      	movs	r2, #0
    c076:	3b08      	subs	r3, #8
    c078:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
    c07a:	7963      	ldrb	r3, [r4, #5]
    c07c:	2b31      	cmp	r3, #49	; 0x31
    c07e:	d802      	bhi.n	c086 <_http_client_handle_header+0x17e>
    c080:	79e3      	ldrb	r3, [r4, #7]
    c082:	2b30      	cmp	r3, #48	; 0x30
    c084:	d905      	bls.n	c092 <_http_client_handle_header+0x18a>
				module->permanent = 1;
    c086:	2241      	movs	r2, #65	; 0x41
    c088:	5cbb      	ldrb	r3, [r7, r2]
    c08a:	2102      	movs	r1, #2
    c08c:	430b      	orrs	r3, r1
    c08e:	54bb      	strb	r3, [r7, r2]
    c090:	e78c      	b.n	bfac <_http_client_handle_header+0xa4>
				module->permanent = 0;
    c092:	2241      	movs	r2, #65	; 0x41
    c094:	5cbb      	ldrb	r3, [r7, r2]
    c096:	2102      	movs	r1, #2
    c098:	438b      	bics	r3, r1
    c09a:	54bb      	strb	r3, [r7, r2]
    c09c:	e786      	b.n	bfac <_http_client_handle_header+0xa4>
    c09e:	46c0      	nop			; (mov r8, r8)
    c0a0:	0000d1bb 	.word	0x0000d1bb
    c0a4:	0000bee5 	.word	0x0000bee5
    c0a8:	0000cc15 	.word	0x0000cc15
    c0ac:	0000ea40 	.word	0x0000ea40
    c0b0:	0000d199 	.word	0x0000d199
    c0b4:	0000fdbc 	.word	0x0000fdbc
    c0b8:	0000fccc 	.word	0x0000fccc
    c0bc:	0000b68d 	.word	0x0000b68d
    c0c0:	0000fce0 	.word	0x0000fce0
    c0c4:	0000fcf0 	.word	0x0000fcf0

0000c0c8 <_http_client_handle_entity>:
{
    c0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0ca:	46ce      	mov	lr, r9
    c0cc:	b500      	push	{lr}
    c0ce:	b086      	sub	sp, #24
    c0d0:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
    c0d2:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
    c0d4:	23dc      	movs	r3, #220	; 0xdc
    c0d6:	58c3      	ldr	r3, [r0, r3]
    c0d8:	2b00      	cmp	r3, #0
    c0da:	db69      	blt.n	c1b0 <_http_client_handle_entity+0xe8>
    c0dc:	6e02      	ldr	r2, [r0, #96]	; 0x60
    c0de:	4293      	cmp	r3, r2
    c0e0:	dc2b      	bgt.n	c13a <_http_client_handle_entity+0x72>
	return 0;
    c0e2:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
    c0e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    c0e6:	4293      	cmp	r3, r2
    c0e8:	dc4e      	bgt.n	c188 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
    c0ea:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
    c0ec:	2e00      	cmp	r6, #0
    c0ee:	d003      	beq.n	c0f8 <_http_client_handle_entity+0x30>
    c0f0:	22e4      	movs	r2, #228	; 0xe4
    c0f2:	5aa1      	ldrh	r1, [r4, r2]
    c0f4:	2900      	cmp	r1, #0
    c0f6:	d10e      	bne.n	c116 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
    c0f8:	2300      	movs	r3, #0
    c0fa:	22d8      	movs	r2, #216	; 0xd8
    c0fc:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
    c0fe:	320c      	adds	r2, #12
    c100:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
    c102:	3341      	adds	r3, #65	; 0x41
    c104:	5ce3      	ldrb	r3, [r4, r3]
    c106:	079b      	lsls	r3, r3, #30
    c108:	d40f      	bmi.n	c12a <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
    c10a:	2100      	movs	r1, #0
    c10c:	0020      	movs	r0, r4
    c10e:	4b71      	ldr	r3, [pc, #452]	; (c2d4 <_http_client_handle_entity+0x20c>)
    c110:	4798      	blx	r3
	return 0;
    c112:	2000      	movs	r0, #0
    c114:	e038      	b.n	c188 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
    c116:	aa03      	add	r2, sp, #12
    c118:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
    c11a:	2100      	movs	r1, #0
    c11c:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
    c11e:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
    c120:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
    c122:	3102      	adds	r1, #2
    c124:	0020      	movs	r0, r4
    c126:	47b0      	blx	r6
    c128:	e7e6      	b.n	c0f8 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
    c12a:	23dc      	movs	r3, #220	; 0xdc
    c12c:	58e1      	ldr	r1, [r4, r3]
    c12e:	1869      	adds	r1, r5, r1
    c130:	0020      	movs	r0, r4
    c132:	4b69      	ldr	r3, [pc, #420]	; (c2d8 <_http_client_handle_entity+0x210>)
    c134:	4798      	blx	r3
				return module->recved_size;
    c136:	6c60      	ldr	r0, [r4, #68]	; 0x44
    c138:	e026      	b.n	c188 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
    c13a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    c13c:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
    c13e:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
    c140:	21e0      	movs	r1, #224	; 0xe0
    c142:	5840      	ldr	r0, [r0, r1]
    c144:	4684      	mov	ip, r0
    c146:	4462      	add	r2, ip
    c148:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
    c14a:	4293      	cmp	r3, r2
    c14c:	dc20      	bgt.n	c190 <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
    c14e:	2300      	movs	r3, #0
    c150:	22d8      	movs	r2, #216	; 0xd8
    c152:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    c154:	320c      	adds	r2, #12
    c156:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    c158:	3ae3      	subs	r2, #227	; 0xe3
    c15a:	ab03      	add	r3, sp, #12
    c15c:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    c15e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c160:	2b00      	cmp	r3, #0
    c162:	d007      	beq.n	c174 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    c164:	ae03      	add	r6, sp, #12
    c166:	0032      	movs	r2, r6
    c168:	2103      	movs	r1, #3
    c16a:	0020      	movs	r0, r4
    c16c:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
    c16e:	7a33      	ldrb	r3, [r6, #8]
    c170:	2b01      	cmp	r3, #1
    c172:	d103      	bne.n	c17c <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
    c174:	2341      	movs	r3, #65	; 0x41
    c176:	5ce3      	ldrb	r3, [r4, r3]
    c178:	079b      	lsls	r3, r3, #30
    c17a:	d510      	bpl.n	c19e <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
    c17c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c17e:	18e9      	adds	r1, r5, r3
    c180:	0020      	movs	r0, r4
    c182:	4b55      	ldr	r3, [pc, #340]	; (c2d8 <_http_client_handle_entity+0x210>)
    c184:	4798      	blx	r3
	return 0;
    c186:	2000      	movs	r0, #0
}
    c188:	b006      	add	sp, #24
    c18a:	bc04      	pop	{r2}
    c18c:	4691      	mov	r9, r2
    c18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
    c190:	2200      	movs	r2, #0
    c192:	ab03      	add	r3, sp, #12
    c194:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
    c196:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c198:	2b00      	cmp	r3, #0
    c19a:	d0ef      	beq.n	c17c <_http_client_handle_entity+0xb4>
    c19c:	e7e2      	b.n	c164 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
    c19e:	484f      	ldr	r0, [pc, #316]	; (c2dc <_http_client_handle_entity+0x214>)
    c1a0:	4b4f      	ldr	r3, [pc, #316]	; (c2e0 <_http_client_handle_entity+0x218>)
    c1a2:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
    c1a4:	2100      	movs	r1, #0
    c1a6:	0020      	movs	r0, r4
    c1a8:	4b4a      	ldr	r3, [pc, #296]	; (c2d4 <_http_client_handle_entity+0x20c>)
    c1aa:	4798      	blx	r3
					return 0;
    c1ac:	2000      	movs	r0, #0
    c1ae:	e7eb      	b.n	c188 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
    c1b0:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
    c1b2:	2300      	movs	r3, #0
    c1b4:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
    c1b6:	26e0      	movs	r6, #224	; 0xe0
    c1b8:	e00a      	b.n	c1d0 <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
    c1ba:	2341      	movs	r3, #65	; 0x41
    c1bc:	5ce3      	ldrb	r3, [r4, r3]
    c1be:	079b      	lsls	r3, r3, #30
    c1c0:	d51b      	bpl.n	c1fa <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
    c1c2:	1ca9      	adds	r1, r5, #2
    c1c4:	0020      	movs	r0, r4
    c1c6:	4b44      	ldr	r3, [pc, #272]	; (c2d8 <_http_client_handle_entity+0x210>)
    c1c8:	4798      	blx	r3
	} while(module->recved_size > 0);
    c1ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
    c1cc:	2b00      	cmp	r3, #0
    c1ce:	d073      	beq.n	c2b8 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
    c1d0:	59a3      	ldr	r3, [r4, r6]
    c1d2:	2b00      	cmp	r3, #0
    c1d4:	db30      	blt.n	c238 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
    c1d6:	d116      	bne.n	c206 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
    c1d8:	22d8      	movs	r2, #216	; 0xd8
    c1da:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
    c1dc:	320c      	adds	r2, #12
    c1de:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
    c1e0:	3ae3      	subs	r2, #227	; 0xe3
    c1e2:	4669      	mov	r1, sp
    c1e4:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
    c1e6:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
    c1e8:	9301      	str	r3, [sp, #4]
				if (module->cb) {
    c1ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c1ec:	2b00      	cmp	r3, #0
    c1ee:	d0e4      	beq.n	c1ba <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    c1f0:	466a      	mov	r2, sp
    c1f2:	2103      	movs	r1, #3
    c1f4:	0020      	movs	r0, r4
    c1f6:	4798      	blx	r3
    c1f8:	e7df      	b.n	c1ba <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
    c1fa:	2100      	movs	r1, #0
    c1fc:	0020      	movs	r0, r4
    c1fe:	4b35      	ldr	r3, [pc, #212]	; (c2d4 <_http_client_handle_entity+0x20c>)
    c200:	4798      	blx	r3
	return 0;
    c202:	2000      	movs	r0, #0
    c204:	e7c0      	b.n	c188 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
    c206:	42bb      	cmp	r3, r7
    c208:	dcdf      	bgt.n	c1ca <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
    c20a:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
    c20c:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
    c20e:	2300      	movs	r3, #0
    c210:	466a      	mov	r2, sp
    c212:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
    c214:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c216:	2b00      	cmp	r3, #0
    c218:	d002      	beq.n	c220 <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
    c21a:	2103      	movs	r1, #3
    c21c:	0020      	movs	r0, r4
    c21e:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
    c220:	59a3      	ldr	r3, [r4, r6]
    c222:	1c99      	adds	r1, r3, #2
    c224:	1869      	adds	r1, r5, r1
    c226:	0020      	movs	r0, r4
    c228:	4b2b      	ldr	r3, [pc, #172]	; (c2d8 <_http_client_handle_entity+0x210>)
    c22a:	4798      	blx	r3
				length = (int)module->recved_size;
    c22c:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
    c22e:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
    c230:	2301      	movs	r3, #1
    c232:	425b      	negs	r3, r3
    c234:	51a3      	str	r3, [r4, r6]
    c236:	e7c8      	b.n	c1ca <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
    c238:	2300      	movs	r3, #0
    c23a:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    c23c:	2f00      	cmp	r7, #0
    c23e:	dd04      	ble.n	c24a <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
    c240:	782b      	ldrb	r3, [r5, #0]
    c242:	2b0a      	cmp	r3, #10
    c244:	d11c      	bne.n	c280 <_http_client_handle_entity+0x1b8>
					buffer++;
    c246:	3501      	adds	r5, #1
					length--;
    c248:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    c24a:	59a3      	ldr	r3, [r4, r6]
    c24c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    c24e:	4293      	cmp	r3, r2
    c250:	dc39      	bgt.n	c2c6 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
    c252:	2f00      	cmp	r7, #0
    c254:	d1b9      	bne.n	c1ca <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
    c256:	2201      	movs	r2, #1
    c258:	4252      	negs	r2, r2
    c25a:	23e0      	movs	r3, #224	; 0xe0
    c25c:	50e2      	str	r2, [r4, r3]
    c25e:	e7d0      	b.n	c202 <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
    c260:	001a      	movs	r2, r3
    c262:	3a61      	subs	r2, #97	; 0x61
    c264:	2a05      	cmp	r2, #5
    c266:	d818      	bhi.n	c29a <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
    c268:	59a2      	ldr	r2, [r4, r6]
    c26a:	0112      	lsls	r2, r2, #4
    c26c:	18d3      	adds	r3, r2, r3
    c26e:	3b61      	subs	r3, #97	; 0x61
    c270:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
    c272:	3501      	adds	r5, #1
    c274:	3f01      	subs	r7, #1
    c276:	2f00      	cmp	r7, #0
    c278:	d020      	beq.n	c2bc <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
    c27a:	782b      	ldrb	r3, [r5, #0]
    c27c:	2b0a      	cmp	r3, #10
    c27e:	d0e2      	beq.n	c246 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
    c280:	464a      	mov	r2, r9
    c282:	2a00      	cmp	r2, #0
    c284:	d1f5      	bne.n	c272 <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
    c286:	001a      	movs	r2, r3
    c288:	3a30      	subs	r2, #48	; 0x30
    c28a:	2a09      	cmp	r2, #9
    c28c:	d8e8      	bhi.n	c260 <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
    c28e:	59a2      	ldr	r2, [r4, r6]
    c290:	0112      	lsls	r2, r2, #4
    c292:	18d3      	adds	r3, r2, r3
    c294:	3b30      	subs	r3, #48	; 0x30
    c296:	51a3      	str	r3, [r4, r6]
    c298:	e7eb      	b.n	c272 <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
    c29a:	001a      	movs	r2, r3
    c29c:	3a41      	subs	r2, #65	; 0x41
    c29e:	2a05      	cmp	r2, #5
    c2a0:	d805      	bhi.n	c2ae <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
    c2a2:	59a2      	ldr	r2, [r4, r6]
    c2a4:	0112      	lsls	r2, r2, #4
    c2a6:	18d3      	adds	r3, r2, r3
    c2a8:	3b41      	subs	r3, #65	; 0x41
    c2aa:	51a3      	str	r3, [r4, r6]
    c2ac:	e7e1      	b.n	c272 <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
    c2ae:	3b3b      	subs	r3, #59	; 0x3b
    c2b0:	425a      	negs	r2, r3
    c2b2:	415a      	adcs	r2, r3
    c2b4:	4691      	mov	r9, r2
    c2b6:	e7dc      	b.n	c272 <_http_client_handle_entity+0x1aa>
	return 0;
    c2b8:	2000      	movs	r0, #0
    c2ba:	e765      	b.n	c188 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
    c2bc:	23e0      	movs	r3, #224	; 0xe0
    c2be:	58e3      	ldr	r3, [r4, r3]
    c2c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
    c2c2:	4293      	cmp	r3, r2
    c2c4:	ddc7      	ble.n	c256 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
    c2c6:	218b      	movs	r1, #139	; 0x8b
    c2c8:	4249      	negs	r1, r1
    c2ca:	0020      	movs	r0, r4
    c2cc:	4b01      	ldr	r3, [pc, #4]	; (c2d4 <_http_client_handle_entity+0x20c>)
    c2ce:	4798      	blx	r3
    c2d0:	e797      	b.n	c202 <_http_client_handle_entity+0x13a>
    c2d2:	46c0      	nop			; (mov r8, r8)
    c2d4:	0000b68d 	.word	0x0000b68d
    c2d8:	0000bee5 	.word	0x0000bee5
    c2dc:	0000fcc8 	.word	0x0000fcc8
    c2e0:	0000cf45 	.word	0x0000cf45

0000c2e4 <_http_client_handle_response>:
{
    c2e4:	b510      	push	{r4, lr}
	switch(module->resp.state) {
    c2e6:	23d8      	movs	r3, #216	; 0xd8
    c2e8:	58c3      	ldr	r3, [r0, r3]
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d003      	beq.n	c2f6 <_http_client_handle_response+0x12>
    c2ee:	2b01      	cmp	r3, #1
    c2f0:	d004      	beq.n	c2fc <_http_client_handle_response+0x18>
	return 0;
    c2f2:	2000      	movs	r0, #0
    c2f4:	e001      	b.n	c2fa <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
    c2f6:	4b03      	ldr	r3, [pc, #12]	; (c304 <_http_client_handle_response+0x20>)
    c2f8:	4798      	blx	r3
}
    c2fa:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
    c2fc:	4b02      	ldr	r3, [pc, #8]	; (c308 <_http_client_handle_response+0x24>)
    c2fe:	4798      	blx	r3
    c300:	e7fb      	b.n	c2fa <_http_client_handle_response+0x16>
    c302:	46c0      	nop			; (mov r8, r8)
    c304:	0000bf09 	.word	0x0000bf09
    c308:	0000c0c9 	.word	0x0000c0c9

0000c30c <_http_client_recved_packet>:
{
    c30c:	b570      	push	{r4, r5, r6, lr}
    c30e:	0004      	movs	r4, r0
	module->recved_size += read_len;
    c310:	6c43      	ldr	r3, [r0, #68]	; 0x44
    c312:	469c      	mov	ip, r3
    c314:	4461      	add	r1, ip
    c316:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
    c318:	2358      	movs	r3, #88	; 0x58
    c31a:	5ac3      	ldrh	r3, [r0, r3]
    c31c:	2b00      	cmp	r3, #0
    c31e:	d105      	bne.n	c32c <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
    c320:	4d05      	ldr	r5, [pc, #20]	; (c338 <_http_client_recved_packet+0x2c>)
    c322:	0020      	movs	r0, r4
    c324:	47a8      	blx	r5
    c326:	2800      	cmp	r0, #0
    c328:	d1fb      	bne.n	c322 <_http_client_recved_packet+0x16>
}
    c32a:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
    c32c:	6c81      	ldr	r1, [r0, #72]	; 0x48
    c32e:	6d40      	ldr	r0, [r0, #84]	; 0x54
    c330:	4b02      	ldr	r3, [pc, #8]	; (c33c <_http_client_recved_packet+0x30>)
    c332:	4798      	blx	r3
    c334:	e7f4      	b.n	c320 <_http_client_recved_packet+0x14>
    c336:	46c0      	nop			; (mov r8, r8)
    c338:	0000c2e5 	.word	0x0000c2e5
    c33c:	0000c6b9 	.word	0x0000c6b9

0000c340 <http_client_socket_event_handler>:
{
    c340:	b510      	push	{r4, lr}
    c342:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
    c344:	0080      	lsls	r0, r0, #2
    c346:	4b65      	ldr	r3, [pc, #404]	; (c4dc <http_client_socket_event_handler+0x19c>)
    c348:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
    c34a:	2c00      	cmp	r4, #0
    c34c:	d006      	beq.n	c35c <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
    c34e:	2906      	cmp	r1, #6
    c350:	d051      	beq.n	c3f6 <http_client_socket_event_handler+0xb6>
    c352:	2907      	cmp	r1, #7
    c354:	d100      	bne.n	c358 <http_client_socket_event_handler+0x18>
    c356:	e08a      	b.n	c46e <http_client_socket_event_handler+0x12e>
    c358:	2905      	cmp	r1, #5
    c35a:	d001      	beq.n	c360 <http_client_socket_event_handler+0x20>
}
    c35c:	b004      	add	sp, #16
    c35e:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
    c360:	2301      	movs	r3, #1
    c362:	56d3      	ldrsb	r3, [r2, r3]
    c364:	1e1a      	subs	r2, r3, #0
    c366:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
    c368:	db15      	blt.n	c396 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
    c36a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    c36c:	2b00      	cmp	r3, #0
    c36e:	d003      	beq.n	c378 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
    c370:	aa01      	add	r2, sp, #4
    c372:	2100      	movs	r1, #0
    c374:	0020      	movs	r0, r4
    c376:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
    c378:	2303      	movs	r3, #3
    c37a:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
    c37c:	3355      	adds	r3, #85	; 0x55
    c37e:	5ae2      	ldrh	r2, [r4, r3]
    c380:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    c382:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c384:	4b56      	ldr	r3, [pc, #344]	; (c4e0 <http_client_socket_event_handler+0x1a0>)
    c386:	4798      	blx	r3
    		_http_client_recv_packet(module);
    c388:	0020      	movs	r0, r4
    c38a:	4b56      	ldr	r3, [pc, #344]	; (c4e4 <http_client_socket_event_handler+0x1a4>)
    c38c:	4798      	blx	r3
			_http_client_request(module);
    c38e:	0020      	movs	r0, r4
    c390:	4b55      	ldr	r3, [pc, #340]	; (c4e8 <http_client_socket_event_handler+0x1a8>)
    c392:	4798      	blx	r3
    c394:	e7e2      	b.n	c35c <http_client_socket_event_handler+0x1c>
	switch (err) {
    c396:	330e      	adds	r3, #14
    c398:	b2d9      	uxtb	r1, r3
    c39a:	290e      	cmp	r1, #14
    c39c:	d81e      	bhi.n	c3dc <http_client_socket_event_handler+0x9c>
    c39e:	008b      	lsls	r3, r1, #2
    c3a0:	4952      	ldr	r1, [pc, #328]	; (c4ec <http_client_socket_event_handler+0x1ac>)
    c3a2:	58cb      	ldr	r3, [r1, r3]
    c3a4:	469f      	mov	pc, r3
			return -ENOENT;
    c3a6:	2102      	movs	r1, #2
    c3a8:	4249      	negs	r1, r1
    c3aa:	e01d      	b.n	c3e8 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
    c3ac:	2170      	movs	r1, #112	; 0x70
    c3ae:	4249      	negs	r1, r1
    c3b0:	e01a      	b.n	c3e8 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    c3b2:	210c      	movs	r1, #12
    c3b4:	4249      	negs	r1, r1
    c3b6:	e017      	b.n	c3e8 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
    c3b8:	2116      	movs	r1, #22
    c3ba:	4249      	negs	r1, r1
    c3bc:	e014      	b.n	c3e8 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
    c3be:	210c      	movs	r1, #12
    c3c0:	4249      	negs	r1, r1
    c3c2:	e011      	b.n	c3e8 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
    c3c4:	2179      	movs	r1, #121	; 0x79
    c3c6:	4249      	negs	r1, r1
    c3c8:	e00e      	b.n	c3e8 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
    c3ca:	2168      	movs	r1, #104	; 0x68
    c3cc:	4249      	negs	r1, r1
    c3ce:	e00b      	b.n	c3e8 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
    c3d0:	210b      	movs	r1, #11
    c3d2:	4249      	negs	r1, r1
    c3d4:	e008      	b.n	c3e8 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
    c3d6:	2110      	movs	r1, #16
    c3d8:	4249      	negs	r1, r1
    c3da:	e005      	b.n	c3e8 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
    c3dc:	2a00      	cmp	r2, #0
    c3de:	db07      	blt.n	c3f0 <http_client_socket_event_handler+0xb0>
			return 0;
    c3e0:	2100      	movs	r1, #0
    c3e2:	e001      	b.n	c3e8 <http_client_socket_event_handler+0xa8>
			return -EIO;
    c3e4:	2105      	movs	r1, #5
    c3e6:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
    c3e8:	0020      	movs	r0, r4
    c3ea:	4b41      	ldr	r3, [pc, #260]	; (c4f0 <http_client_socket_event_handler+0x1b0>)
    c3ec:	4798      	blx	r3
    c3ee:	e7b5      	b.n	c35c <http_client_socket_event_handler+0x1c>
				return -EIO;
    c3f0:	2105      	movs	r1, #5
    c3f2:	4249      	negs	r1, r1
    c3f4:	e7f8      	b.n	c3e8 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
    c3f6:	2304      	movs	r3, #4
    c3f8:	5ed1      	ldrsh	r1, [r2, r3]
    c3fa:	2900      	cmp	r1, #0
    c3fc:	dd06      	ble.n	c40c <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
    c3fe:	0020      	movs	r0, r4
    c400:	4b3c      	ldr	r3, [pc, #240]	; (c4f4 <http_client_socket_event_handler+0x1b4>)
    c402:	4798      	blx	r3
		_http_client_recv_packet(module);
    c404:	0020      	movs	r0, r4
    c406:	4b37      	ldr	r3, [pc, #220]	; (c4e4 <http_client_socket_event_handler+0x1a4>)
    c408:	4798      	blx	r3
		break;
    c40a:	e7a7      	b.n	c35c <http_client_socket_event_handler+0x1c>
	switch (err) {
    c40c:	000b      	movs	r3, r1
    c40e:	330e      	adds	r3, #14
    c410:	b29a      	uxth	r2, r3
    c412:	2a0e      	cmp	r2, #14
    c414:	d81e      	bhi.n	c454 <http_client_socket_event_handler+0x114>
    c416:	0093      	lsls	r3, r2, #2
    c418:	4a37      	ldr	r2, [pc, #220]	; (c4f8 <http_client_socket_event_handler+0x1b8>)
    c41a:	58d3      	ldr	r3, [r2, r3]
    c41c:	469f      	mov	pc, r3
			return -ENOENT;
    c41e:	2102      	movs	r1, #2
    c420:	4249      	negs	r1, r1
    c422:	e01d      	b.n	c460 <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    c424:	2170      	movs	r1, #112	; 0x70
    c426:	4249      	negs	r1, r1
    c428:	e01a      	b.n	c460 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    c42a:	210c      	movs	r1, #12
    c42c:	4249      	negs	r1, r1
    c42e:	e017      	b.n	c460 <http_client_socket_event_handler+0x120>
			return -EINVAL;
    c430:	2116      	movs	r1, #22
    c432:	4249      	negs	r1, r1
    c434:	e014      	b.n	c460 <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    c436:	210c      	movs	r1, #12
    c438:	4249      	negs	r1, r1
    c43a:	e011      	b.n	c460 <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    c43c:	2179      	movs	r1, #121	; 0x79
    c43e:	4249      	negs	r1, r1
    c440:	e00e      	b.n	c460 <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    c442:	2168      	movs	r1, #104	; 0x68
    c444:	4249      	negs	r1, r1
    c446:	e00b      	b.n	c460 <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    c448:	210b      	movs	r1, #11
    c44a:	4249      	negs	r1, r1
    c44c:	e008      	b.n	c460 <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    c44e:	2110      	movs	r1, #16
    c450:	4249      	negs	r1, r1
    c452:	e005      	b.n	c460 <http_client_socket_event_handler+0x120>
			if (err < 0) {
    c454:	2900      	cmp	r1, #0
    c456:	db07      	blt.n	c468 <http_client_socket_event_handler+0x128>
			return 0;
    c458:	2100      	movs	r1, #0
    c45a:	e001      	b.n	c460 <http_client_socket_event_handler+0x120>
			return -EIO;
    c45c:	2105      	movs	r1, #5
    c45e:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    c460:	0020      	movs	r0, r4
    c462:	4b23      	ldr	r3, [pc, #140]	; (c4f0 <http_client_socket_event_handler+0x1b0>)
    c464:	4798      	blx	r3
    c466:	e7cd      	b.n	c404 <http_client_socket_event_handler+0xc4>
				return -EIO;
    c468:	2105      	movs	r1, #5
    c46a:	4249      	negs	r1, r1
    c46c:	e7f8      	b.n	c460 <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    c46e:	2300      	movs	r3, #0
    c470:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    c472:	2b00      	cmp	r3, #0
    c474:	db08      	blt.n	c488 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    c476:	0020      	movs	r0, r4
    c478:	4b1b      	ldr	r3, [pc, #108]	; (c4e8 <http_client_socket_event_handler+0x1a8>)
    c47a:	4798      	blx	r3
		module->sending = 0;
    c47c:	2241      	movs	r2, #65	; 0x41
    c47e:	5ca3      	ldrb	r3, [r4, r2]
    c480:	2101      	movs	r1, #1
    c482:	438b      	bics	r3, r1
    c484:	54a3      	strb	r3, [r4, r2]
    	break;
    c486:	e769      	b.n	c35c <http_client_socket_event_handler+0x1c>
	switch (err) {
    c488:	330e      	adds	r3, #14
    c48a:	b29a      	uxth	r2, r3
    c48c:	2a0d      	cmp	r2, #13
    c48e:	d81e      	bhi.n	c4ce <http_client_socket_event_handler+0x18e>
    c490:	0093      	lsls	r3, r2, #2
    c492:	4a1a      	ldr	r2, [pc, #104]	; (c4fc <http_client_socket_event_handler+0x1bc>)
    c494:	58d3      	ldr	r3, [r2, r3]
    c496:	469f      	mov	pc, r3
			return -ENOENT;
    c498:	2102      	movs	r1, #2
    c49a:	4249      	negs	r1, r1
    c49c:	e019      	b.n	c4d2 <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    c49e:	2170      	movs	r1, #112	; 0x70
    c4a0:	4249      	negs	r1, r1
    c4a2:	e016      	b.n	c4d2 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    c4a4:	210c      	movs	r1, #12
    c4a6:	4249      	negs	r1, r1
    c4a8:	e013      	b.n	c4d2 <http_client_socket_event_handler+0x192>
			return -EINVAL;
    c4aa:	2116      	movs	r1, #22
    c4ac:	4249      	negs	r1, r1
    c4ae:	e010      	b.n	c4d2 <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    c4b0:	210c      	movs	r1, #12
    c4b2:	4249      	negs	r1, r1
    c4b4:	e00d      	b.n	c4d2 <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    c4b6:	2179      	movs	r1, #121	; 0x79
    c4b8:	4249      	negs	r1, r1
    c4ba:	e00a      	b.n	c4d2 <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    c4bc:	2168      	movs	r1, #104	; 0x68
    c4be:	4249      	negs	r1, r1
    c4c0:	e007      	b.n	c4d2 <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    c4c2:	210b      	movs	r1, #11
    c4c4:	4249      	negs	r1, r1
    c4c6:	e004      	b.n	c4d2 <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    c4c8:	2110      	movs	r1, #16
    c4ca:	4249      	negs	r1, r1
    c4cc:	e001      	b.n	c4d2 <http_client_socket_event_handler+0x192>
			return -EIO;
    c4ce:	2105      	movs	r1, #5
    c4d0:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    c4d2:	0020      	movs	r0, r4
    c4d4:	4b06      	ldr	r3, [pc, #24]	; (c4f0 <http_client_socket_event_handler+0x1b0>)
    c4d6:	4798      	blx	r3
    c4d8:	e7d0      	b.n	c47c <http_client_socket_event_handler+0x13c>
    c4da:	46c0      	nop			; (mov r8, r8)
    c4dc:	20000470 	.word	0x20000470
    c4e0:	0000c68d 	.word	0x0000c68d
    c4e4:	0000bead 	.word	0x0000bead
    c4e8:	0000b7a5 	.word	0x0000b7a5
    c4ec:	0000fc08 	.word	0x0000fc08
    c4f0:	0000b68d 	.word	0x0000b68d
    c4f4:	0000c30d 	.word	0x0000c30d
    c4f8:	0000fc44 	.word	0x0000fc44
    c4fc:	0000fc80 	.word	0x0000fc80

0000c500 <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    c500:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    c502:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    c504:	2200      	movs	r2, #0
    c506:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    c508:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    c50a:	9b00      	ldr	r3, [sp, #0]
    c50c:	60c3      	str	r3, [r0, #12]
}
    c50e:	4770      	bx	lr

0000c510 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    c510:	b510      	push	{r4, lr}
    c512:	0004      	movs	r4, r0
	if(writer->written > 0) {
    c514:	6842      	ldr	r2, [r0, #4]
    c516:	2a00      	cmp	r2, #0
    c518:	d100      	bne.n	c51c <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    c51a:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    c51c:	6901      	ldr	r1, [r0, #16]
    c51e:	68c0      	ldr	r0, [r0, #12]
    c520:	68a3      	ldr	r3, [r4, #8]
    c522:	4798      	blx	r3
		writer->written = 0;
    c524:	2300      	movs	r3, #0
    c526:	6063      	str	r3, [r4, #4]
}
    c528:	e7f7      	b.n	c51a <stream_writer_send_remain+0xa>
	...

0000c52c <stream_writer_send_8>:
{
    c52c:	b570      	push	{r4, r5, r6, lr}
    c52e:	0004      	movs	r4, r0
    c530:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    c532:	6803      	ldr	r3, [r0, #0]
    c534:	6842      	ldr	r2, [r0, #4]
    c536:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    c538:	2b00      	cmp	r3, #0
    c53a:	dd05      	ble.n	c548 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    c53c:	6922      	ldr	r2, [r4, #16]
    c53e:	6863      	ldr	r3, [r4, #4]
    c540:	1c59      	adds	r1, r3, #1
    c542:	6061      	str	r1, [r4, #4]
    c544:	54d5      	strb	r5, [r2, r3]
}
    c546:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    c548:	4b01      	ldr	r3, [pc, #4]	; (c550 <stream_writer_send_8+0x24>)
    c54a:	4798      	blx	r3
    c54c:	e7f6      	b.n	c53c <stream_writer_send_8+0x10>
    c54e:	46c0      	nop			; (mov r8, r8)
    c550:	0000c511 	.word	0x0000c511

0000c554 <stream_writer_send_buffer>:
{
    c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c556:	0006      	movs	r6, r0
    c558:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    c55a:	2a00      	cmp	r2, #0
    c55c:	d008      	beq.n	c570 <stream_writer_send_buffer+0x1c>
    c55e:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    c560:	4f04      	ldr	r7, [pc, #16]	; (c574 <stream_writer_send_buffer+0x20>)
    c562:	2100      	movs	r1, #0
    c564:	5661      	ldrsb	r1, [r4, r1]
    c566:	0030      	movs	r0, r6
    c568:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    c56a:	3401      	adds	r4, #1
    c56c:	42a5      	cmp	r5, r4
    c56e:	d1f8      	bne.n	c562 <stream_writer_send_buffer+0xe>
}
    c570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c572:	46c0      	nop			; (mov r8, r8)
    c574:	0000c52d 	.word	0x0000c52d

0000c578 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    c578:	4a02      	ldr	r2, [pc, #8]	; (c584 <sw_timer_tcc_callback+0xc>)
    c57a:	6813      	ldr	r3, [r2, #0]
    c57c:	3301      	adds	r3, #1
    c57e:	6013      	str	r3, [r2, #0]
}
    c580:	4770      	bx	lr
    c582:	46c0      	nop			; (mov r8, r8)
    c584:	2000048c 	.word	0x2000048c

0000c588 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    c588:	2364      	movs	r3, #100	; 0x64
    c58a:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    c58c:	2300      	movs	r3, #0
    c58e:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    c590:	7043      	strb	r3, [r0, #1]
}
    c592:	4770      	bx	lr

0000c594 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    c594:	b5f0      	push	{r4, r5, r6, r7, lr}
    c596:	46c6      	mov	lr, r8
    c598:	b500      	push	{lr}
    c59a:	b0ac      	sub	sp, #176	; 0xb0
    c59c:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    c59e:	466e      	mov	r6, sp
    c5a0:	4b1d      	ldr	r3, [pc, #116]	; (c618 <sw_timer_init+0x84>)
    c5a2:	466a      	mov	r2, sp
    c5a4:	cb92      	ldmia	r3!, {r1, r4, r7}
    c5a6:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    c5a8:	886b      	ldrh	r3, [r5, #2]
    c5aa:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    c5ac:	3014      	adds	r0, #20
    c5ae:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    c5b0:	782b      	ldrb	r3, [r5, #0]
    c5b2:	009b      	lsls	r3, r3, #2
    c5b4:	5999      	ldr	r1, [r3, r6]
    c5b6:	0017      	movs	r7, r2
    c5b8:	0010      	movs	r0, r2
    c5ba:	4b18      	ldr	r3, [pc, #96]	; (c61c <sw_timer_init+0x88>)
    c5bc:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    c5be:	2000      	movs	r0, #0
    c5c0:	4b17      	ldr	r3, [pc, #92]	; (c620 <sw_timer_init+0x8c>)
    c5c2:	4798      	blx	r3
    c5c4:	4b17      	ldr	r3, [pc, #92]	; (c624 <sw_timer_init+0x90>)
    c5c6:	7a1b      	ldrb	r3, [r3, #8]
    c5c8:	b2db      	uxtb	r3, r3
    c5ca:	40d8      	lsrs	r0, r3
    c5cc:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    c5ce:	8869      	ldrh	r1, [r5, #2]
    c5d0:	20fa      	movs	r0, #250	; 0xfa
    c5d2:	0200      	lsls	r0, r0, #8
    c5d4:	4b14      	ldr	r3, [pc, #80]	; (c628 <sw_timer_init+0x94>)
    c5d6:	4798      	blx	r3
    c5d8:	0001      	movs	r1, r0
    c5da:	4640      	mov	r0, r8
    c5dc:	4b13      	ldr	r3, [pc, #76]	; (c62c <sw_timer_init+0x98>)
    c5de:	4798      	blx	r3
    c5e0:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    c5e2:	2305      	movs	r3, #5
    c5e4:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    c5e6:	782b      	ldrb	r3, [r5, #0]
    c5e8:	009b      	lsls	r3, r3, #2
    c5ea:	5999      	ldr	r1, [r3, r6]
    c5ec:	003a      	movs	r2, r7
    c5ee:	0020      	movs	r0, r4
    c5f0:	4b0f      	ldr	r3, [pc, #60]	; (c630 <sw_timer_init+0x9c>)
    c5f2:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    c5f4:	786a      	ldrb	r2, [r5, #1]
    c5f6:	3208      	adds	r2, #8
    c5f8:	b2d2      	uxtb	r2, r2
    c5fa:	490e      	ldr	r1, [pc, #56]	; (c634 <sw_timer_init+0xa0>)
    c5fc:	0020      	movs	r0, r4
    c5fe:	4b0e      	ldr	r3, [pc, #56]	; (c638 <sw_timer_init+0xa4>)
    c600:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    c602:	7869      	ldrb	r1, [r5, #1]
    c604:	3108      	adds	r1, #8
    c606:	b2c9      	uxtb	r1, r1
    c608:	0020      	movs	r0, r4
    c60a:	4b0c      	ldr	r3, [pc, #48]	; (c63c <sw_timer_init+0xa8>)
    c60c:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    c60e:	b02c      	add	sp, #176	; 0xb0
    c610:	bc04      	pop	{r2}
    c612:	4690      	mov	r8, r2
    c614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c616:	46c0      	nop			; (mov r8, r8)
    c618:	0000fdf0 	.word	0x0000fdf0
    c61c:	0000ad51 	.word	0x0000ad51
    c620:	0000aaad 	.word	0x0000aaad
    c624:	40000400 	.word	0x40000400
    c628:	0000c9e9 	.word	0x0000c9e9
    c62c:	0000c8d5 	.word	0x0000c8d5
    c630:	0000ae9d 	.word	0x0000ae9d
    c634:	0000c579 	.word	0x0000c579
    c638:	0000b2a9 	.word	0x0000b2a9
    c63c:	0000b2c1 	.word	0x0000b2c1

0000c640 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    c640:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    c642:	2102      	movs	r1, #2
    c644:	6893      	ldr	r3, [r2, #8]
    c646:	4219      	tst	r1, r3
    c648:	d1fc      	bne.n	c644 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    c64a:	6813      	ldr	r3, [r2, #0]
    c64c:	2102      	movs	r1, #2
    c64e:	430b      	orrs	r3, r1
    c650:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    c652:	4770      	bx	lr

0000c654 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    c654:	b570      	push	{r4, r5, r6, lr}
    c656:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    c658:	7805      	ldrb	r5, [r0, #0]
    c65a:	07e8      	lsls	r0, r5, #31
    c65c:	d502      	bpl.n	c664 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    c65e:	2001      	movs	r0, #1
    c660:	4240      	negs	r0, r0
}
    c662:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    c664:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    c666:	0029      	movs	r1, r5
    c668:	2002      	movs	r0, #2
    c66a:	4381      	bics	r1, r0
    c66c:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    c66e:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    c670:	6d61      	ldr	r1, [r4, #84]	; 0x54
    c672:	0018      	movs	r0, r3
    c674:	4b04      	ldr	r3, [pc, #16]	; (c688 <sw_timer_register_callback+0x34>)
    c676:	4798      	blx	r3
    c678:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    c67a:	7823      	ldrb	r3, [r4, #0]
    c67c:	2201      	movs	r2, #1
    c67e:	4313      	orrs	r3, r2
    c680:	7023      	strb	r3, [r4, #0]
			return index;
    c682:	2000      	movs	r0, #0
    c684:	e7ed      	b.n	c662 <sw_timer_register_callback+0xe>
    c686:	46c0      	nop			; (mov r8, r8)
    c688:	0000c8d5 	.word	0x0000c8d5

0000c68c <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    c68c:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    c68e:	008b      	lsls	r3, r1, #2
    c690:	185d      	adds	r5, r3, r1
    c692:	00ad      	lsls	r5, r5, #2
    c694:	5c29      	ldrb	r1, [r5, r0]
    c696:	2602      	movs	r6, #2
    c698:	4331      	orrs	r1, r6
    c69a:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    c69c:	1944      	adds	r4, r0, r5
    c69e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    c6a0:	0010      	movs	r0, r2
    c6a2:	4b03      	ldr	r3, [pc, #12]	; (c6b0 <sw_timer_enable_callback+0x24>)
    c6a4:	4798      	blx	r3
    c6a6:	4b03      	ldr	r3, [pc, #12]	; (c6b4 <sw_timer_enable_callback+0x28>)
    c6a8:	681b      	ldr	r3, [r3, #0]
    c6aa:	18c0      	adds	r0, r0, r3
    c6ac:	6120      	str	r0, [r4, #16]
}
    c6ae:	bd70      	pop	{r4, r5, r6, pc}
    c6b0:	0000c8d5 	.word	0x0000c8d5
    c6b4:	2000048c 	.word	0x2000048c

0000c6b8 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    c6b8:	008b      	lsls	r3, r1, #2
    c6ba:	1859      	adds	r1, r3, r1
    c6bc:	0089      	lsls	r1, r1, #2
    c6be:	5c0b      	ldrb	r3, [r1, r0]
    c6c0:	2202      	movs	r2, #2
    c6c2:	4393      	bics	r3, r2
    c6c4:	540b      	strb	r3, [r1, r0]
}
    c6c6:	4770      	bx	lr

0000c6c8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    c6c8:	b570      	push	{r4, r5, r6, lr}
    c6ca:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    c6cc:	7803      	ldrb	r3, [r0, #0]
    c6ce:	07db      	lsls	r3, r3, #31
    c6d0:	d507      	bpl.n	c6e2 <sw_timer_task+0x1a>
    c6d2:	7803      	ldrb	r3, [r0, #0]
    c6d4:	079b      	lsls	r3, r3, #30
    c6d6:	d504      	bpl.n	c6e2 <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    c6d8:	4b10      	ldr	r3, [pc, #64]	; (c71c <sw_timer_task+0x54>)
    c6da:	681a      	ldr	r2, [r3, #0]
    c6dc:	6903      	ldr	r3, [r0, #16]
    c6de:	1a9b      	subs	r3, r3, r2
    c6e0:	d400      	bmi.n	c6e4 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    c6e2:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    c6e4:	7803      	ldrb	r3, [r0, #0]
    c6e6:	075b      	lsls	r3, r3, #29
    c6e8:	d4fb      	bmi.n	c6e2 <sw_timer_task+0x1a>
				handler->busy = 1;
    c6ea:	7803      	ldrb	r3, [r0, #0]
    c6ec:	2104      	movs	r1, #4
    c6ee:	430b      	orrs	r3, r1
    c6f0:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    c6f2:	68c3      	ldr	r3, [r0, #12]
    c6f4:	2b00      	cmp	r3, #0
    c6f6:	d00b      	beq.n	c710 <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    c6f8:	18d2      	adds	r2, r2, r3
    c6fa:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    c6fc:	68a2      	ldr	r2, [r4, #8]
    c6fe:	2100      	movs	r1, #0
    c700:	0020      	movs	r0, r4
    c702:	6865      	ldr	r5, [r4, #4]
    c704:	47a8      	blx	r5
				handler->busy = 0;
    c706:	7823      	ldrb	r3, [r4, #0]
    c708:	2204      	movs	r2, #4
    c70a:	4393      	bics	r3, r2
    c70c:	7023      	strb	r3, [r4, #0]
}
    c70e:	e7e8      	b.n	c6e2 <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    c710:	7802      	ldrb	r2, [r0, #0]
    c712:	2102      	movs	r1, #2
    c714:	438a      	bics	r2, r1
    c716:	7002      	strb	r2, [r0, #0]
    c718:	e7f0      	b.n	c6fc <sw_timer_task+0x34>
    c71a:	46c0      	nop			; (mov r8, r8)
    c71c:	2000048c 	.word	0x2000048c

0000c720 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    c720:	b570      	push	{r4, r5, r6, lr}
    c722:	b082      	sub	sp, #8
    c724:	0005      	movs	r5, r0
    c726:	000e      	movs	r6, r1
	uint16_t temp = 0;
    c728:	2200      	movs	r2, #0
    c72a:	466b      	mov	r3, sp
    c72c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    c72e:	4c06      	ldr	r4, [pc, #24]	; (c748 <usart_serial_getchar+0x28>)
    c730:	466b      	mov	r3, sp
    c732:	1d99      	adds	r1, r3, #6
    c734:	0028      	movs	r0, r5
    c736:	47a0      	blx	r4
    c738:	2800      	cmp	r0, #0
    c73a:	d1f9      	bne.n	c730 <usart_serial_getchar+0x10>

	*c = temp;
    c73c:	466b      	mov	r3, sp
    c73e:	3306      	adds	r3, #6
    c740:	881b      	ldrh	r3, [r3, #0]
    c742:	7033      	strb	r3, [r6, #0]
}
    c744:	b002      	add	sp, #8
    c746:	bd70      	pop	{r4, r5, r6, pc}
    c748:	0000a37d 	.word	0x0000a37d

0000c74c <usart_serial_putchar>:
{
    c74c:	b570      	push	{r4, r5, r6, lr}
    c74e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    c750:	b28c      	uxth	r4, r1
    c752:	4e03      	ldr	r6, [pc, #12]	; (c760 <usart_serial_putchar+0x14>)
    c754:	0021      	movs	r1, r4
    c756:	0028      	movs	r0, r5
    c758:	47b0      	blx	r6
    c75a:	2800      	cmp	r0, #0
    c75c:	d1fa      	bne.n	c754 <usart_serial_putchar+0x8>
}
    c75e:	bd70      	pop	{r4, r5, r6, pc}
    c760:	0000a351 	.word	0x0000a351

0000c764 <main>:
	config_nvm.manual_page_write = false;
	nvm_set_config(&config_nvm);
}

int main (void)
{
    c764:	b5f0      	push	{r4, r5, r6, r7, lr}
    c766:	b091      	sub	sp, #68	; 0x44

		/* Initialize the board. */
		system_init();
    c768:	4b40      	ldr	r3, [pc, #256]	; (c86c <main+0x108>)
    c76a:	4798      	blx	r3
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    c76c:	2400      	movs	r4, #0
    c76e:	2600      	movs	r6, #0
    c770:	466b      	mov	r3, sp
    c772:	701c      	strb	r4, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    c774:	4b3e      	ldr	r3, [pc, #248]	; (c870 <main+0x10c>)
    c776:	685b      	ldr	r3, [r3, #4]
    c778:	06db      	lsls	r3, r3, #27
    c77a:	0f1b      	lsrs	r3, r3, #28
    c77c:	466a      	mov	r2, sp
    c77e:	7093      	strb	r3, [r2, #2]
	config->disable_cache     = false;
    c780:	70d4      	strb	r4, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    c782:	7114      	strb	r4, [r2, #4]
	config_nvm.manual_page_write = false;
    c784:	7054      	strb	r4, [r2, #1]
	nvm_set_config(&config_nvm);
    c786:	4668      	mov	r0, sp
    c788:	4b3a      	ldr	r3, [pc, #232]	; (c874 <main+0x110>)
    c78a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    c78c:	2380      	movs	r3, #128	; 0x80
    c78e:	05db      	lsls	r3, r3, #23
    c790:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    c792:	9401      	str	r4, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    c794:	23ff      	movs	r3, #255	; 0xff
    c796:	466a      	mov	r2, sp
    c798:	8113      	strh	r3, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    c79a:	7294      	strb	r4, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    c79c:	72d4      	strb	r4, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    c79e:	2501      	movs	r5, #1
    c7a0:	2324      	movs	r3, #36	; 0x24
    c7a2:	54d5      	strb	r5, [r2, r3]
	config->transmitter_enable = true;
    c7a4:	3301      	adds	r3, #1
    c7a6:	54d5      	strb	r5, [r2, r3]
	config->clock_polarity_inverted = false;
    c7a8:	3301      	adds	r3, #1
    c7aa:	54d4      	strb	r4, [r2, r3]
	config->use_external_clock = false;
    c7ac:	3301      	adds	r3, #1
    c7ae:	54d4      	strb	r4, [r2, r3]
	config->ext_clock_freq   = 0;
    c7b0:	940a      	str	r4, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    c7b2:	3305      	adds	r3, #5
    c7b4:	54d4      	strb	r4, [r2, r3]
	config->generator_source = GCLK_GENERATOR_0;
    c7b6:	3301      	adds	r3, #1
    c7b8:	54d4      	strb	r4, [r2, r3]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    c7ba:	9405      	str	r4, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    c7bc:	8214      	strh	r4, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    c7be:	2300      	movs	r3, #0
    c7c0:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    c7c2:	7616      	strb	r6, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    c7c4:	7716      	strb	r6, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    c7c6:	7656      	strb	r6, [r2, #25]
	config->receive_pulse_length                    = 19;
    c7c8:	2313      	movs	r3, #19
    c7ca:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    c7cc:	7756      	strb	r6, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    c7ce:	23c4      	movs	r3, #196	; 0xc4
    c7d0:	039b      	lsls	r3, r3, #14
    c7d2:	9303      	str	r3, [sp, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    c7d4:	2301      	movs	r3, #1
    c7d6:	425b      	negs	r3, r3
    c7d8:	930c      	str	r3, [sp, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    c7da:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    c7dc:	4b26      	ldr	r3, [pc, #152]	; (c878 <main+0x114>)
    c7de:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    c7e0:	4b26      	ldr	r3, [pc, #152]	; (c87c <main+0x118>)
    c7e2:	930f      	str	r3, [sp, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    c7e4:	23e1      	movs	r3, #225	; 0xe1
    c7e6:	025b      	lsls	r3, r3, #9
    c7e8:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    c7ea:	4c25      	ldr	r4, [pc, #148]	; (c880 <main+0x11c>)
    c7ec:	4b25      	ldr	r3, [pc, #148]	; (c884 <main+0x120>)
    c7ee:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    c7f0:	4a25      	ldr	r2, [pc, #148]	; (c888 <main+0x124>)
    c7f2:	4b26      	ldr	r3, [pc, #152]	; (c88c <main+0x128>)
    c7f4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    c7f6:	4a26      	ldr	r2, [pc, #152]	; (c890 <main+0x12c>)
    c7f8:	4b26      	ldr	r3, [pc, #152]	; (c894 <main+0x130>)
    c7fa:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    c7fc:	466a      	mov	r2, sp
    c7fe:	4926      	ldr	r1, [pc, #152]	; (c898 <main+0x134>)
    c800:	0020      	movs	r0, r4
    c802:	4b26      	ldr	r3, [pc, #152]	; (c89c <main+0x138>)
    c804:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    c806:	4f26      	ldr	r7, [pc, #152]	; (c8a0 <main+0x13c>)
    c808:	683b      	ldr	r3, [r7, #0]
    c80a:	6898      	ldr	r0, [r3, #8]
    c80c:	2100      	movs	r1, #0
    c80e:	4e25      	ldr	r6, [pc, #148]	; (c8a4 <main+0x140>)
    c810:	47b0      	blx	r6
	setbuf(stdin, NULL);
    c812:	683b      	ldr	r3, [r7, #0]
    c814:	6858      	ldr	r0, [r3, #4]
    c816:	2100      	movs	r1, #0
    c818:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    c81a:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    c81c:	0030      	movs	r0, r6
    c81e:	4b22      	ldr	r3, [pc, #136]	; (c8a8 <main+0x144>)
    c820:	4798      	blx	r3
    c822:	231f      	movs	r3, #31
    c824:	4018      	ands	r0, r3
    c826:	4085      	lsls	r5, r0
    c828:	4b20      	ldr	r3, [pc, #128]	; (c8ac <main+0x148>)
    c82a:	601d      	str	r5, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    c82c:	6823      	ldr	r3, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    c82e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    c830:	2a00      	cmp	r2, #0
    c832:	d1fc      	bne.n	c82e <main+0xca>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    c834:	6833      	ldr	r3, [r6, #0]
    c836:	3202      	adds	r2, #2
    c838:	4313      	orrs	r3, r2
    c83a:	6033      	str	r3, [r6, #0]
		configure_nvm();

		/* Initialize the UART console. */
		configure_console();
		printf("\r\n\r\n##### Smart Retro-stat #####\r\n\r\n");
    c83c:	481c      	ldr	r0, [pc, #112]	; (c8b0 <main+0x14c>)
    c83e:	4c1d      	ldr	r4, [pc, #116]	; (c8b4 <main+0x150>)
    c840:	47a0      	blx	r4
		printf("This example requires the AP to have internet access.\r\n");
    c842:	481d      	ldr	r0, [pc, #116]	; (c8b8 <main+0x154>)
    c844:	47a0      	blx	r4

		init_wifi();
    c846:	4b1d      	ldr	r3, [pc, #116]	; (c8bc <main+0x158>)
    c848:	4798      	blx	r3
		/* Initialize Flash storage. */
		init_storage();
    c84a:	4b1d      	ldr	r3, [pc, #116]	; (c8c0 <main+0x15c>)
    c84c:	4798      	blx	r3

		connect_wifi();
    c84e:	4b1d      	ldr	r3, [pc, #116]	; (c8c4 <main+0x160>)
    c850:	4798      	blx	r3
		//download(METADATA);
		//download(IMAGE);
		check_and_update_firmware();
    c852:	4b1d      	ldr	r3, [pc, #116]	; (c8c8 <main+0x164>)
    c854:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    c856:	481d      	ldr	r0, [pc, #116]	; (c8cc <main+0x168>)
    c858:	2380      	movs	r3, #128	; 0x80
    c85a:	041b      	lsls	r3, r3, #16
		port_base->OUTSET.reg = pin_mask;
    c85c:	491c      	ldr	r1, [pc, #112]	; (c8d0 <main+0x16c>)
    c85e:	e000      	b.n	c862 <main+0xfe>
    c860:	618b      	str	r3, [r1, #24]
	return (port_base->IN.reg & pin_mask);
    c862:	6a02      	ldr	r2, [r0, #32]
	/* Insert application code here, after the board has been initialized. */

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    c864:	421a      	tst	r2, r3
    c866:	d1fb      	bne.n	c860 <main+0xfc>
		port_base->OUTCLR.reg = pin_mask;
    c868:	614b      	str	r3, [r1, #20]
    c86a:	e7fa      	b.n	c862 <main+0xfe>
    c86c:	0000acf1 	.word	0x0000acf1
    c870:	41004000 	.word	0x41004000
    c874:	000041ed 	.word	0x000041ed
    c878:	002a0003 	.word	0x002a0003
    c87c:	002b0003 	.word	0x002b0003
    c880:	20000490 	.word	0x20000490
    c884:	200007f4 	.word	0x200007f4
    c888:	0000c74d 	.word	0x0000c74d
    c88c:	200007f0 	.word	0x200007f0
    c890:	0000c721 	.word	0x0000c721
    c894:	200007ec 	.word	0x200007ec
    c898:	42001800 	.word	0x42001800
    c89c:	0000a00d 	.word	0x0000a00d
    c8a0:	2000000c 	.word	0x2000000c
    c8a4:	0000cf7d 	.word	0x0000cf7d
    c8a8:	000096d9 	.word	0x000096d9
    c8ac:	e000e100 	.word	0xe000e100
    c8b0:	0000fdfc 	.word	0x0000fdfc
    c8b4:	0000cf45 	.word	0x0000cf45
    c8b8:	0000fe20 	.word	0x0000fe20
    c8bc:	0000508d 	.word	0x0000508d
    c8c0:	00004c1d 	.word	0x00004c1d
    c8c4:	00005161 	.word	0x00005161
    c8c8:	00005271 	.word	0x00005271
    c8cc:	41004480 	.word	0x41004480
    c8d0:	41004400 	.word	0x41004400

0000c8d4 <__udivsi3>:
    c8d4:	2200      	movs	r2, #0
    c8d6:	0843      	lsrs	r3, r0, #1
    c8d8:	428b      	cmp	r3, r1
    c8da:	d374      	bcc.n	c9c6 <__udivsi3+0xf2>
    c8dc:	0903      	lsrs	r3, r0, #4
    c8de:	428b      	cmp	r3, r1
    c8e0:	d35f      	bcc.n	c9a2 <__udivsi3+0xce>
    c8e2:	0a03      	lsrs	r3, r0, #8
    c8e4:	428b      	cmp	r3, r1
    c8e6:	d344      	bcc.n	c972 <__udivsi3+0x9e>
    c8e8:	0b03      	lsrs	r3, r0, #12
    c8ea:	428b      	cmp	r3, r1
    c8ec:	d328      	bcc.n	c940 <__udivsi3+0x6c>
    c8ee:	0c03      	lsrs	r3, r0, #16
    c8f0:	428b      	cmp	r3, r1
    c8f2:	d30d      	bcc.n	c910 <__udivsi3+0x3c>
    c8f4:	22ff      	movs	r2, #255	; 0xff
    c8f6:	0209      	lsls	r1, r1, #8
    c8f8:	ba12      	rev	r2, r2
    c8fa:	0c03      	lsrs	r3, r0, #16
    c8fc:	428b      	cmp	r3, r1
    c8fe:	d302      	bcc.n	c906 <__udivsi3+0x32>
    c900:	1212      	asrs	r2, r2, #8
    c902:	0209      	lsls	r1, r1, #8
    c904:	d065      	beq.n	c9d2 <__udivsi3+0xfe>
    c906:	0b03      	lsrs	r3, r0, #12
    c908:	428b      	cmp	r3, r1
    c90a:	d319      	bcc.n	c940 <__udivsi3+0x6c>
    c90c:	e000      	b.n	c910 <__udivsi3+0x3c>
    c90e:	0a09      	lsrs	r1, r1, #8
    c910:	0bc3      	lsrs	r3, r0, #15
    c912:	428b      	cmp	r3, r1
    c914:	d301      	bcc.n	c91a <__udivsi3+0x46>
    c916:	03cb      	lsls	r3, r1, #15
    c918:	1ac0      	subs	r0, r0, r3
    c91a:	4152      	adcs	r2, r2
    c91c:	0b83      	lsrs	r3, r0, #14
    c91e:	428b      	cmp	r3, r1
    c920:	d301      	bcc.n	c926 <__udivsi3+0x52>
    c922:	038b      	lsls	r3, r1, #14
    c924:	1ac0      	subs	r0, r0, r3
    c926:	4152      	adcs	r2, r2
    c928:	0b43      	lsrs	r3, r0, #13
    c92a:	428b      	cmp	r3, r1
    c92c:	d301      	bcc.n	c932 <__udivsi3+0x5e>
    c92e:	034b      	lsls	r3, r1, #13
    c930:	1ac0      	subs	r0, r0, r3
    c932:	4152      	adcs	r2, r2
    c934:	0b03      	lsrs	r3, r0, #12
    c936:	428b      	cmp	r3, r1
    c938:	d301      	bcc.n	c93e <__udivsi3+0x6a>
    c93a:	030b      	lsls	r3, r1, #12
    c93c:	1ac0      	subs	r0, r0, r3
    c93e:	4152      	adcs	r2, r2
    c940:	0ac3      	lsrs	r3, r0, #11
    c942:	428b      	cmp	r3, r1
    c944:	d301      	bcc.n	c94a <__udivsi3+0x76>
    c946:	02cb      	lsls	r3, r1, #11
    c948:	1ac0      	subs	r0, r0, r3
    c94a:	4152      	adcs	r2, r2
    c94c:	0a83      	lsrs	r3, r0, #10
    c94e:	428b      	cmp	r3, r1
    c950:	d301      	bcc.n	c956 <__udivsi3+0x82>
    c952:	028b      	lsls	r3, r1, #10
    c954:	1ac0      	subs	r0, r0, r3
    c956:	4152      	adcs	r2, r2
    c958:	0a43      	lsrs	r3, r0, #9
    c95a:	428b      	cmp	r3, r1
    c95c:	d301      	bcc.n	c962 <__udivsi3+0x8e>
    c95e:	024b      	lsls	r3, r1, #9
    c960:	1ac0      	subs	r0, r0, r3
    c962:	4152      	adcs	r2, r2
    c964:	0a03      	lsrs	r3, r0, #8
    c966:	428b      	cmp	r3, r1
    c968:	d301      	bcc.n	c96e <__udivsi3+0x9a>
    c96a:	020b      	lsls	r3, r1, #8
    c96c:	1ac0      	subs	r0, r0, r3
    c96e:	4152      	adcs	r2, r2
    c970:	d2cd      	bcs.n	c90e <__udivsi3+0x3a>
    c972:	09c3      	lsrs	r3, r0, #7
    c974:	428b      	cmp	r3, r1
    c976:	d301      	bcc.n	c97c <__udivsi3+0xa8>
    c978:	01cb      	lsls	r3, r1, #7
    c97a:	1ac0      	subs	r0, r0, r3
    c97c:	4152      	adcs	r2, r2
    c97e:	0983      	lsrs	r3, r0, #6
    c980:	428b      	cmp	r3, r1
    c982:	d301      	bcc.n	c988 <__udivsi3+0xb4>
    c984:	018b      	lsls	r3, r1, #6
    c986:	1ac0      	subs	r0, r0, r3
    c988:	4152      	adcs	r2, r2
    c98a:	0943      	lsrs	r3, r0, #5
    c98c:	428b      	cmp	r3, r1
    c98e:	d301      	bcc.n	c994 <__udivsi3+0xc0>
    c990:	014b      	lsls	r3, r1, #5
    c992:	1ac0      	subs	r0, r0, r3
    c994:	4152      	adcs	r2, r2
    c996:	0903      	lsrs	r3, r0, #4
    c998:	428b      	cmp	r3, r1
    c99a:	d301      	bcc.n	c9a0 <__udivsi3+0xcc>
    c99c:	010b      	lsls	r3, r1, #4
    c99e:	1ac0      	subs	r0, r0, r3
    c9a0:	4152      	adcs	r2, r2
    c9a2:	08c3      	lsrs	r3, r0, #3
    c9a4:	428b      	cmp	r3, r1
    c9a6:	d301      	bcc.n	c9ac <__udivsi3+0xd8>
    c9a8:	00cb      	lsls	r3, r1, #3
    c9aa:	1ac0      	subs	r0, r0, r3
    c9ac:	4152      	adcs	r2, r2
    c9ae:	0883      	lsrs	r3, r0, #2
    c9b0:	428b      	cmp	r3, r1
    c9b2:	d301      	bcc.n	c9b8 <__udivsi3+0xe4>
    c9b4:	008b      	lsls	r3, r1, #2
    c9b6:	1ac0      	subs	r0, r0, r3
    c9b8:	4152      	adcs	r2, r2
    c9ba:	0843      	lsrs	r3, r0, #1
    c9bc:	428b      	cmp	r3, r1
    c9be:	d301      	bcc.n	c9c4 <__udivsi3+0xf0>
    c9c0:	004b      	lsls	r3, r1, #1
    c9c2:	1ac0      	subs	r0, r0, r3
    c9c4:	4152      	adcs	r2, r2
    c9c6:	1a41      	subs	r1, r0, r1
    c9c8:	d200      	bcs.n	c9cc <__udivsi3+0xf8>
    c9ca:	4601      	mov	r1, r0
    c9cc:	4152      	adcs	r2, r2
    c9ce:	4610      	mov	r0, r2
    c9d0:	4770      	bx	lr
    c9d2:	e7ff      	b.n	c9d4 <__udivsi3+0x100>
    c9d4:	b501      	push	{r0, lr}
    c9d6:	2000      	movs	r0, #0
    c9d8:	f000 f8f0 	bl	cbbc <__aeabi_idiv0>
    c9dc:	bd02      	pop	{r1, pc}
    c9de:	46c0      	nop			; (mov r8, r8)

0000c9e0 <__aeabi_uidivmod>:
    c9e0:	2900      	cmp	r1, #0
    c9e2:	d0f7      	beq.n	c9d4 <__udivsi3+0x100>
    c9e4:	e776      	b.n	c8d4 <__udivsi3>
    c9e6:	4770      	bx	lr

0000c9e8 <__divsi3>:
    c9e8:	4603      	mov	r3, r0
    c9ea:	430b      	orrs	r3, r1
    c9ec:	d47f      	bmi.n	caee <__divsi3+0x106>
    c9ee:	2200      	movs	r2, #0
    c9f0:	0843      	lsrs	r3, r0, #1
    c9f2:	428b      	cmp	r3, r1
    c9f4:	d374      	bcc.n	cae0 <__divsi3+0xf8>
    c9f6:	0903      	lsrs	r3, r0, #4
    c9f8:	428b      	cmp	r3, r1
    c9fa:	d35f      	bcc.n	cabc <__divsi3+0xd4>
    c9fc:	0a03      	lsrs	r3, r0, #8
    c9fe:	428b      	cmp	r3, r1
    ca00:	d344      	bcc.n	ca8c <__divsi3+0xa4>
    ca02:	0b03      	lsrs	r3, r0, #12
    ca04:	428b      	cmp	r3, r1
    ca06:	d328      	bcc.n	ca5a <__divsi3+0x72>
    ca08:	0c03      	lsrs	r3, r0, #16
    ca0a:	428b      	cmp	r3, r1
    ca0c:	d30d      	bcc.n	ca2a <__divsi3+0x42>
    ca0e:	22ff      	movs	r2, #255	; 0xff
    ca10:	0209      	lsls	r1, r1, #8
    ca12:	ba12      	rev	r2, r2
    ca14:	0c03      	lsrs	r3, r0, #16
    ca16:	428b      	cmp	r3, r1
    ca18:	d302      	bcc.n	ca20 <__divsi3+0x38>
    ca1a:	1212      	asrs	r2, r2, #8
    ca1c:	0209      	lsls	r1, r1, #8
    ca1e:	d065      	beq.n	caec <__divsi3+0x104>
    ca20:	0b03      	lsrs	r3, r0, #12
    ca22:	428b      	cmp	r3, r1
    ca24:	d319      	bcc.n	ca5a <__divsi3+0x72>
    ca26:	e000      	b.n	ca2a <__divsi3+0x42>
    ca28:	0a09      	lsrs	r1, r1, #8
    ca2a:	0bc3      	lsrs	r3, r0, #15
    ca2c:	428b      	cmp	r3, r1
    ca2e:	d301      	bcc.n	ca34 <__divsi3+0x4c>
    ca30:	03cb      	lsls	r3, r1, #15
    ca32:	1ac0      	subs	r0, r0, r3
    ca34:	4152      	adcs	r2, r2
    ca36:	0b83      	lsrs	r3, r0, #14
    ca38:	428b      	cmp	r3, r1
    ca3a:	d301      	bcc.n	ca40 <__divsi3+0x58>
    ca3c:	038b      	lsls	r3, r1, #14
    ca3e:	1ac0      	subs	r0, r0, r3
    ca40:	4152      	adcs	r2, r2
    ca42:	0b43      	lsrs	r3, r0, #13
    ca44:	428b      	cmp	r3, r1
    ca46:	d301      	bcc.n	ca4c <__divsi3+0x64>
    ca48:	034b      	lsls	r3, r1, #13
    ca4a:	1ac0      	subs	r0, r0, r3
    ca4c:	4152      	adcs	r2, r2
    ca4e:	0b03      	lsrs	r3, r0, #12
    ca50:	428b      	cmp	r3, r1
    ca52:	d301      	bcc.n	ca58 <__divsi3+0x70>
    ca54:	030b      	lsls	r3, r1, #12
    ca56:	1ac0      	subs	r0, r0, r3
    ca58:	4152      	adcs	r2, r2
    ca5a:	0ac3      	lsrs	r3, r0, #11
    ca5c:	428b      	cmp	r3, r1
    ca5e:	d301      	bcc.n	ca64 <__divsi3+0x7c>
    ca60:	02cb      	lsls	r3, r1, #11
    ca62:	1ac0      	subs	r0, r0, r3
    ca64:	4152      	adcs	r2, r2
    ca66:	0a83      	lsrs	r3, r0, #10
    ca68:	428b      	cmp	r3, r1
    ca6a:	d301      	bcc.n	ca70 <__divsi3+0x88>
    ca6c:	028b      	lsls	r3, r1, #10
    ca6e:	1ac0      	subs	r0, r0, r3
    ca70:	4152      	adcs	r2, r2
    ca72:	0a43      	lsrs	r3, r0, #9
    ca74:	428b      	cmp	r3, r1
    ca76:	d301      	bcc.n	ca7c <__divsi3+0x94>
    ca78:	024b      	lsls	r3, r1, #9
    ca7a:	1ac0      	subs	r0, r0, r3
    ca7c:	4152      	adcs	r2, r2
    ca7e:	0a03      	lsrs	r3, r0, #8
    ca80:	428b      	cmp	r3, r1
    ca82:	d301      	bcc.n	ca88 <__divsi3+0xa0>
    ca84:	020b      	lsls	r3, r1, #8
    ca86:	1ac0      	subs	r0, r0, r3
    ca88:	4152      	adcs	r2, r2
    ca8a:	d2cd      	bcs.n	ca28 <__divsi3+0x40>
    ca8c:	09c3      	lsrs	r3, r0, #7
    ca8e:	428b      	cmp	r3, r1
    ca90:	d301      	bcc.n	ca96 <__divsi3+0xae>
    ca92:	01cb      	lsls	r3, r1, #7
    ca94:	1ac0      	subs	r0, r0, r3
    ca96:	4152      	adcs	r2, r2
    ca98:	0983      	lsrs	r3, r0, #6
    ca9a:	428b      	cmp	r3, r1
    ca9c:	d301      	bcc.n	caa2 <__divsi3+0xba>
    ca9e:	018b      	lsls	r3, r1, #6
    caa0:	1ac0      	subs	r0, r0, r3
    caa2:	4152      	adcs	r2, r2
    caa4:	0943      	lsrs	r3, r0, #5
    caa6:	428b      	cmp	r3, r1
    caa8:	d301      	bcc.n	caae <__divsi3+0xc6>
    caaa:	014b      	lsls	r3, r1, #5
    caac:	1ac0      	subs	r0, r0, r3
    caae:	4152      	adcs	r2, r2
    cab0:	0903      	lsrs	r3, r0, #4
    cab2:	428b      	cmp	r3, r1
    cab4:	d301      	bcc.n	caba <__divsi3+0xd2>
    cab6:	010b      	lsls	r3, r1, #4
    cab8:	1ac0      	subs	r0, r0, r3
    caba:	4152      	adcs	r2, r2
    cabc:	08c3      	lsrs	r3, r0, #3
    cabe:	428b      	cmp	r3, r1
    cac0:	d301      	bcc.n	cac6 <__divsi3+0xde>
    cac2:	00cb      	lsls	r3, r1, #3
    cac4:	1ac0      	subs	r0, r0, r3
    cac6:	4152      	adcs	r2, r2
    cac8:	0883      	lsrs	r3, r0, #2
    caca:	428b      	cmp	r3, r1
    cacc:	d301      	bcc.n	cad2 <__divsi3+0xea>
    cace:	008b      	lsls	r3, r1, #2
    cad0:	1ac0      	subs	r0, r0, r3
    cad2:	4152      	adcs	r2, r2
    cad4:	0843      	lsrs	r3, r0, #1
    cad6:	428b      	cmp	r3, r1
    cad8:	d301      	bcc.n	cade <__divsi3+0xf6>
    cada:	004b      	lsls	r3, r1, #1
    cadc:	1ac0      	subs	r0, r0, r3
    cade:	4152      	adcs	r2, r2
    cae0:	1a41      	subs	r1, r0, r1
    cae2:	d200      	bcs.n	cae6 <__divsi3+0xfe>
    cae4:	4601      	mov	r1, r0
    cae6:	4152      	adcs	r2, r2
    cae8:	4610      	mov	r0, r2
    caea:	4770      	bx	lr
    caec:	e05d      	b.n	cbaa <__divsi3+0x1c2>
    caee:	0fca      	lsrs	r2, r1, #31
    caf0:	d000      	beq.n	caf4 <__divsi3+0x10c>
    caf2:	4249      	negs	r1, r1
    caf4:	1003      	asrs	r3, r0, #32
    caf6:	d300      	bcc.n	cafa <__divsi3+0x112>
    caf8:	4240      	negs	r0, r0
    cafa:	4053      	eors	r3, r2
    cafc:	2200      	movs	r2, #0
    cafe:	469c      	mov	ip, r3
    cb00:	0903      	lsrs	r3, r0, #4
    cb02:	428b      	cmp	r3, r1
    cb04:	d32d      	bcc.n	cb62 <__divsi3+0x17a>
    cb06:	0a03      	lsrs	r3, r0, #8
    cb08:	428b      	cmp	r3, r1
    cb0a:	d312      	bcc.n	cb32 <__divsi3+0x14a>
    cb0c:	22fc      	movs	r2, #252	; 0xfc
    cb0e:	0189      	lsls	r1, r1, #6
    cb10:	ba12      	rev	r2, r2
    cb12:	0a03      	lsrs	r3, r0, #8
    cb14:	428b      	cmp	r3, r1
    cb16:	d30c      	bcc.n	cb32 <__divsi3+0x14a>
    cb18:	0189      	lsls	r1, r1, #6
    cb1a:	1192      	asrs	r2, r2, #6
    cb1c:	428b      	cmp	r3, r1
    cb1e:	d308      	bcc.n	cb32 <__divsi3+0x14a>
    cb20:	0189      	lsls	r1, r1, #6
    cb22:	1192      	asrs	r2, r2, #6
    cb24:	428b      	cmp	r3, r1
    cb26:	d304      	bcc.n	cb32 <__divsi3+0x14a>
    cb28:	0189      	lsls	r1, r1, #6
    cb2a:	d03a      	beq.n	cba2 <__divsi3+0x1ba>
    cb2c:	1192      	asrs	r2, r2, #6
    cb2e:	e000      	b.n	cb32 <__divsi3+0x14a>
    cb30:	0989      	lsrs	r1, r1, #6
    cb32:	09c3      	lsrs	r3, r0, #7
    cb34:	428b      	cmp	r3, r1
    cb36:	d301      	bcc.n	cb3c <__divsi3+0x154>
    cb38:	01cb      	lsls	r3, r1, #7
    cb3a:	1ac0      	subs	r0, r0, r3
    cb3c:	4152      	adcs	r2, r2
    cb3e:	0983      	lsrs	r3, r0, #6
    cb40:	428b      	cmp	r3, r1
    cb42:	d301      	bcc.n	cb48 <__divsi3+0x160>
    cb44:	018b      	lsls	r3, r1, #6
    cb46:	1ac0      	subs	r0, r0, r3
    cb48:	4152      	adcs	r2, r2
    cb4a:	0943      	lsrs	r3, r0, #5
    cb4c:	428b      	cmp	r3, r1
    cb4e:	d301      	bcc.n	cb54 <__divsi3+0x16c>
    cb50:	014b      	lsls	r3, r1, #5
    cb52:	1ac0      	subs	r0, r0, r3
    cb54:	4152      	adcs	r2, r2
    cb56:	0903      	lsrs	r3, r0, #4
    cb58:	428b      	cmp	r3, r1
    cb5a:	d301      	bcc.n	cb60 <__divsi3+0x178>
    cb5c:	010b      	lsls	r3, r1, #4
    cb5e:	1ac0      	subs	r0, r0, r3
    cb60:	4152      	adcs	r2, r2
    cb62:	08c3      	lsrs	r3, r0, #3
    cb64:	428b      	cmp	r3, r1
    cb66:	d301      	bcc.n	cb6c <__divsi3+0x184>
    cb68:	00cb      	lsls	r3, r1, #3
    cb6a:	1ac0      	subs	r0, r0, r3
    cb6c:	4152      	adcs	r2, r2
    cb6e:	0883      	lsrs	r3, r0, #2
    cb70:	428b      	cmp	r3, r1
    cb72:	d301      	bcc.n	cb78 <__divsi3+0x190>
    cb74:	008b      	lsls	r3, r1, #2
    cb76:	1ac0      	subs	r0, r0, r3
    cb78:	4152      	adcs	r2, r2
    cb7a:	d2d9      	bcs.n	cb30 <__divsi3+0x148>
    cb7c:	0843      	lsrs	r3, r0, #1
    cb7e:	428b      	cmp	r3, r1
    cb80:	d301      	bcc.n	cb86 <__divsi3+0x19e>
    cb82:	004b      	lsls	r3, r1, #1
    cb84:	1ac0      	subs	r0, r0, r3
    cb86:	4152      	adcs	r2, r2
    cb88:	1a41      	subs	r1, r0, r1
    cb8a:	d200      	bcs.n	cb8e <__divsi3+0x1a6>
    cb8c:	4601      	mov	r1, r0
    cb8e:	4663      	mov	r3, ip
    cb90:	4152      	adcs	r2, r2
    cb92:	105b      	asrs	r3, r3, #1
    cb94:	4610      	mov	r0, r2
    cb96:	d301      	bcc.n	cb9c <__divsi3+0x1b4>
    cb98:	4240      	negs	r0, r0
    cb9a:	2b00      	cmp	r3, #0
    cb9c:	d500      	bpl.n	cba0 <__divsi3+0x1b8>
    cb9e:	4249      	negs	r1, r1
    cba0:	4770      	bx	lr
    cba2:	4663      	mov	r3, ip
    cba4:	105b      	asrs	r3, r3, #1
    cba6:	d300      	bcc.n	cbaa <__divsi3+0x1c2>
    cba8:	4240      	negs	r0, r0
    cbaa:	b501      	push	{r0, lr}
    cbac:	2000      	movs	r0, #0
    cbae:	f000 f805 	bl	cbbc <__aeabi_idiv0>
    cbb2:	bd02      	pop	{r1, pc}

0000cbb4 <__aeabi_idivmod>:
    cbb4:	2900      	cmp	r1, #0
    cbb6:	d0f8      	beq.n	cbaa <__divsi3+0x1c2>
    cbb8:	e716      	b.n	c9e8 <__divsi3>
    cbba:	4770      	bx	lr

0000cbbc <__aeabi_idiv0>:
    cbbc:	4770      	bx	lr
    cbbe:	46c0      	nop			; (mov r8, r8)

0000cbc0 <__aeabi_lmul>:
    cbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbc2:	46ce      	mov	lr, r9
    cbc4:	4647      	mov	r7, r8
    cbc6:	0415      	lsls	r5, r2, #16
    cbc8:	0c2d      	lsrs	r5, r5, #16
    cbca:	002e      	movs	r6, r5
    cbcc:	b580      	push	{r7, lr}
    cbce:	0407      	lsls	r7, r0, #16
    cbd0:	0c14      	lsrs	r4, r2, #16
    cbd2:	0c3f      	lsrs	r7, r7, #16
    cbd4:	4699      	mov	r9, r3
    cbd6:	0c03      	lsrs	r3, r0, #16
    cbd8:	437e      	muls	r6, r7
    cbda:	435d      	muls	r5, r3
    cbdc:	4367      	muls	r7, r4
    cbde:	4363      	muls	r3, r4
    cbe0:	197f      	adds	r7, r7, r5
    cbe2:	0c34      	lsrs	r4, r6, #16
    cbe4:	19e4      	adds	r4, r4, r7
    cbe6:	469c      	mov	ip, r3
    cbe8:	42a5      	cmp	r5, r4
    cbea:	d903      	bls.n	cbf4 <__aeabi_lmul+0x34>
    cbec:	2380      	movs	r3, #128	; 0x80
    cbee:	025b      	lsls	r3, r3, #9
    cbf0:	4698      	mov	r8, r3
    cbf2:	44c4      	add	ip, r8
    cbf4:	464b      	mov	r3, r9
    cbf6:	4351      	muls	r1, r2
    cbf8:	4343      	muls	r3, r0
    cbfa:	0436      	lsls	r6, r6, #16
    cbfc:	0c36      	lsrs	r6, r6, #16
    cbfe:	0c25      	lsrs	r5, r4, #16
    cc00:	0424      	lsls	r4, r4, #16
    cc02:	4465      	add	r5, ip
    cc04:	19a4      	adds	r4, r4, r6
    cc06:	1859      	adds	r1, r3, r1
    cc08:	1949      	adds	r1, r1, r5
    cc0a:	0020      	movs	r0, r4
    cc0c:	bc0c      	pop	{r2, r3}
    cc0e:	4690      	mov	r8, r2
    cc10:	4699      	mov	r9, r3
    cc12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cc14 <atoi>:
    cc14:	b510      	push	{r4, lr}
    cc16:	220a      	movs	r2, #10
    cc18:	2100      	movs	r1, #0
    cc1a:	f000 fb6d 	bl	d2f8 <strtol>
    cc1e:	bd10      	pop	{r4, pc}

0000cc20 <__libc_init_array>:
    cc20:	b570      	push	{r4, r5, r6, lr}
    cc22:	2600      	movs	r6, #0
    cc24:	4d0c      	ldr	r5, [pc, #48]	; (cc58 <__libc_init_array+0x38>)
    cc26:	4c0d      	ldr	r4, [pc, #52]	; (cc5c <__libc_init_array+0x3c>)
    cc28:	1b64      	subs	r4, r4, r5
    cc2a:	10a4      	asrs	r4, r4, #2
    cc2c:	42a6      	cmp	r6, r4
    cc2e:	d109      	bne.n	cc44 <__libc_init_array+0x24>
    cc30:	2600      	movs	r6, #0
    cc32:	f003 f9e3 	bl	fffc <_init>
    cc36:	4d0a      	ldr	r5, [pc, #40]	; (cc60 <__libc_init_array+0x40>)
    cc38:	4c0a      	ldr	r4, [pc, #40]	; (cc64 <__libc_init_array+0x44>)
    cc3a:	1b64      	subs	r4, r4, r5
    cc3c:	10a4      	asrs	r4, r4, #2
    cc3e:	42a6      	cmp	r6, r4
    cc40:	d105      	bne.n	cc4e <__libc_init_array+0x2e>
    cc42:	bd70      	pop	{r4, r5, r6, pc}
    cc44:	00b3      	lsls	r3, r6, #2
    cc46:	58eb      	ldr	r3, [r5, r3]
    cc48:	4798      	blx	r3
    cc4a:	3601      	adds	r6, #1
    cc4c:	e7ee      	b.n	cc2c <__libc_init_array+0xc>
    cc4e:	00b3      	lsls	r3, r6, #2
    cc50:	58eb      	ldr	r3, [r5, r3]
    cc52:	4798      	blx	r3
    cc54:	3601      	adds	r6, #1
    cc56:	e7f2      	b.n	cc3e <__libc_init_array+0x1e>
    cc58:	00010008 	.word	0x00010008
    cc5c:	00010008 	.word	0x00010008
    cc60:	00010008 	.word	0x00010008
    cc64:	0001000c 	.word	0x0001000c

0000cc68 <malloc>:
    cc68:	b510      	push	{r4, lr}
    cc6a:	4b03      	ldr	r3, [pc, #12]	; (cc78 <malloc+0x10>)
    cc6c:	0001      	movs	r1, r0
    cc6e:	6818      	ldr	r0, [r3, #0]
    cc70:	f000 f87c 	bl	cd6c <_malloc_r>
    cc74:	bd10      	pop	{r4, pc}
    cc76:	46c0      	nop			; (mov r8, r8)
    cc78:	2000000c 	.word	0x2000000c

0000cc7c <free>:
    cc7c:	b510      	push	{r4, lr}
    cc7e:	4b03      	ldr	r3, [pc, #12]	; (cc8c <free+0x10>)
    cc80:	0001      	movs	r1, r0
    cc82:	6818      	ldr	r0, [r3, #0]
    cc84:	f000 f828 	bl	ccd8 <_free_r>
    cc88:	bd10      	pop	{r4, pc}
    cc8a:	46c0      	nop			; (mov r8, r8)
    cc8c:	2000000c 	.word	0x2000000c

0000cc90 <memcpy>:
    cc90:	2300      	movs	r3, #0
    cc92:	b510      	push	{r4, lr}
    cc94:	429a      	cmp	r2, r3
    cc96:	d100      	bne.n	cc9a <memcpy+0xa>
    cc98:	bd10      	pop	{r4, pc}
    cc9a:	5ccc      	ldrb	r4, [r1, r3]
    cc9c:	54c4      	strb	r4, [r0, r3]
    cc9e:	3301      	adds	r3, #1
    cca0:	e7f8      	b.n	cc94 <memcpy+0x4>

0000cca2 <memmove>:
    cca2:	b510      	push	{r4, lr}
    cca4:	4288      	cmp	r0, r1
    cca6:	d902      	bls.n	ccae <memmove+0xc>
    cca8:	188b      	adds	r3, r1, r2
    ccaa:	4298      	cmp	r0, r3
    ccac:	d308      	bcc.n	ccc0 <memmove+0x1e>
    ccae:	2300      	movs	r3, #0
    ccb0:	429a      	cmp	r2, r3
    ccb2:	d007      	beq.n	ccc4 <memmove+0x22>
    ccb4:	5ccc      	ldrb	r4, [r1, r3]
    ccb6:	54c4      	strb	r4, [r0, r3]
    ccb8:	3301      	adds	r3, #1
    ccba:	e7f9      	b.n	ccb0 <memmove+0xe>
    ccbc:	5c8b      	ldrb	r3, [r1, r2]
    ccbe:	5483      	strb	r3, [r0, r2]
    ccc0:	3a01      	subs	r2, #1
    ccc2:	d2fb      	bcs.n	ccbc <memmove+0x1a>
    ccc4:	bd10      	pop	{r4, pc}

0000ccc6 <memset>:
    ccc6:	0003      	movs	r3, r0
    ccc8:	1882      	adds	r2, r0, r2
    ccca:	4293      	cmp	r3, r2
    cccc:	d100      	bne.n	ccd0 <memset+0xa>
    ccce:	4770      	bx	lr
    ccd0:	7019      	strb	r1, [r3, #0]
    ccd2:	3301      	adds	r3, #1
    ccd4:	e7f9      	b.n	ccca <memset+0x4>
	...

0000ccd8 <_free_r>:
    ccd8:	b570      	push	{r4, r5, r6, lr}
    ccda:	0005      	movs	r5, r0
    ccdc:	2900      	cmp	r1, #0
    ccde:	d010      	beq.n	cd02 <_free_r+0x2a>
    cce0:	1f0c      	subs	r4, r1, #4
    cce2:	6823      	ldr	r3, [r4, #0]
    cce4:	2b00      	cmp	r3, #0
    cce6:	da00      	bge.n	ccea <_free_r+0x12>
    cce8:	18e4      	adds	r4, r4, r3
    ccea:	0028      	movs	r0, r5
    ccec:	f000 fdec 	bl	d8c8 <__malloc_lock>
    ccf0:	4a1d      	ldr	r2, [pc, #116]	; (cd68 <_free_r+0x90>)
    ccf2:	6813      	ldr	r3, [r2, #0]
    ccf4:	2b00      	cmp	r3, #0
    ccf6:	d105      	bne.n	cd04 <_free_r+0x2c>
    ccf8:	6063      	str	r3, [r4, #4]
    ccfa:	6014      	str	r4, [r2, #0]
    ccfc:	0028      	movs	r0, r5
    ccfe:	f000 fde4 	bl	d8ca <__malloc_unlock>
    cd02:	bd70      	pop	{r4, r5, r6, pc}
    cd04:	42a3      	cmp	r3, r4
    cd06:	d909      	bls.n	cd1c <_free_r+0x44>
    cd08:	6821      	ldr	r1, [r4, #0]
    cd0a:	1860      	adds	r0, r4, r1
    cd0c:	4283      	cmp	r3, r0
    cd0e:	d1f3      	bne.n	ccf8 <_free_r+0x20>
    cd10:	6818      	ldr	r0, [r3, #0]
    cd12:	685b      	ldr	r3, [r3, #4]
    cd14:	1841      	adds	r1, r0, r1
    cd16:	6021      	str	r1, [r4, #0]
    cd18:	e7ee      	b.n	ccf8 <_free_r+0x20>
    cd1a:	0013      	movs	r3, r2
    cd1c:	685a      	ldr	r2, [r3, #4]
    cd1e:	2a00      	cmp	r2, #0
    cd20:	d001      	beq.n	cd26 <_free_r+0x4e>
    cd22:	42a2      	cmp	r2, r4
    cd24:	d9f9      	bls.n	cd1a <_free_r+0x42>
    cd26:	6819      	ldr	r1, [r3, #0]
    cd28:	1858      	adds	r0, r3, r1
    cd2a:	42a0      	cmp	r0, r4
    cd2c:	d10b      	bne.n	cd46 <_free_r+0x6e>
    cd2e:	6820      	ldr	r0, [r4, #0]
    cd30:	1809      	adds	r1, r1, r0
    cd32:	1858      	adds	r0, r3, r1
    cd34:	6019      	str	r1, [r3, #0]
    cd36:	4282      	cmp	r2, r0
    cd38:	d1e0      	bne.n	ccfc <_free_r+0x24>
    cd3a:	6810      	ldr	r0, [r2, #0]
    cd3c:	6852      	ldr	r2, [r2, #4]
    cd3e:	1841      	adds	r1, r0, r1
    cd40:	6019      	str	r1, [r3, #0]
    cd42:	605a      	str	r2, [r3, #4]
    cd44:	e7da      	b.n	ccfc <_free_r+0x24>
    cd46:	42a0      	cmp	r0, r4
    cd48:	d902      	bls.n	cd50 <_free_r+0x78>
    cd4a:	230c      	movs	r3, #12
    cd4c:	602b      	str	r3, [r5, #0]
    cd4e:	e7d5      	b.n	ccfc <_free_r+0x24>
    cd50:	6821      	ldr	r1, [r4, #0]
    cd52:	1860      	adds	r0, r4, r1
    cd54:	4282      	cmp	r2, r0
    cd56:	d103      	bne.n	cd60 <_free_r+0x88>
    cd58:	6810      	ldr	r0, [r2, #0]
    cd5a:	6852      	ldr	r2, [r2, #4]
    cd5c:	1841      	adds	r1, r0, r1
    cd5e:	6021      	str	r1, [r4, #0]
    cd60:	6062      	str	r2, [r4, #4]
    cd62:	605c      	str	r4, [r3, #4]
    cd64:	e7ca      	b.n	ccfc <_free_r+0x24>
    cd66:	46c0      	nop			; (mov r8, r8)
    cd68:	200004c4 	.word	0x200004c4

0000cd6c <_malloc_r>:
    cd6c:	2303      	movs	r3, #3
    cd6e:	b570      	push	{r4, r5, r6, lr}
    cd70:	1ccd      	adds	r5, r1, #3
    cd72:	439d      	bics	r5, r3
    cd74:	3508      	adds	r5, #8
    cd76:	0006      	movs	r6, r0
    cd78:	2d0c      	cmp	r5, #12
    cd7a:	d21e      	bcs.n	cdba <_malloc_r+0x4e>
    cd7c:	250c      	movs	r5, #12
    cd7e:	42a9      	cmp	r1, r5
    cd80:	d81d      	bhi.n	cdbe <_malloc_r+0x52>
    cd82:	0030      	movs	r0, r6
    cd84:	f000 fda0 	bl	d8c8 <__malloc_lock>
    cd88:	4a25      	ldr	r2, [pc, #148]	; (ce20 <_malloc_r+0xb4>)
    cd8a:	6814      	ldr	r4, [r2, #0]
    cd8c:	0021      	movs	r1, r4
    cd8e:	2900      	cmp	r1, #0
    cd90:	d119      	bne.n	cdc6 <_malloc_r+0x5a>
    cd92:	4c24      	ldr	r4, [pc, #144]	; (ce24 <_malloc_r+0xb8>)
    cd94:	6823      	ldr	r3, [r4, #0]
    cd96:	2b00      	cmp	r3, #0
    cd98:	d103      	bne.n	cda2 <_malloc_r+0x36>
    cd9a:	0030      	movs	r0, r6
    cd9c:	f000 f8dc 	bl	cf58 <_sbrk_r>
    cda0:	6020      	str	r0, [r4, #0]
    cda2:	0029      	movs	r1, r5
    cda4:	0030      	movs	r0, r6
    cda6:	f000 f8d7 	bl	cf58 <_sbrk_r>
    cdaa:	1c43      	adds	r3, r0, #1
    cdac:	d12c      	bne.n	ce08 <_malloc_r+0x9c>
    cdae:	230c      	movs	r3, #12
    cdb0:	0030      	movs	r0, r6
    cdb2:	6033      	str	r3, [r6, #0]
    cdb4:	f000 fd89 	bl	d8ca <__malloc_unlock>
    cdb8:	e003      	b.n	cdc2 <_malloc_r+0x56>
    cdba:	2d00      	cmp	r5, #0
    cdbc:	dadf      	bge.n	cd7e <_malloc_r+0x12>
    cdbe:	230c      	movs	r3, #12
    cdc0:	6033      	str	r3, [r6, #0]
    cdc2:	2000      	movs	r0, #0
    cdc4:	bd70      	pop	{r4, r5, r6, pc}
    cdc6:	680b      	ldr	r3, [r1, #0]
    cdc8:	1b5b      	subs	r3, r3, r5
    cdca:	d41a      	bmi.n	ce02 <_malloc_r+0x96>
    cdcc:	2b0b      	cmp	r3, #11
    cdce:	d903      	bls.n	cdd8 <_malloc_r+0x6c>
    cdd0:	600b      	str	r3, [r1, #0]
    cdd2:	18cc      	adds	r4, r1, r3
    cdd4:	6025      	str	r5, [r4, #0]
    cdd6:	e003      	b.n	cde0 <_malloc_r+0x74>
    cdd8:	428c      	cmp	r4, r1
    cdda:	d10e      	bne.n	cdfa <_malloc_r+0x8e>
    cddc:	6863      	ldr	r3, [r4, #4]
    cdde:	6013      	str	r3, [r2, #0]
    cde0:	0030      	movs	r0, r6
    cde2:	f000 fd72 	bl	d8ca <__malloc_unlock>
    cde6:	0020      	movs	r0, r4
    cde8:	2207      	movs	r2, #7
    cdea:	300b      	adds	r0, #11
    cdec:	1d23      	adds	r3, r4, #4
    cdee:	4390      	bics	r0, r2
    cdf0:	1ac3      	subs	r3, r0, r3
    cdf2:	d0e7      	beq.n	cdc4 <_malloc_r+0x58>
    cdf4:	425a      	negs	r2, r3
    cdf6:	50e2      	str	r2, [r4, r3]
    cdf8:	e7e4      	b.n	cdc4 <_malloc_r+0x58>
    cdfa:	684b      	ldr	r3, [r1, #4]
    cdfc:	6063      	str	r3, [r4, #4]
    cdfe:	000c      	movs	r4, r1
    ce00:	e7ee      	b.n	cde0 <_malloc_r+0x74>
    ce02:	000c      	movs	r4, r1
    ce04:	6849      	ldr	r1, [r1, #4]
    ce06:	e7c2      	b.n	cd8e <_malloc_r+0x22>
    ce08:	2303      	movs	r3, #3
    ce0a:	1cc4      	adds	r4, r0, #3
    ce0c:	439c      	bics	r4, r3
    ce0e:	42a0      	cmp	r0, r4
    ce10:	d0e0      	beq.n	cdd4 <_malloc_r+0x68>
    ce12:	1a21      	subs	r1, r4, r0
    ce14:	0030      	movs	r0, r6
    ce16:	f000 f89f 	bl	cf58 <_sbrk_r>
    ce1a:	1c43      	adds	r3, r0, #1
    ce1c:	d1da      	bne.n	cdd4 <_malloc_r+0x68>
    ce1e:	e7c6      	b.n	cdae <_malloc_r+0x42>
    ce20:	200004c4 	.word	0x200004c4
    ce24:	200004c8 	.word	0x200004c8

0000ce28 <iprintf>:
    ce28:	b40f      	push	{r0, r1, r2, r3}
    ce2a:	4b0b      	ldr	r3, [pc, #44]	; (ce58 <iprintf+0x30>)
    ce2c:	b513      	push	{r0, r1, r4, lr}
    ce2e:	681c      	ldr	r4, [r3, #0]
    ce30:	2c00      	cmp	r4, #0
    ce32:	d005      	beq.n	ce40 <iprintf+0x18>
    ce34:	69a3      	ldr	r3, [r4, #24]
    ce36:	2b00      	cmp	r3, #0
    ce38:	d102      	bne.n	ce40 <iprintf+0x18>
    ce3a:	0020      	movs	r0, r4
    ce3c:	f000 fc34 	bl	d6a8 <__sinit>
    ce40:	ab05      	add	r3, sp, #20
    ce42:	9a04      	ldr	r2, [sp, #16]
    ce44:	68a1      	ldr	r1, [r4, #8]
    ce46:	0020      	movs	r0, r4
    ce48:	9301      	str	r3, [sp, #4]
    ce4a:	f000 fecd 	bl	dbe8 <_vfiprintf_r>
    ce4e:	bc16      	pop	{r1, r2, r4}
    ce50:	bc08      	pop	{r3}
    ce52:	b004      	add	sp, #16
    ce54:	4718      	bx	r3
    ce56:	46c0      	nop			; (mov r8, r8)
    ce58:	2000000c 	.word	0x2000000c

0000ce5c <putchar>:
    ce5c:	4b08      	ldr	r3, [pc, #32]	; (ce80 <putchar+0x24>)
    ce5e:	b570      	push	{r4, r5, r6, lr}
    ce60:	681c      	ldr	r4, [r3, #0]
    ce62:	0005      	movs	r5, r0
    ce64:	2c00      	cmp	r4, #0
    ce66:	d005      	beq.n	ce74 <putchar+0x18>
    ce68:	69a3      	ldr	r3, [r4, #24]
    ce6a:	2b00      	cmp	r3, #0
    ce6c:	d102      	bne.n	ce74 <putchar+0x18>
    ce6e:	0020      	movs	r0, r4
    ce70:	f000 fc1a 	bl	d6a8 <__sinit>
    ce74:	0029      	movs	r1, r5
    ce76:	68a2      	ldr	r2, [r4, #8]
    ce78:	0020      	movs	r0, r4
    ce7a:	f001 f959 	bl	e130 <_putc_r>
    ce7e:	bd70      	pop	{r4, r5, r6, pc}
    ce80:	2000000c 	.word	0x2000000c

0000ce84 <_puts_r>:
    ce84:	b570      	push	{r4, r5, r6, lr}
    ce86:	0005      	movs	r5, r0
    ce88:	000e      	movs	r6, r1
    ce8a:	2800      	cmp	r0, #0
    ce8c:	d004      	beq.n	ce98 <_puts_r+0x14>
    ce8e:	6983      	ldr	r3, [r0, #24]
    ce90:	2b00      	cmp	r3, #0
    ce92:	d101      	bne.n	ce98 <_puts_r+0x14>
    ce94:	f000 fc08 	bl	d6a8 <__sinit>
    ce98:	69ab      	ldr	r3, [r5, #24]
    ce9a:	68ac      	ldr	r4, [r5, #8]
    ce9c:	2b00      	cmp	r3, #0
    ce9e:	d102      	bne.n	cea6 <_puts_r+0x22>
    cea0:	0028      	movs	r0, r5
    cea2:	f000 fc01 	bl	d6a8 <__sinit>
    cea6:	4b24      	ldr	r3, [pc, #144]	; (cf38 <_puts_r+0xb4>)
    cea8:	429c      	cmp	r4, r3
    ceaa:	d10f      	bne.n	cecc <_puts_r+0x48>
    ceac:	686c      	ldr	r4, [r5, #4]
    ceae:	89a3      	ldrh	r3, [r4, #12]
    ceb0:	071b      	lsls	r3, r3, #28
    ceb2:	d502      	bpl.n	ceba <_puts_r+0x36>
    ceb4:	6923      	ldr	r3, [r4, #16]
    ceb6:	2b00      	cmp	r3, #0
    ceb8:	d120      	bne.n	cefc <_puts_r+0x78>
    ceba:	0021      	movs	r1, r4
    cebc:	0028      	movs	r0, r5
    cebe:	f000 fa85 	bl	d3cc <__swsetup_r>
    cec2:	2800      	cmp	r0, #0
    cec4:	d01a      	beq.n	cefc <_puts_r+0x78>
    cec6:	2001      	movs	r0, #1
    cec8:	4240      	negs	r0, r0
    ceca:	bd70      	pop	{r4, r5, r6, pc}
    cecc:	4b1b      	ldr	r3, [pc, #108]	; (cf3c <_puts_r+0xb8>)
    cece:	429c      	cmp	r4, r3
    ced0:	d101      	bne.n	ced6 <_puts_r+0x52>
    ced2:	68ac      	ldr	r4, [r5, #8]
    ced4:	e7eb      	b.n	ceae <_puts_r+0x2a>
    ced6:	4b1a      	ldr	r3, [pc, #104]	; (cf40 <_puts_r+0xbc>)
    ced8:	429c      	cmp	r4, r3
    ceda:	d1e8      	bne.n	ceae <_puts_r+0x2a>
    cedc:	68ec      	ldr	r4, [r5, #12]
    cede:	e7e6      	b.n	ceae <_puts_r+0x2a>
    cee0:	3b01      	subs	r3, #1
    cee2:	3601      	adds	r6, #1
    cee4:	60a3      	str	r3, [r4, #8]
    cee6:	2b00      	cmp	r3, #0
    cee8:	da04      	bge.n	cef4 <_puts_r+0x70>
    ceea:	69a2      	ldr	r2, [r4, #24]
    ceec:	4293      	cmp	r3, r2
    ceee:	db16      	blt.n	cf1e <_puts_r+0x9a>
    cef0:	290a      	cmp	r1, #10
    cef2:	d014      	beq.n	cf1e <_puts_r+0x9a>
    cef4:	6823      	ldr	r3, [r4, #0]
    cef6:	1c5a      	adds	r2, r3, #1
    cef8:	6022      	str	r2, [r4, #0]
    cefa:	7019      	strb	r1, [r3, #0]
    cefc:	7831      	ldrb	r1, [r6, #0]
    cefe:	68a3      	ldr	r3, [r4, #8]
    cf00:	2900      	cmp	r1, #0
    cf02:	d1ed      	bne.n	cee0 <_puts_r+0x5c>
    cf04:	3b01      	subs	r3, #1
    cf06:	60a3      	str	r3, [r4, #8]
    cf08:	2b00      	cmp	r3, #0
    cf0a:	da0f      	bge.n	cf2c <_puts_r+0xa8>
    cf0c:	0022      	movs	r2, r4
    cf0e:	310a      	adds	r1, #10
    cf10:	0028      	movs	r0, r5
    cf12:	f000 fa05 	bl	d320 <__swbuf_r>
    cf16:	1c43      	adds	r3, r0, #1
    cf18:	d0d5      	beq.n	cec6 <_puts_r+0x42>
    cf1a:	200a      	movs	r0, #10
    cf1c:	e7d5      	b.n	ceca <_puts_r+0x46>
    cf1e:	0022      	movs	r2, r4
    cf20:	0028      	movs	r0, r5
    cf22:	f000 f9fd 	bl	d320 <__swbuf_r>
    cf26:	1c43      	adds	r3, r0, #1
    cf28:	d1e8      	bne.n	cefc <_puts_r+0x78>
    cf2a:	e7cc      	b.n	cec6 <_puts_r+0x42>
    cf2c:	200a      	movs	r0, #10
    cf2e:	6823      	ldr	r3, [r4, #0]
    cf30:	1c5a      	adds	r2, r3, #1
    cf32:	6022      	str	r2, [r4, #0]
    cf34:	7018      	strb	r0, [r3, #0]
    cf36:	e7c8      	b.n	ceca <_puts_r+0x46>
    cf38:	0000fe7c 	.word	0x0000fe7c
    cf3c:	0000fe9c 	.word	0x0000fe9c
    cf40:	0000fe5c 	.word	0x0000fe5c

0000cf44 <puts>:
    cf44:	b510      	push	{r4, lr}
    cf46:	4b03      	ldr	r3, [pc, #12]	; (cf54 <puts+0x10>)
    cf48:	0001      	movs	r1, r0
    cf4a:	6818      	ldr	r0, [r3, #0]
    cf4c:	f7ff ff9a 	bl	ce84 <_puts_r>
    cf50:	bd10      	pop	{r4, pc}
    cf52:	46c0      	nop			; (mov r8, r8)
    cf54:	2000000c 	.word	0x2000000c

0000cf58 <_sbrk_r>:
    cf58:	2300      	movs	r3, #0
    cf5a:	b570      	push	{r4, r5, r6, lr}
    cf5c:	4c06      	ldr	r4, [pc, #24]	; (cf78 <_sbrk_r+0x20>)
    cf5e:	0005      	movs	r5, r0
    cf60:	0008      	movs	r0, r1
    cf62:	6023      	str	r3, [r4, #0]
    cf64:	f7fe fac8 	bl	b4f8 <_sbrk>
    cf68:	1c43      	adds	r3, r0, #1
    cf6a:	d103      	bne.n	cf74 <_sbrk_r+0x1c>
    cf6c:	6823      	ldr	r3, [r4, #0]
    cf6e:	2b00      	cmp	r3, #0
    cf70:	d000      	beq.n	cf74 <_sbrk_r+0x1c>
    cf72:	602b      	str	r3, [r5, #0]
    cf74:	bd70      	pop	{r4, r5, r6, pc}
    cf76:	46c0      	nop			; (mov r8, r8)
    cf78:	200007f8 	.word	0x200007f8

0000cf7c <setbuf>:
    cf7c:	424a      	negs	r2, r1
    cf7e:	414a      	adcs	r2, r1
    cf80:	2380      	movs	r3, #128	; 0x80
    cf82:	b510      	push	{r4, lr}
    cf84:	0052      	lsls	r2, r2, #1
    cf86:	00db      	lsls	r3, r3, #3
    cf88:	f000 f802 	bl	cf90 <setvbuf>
    cf8c:	bd10      	pop	{r4, pc}
	...

0000cf90 <setvbuf>:
    cf90:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf92:	001d      	movs	r5, r3
    cf94:	4b4f      	ldr	r3, [pc, #316]	; (d0d4 <setvbuf+0x144>)
    cf96:	b085      	sub	sp, #20
    cf98:	681e      	ldr	r6, [r3, #0]
    cf9a:	0004      	movs	r4, r0
    cf9c:	000f      	movs	r7, r1
    cf9e:	9200      	str	r2, [sp, #0]
    cfa0:	2e00      	cmp	r6, #0
    cfa2:	d005      	beq.n	cfb0 <setvbuf+0x20>
    cfa4:	69b3      	ldr	r3, [r6, #24]
    cfa6:	2b00      	cmp	r3, #0
    cfa8:	d102      	bne.n	cfb0 <setvbuf+0x20>
    cfaa:	0030      	movs	r0, r6
    cfac:	f000 fb7c 	bl	d6a8 <__sinit>
    cfb0:	4b49      	ldr	r3, [pc, #292]	; (d0d8 <setvbuf+0x148>)
    cfb2:	429c      	cmp	r4, r3
    cfb4:	d150      	bne.n	d058 <setvbuf+0xc8>
    cfb6:	6874      	ldr	r4, [r6, #4]
    cfb8:	9b00      	ldr	r3, [sp, #0]
    cfba:	2b02      	cmp	r3, #2
    cfbc:	d005      	beq.n	cfca <setvbuf+0x3a>
    cfbe:	2b01      	cmp	r3, #1
    cfc0:	d900      	bls.n	cfc4 <setvbuf+0x34>
    cfc2:	e084      	b.n	d0ce <setvbuf+0x13e>
    cfc4:	2d00      	cmp	r5, #0
    cfc6:	da00      	bge.n	cfca <setvbuf+0x3a>
    cfc8:	e081      	b.n	d0ce <setvbuf+0x13e>
    cfca:	0021      	movs	r1, r4
    cfcc:	0030      	movs	r0, r6
    cfce:	f000 fafd 	bl	d5cc <_fflush_r>
    cfd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    cfd4:	2900      	cmp	r1, #0
    cfd6:	d008      	beq.n	cfea <setvbuf+0x5a>
    cfd8:	0023      	movs	r3, r4
    cfda:	3344      	adds	r3, #68	; 0x44
    cfdc:	4299      	cmp	r1, r3
    cfde:	d002      	beq.n	cfe6 <setvbuf+0x56>
    cfe0:	0030      	movs	r0, r6
    cfe2:	f7ff fe79 	bl	ccd8 <_free_r>
    cfe6:	2300      	movs	r3, #0
    cfe8:	6363      	str	r3, [r4, #52]	; 0x34
    cfea:	2300      	movs	r3, #0
    cfec:	61a3      	str	r3, [r4, #24]
    cfee:	6063      	str	r3, [r4, #4]
    cff0:	89a3      	ldrh	r3, [r4, #12]
    cff2:	061b      	lsls	r3, r3, #24
    cff4:	d503      	bpl.n	cffe <setvbuf+0x6e>
    cff6:	6921      	ldr	r1, [r4, #16]
    cff8:	0030      	movs	r0, r6
    cffa:	f7ff fe6d 	bl	ccd8 <_free_r>
    cffe:	89a3      	ldrh	r3, [r4, #12]
    d000:	4a36      	ldr	r2, [pc, #216]	; (d0dc <setvbuf+0x14c>)
    d002:	4013      	ands	r3, r2
    d004:	81a3      	strh	r3, [r4, #12]
    d006:	9b00      	ldr	r3, [sp, #0]
    d008:	2b02      	cmp	r3, #2
    d00a:	d05a      	beq.n	d0c2 <setvbuf+0x132>
    d00c:	ab03      	add	r3, sp, #12
    d00e:	aa02      	add	r2, sp, #8
    d010:	0021      	movs	r1, r4
    d012:	0030      	movs	r0, r6
    d014:	f000 fbe0 	bl	d7d8 <__swhatbuf_r>
    d018:	89a3      	ldrh	r3, [r4, #12]
    d01a:	4318      	orrs	r0, r3
    d01c:	81a0      	strh	r0, [r4, #12]
    d01e:	2d00      	cmp	r5, #0
    d020:	d124      	bne.n	d06c <setvbuf+0xdc>
    d022:	9d02      	ldr	r5, [sp, #8]
    d024:	0028      	movs	r0, r5
    d026:	f7ff fe1f 	bl	cc68 <malloc>
    d02a:	9501      	str	r5, [sp, #4]
    d02c:	1e07      	subs	r7, r0, #0
    d02e:	d142      	bne.n	d0b6 <setvbuf+0x126>
    d030:	9b02      	ldr	r3, [sp, #8]
    d032:	9301      	str	r3, [sp, #4]
    d034:	42ab      	cmp	r3, r5
    d036:	d139      	bne.n	d0ac <setvbuf+0x11c>
    d038:	2001      	movs	r0, #1
    d03a:	4240      	negs	r0, r0
    d03c:	2302      	movs	r3, #2
    d03e:	89a2      	ldrh	r2, [r4, #12]
    d040:	4313      	orrs	r3, r2
    d042:	81a3      	strh	r3, [r4, #12]
    d044:	2300      	movs	r3, #0
    d046:	60a3      	str	r3, [r4, #8]
    d048:	0023      	movs	r3, r4
    d04a:	3347      	adds	r3, #71	; 0x47
    d04c:	6023      	str	r3, [r4, #0]
    d04e:	6123      	str	r3, [r4, #16]
    d050:	2301      	movs	r3, #1
    d052:	6163      	str	r3, [r4, #20]
    d054:	b005      	add	sp, #20
    d056:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d058:	4b21      	ldr	r3, [pc, #132]	; (d0e0 <setvbuf+0x150>)
    d05a:	429c      	cmp	r4, r3
    d05c:	d101      	bne.n	d062 <setvbuf+0xd2>
    d05e:	68b4      	ldr	r4, [r6, #8]
    d060:	e7aa      	b.n	cfb8 <setvbuf+0x28>
    d062:	4b20      	ldr	r3, [pc, #128]	; (d0e4 <setvbuf+0x154>)
    d064:	429c      	cmp	r4, r3
    d066:	d1a7      	bne.n	cfb8 <setvbuf+0x28>
    d068:	68f4      	ldr	r4, [r6, #12]
    d06a:	e7a5      	b.n	cfb8 <setvbuf+0x28>
    d06c:	2f00      	cmp	r7, #0
    d06e:	d0d9      	beq.n	d024 <setvbuf+0x94>
    d070:	69b3      	ldr	r3, [r6, #24]
    d072:	2b00      	cmp	r3, #0
    d074:	d102      	bne.n	d07c <setvbuf+0xec>
    d076:	0030      	movs	r0, r6
    d078:	f000 fb16 	bl	d6a8 <__sinit>
    d07c:	9b00      	ldr	r3, [sp, #0]
    d07e:	2b01      	cmp	r3, #1
    d080:	d103      	bne.n	d08a <setvbuf+0xfa>
    d082:	89a3      	ldrh	r3, [r4, #12]
    d084:	9a00      	ldr	r2, [sp, #0]
    d086:	431a      	orrs	r2, r3
    d088:	81a2      	strh	r2, [r4, #12]
    d08a:	2008      	movs	r0, #8
    d08c:	89a3      	ldrh	r3, [r4, #12]
    d08e:	6027      	str	r7, [r4, #0]
    d090:	6127      	str	r7, [r4, #16]
    d092:	6165      	str	r5, [r4, #20]
    d094:	4018      	ands	r0, r3
    d096:	d018      	beq.n	d0ca <setvbuf+0x13a>
    d098:	2001      	movs	r0, #1
    d09a:	4018      	ands	r0, r3
    d09c:	2300      	movs	r3, #0
    d09e:	4298      	cmp	r0, r3
    d0a0:	d011      	beq.n	d0c6 <setvbuf+0x136>
    d0a2:	426d      	negs	r5, r5
    d0a4:	60a3      	str	r3, [r4, #8]
    d0a6:	61a5      	str	r5, [r4, #24]
    d0a8:	0018      	movs	r0, r3
    d0aa:	e7d3      	b.n	d054 <setvbuf+0xc4>
    d0ac:	9801      	ldr	r0, [sp, #4]
    d0ae:	f7ff fddb 	bl	cc68 <malloc>
    d0b2:	1e07      	subs	r7, r0, #0
    d0b4:	d0c0      	beq.n	d038 <setvbuf+0xa8>
    d0b6:	2380      	movs	r3, #128	; 0x80
    d0b8:	89a2      	ldrh	r2, [r4, #12]
    d0ba:	9d01      	ldr	r5, [sp, #4]
    d0bc:	4313      	orrs	r3, r2
    d0be:	81a3      	strh	r3, [r4, #12]
    d0c0:	e7d6      	b.n	d070 <setvbuf+0xe0>
    d0c2:	2000      	movs	r0, #0
    d0c4:	e7ba      	b.n	d03c <setvbuf+0xac>
    d0c6:	60a5      	str	r5, [r4, #8]
    d0c8:	e7c4      	b.n	d054 <setvbuf+0xc4>
    d0ca:	60a0      	str	r0, [r4, #8]
    d0cc:	e7c2      	b.n	d054 <setvbuf+0xc4>
    d0ce:	2001      	movs	r0, #1
    d0d0:	4240      	negs	r0, r0
    d0d2:	e7bf      	b.n	d054 <setvbuf+0xc4>
    d0d4:	2000000c 	.word	0x2000000c
    d0d8:	0000fe7c 	.word	0x0000fe7c
    d0dc:	fffff35c 	.word	0xfffff35c
    d0e0:	0000fe9c 	.word	0x0000fe9c
    d0e4:	0000fe5c 	.word	0x0000fe5c

0000d0e8 <siprintf>:
    d0e8:	b40e      	push	{r1, r2, r3}
    d0ea:	b510      	push	{r4, lr}
    d0ec:	b09d      	sub	sp, #116	; 0x74
    d0ee:	a902      	add	r1, sp, #8
    d0f0:	9002      	str	r0, [sp, #8]
    d0f2:	6108      	str	r0, [r1, #16]
    d0f4:	480b      	ldr	r0, [pc, #44]	; (d124 <siprintf+0x3c>)
    d0f6:	2482      	movs	r4, #130	; 0x82
    d0f8:	6088      	str	r0, [r1, #8]
    d0fa:	6148      	str	r0, [r1, #20]
    d0fc:	2001      	movs	r0, #1
    d0fe:	4240      	negs	r0, r0
    d100:	ab1f      	add	r3, sp, #124	; 0x7c
    d102:	81c8      	strh	r0, [r1, #14]
    d104:	4808      	ldr	r0, [pc, #32]	; (d128 <siprintf+0x40>)
    d106:	cb04      	ldmia	r3!, {r2}
    d108:	00a4      	lsls	r4, r4, #2
    d10a:	6800      	ldr	r0, [r0, #0]
    d10c:	9301      	str	r3, [sp, #4]
    d10e:	818c      	strh	r4, [r1, #12]
    d110:	f000 fc3e 	bl	d990 <_svfiprintf_r>
    d114:	2300      	movs	r3, #0
    d116:	9a02      	ldr	r2, [sp, #8]
    d118:	7013      	strb	r3, [r2, #0]
    d11a:	b01d      	add	sp, #116	; 0x74
    d11c:	bc10      	pop	{r4}
    d11e:	bc08      	pop	{r3}
    d120:	b003      	add	sp, #12
    d122:	4718      	bx	r3
    d124:	7fffffff 	.word	0x7fffffff
    d128:	2000000c 	.word	0x2000000c

0000d12c <strcmp>:
    d12c:	7802      	ldrb	r2, [r0, #0]
    d12e:	780b      	ldrb	r3, [r1, #0]
    d130:	2a00      	cmp	r2, #0
    d132:	d003      	beq.n	d13c <strcmp+0x10>
    d134:	3001      	adds	r0, #1
    d136:	3101      	adds	r1, #1
    d138:	429a      	cmp	r2, r3
    d13a:	d0f7      	beq.n	d12c <strcmp>
    d13c:	1ad0      	subs	r0, r2, r3
    d13e:	4770      	bx	lr

0000d140 <strcpy>:
    d140:	1c03      	adds	r3, r0, #0
    d142:	780a      	ldrb	r2, [r1, #0]
    d144:	3101      	adds	r1, #1
    d146:	701a      	strb	r2, [r3, #0]
    d148:	3301      	adds	r3, #1
    d14a:	2a00      	cmp	r2, #0
    d14c:	d1f9      	bne.n	d142 <strcpy+0x2>
    d14e:	4770      	bx	lr

0000d150 <strdup>:
    d150:	b510      	push	{r4, lr}
    d152:	4b03      	ldr	r3, [pc, #12]	; (d160 <strdup+0x10>)
    d154:	0001      	movs	r1, r0
    d156:	6818      	ldr	r0, [r3, #0]
    d158:	f000 f804 	bl	d164 <_strdup_r>
    d15c:	bd10      	pop	{r4, pc}
    d15e:	46c0      	nop			; (mov r8, r8)
    d160:	2000000c 	.word	0x2000000c

0000d164 <_strdup_r>:
    d164:	b570      	push	{r4, r5, r6, lr}
    d166:	0005      	movs	r5, r0
    d168:	0008      	movs	r0, r1
    d16a:	000e      	movs	r6, r1
    d16c:	f000 f80d 	bl	d18a <strlen>
    d170:	1c44      	adds	r4, r0, #1
    d172:	0021      	movs	r1, r4
    d174:	0028      	movs	r0, r5
    d176:	f7ff fdf9 	bl	cd6c <_malloc_r>
    d17a:	1e05      	subs	r5, r0, #0
    d17c:	d003      	beq.n	d186 <_strdup_r+0x22>
    d17e:	0022      	movs	r2, r4
    d180:	0031      	movs	r1, r6
    d182:	f7ff fd85 	bl	cc90 <memcpy>
    d186:	0028      	movs	r0, r5
    d188:	bd70      	pop	{r4, r5, r6, pc}

0000d18a <strlen>:
    d18a:	2300      	movs	r3, #0
    d18c:	5cc2      	ldrb	r2, [r0, r3]
    d18e:	3301      	adds	r3, #1
    d190:	2a00      	cmp	r2, #0
    d192:	d1fb      	bne.n	d18c <strlen+0x2>
    d194:	1e58      	subs	r0, r3, #1
    d196:	4770      	bx	lr

0000d198 <strncmp>:
    d198:	2300      	movs	r3, #0
    d19a:	b530      	push	{r4, r5, lr}
    d19c:	429a      	cmp	r2, r3
    d19e:	d00a      	beq.n	d1b6 <strncmp+0x1e>
    d1a0:	3a01      	subs	r2, #1
    d1a2:	5cc4      	ldrb	r4, [r0, r3]
    d1a4:	5ccd      	ldrb	r5, [r1, r3]
    d1a6:	42ac      	cmp	r4, r5
    d1a8:	d104      	bne.n	d1b4 <strncmp+0x1c>
    d1aa:	429a      	cmp	r2, r3
    d1ac:	d002      	beq.n	d1b4 <strncmp+0x1c>
    d1ae:	3301      	adds	r3, #1
    d1b0:	2c00      	cmp	r4, #0
    d1b2:	d1f6      	bne.n	d1a2 <strncmp+0xa>
    d1b4:	1b63      	subs	r3, r4, r5
    d1b6:	0018      	movs	r0, r3
    d1b8:	bd30      	pop	{r4, r5, pc}

0000d1ba <strstr>:
    d1ba:	b510      	push	{r4, lr}
    d1bc:	0002      	movs	r2, r0
    d1be:	7800      	ldrb	r0, [r0, #0]
    d1c0:	2800      	cmp	r0, #0
    d1c2:	d104      	bne.n	d1ce <strstr+0x14>
    d1c4:	7809      	ldrb	r1, [r1, #0]
    d1c6:	2900      	cmp	r1, #0
    d1c8:	d00d      	beq.n	d1e6 <strstr+0x2c>
    d1ca:	bd10      	pop	{r4, pc}
    d1cc:	3201      	adds	r2, #1
    d1ce:	7810      	ldrb	r0, [r2, #0]
    d1d0:	2800      	cmp	r0, #0
    d1d2:	d0fa      	beq.n	d1ca <strstr+0x10>
    d1d4:	2300      	movs	r3, #0
    d1d6:	5cc8      	ldrb	r0, [r1, r3]
    d1d8:	2800      	cmp	r0, #0
    d1da:	d004      	beq.n	d1e6 <strstr+0x2c>
    d1dc:	5cd4      	ldrb	r4, [r2, r3]
    d1de:	4284      	cmp	r4, r0
    d1e0:	d1f4      	bne.n	d1cc <strstr+0x12>
    d1e2:	3301      	adds	r3, #1
    d1e4:	e7f7      	b.n	d1d6 <strstr+0x1c>
    d1e6:	0010      	movs	r0, r2
    d1e8:	e7ef      	b.n	d1ca <strstr+0x10>
	...

0000d1ec <_strtol_l.isra.0>:
    d1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1ee:	001f      	movs	r7, r3
    d1f0:	000e      	movs	r6, r1
    d1f2:	b087      	sub	sp, #28
    d1f4:	9005      	str	r0, [sp, #20]
    d1f6:	9103      	str	r1, [sp, #12]
    d1f8:	9202      	str	r2, [sp, #8]
    d1fa:	980c      	ldr	r0, [sp, #48]	; 0x30
    d1fc:	7834      	ldrb	r4, [r6, #0]
    d1fe:	f000 fae8 	bl	d7d2 <__locale_ctype_ptr_l>
    d202:	2208      	movs	r2, #8
    d204:	1900      	adds	r0, r0, r4
    d206:	7843      	ldrb	r3, [r0, #1]
    d208:	1c75      	adds	r5, r6, #1
    d20a:	4013      	ands	r3, r2
    d20c:	d10c      	bne.n	d228 <_strtol_l.isra.0+0x3c>
    d20e:	2c2d      	cmp	r4, #45	; 0x2d
    d210:	d10c      	bne.n	d22c <_strtol_l.isra.0+0x40>
    d212:	3301      	adds	r3, #1
    d214:	782c      	ldrb	r4, [r5, #0]
    d216:	9301      	str	r3, [sp, #4]
    d218:	1cb5      	adds	r5, r6, #2
    d21a:	2f00      	cmp	r7, #0
    d21c:	d00c      	beq.n	d238 <_strtol_l.isra.0+0x4c>
    d21e:	2f10      	cmp	r7, #16
    d220:	d114      	bne.n	d24c <_strtol_l.isra.0+0x60>
    d222:	2c30      	cmp	r4, #48	; 0x30
    d224:	d00a      	beq.n	d23c <_strtol_l.isra.0+0x50>
    d226:	e011      	b.n	d24c <_strtol_l.isra.0+0x60>
    d228:	002e      	movs	r6, r5
    d22a:	e7e6      	b.n	d1fa <_strtol_l.isra.0+0xe>
    d22c:	9301      	str	r3, [sp, #4]
    d22e:	2c2b      	cmp	r4, #43	; 0x2b
    d230:	d1f3      	bne.n	d21a <_strtol_l.isra.0+0x2e>
    d232:	782c      	ldrb	r4, [r5, #0]
    d234:	1cb5      	adds	r5, r6, #2
    d236:	e7f0      	b.n	d21a <_strtol_l.isra.0+0x2e>
    d238:	2c30      	cmp	r4, #48	; 0x30
    d23a:	d12f      	bne.n	d29c <_strtol_l.isra.0+0xb0>
    d23c:	2220      	movs	r2, #32
    d23e:	782b      	ldrb	r3, [r5, #0]
    d240:	4393      	bics	r3, r2
    d242:	2b58      	cmp	r3, #88	; 0x58
    d244:	d151      	bne.n	d2ea <_strtol_l.isra.0+0xfe>
    d246:	2710      	movs	r7, #16
    d248:	786c      	ldrb	r4, [r5, #1]
    d24a:	3502      	adds	r5, #2
    d24c:	9b01      	ldr	r3, [sp, #4]
    d24e:	4a29      	ldr	r2, [pc, #164]	; (d2f4 <_strtol_l.isra.0+0x108>)
    d250:	0039      	movs	r1, r7
    d252:	189e      	adds	r6, r3, r2
    d254:	0030      	movs	r0, r6
    d256:	f7ff fbc3 	bl	c9e0 <__aeabi_uidivmod>
    d25a:	0030      	movs	r0, r6
    d25c:	9104      	str	r1, [sp, #16]
    d25e:	0039      	movs	r1, r7
    d260:	f7ff fb38 	bl	c8d4 <__udivsi3>
    d264:	2101      	movs	r1, #1
    d266:	2300      	movs	r3, #0
    d268:	4249      	negs	r1, r1
    d26a:	0002      	movs	r2, r0
    d26c:	468c      	mov	ip, r1
    d26e:	0018      	movs	r0, r3
    d270:	0021      	movs	r1, r4
    d272:	3930      	subs	r1, #48	; 0x30
    d274:	2909      	cmp	r1, #9
    d276:	d813      	bhi.n	d2a0 <_strtol_l.isra.0+0xb4>
    d278:	000c      	movs	r4, r1
    d27a:	42a7      	cmp	r7, r4
    d27c:	dd1c      	ble.n	d2b8 <_strtol_l.isra.0+0xcc>
    d27e:	1c59      	adds	r1, r3, #1
    d280:	d009      	beq.n	d296 <_strtol_l.isra.0+0xaa>
    d282:	4663      	mov	r3, ip
    d284:	4282      	cmp	r2, r0
    d286:	d306      	bcc.n	d296 <_strtol_l.isra.0+0xaa>
    d288:	d102      	bne.n	d290 <_strtol_l.isra.0+0xa4>
    d28a:	9904      	ldr	r1, [sp, #16]
    d28c:	42a1      	cmp	r1, r4
    d28e:	db02      	blt.n	d296 <_strtol_l.isra.0+0xaa>
    d290:	2301      	movs	r3, #1
    d292:	4378      	muls	r0, r7
    d294:	1820      	adds	r0, r4, r0
    d296:	782c      	ldrb	r4, [r5, #0]
    d298:	3501      	adds	r5, #1
    d29a:	e7e9      	b.n	d270 <_strtol_l.isra.0+0x84>
    d29c:	270a      	movs	r7, #10
    d29e:	e7d5      	b.n	d24c <_strtol_l.isra.0+0x60>
    d2a0:	0021      	movs	r1, r4
    d2a2:	3941      	subs	r1, #65	; 0x41
    d2a4:	2919      	cmp	r1, #25
    d2a6:	d801      	bhi.n	d2ac <_strtol_l.isra.0+0xc0>
    d2a8:	3c37      	subs	r4, #55	; 0x37
    d2aa:	e7e6      	b.n	d27a <_strtol_l.isra.0+0x8e>
    d2ac:	0021      	movs	r1, r4
    d2ae:	3961      	subs	r1, #97	; 0x61
    d2b0:	2919      	cmp	r1, #25
    d2b2:	d801      	bhi.n	d2b8 <_strtol_l.isra.0+0xcc>
    d2b4:	3c57      	subs	r4, #87	; 0x57
    d2b6:	e7e0      	b.n	d27a <_strtol_l.isra.0+0x8e>
    d2b8:	1c5a      	adds	r2, r3, #1
    d2ba:	d108      	bne.n	d2ce <_strtol_l.isra.0+0xe2>
    d2bc:	9a05      	ldr	r2, [sp, #20]
    d2be:	3323      	adds	r3, #35	; 0x23
    d2c0:	6013      	str	r3, [r2, #0]
    d2c2:	9b02      	ldr	r3, [sp, #8]
    d2c4:	0030      	movs	r0, r6
    d2c6:	2b00      	cmp	r3, #0
    d2c8:	d10b      	bne.n	d2e2 <_strtol_l.isra.0+0xf6>
    d2ca:	b007      	add	sp, #28
    d2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2ce:	9a01      	ldr	r2, [sp, #4]
    d2d0:	2a00      	cmp	r2, #0
    d2d2:	d000      	beq.n	d2d6 <_strtol_l.isra.0+0xea>
    d2d4:	4240      	negs	r0, r0
    d2d6:	9a02      	ldr	r2, [sp, #8]
    d2d8:	2a00      	cmp	r2, #0
    d2da:	d0f6      	beq.n	d2ca <_strtol_l.isra.0+0xde>
    d2dc:	9a03      	ldr	r2, [sp, #12]
    d2de:	2b00      	cmp	r3, #0
    d2e0:	d000      	beq.n	d2e4 <_strtol_l.isra.0+0xf8>
    d2e2:	1e6a      	subs	r2, r5, #1
    d2e4:	9b02      	ldr	r3, [sp, #8]
    d2e6:	601a      	str	r2, [r3, #0]
    d2e8:	e7ef      	b.n	d2ca <_strtol_l.isra.0+0xde>
    d2ea:	2430      	movs	r4, #48	; 0x30
    d2ec:	2f00      	cmp	r7, #0
    d2ee:	d1ad      	bne.n	d24c <_strtol_l.isra.0+0x60>
    d2f0:	3708      	adds	r7, #8
    d2f2:	e7ab      	b.n	d24c <_strtol_l.isra.0+0x60>
    d2f4:	7fffffff 	.word	0x7fffffff

0000d2f8 <strtol>:
    d2f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d2fa:	0013      	movs	r3, r2
    d2fc:	4a06      	ldr	r2, [pc, #24]	; (d318 <strtol+0x20>)
    d2fe:	0005      	movs	r5, r0
    d300:	6810      	ldr	r0, [r2, #0]
    d302:	6a04      	ldr	r4, [r0, #32]
    d304:	2c00      	cmp	r4, #0
    d306:	d100      	bne.n	d30a <strtol+0x12>
    d308:	4c04      	ldr	r4, [pc, #16]	; (d31c <strtol+0x24>)
    d30a:	000a      	movs	r2, r1
    d30c:	9400      	str	r4, [sp, #0]
    d30e:	0029      	movs	r1, r5
    d310:	f7ff ff6c 	bl	d1ec <_strtol_l.isra.0>
    d314:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    d316:	46c0      	nop			; (mov r8, r8)
    d318:	2000000c 	.word	0x2000000c
    d31c:	20000070 	.word	0x20000070

0000d320 <__swbuf_r>:
    d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d322:	0005      	movs	r5, r0
    d324:	000e      	movs	r6, r1
    d326:	0014      	movs	r4, r2
    d328:	2800      	cmp	r0, #0
    d32a:	d004      	beq.n	d336 <__swbuf_r+0x16>
    d32c:	6983      	ldr	r3, [r0, #24]
    d32e:	2b00      	cmp	r3, #0
    d330:	d101      	bne.n	d336 <__swbuf_r+0x16>
    d332:	f000 f9b9 	bl	d6a8 <__sinit>
    d336:	4b22      	ldr	r3, [pc, #136]	; (d3c0 <__swbuf_r+0xa0>)
    d338:	429c      	cmp	r4, r3
    d33a:	d12d      	bne.n	d398 <__swbuf_r+0x78>
    d33c:	686c      	ldr	r4, [r5, #4]
    d33e:	69a3      	ldr	r3, [r4, #24]
    d340:	60a3      	str	r3, [r4, #8]
    d342:	89a3      	ldrh	r3, [r4, #12]
    d344:	071b      	lsls	r3, r3, #28
    d346:	d531      	bpl.n	d3ac <__swbuf_r+0x8c>
    d348:	6923      	ldr	r3, [r4, #16]
    d34a:	2b00      	cmp	r3, #0
    d34c:	d02e      	beq.n	d3ac <__swbuf_r+0x8c>
    d34e:	6823      	ldr	r3, [r4, #0]
    d350:	6922      	ldr	r2, [r4, #16]
    d352:	b2f7      	uxtb	r7, r6
    d354:	1a98      	subs	r0, r3, r2
    d356:	6963      	ldr	r3, [r4, #20]
    d358:	b2f6      	uxtb	r6, r6
    d35a:	4298      	cmp	r0, r3
    d35c:	db05      	blt.n	d36a <__swbuf_r+0x4a>
    d35e:	0021      	movs	r1, r4
    d360:	0028      	movs	r0, r5
    d362:	f000 f933 	bl	d5cc <_fflush_r>
    d366:	2800      	cmp	r0, #0
    d368:	d126      	bne.n	d3b8 <__swbuf_r+0x98>
    d36a:	68a3      	ldr	r3, [r4, #8]
    d36c:	3001      	adds	r0, #1
    d36e:	3b01      	subs	r3, #1
    d370:	60a3      	str	r3, [r4, #8]
    d372:	6823      	ldr	r3, [r4, #0]
    d374:	1c5a      	adds	r2, r3, #1
    d376:	6022      	str	r2, [r4, #0]
    d378:	701f      	strb	r7, [r3, #0]
    d37a:	6963      	ldr	r3, [r4, #20]
    d37c:	4298      	cmp	r0, r3
    d37e:	d004      	beq.n	d38a <__swbuf_r+0x6a>
    d380:	89a3      	ldrh	r3, [r4, #12]
    d382:	07db      	lsls	r3, r3, #31
    d384:	d51a      	bpl.n	d3bc <__swbuf_r+0x9c>
    d386:	2e0a      	cmp	r6, #10
    d388:	d118      	bne.n	d3bc <__swbuf_r+0x9c>
    d38a:	0021      	movs	r1, r4
    d38c:	0028      	movs	r0, r5
    d38e:	f000 f91d 	bl	d5cc <_fflush_r>
    d392:	2800      	cmp	r0, #0
    d394:	d012      	beq.n	d3bc <__swbuf_r+0x9c>
    d396:	e00f      	b.n	d3b8 <__swbuf_r+0x98>
    d398:	4b0a      	ldr	r3, [pc, #40]	; (d3c4 <__swbuf_r+0xa4>)
    d39a:	429c      	cmp	r4, r3
    d39c:	d101      	bne.n	d3a2 <__swbuf_r+0x82>
    d39e:	68ac      	ldr	r4, [r5, #8]
    d3a0:	e7cd      	b.n	d33e <__swbuf_r+0x1e>
    d3a2:	4b09      	ldr	r3, [pc, #36]	; (d3c8 <__swbuf_r+0xa8>)
    d3a4:	429c      	cmp	r4, r3
    d3a6:	d1ca      	bne.n	d33e <__swbuf_r+0x1e>
    d3a8:	68ec      	ldr	r4, [r5, #12]
    d3aa:	e7c8      	b.n	d33e <__swbuf_r+0x1e>
    d3ac:	0021      	movs	r1, r4
    d3ae:	0028      	movs	r0, r5
    d3b0:	f000 f80c 	bl	d3cc <__swsetup_r>
    d3b4:	2800      	cmp	r0, #0
    d3b6:	d0ca      	beq.n	d34e <__swbuf_r+0x2e>
    d3b8:	2601      	movs	r6, #1
    d3ba:	4276      	negs	r6, r6
    d3bc:	0030      	movs	r0, r6
    d3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d3c0:	0000fe7c 	.word	0x0000fe7c
    d3c4:	0000fe9c 	.word	0x0000fe9c
    d3c8:	0000fe5c 	.word	0x0000fe5c

0000d3cc <__swsetup_r>:
    d3cc:	4b36      	ldr	r3, [pc, #216]	; (d4a8 <__swsetup_r+0xdc>)
    d3ce:	b570      	push	{r4, r5, r6, lr}
    d3d0:	681d      	ldr	r5, [r3, #0]
    d3d2:	0006      	movs	r6, r0
    d3d4:	000c      	movs	r4, r1
    d3d6:	2d00      	cmp	r5, #0
    d3d8:	d005      	beq.n	d3e6 <__swsetup_r+0x1a>
    d3da:	69ab      	ldr	r3, [r5, #24]
    d3dc:	2b00      	cmp	r3, #0
    d3de:	d102      	bne.n	d3e6 <__swsetup_r+0x1a>
    d3e0:	0028      	movs	r0, r5
    d3e2:	f000 f961 	bl	d6a8 <__sinit>
    d3e6:	4b31      	ldr	r3, [pc, #196]	; (d4ac <__swsetup_r+0xe0>)
    d3e8:	429c      	cmp	r4, r3
    d3ea:	d10f      	bne.n	d40c <__swsetup_r+0x40>
    d3ec:	686c      	ldr	r4, [r5, #4]
    d3ee:	230c      	movs	r3, #12
    d3f0:	5ee2      	ldrsh	r2, [r4, r3]
    d3f2:	b293      	uxth	r3, r2
    d3f4:	0719      	lsls	r1, r3, #28
    d3f6:	d42d      	bmi.n	d454 <__swsetup_r+0x88>
    d3f8:	06d9      	lsls	r1, r3, #27
    d3fa:	d411      	bmi.n	d420 <__swsetup_r+0x54>
    d3fc:	2309      	movs	r3, #9
    d3fe:	2001      	movs	r0, #1
    d400:	6033      	str	r3, [r6, #0]
    d402:	3337      	adds	r3, #55	; 0x37
    d404:	4313      	orrs	r3, r2
    d406:	81a3      	strh	r3, [r4, #12]
    d408:	4240      	negs	r0, r0
    d40a:	bd70      	pop	{r4, r5, r6, pc}
    d40c:	4b28      	ldr	r3, [pc, #160]	; (d4b0 <__swsetup_r+0xe4>)
    d40e:	429c      	cmp	r4, r3
    d410:	d101      	bne.n	d416 <__swsetup_r+0x4a>
    d412:	68ac      	ldr	r4, [r5, #8]
    d414:	e7eb      	b.n	d3ee <__swsetup_r+0x22>
    d416:	4b27      	ldr	r3, [pc, #156]	; (d4b4 <__swsetup_r+0xe8>)
    d418:	429c      	cmp	r4, r3
    d41a:	d1e8      	bne.n	d3ee <__swsetup_r+0x22>
    d41c:	68ec      	ldr	r4, [r5, #12]
    d41e:	e7e6      	b.n	d3ee <__swsetup_r+0x22>
    d420:	075b      	lsls	r3, r3, #29
    d422:	d513      	bpl.n	d44c <__swsetup_r+0x80>
    d424:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d426:	2900      	cmp	r1, #0
    d428:	d008      	beq.n	d43c <__swsetup_r+0x70>
    d42a:	0023      	movs	r3, r4
    d42c:	3344      	adds	r3, #68	; 0x44
    d42e:	4299      	cmp	r1, r3
    d430:	d002      	beq.n	d438 <__swsetup_r+0x6c>
    d432:	0030      	movs	r0, r6
    d434:	f7ff fc50 	bl	ccd8 <_free_r>
    d438:	2300      	movs	r3, #0
    d43a:	6363      	str	r3, [r4, #52]	; 0x34
    d43c:	2224      	movs	r2, #36	; 0x24
    d43e:	89a3      	ldrh	r3, [r4, #12]
    d440:	4393      	bics	r3, r2
    d442:	81a3      	strh	r3, [r4, #12]
    d444:	2300      	movs	r3, #0
    d446:	6063      	str	r3, [r4, #4]
    d448:	6923      	ldr	r3, [r4, #16]
    d44a:	6023      	str	r3, [r4, #0]
    d44c:	2308      	movs	r3, #8
    d44e:	89a2      	ldrh	r2, [r4, #12]
    d450:	4313      	orrs	r3, r2
    d452:	81a3      	strh	r3, [r4, #12]
    d454:	6923      	ldr	r3, [r4, #16]
    d456:	2b00      	cmp	r3, #0
    d458:	d10b      	bne.n	d472 <__swsetup_r+0xa6>
    d45a:	21a0      	movs	r1, #160	; 0xa0
    d45c:	2280      	movs	r2, #128	; 0x80
    d45e:	89a3      	ldrh	r3, [r4, #12]
    d460:	0089      	lsls	r1, r1, #2
    d462:	0092      	lsls	r2, r2, #2
    d464:	400b      	ands	r3, r1
    d466:	4293      	cmp	r3, r2
    d468:	d003      	beq.n	d472 <__swsetup_r+0xa6>
    d46a:	0021      	movs	r1, r4
    d46c:	0030      	movs	r0, r6
    d46e:	f000 f9db 	bl	d828 <__smakebuf_r>
    d472:	2301      	movs	r3, #1
    d474:	89a2      	ldrh	r2, [r4, #12]
    d476:	4013      	ands	r3, r2
    d478:	d011      	beq.n	d49e <__swsetup_r+0xd2>
    d47a:	2300      	movs	r3, #0
    d47c:	60a3      	str	r3, [r4, #8]
    d47e:	6963      	ldr	r3, [r4, #20]
    d480:	425b      	negs	r3, r3
    d482:	61a3      	str	r3, [r4, #24]
    d484:	2000      	movs	r0, #0
    d486:	6923      	ldr	r3, [r4, #16]
    d488:	4283      	cmp	r3, r0
    d48a:	d1be      	bne.n	d40a <__swsetup_r+0x3e>
    d48c:	230c      	movs	r3, #12
    d48e:	5ee2      	ldrsh	r2, [r4, r3]
    d490:	0613      	lsls	r3, r2, #24
    d492:	d5ba      	bpl.n	d40a <__swsetup_r+0x3e>
    d494:	2340      	movs	r3, #64	; 0x40
    d496:	4313      	orrs	r3, r2
    d498:	81a3      	strh	r3, [r4, #12]
    d49a:	3801      	subs	r0, #1
    d49c:	e7b5      	b.n	d40a <__swsetup_r+0x3e>
    d49e:	0792      	lsls	r2, r2, #30
    d4a0:	d400      	bmi.n	d4a4 <__swsetup_r+0xd8>
    d4a2:	6963      	ldr	r3, [r4, #20]
    d4a4:	60a3      	str	r3, [r4, #8]
    d4a6:	e7ed      	b.n	d484 <__swsetup_r+0xb8>
    d4a8:	2000000c 	.word	0x2000000c
    d4ac:	0000fe7c 	.word	0x0000fe7c
    d4b0:	0000fe9c 	.word	0x0000fe9c
    d4b4:	0000fe5c 	.word	0x0000fe5c

0000d4b8 <__sflush_r>:
    d4b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d4ba:	898a      	ldrh	r2, [r1, #12]
    d4bc:	0005      	movs	r5, r0
    d4be:	000c      	movs	r4, r1
    d4c0:	0713      	lsls	r3, r2, #28
    d4c2:	d460      	bmi.n	d586 <__sflush_r+0xce>
    d4c4:	684b      	ldr	r3, [r1, #4]
    d4c6:	2b00      	cmp	r3, #0
    d4c8:	dc04      	bgt.n	d4d4 <__sflush_r+0x1c>
    d4ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    d4cc:	2b00      	cmp	r3, #0
    d4ce:	dc01      	bgt.n	d4d4 <__sflush_r+0x1c>
    d4d0:	2000      	movs	r0, #0
    d4d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d4d4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    d4d6:	2f00      	cmp	r7, #0
    d4d8:	d0fa      	beq.n	d4d0 <__sflush_r+0x18>
    d4da:	2300      	movs	r3, #0
    d4dc:	682e      	ldr	r6, [r5, #0]
    d4de:	602b      	str	r3, [r5, #0]
    d4e0:	2380      	movs	r3, #128	; 0x80
    d4e2:	015b      	lsls	r3, r3, #5
    d4e4:	401a      	ands	r2, r3
    d4e6:	d034      	beq.n	d552 <__sflush_r+0x9a>
    d4e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    d4ea:	89a3      	ldrh	r3, [r4, #12]
    d4ec:	075b      	lsls	r3, r3, #29
    d4ee:	d506      	bpl.n	d4fe <__sflush_r+0x46>
    d4f0:	6863      	ldr	r3, [r4, #4]
    d4f2:	1ac0      	subs	r0, r0, r3
    d4f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	d001      	beq.n	d4fe <__sflush_r+0x46>
    d4fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    d4fc:	1ac0      	subs	r0, r0, r3
    d4fe:	0002      	movs	r2, r0
    d500:	6a21      	ldr	r1, [r4, #32]
    d502:	2300      	movs	r3, #0
    d504:	0028      	movs	r0, r5
    d506:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    d508:	47b8      	blx	r7
    d50a:	89a1      	ldrh	r1, [r4, #12]
    d50c:	1c43      	adds	r3, r0, #1
    d50e:	d106      	bne.n	d51e <__sflush_r+0x66>
    d510:	682b      	ldr	r3, [r5, #0]
    d512:	2b1d      	cmp	r3, #29
    d514:	d831      	bhi.n	d57a <__sflush_r+0xc2>
    d516:	4a2c      	ldr	r2, [pc, #176]	; (d5c8 <__sflush_r+0x110>)
    d518:	40da      	lsrs	r2, r3
    d51a:	07d3      	lsls	r3, r2, #31
    d51c:	d52d      	bpl.n	d57a <__sflush_r+0xc2>
    d51e:	2300      	movs	r3, #0
    d520:	6063      	str	r3, [r4, #4]
    d522:	6923      	ldr	r3, [r4, #16]
    d524:	6023      	str	r3, [r4, #0]
    d526:	04cb      	lsls	r3, r1, #19
    d528:	d505      	bpl.n	d536 <__sflush_r+0x7e>
    d52a:	1c43      	adds	r3, r0, #1
    d52c:	d102      	bne.n	d534 <__sflush_r+0x7c>
    d52e:	682b      	ldr	r3, [r5, #0]
    d530:	2b00      	cmp	r3, #0
    d532:	d100      	bne.n	d536 <__sflush_r+0x7e>
    d534:	6560      	str	r0, [r4, #84]	; 0x54
    d536:	6b61      	ldr	r1, [r4, #52]	; 0x34
    d538:	602e      	str	r6, [r5, #0]
    d53a:	2900      	cmp	r1, #0
    d53c:	d0c8      	beq.n	d4d0 <__sflush_r+0x18>
    d53e:	0023      	movs	r3, r4
    d540:	3344      	adds	r3, #68	; 0x44
    d542:	4299      	cmp	r1, r3
    d544:	d002      	beq.n	d54c <__sflush_r+0x94>
    d546:	0028      	movs	r0, r5
    d548:	f7ff fbc6 	bl	ccd8 <_free_r>
    d54c:	2000      	movs	r0, #0
    d54e:	6360      	str	r0, [r4, #52]	; 0x34
    d550:	e7bf      	b.n	d4d2 <__sflush_r+0x1a>
    d552:	2301      	movs	r3, #1
    d554:	6a21      	ldr	r1, [r4, #32]
    d556:	0028      	movs	r0, r5
    d558:	47b8      	blx	r7
    d55a:	1c43      	adds	r3, r0, #1
    d55c:	d1c5      	bne.n	d4ea <__sflush_r+0x32>
    d55e:	682b      	ldr	r3, [r5, #0]
    d560:	2b00      	cmp	r3, #0
    d562:	d0c2      	beq.n	d4ea <__sflush_r+0x32>
    d564:	2b1d      	cmp	r3, #29
    d566:	d001      	beq.n	d56c <__sflush_r+0xb4>
    d568:	2b16      	cmp	r3, #22
    d56a:	d101      	bne.n	d570 <__sflush_r+0xb8>
    d56c:	602e      	str	r6, [r5, #0]
    d56e:	e7af      	b.n	d4d0 <__sflush_r+0x18>
    d570:	2340      	movs	r3, #64	; 0x40
    d572:	89a2      	ldrh	r2, [r4, #12]
    d574:	4313      	orrs	r3, r2
    d576:	81a3      	strh	r3, [r4, #12]
    d578:	e7ab      	b.n	d4d2 <__sflush_r+0x1a>
    d57a:	2340      	movs	r3, #64	; 0x40
    d57c:	430b      	orrs	r3, r1
    d57e:	2001      	movs	r0, #1
    d580:	81a3      	strh	r3, [r4, #12]
    d582:	4240      	negs	r0, r0
    d584:	e7a5      	b.n	d4d2 <__sflush_r+0x1a>
    d586:	690f      	ldr	r7, [r1, #16]
    d588:	2f00      	cmp	r7, #0
    d58a:	d0a1      	beq.n	d4d0 <__sflush_r+0x18>
    d58c:	680b      	ldr	r3, [r1, #0]
    d58e:	600f      	str	r7, [r1, #0]
    d590:	1bdb      	subs	r3, r3, r7
    d592:	9301      	str	r3, [sp, #4]
    d594:	2300      	movs	r3, #0
    d596:	0792      	lsls	r2, r2, #30
    d598:	d100      	bne.n	d59c <__sflush_r+0xe4>
    d59a:	694b      	ldr	r3, [r1, #20]
    d59c:	60a3      	str	r3, [r4, #8]
    d59e:	9b01      	ldr	r3, [sp, #4]
    d5a0:	2b00      	cmp	r3, #0
    d5a2:	dc00      	bgt.n	d5a6 <__sflush_r+0xee>
    d5a4:	e794      	b.n	d4d0 <__sflush_r+0x18>
    d5a6:	9b01      	ldr	r3, [sp, #4]
    d5a8:	003a      	movs	r2, r7
    d5aa:	6a21      	ldr	r1, [r4, #32]
    d5ac:	0028      	movs	r0, r5
    d5ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    d5b0:	47b0      	blx	r6
    d5b2:	2800      	cmp	r0, #0
    d5b4:	dc03      	bgt.n	d5be <__sflush_r+0x106>
    d5b6:	2340      	movs	r3, #64	; 0x40
    d5b8:	89a2      	ldrh	r2, [r4, #12]
    d5ba:	4313      	orrs	r3, r2
    d5bc:	e7df      	b.n	d57e <__sflush_r+0xc6>
    d5be:	9b01      	ldr	r3, [sp, #4]
    d5c0:	183f      	adds	r7, r7, r0
    d5c2:	1a1b      	subs	r3, r3, r0
    d5c4:	9301      	str	r3, [sp, #4]
    d5c6:	e7ea      	b.n	d59e <__sflush_r+0xe6>
    d5c8:	20400001 	.word	0x20400001

0000d5cc <_fflush_r>:
    d5cc:	690b      	ldr	r3, [r1, #16]
    d5ce:	b570      	push	{r4, r5, r6, lr}
    d5d0:	0005      	movs	r5, r0
    d5d2:	000c      	movs	r4, r1
    d5d4:	2b00      	cmp	r3, #0
    d5d6:	d101      	bne.n	d5dc <_fflush_r+0x10>
    d5d8:	2000      	movs	r0, #0
    d5da:	bd70      	pop	{r4, r5, r6, pc}
    d5dc:	2800      	cmp	r0, #0
    d5de:	d004      	beq.n	d5ea <_fflush_r+0x1e>
    d5e0:	6983      	ldr	r3, [r0, #24]
    d5e2:	2b00      	cmp	r3, #0
    d5e4:	d101      	bne.n	d5ea <_fflush_r+0x1e>
    d5e6:	f000 f85f 	bl	d6a8 <__sinit>
    d5ea:	4b0b      	ldr	r3, [pc, #44]	; (d618 <_fflush_r+0x4c>)
    d5ec:	429c      	cmp	r4, r3
    d5ee:	d109      	bne.n	d604 <_fflush_r+0x38>
    d5f0:	686c      	ldr	r4, [r5, #4]
    d5f2:	220c      	movs	r2, #12
    d5f4:	5ea3      	ldrsh	r3, [r4, r2]
    d5f6:	2b00      	cmp	r3, #0
    d5f8:	d0ee      	beq.n	d5d8 <_fflush_r+0xc>
    d5fa:	0021      	movs	r1, r4
    d5fc:	0028      	movs	r0, r5
    d5fe:	f7ff ff5b 	bl	d4b8 <__sflush_r>
    d602:	e7ea      	b.n	d5da <_fflush_r+0xe>
    d604:	4b05      	ldr	r3, [pc, #20]	; (d61c <_fflush_r+0x50>)
    d606:	429c      	cmp	r4, r3
    d608:	d101      	bne.n	d60e <_fflush_r+0x42>
    d60a:	68ac      	ldr	r4, [r5, #8]
    d60c:	e7f1      	b.n	d5f2 <_fflush_r+0x26>
    d60e:	4b04      	ldr	r3, [pc, #16]	; (d620 <_fflush_r+0x54>)
    d610:	429c      	cmp	r4, r3
    d612:	d1ee      	bne.n	d5f2 <_fflush_r+0x26>
    d614:	68ec      	ldr	r4, [r5, #12]
    d616:	e7ec      	b.n	d5f2 <_fflush_r+0x26>
    d618:	0000fe7c 	.word	0x0000fe7c
    d61c:	0000fe9c 	.word	0x0000fe9c
    d620:	0000fe5c 	.word	0x0000fe5c

0000d624 <_cleanup_r>:
    d624:	b510      	push	{r4, lr}
    d626:	4902      	ldr	r1, [pc, #8]	; (d630 <_cleanup_r+0xc>)
    d628:	f000 f8b2 	bl	d790 <_fwalk_reent>
    d62c:	bd10      	pop	{r4, pc}
    d62e:	46c0      	nop			; (mov r8, r8)
    d630:	0000d5cd 	.word	0x0000d5cd

0000d634 <std.isra.0>:
    d634:	2300      	movs	r3, #0
    d636:	b510      	push	{r4, lr}
    d638:	0004      	movs	r4, r0
    d63a:	6003      	str	r3, [r0, #0]
    d63c:	6043      	str	r3, [r0, #4]
    d63e:	6083      	str	r3, [r0, #8]
    d640:	8181      	strh	r1, [r0, #12]
    d642:	6643      	str	r3, [r0, #100]	; 0x64
    d644:	81c2      	strh	r2, [r0, #14]
    d646:	6103      	str	r3, [r0, #16]
    d648:	6143      	str	r3, [r0, #20]
    d64a:	6183      	str	r3, [r0, #24]
    d64c:	0019      	movs	r1, r3
    d64e:	2208      	movs	r2, #8
    d650:	305c      	adds	r0, #92	; 0x5c
    d652:	f7ff fb38 	bl	ccc6 <memset>
    d656:	4b05      	ldr	r3, [pc, #20]	; (d66c <std.isra.0+0x38>)
    d658:	6224      	str	r4, [r4, #32]
    d65a:	6263      	str	r3, [r4, #36]	; 0x24
    d65c:	4b04      	ldr	r3, [pc, #16]	; (d670 <std.isra.0+0x3c>)
    d65e:	62a3      	str	r3, [r4, #40]	; 0x28
    d660:	4b04      	ldr	r3, [pc, #16]	; (d674 <std.isra.0+0x40>)
    d662:	62e3      	str	r3, [r4, #44]	; 0x2c
    d664:	4b04      	ldr	r3, [pc, #16]	; (d678 <std.isra.0+0x44>)
    d666:	6323      	str	r3, [r4, #48]	; 0x30
    d668:	bd10      	pop	{r4, pc}
    d66a:	46c0      	nop			; (mov r8, r8)
    d66c:	0000e19d 	.word	0x0000e19d
    d670:	0000e1c5 	.word	0x0000e1c5
    d674:	0000e1fd 	.word	0x0000e1fd
    d678:	0000e229 	.word	0x0000e229

0000d67c <__sfmoreglue>:
    d67c:	b570      	push	{r4, r5, r6, lr}
    d67e:	2568      	movs	r5, #104	; 0x68
    d680:	1e4a      	subs	r2, r1, #1
    d682:	4355      	muls	r5, r2
    d684:	000e      	movs	r6, r1
    d686:	0029      	movs	r1, r5
    d688:	3174      	adds	r1, #116	; 0x74
    d68a:	f7ff fb6f 	bl	cd6c <_malloc_r>
    d68e:	1e04      	subs	r4, r0, #0
    d690:	d008      	beq.n	d6a4 <__sfmoreglue+0x28>
    d692:	2100      	movs	r1, #0
    d694:	002a      	movs	r2, r5
    d696:	6001      	str	r1, [r0, #0]
    d698:	6046      	str	r6, [r0, #4]
    d69a:	300c      	adds	r0, #12
    d69c:	60a0      	str	r0, [r4, #8]
    d69e:	3268      	adds	r2, #104	; 0x68
    d6a0:	f7ff fb11 	bl	ccc6 <memset>
    d6a4:	0020      	movs	r0, r4
    d6a6:	bd70      	pop	{r4, r5, r6, pc}

0000d6a8 <__sinit>:
    d6a8:	6983      	ldr	r3, [r0, #24]
    d6aa:	b513      	push	{r0, r1, r4, lr}
    d6ac:	0004      	movs	r4, r0
    d6ae:	2b00      	cmp	r3, #0
    d6b0:	d128      	bne.n	d704 <__sinit+0x5c>
    d6b2:	6483      	str	r3, [r0, #72]	; 0x48
    d6b4:	64c3      	str	r3, [r0, #76]	; 0x4c
    d6b6:	6503      	str	r3, [r0, #80]	; 0x50
    d6b8:	4b13      	ldr	r3, [pc, #76]	; (d708 <__sinit+0x60>)
    d6ba:	4a14      	ldr	r2, [pc, #80]	; (d70c <__sinit+0x64>)
    d6bc:	681b      	ldr	r3, [r3, #0]
    d6be:	6282      	str	r2, [r0, #40]	; 0x28
    d6c0:	9301      	str	r3, [sp, #4]
    d6c2:	4298      	cmp	r0, r3
    d6c4:	d101      	bne.n	d6ca <__sinit+0x22>
    d6c6:	2301      	movs	r3, #1
    d6c8:	6183      	str	r3, [r0, #24]
    d6ca:	0020      	movs	r0, r4
    d6cc:	f000 f820 	bl	d710 <__sfp>
    d6d0:	6060      	str	r0, [r4, #4]
    d6d2:	0020      	movs	r0, r4
    d6d4:	f000 f81c 	bl	d710 <__sfp>
    d6d8:	60a0      	str	r0, [r4, #8]
    d6da:	0020      	movs	r0, r4
    d6dc:	f000 f818 	bl	d710 <__sfp>
    d6e0:	2200      	movs	r2, #0
    d6e2:	60e0      	str	r0, [r4, #12]
    d6e4:	2104      	movs	r1, #4
    d6e6:	6860      	ldr	r0, [r4, #4]
    d6e8:	f7ff ffa4 	bl	d634 <std.isra.0>
    d6ec:	2201      	movs	r2, #1
    d6ee:	2109      	movs	r1, #9
    d6f0:	68a0      	ldr	r0, [r4, #8]
    d6f2:	f7ff ff9f 	bl	d634 <std.isra.0>
    d6f6:	2202      	movs	r2, #2
    d6f8:	2112      	movs	r1, #18
    d6fa:	68e0      	ldr	r0, [r4, #12]
    d6fc:	f7ff ff9a 	bl	d634 <std.isra.0>
    d700:	2301      	movs	r3, #1
    d702:	61a3      	str	r3, [r4, #24]
    d704:	bd13      	pop	{r0, r1, r4, pc}
    d706:	46c0      	nop			; (mov r8, r8)
    d708:	0000fe58 	.word	0x0000fe58
    d70c:	0000d625 	.word	0x0000d625

0000d710 <__sfp>:
    d710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d712:	4b1e      	ldr	r3, [pc, #120]	; (d78c <__sfp+0x7c>)
    d714:	0007      	movs	r7, r0
    d716:	681e      	ldr	r6, [r3, #0]
    d718:	69b3      	ldr	r3, [r6, #24]
    d71a:	2b00      	cmp	r3, #0
    d71c:	d102      	bne.n	d724 <__sfp+0x14>
    d71e:	0030      	movs	r0, r6
    d720:	f7ff ffc2 	bl	d6a8 <__sinit>
    d724:	3648      	adds	r6, #72	; 0x48
    d726:	68b4      	ldr	r4, [r6, #8]
    d728:	6873      	ldr	r3, [r6, #4]
    d72a:	3b01      	subs	r3, #1
    d72c:	d504      	bpl.n	d738 <__sfp+0x28>
    d72e:	6833      	ldr	r3, [r6, #0]
    d730:	2b00      	cmp	r3, #0
    d732:	d007      	beq.n	d744 <__sfp+0x34>
    d734:	6836      	ldr	r6, [r6, #0]
    d736:	e7f6      	b.n	d726 <__sfp+0x16>
    d738:	220c      	movs	r2, #12
    d73a:	5ea5      	ldrsh	r5, [r4, r2]
    d73c:	2d00      	cmp	r5, #0
    d73e:	d00d      	beq.n	d75c <__sfp+0x4c>
    d740:	3468      	adds	r4, #104	; 0x68
    d742:	e7f2      	b.n	d72a <__sfp+0x1a>
    d744:	2104      	movs	r1, #4
    d746:	0038      	movs	r0, r7
    d748:	f7ff ff98 	bl	d67c <__sfmoreglue>
    d74c:	6030      	str	r0, [r6, #0]
    d74e:	2800      	cmp	r0, #0
    d750:	d1f0      	bne.n	d734 <__sfp+0x24>
    d752:	230c      	movs	r3, #12
    d754:	0004      	movs	r4, r0
    d756:	603b      	str	r3, [r7, #0]
    d758:	0020      	movs	r0, r4
    d75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d75c:	2301      	movs	r3, #1
    d75e:	0020      	movs	r0, r4
    d760:	425b      	negs	r3, r3
    d762:	81e3      	strh	r3, [r4, #14]
    d764:	3302      	adds	r3, #2
    d766:	81a3      	strh	r3, [r4, #12]
    d768:	6665      	str	r5, [r4, #100]	; 0x64
    d76a:	6025      	str	r5, [r4, #0]
    d76c:	60a5      	str	r5, [r4, #8]
    d76e:	6065      	str	r5, [r4, #4]
    d770:	6125      	str	r5, [r4, #16]
    d772:	6165      	str	r5, [r4, #20]
    d774:	61a5      	str	r5, [r4, #24]
    d776:	2208      	movs	r2, #8
    d778:	0029      	movs	r1, r5
    d77a:	305c      	adds	r0, #92	; 0x5c
    d77c:	f7ff faa3 	bl	ccc6 <memset>
    d780:	6365      	str	r5, [r4, #52]	; 0x34
    d782:	63a5      	str	r5, [r4, #56]	; 0x38
    d784:	64a5      	str	r5, [r4, #72]	; 0x48
    d786:	64e5      	str	r5, [r4, #76]	; 0x4c
    d788:	e7e6      	b.n	d758 <__sfp+0x48>
    d78a:	46c0      	nop			; (mov r8, r8)
    d78c:	0000fe58 	.word	0x0000fe58

0000d790 <_fwalk_reent>:
    d790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d792:	0004      	movs	r4, r0
    d794:	0007      	movs	r7, r0
    d796:	2600      	movs	r6, #0
    d798:	9101      	str	r1, [sp, #4]
    d79a:	3448      	adds	r4, #72	; 0x48
    d79c:	2c00      	cmp	r4, #0
    d79e:	d101      	bne.n	d7a4 <_fwalk_reent+0x14>
    d7a0:	0030      	movs	r0, r6
    d7a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d7a4:	6863      	ldr	r3, [r4, #4]
    d7a6:	68a5      	ldr	r5, [r4, #8]
    d7a8:	9300      	str	r3, [sp, #0]
    d7aa:	9b00      	ldr	r3, [sp, #0]
    d7ac:	3b01      	subs	r3, #1
    d7ae:	9300      	str	r3, [sp, #0]
    d7b0:	d501      	bpl.n	d7b6 <_fwalk_reent+0x26>
    d7b2:	6824      	ldr	r4, [r4, #0]
    d7b4:	e7f2      	b.n	d79c <_fwalk_reent+0xc>
    d7b6:	89ab      	ldrh	r3, [r5, #12]
    d7b8:	2b01      	cmp	r3, #1
    d7ba:	d908      	bls.n	d7ce <_fwalk_reent+0x3e>
    d7bc:	220e      	movs	r2, #14
    d7be:	5eab      	ldrsh	r3, [r5, r2]
    d7c0:	3301      	adds	r3, #1
    d7c2:	d004      	beq.n	d7ce <_fwalk_reent+0x3e>
    d7c4:	0029      	movs	r1, r5
    d7c6:	0038      	movs	r0, r7
    d7c8:	9b01      	ldr	r3, [sp, #4]
    d7ca:	4798      	blx	r3
    d7cc:	4306      	orrs	r6, r0
    d7ce:	3568      	adds	r5, #104	; 0x68
    d7d0:	e7eb      	b.n	d7aa <_fwalk_reent+0x1a>

0000d7d2 <__locale_ctype_ptr_l>:
    d7d2:	30ec      	adds	r0, #236	; 0xec
    d7d4:	6800      	ldr	r0, [r0, #0]
    d7d6:	4770      	bx	lr

0000d7d8 <__swhatbuf_r>:
    d7d8:	b570      	push	{r4, r5, r6, lr}
    d7da:	000e      	movs	r6, r1
    d7dc:	001d      	movs	r5, r3
    d7de:	230e      	movs	r3, #14
    d7e0:	5ec9      	ldrsh	r1, [r1, r3]
    d7e2:	b090      	sub	sp, #64	; 0x40
    d7e4:	0014      	movs	r4, r2
    d7e6:	2900      	cmp	r1, #0
    d7e8:	da07      	bge.n	d7fa <__swhatbuf_r+0x22>
    d7ea:	2300      	movs	r3, #0
    d7ec:	602b      	str	r3, [r5, #0]
    d7ee:	89b3      	ldrh	r3, [r6, #12]
    d7f0:	061b      	lsls	r3, r3, #24
    d7f2:	d411      	bmi.n	d818 <__swhatbuf_r+0x40>
    d7f4:	2380      	movs	r3, #128	; 0x80
    d7f6:	00db      	lsls	r3, r3, #3
    d7f8:	e00f      	b.n	d81a <__swhatbuf_r+0x42>
    d7fa:	aa01      	add	r2, sp, #4
    d7fc:	f000 fd4c 	bl	e298 <_fstat_r>
    d800:	2800      	cmp	r0, #0
    d802:	dbf2      	blt.n	d7ea <__swhatbuf_r+0x12>
    d804:	22f0      	movs	r2, #240	; 0xf0
    d806:	9b02      	ldr	r3, [sp, #8]
    d808:	0212      	lsls	r2, r2, #8
    d80a:	4013      	ands	r3, r2
    d80c:	4a05      	ldr	r2, [pc, #20]	; (d824 <__swhatbuf_r+0x4c>)
    d80e:	189b      	adds	r3, r3, r2
    d810:	425a      	negs	r2, r3
    d812:	4153      	adcs	r3, r2
    d814:	602b      	str	r3, [r5, #0]
    d816:	e7ed      	b.n	d7f4 <__swhatbuf_r+0x1c>
    d818:	2340      	movs	r3, #64	; 0x40
    d81a:	2000      	movs	r0, #0
    d81c:	6023      	str	r3, [r4, #0]
    d81e:	b010      	add	sp, #64	; 0x40
    d820:	bd70      	pop	{r4, r5, r6, pc}
    d822:	46c0      	nop			; (mov r8, r8)
    d824:	ffffe000 	.word	0xffffe000

0000d828 <__smakebuf_r>:
    d828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d82a:	2602      	movs	r6, #2
    d82c:	898b      	ldrh	r3, [r1, #12]
    d82e:	0005      	movs	r5, r0
    d830:	000c      	movs	r4, r1
    d832:	4233      	tst	r3, r6
    d834:	d006      	beq.n	d844 <__smakebuf_r+0x1c>
    d836:	0023      	movs	r3, r4
    d838:	3347      	adds	r3, #71	; 0x47
    d83a:	6023      	str	r3, [r4, #0]
    d83c:	6123      	str	r3, [r4, #16]
    d83e:	2301      	movs	r3, #1
    d840:	6163      	str	r3, [r4, #20]
    d842:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    d844:	ab01      	add	r3, sp, #4
    d846:	466a      	mov	r2, sp
    d848:	f7ff ffc6 	bl	d7d8 <__swhatbuf_r>
    d84c:	9900      	ldr	r1, [sp, #0]
    d84e:	0007      	movs	r7, r0
    d850:	0028      	movs	r0, r5
    d852:	f7ff fa8b 	bl	cd6c <_malloc_r>
    d856:	2800      	cmp	r0, #0
    d858:	d106      	bne.n	d868 <__smakebuf_r+0x40>
    d85a:	220c      	movs	r2, #12
    d85c:	5ea3      	ldrsh	r3, [r4, r2]
    d85e:	059a      	lsls	r2, r3, #22
    d860:	d4ef      	bmi.n	d842 <__smakebuf_r+0x1a>
    d862:	431e      	orrs	r6, r3
    d864:	81a6      	strh	r6, [r4, #12]
    d866:	e7e6      	b.n	d836 <__smakebuf_r+0xe>
    d868:	4b0d      	ldr	r3, [pc, #52]	; (d8a0 <__smakebuf_r+0x78>)
    d86a:	62ab      	str	r3, [r5, #40]	; 0x28
    d86c:	2380      	movs	r3, #128	; 0x80
    d86e:	89a2      	ldrh	r2, [r4, #12]
    d870:	6020      	str	r0, [r4, #0]
    d872:	4313      	orrs	r3, r2
    d874:	81a3      	strh	r3, [r4, #12]
    d876:	9b00      	ldr	r3, [sp, #0]
    d878:	6120      	str	r0, [r4, #16]
    d87a:	6163      	str	r3, [r4, #20]
    d87c:	9b01      	ldr	r3, [sp, #4]
    d87e:	2b00      	cmp	r3, #0
    d880:	d00a      	beq.n	d898 <__smakebuf_r+0x70>
    d882:	230e      	movs	r3, #14
    d884:	5ee1      	ldrsh	r1, [r4, r3]
    d886:	0028      	movs	r0, r5
    d888:	f000 fd18 	bl	e2bc <_isatty_r>
    d88c:	2800      	cmp	r0, #0
    d88e:	d003      	beq.n	d898 <__smakebuf_r+0x70>
    d890:	2301      	movs	r3, #1
    d892:	89a2      	ldrh	r2, [r4, #12]
    d894:	4313      	orrs	r3, r2
    d896:	81a3      	strh	r3, [r4, #12]
    d898:	89a0      	ldrh	r0, [r4, #12]
    d89a:	4338      	orrs	r0, r7
    d89c:	81a0      	strh	r0, [r4, #12]
    d89e:	e7d0      	b.n	d842 <__smakebuf_r+0x1a>
    d8a0:	0000d625 	.word	0x0000d625

0000d8a4 <__ascii_mbtowc>:
    d8a4:	b082      	sub	sp, #8
    d8a6:	2900      	cmp	r1, #0
    d8a8:	d100      	bne.n	d8ac <__ascii_mbtowc+0x8>
    d8aa:	a901      	add	r1, sp, #4
    d8ac:	1e10      	subs	r0, r2, #0
    d8ae:	d006      	beq.n	d8be <__ascii_mbtowc+0x1a>
    d8b0:	2b00      	cmp	r3, #0
    d8b2:	d006      	beq.n	d8c2 <__ascii_mbtowc+0x1e>
    d8b4:	7813      	ldrb	r3, [r2, #0]
    d8b6:	600b      	str	r3, [r1, #0]
    d8b8:	7810      	ldrb	r0, [r2, #0]
    d8ba:	1e43      	subs	r3, r0, #1
    d8bc:	4198      	sbcs	r0, r3
    d8be:	b002      	add	sp, #8
    d8c0:	4770      	bx	lr
    d8c2:	2002      	movs	r0, #2
    d8c4:	4240      	negs	r0, r0
    d8c6:	e7fa      	b.n	d8be <__ascii_mbtowc+0x1a>

0000d8c8 <__malloc_lock>:
    d8c8:	4770      	bx	lr

0000d8ca <__malloc_unlock>:
    d8ca:	4770      	bx	lr

0000d8cc <__ssputs_r>:
    d8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8ce:	688e      	ldr	r6, [r1, #8]
    d8d0:	b085      	sub	sp, #20
    d8d2:	0007      	movs	r7, r0
    d8d4:	000c      	movs	r4, r1
    d8d6:	9203      	str	r2, [sp, #12]
    d8d8:	9301      	str	r3, [sp, #4]
    d8da:	429e      	cmp	r6, r3
    d8dc:	d839      	bhi.n	d952 <__ssputs_r+0x86>
    d8de:	2390      	movs	r3, #144	; 0x90
    d8e0:	898a      	ldrh	r2, [r1, #12]
    d8e2:	00db      	lsls	r3, r3, #3
    d8e4:	421a      	tst	r2, r3
    d8e6:	d034      	beq.n	d952 <__ssputs_r+0x86>
    d8e8:	2503      	movs	r5, #3
    d8ea:	6909      	ldr	r1, [r1, #16]
    d8ec:	6823      	ldr	r3, [r4, #0]
    d8ee:	1a5b      	subs	r3, r3, r1
    d8f0:	9302      	str	r3, [sp, #8]
    d8f2:	6963      	ldr	r3, [r4, #20]
    d8f4:	9802      	ldr	r0, [sp, #8]
    d8f6:	435d      	muls	r5, r3
    d8f8:	0feb      	lsrs	r3, r5, #31
    d8fa:	195d      	adds	r5, r3, r5
    d8fc:	9b01      	ldr	r3, [sp, #4]
    d8fe:	106d      	asrs	r5, r5, #1
    d900:	3301      	adds	r3, #1
    d902:	181b      	adds	r3, r3, r0
    d904:	42ab      	cmp	r3, r5
    d906:	d900      	bls.n	d90a <__ssputs_r+0x3e>
    d908:	001d      	movs	r5, r3
    d90a:	0553      	lsls	r3, r2, #21
    d90c:	d532      	bpl.n	d974 <__ssputs_r+0xa8>
    d90e:	0029      	movs	r1, r5
    d910:	0038      	movs	r0, r7
    d912:	f7ff fa2b 	bl	cd6c <_malloc_r>
    d916:	1e06      	subs	r6, r0, #0
    d918:	d109      	bne.n	d92e <__ssputs_r+0x62>
    d91a:	230c      	movs	r3, #12
    d91c:	603b      	str	r3, [r7, #0]
    d91e:	2340      	movs	r3, #64	; 0x40
    d920:	2001      	movs	r0, #1
    d922:	89a2      	ldrh	r2, [r4, #12]
    d924:	4240      	negs	r0, r0
    d926:	4313      	orrs	r3, r2
    d928:	81a3      	strh	r3, [r4, #12]
    d92a:	b005      	add	sp, #20
    d92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d92e:	9a02      	ldr	r2, [sp, #8]
    d930:	6921      	ldr	r1, [r4, #16]
    d932:	f7ff f9ad 	bl	cc90 <memcpy>
    d936:	89a3      	ldrh	r3, [r4, #12]
    d938:	4a14      	ldr	r2, [pc, #80]	; (d98c <__ssputs_r+0xc0>)
    d93a:	401a      	ands	r2, r3
    d93c:	2380      	movs	r3, #128	; 0x80
    d93e:	4313      	orrs	r3, r2
    d940:	81a3      	strh	r3, [r4, #12]
    d942:	9b02      	ldr	r3, [sp, #8]
    d944:	6126      	str	r6, [r4, #16]
    d946:	18f6      	adds	r6, r6, r3
    d948:	6026      	str	r6, [r4, #0]
    d94a:	6165      	str	r5, [r4, #20]
    d94c:	9e01      	ldr	r6, [sp, #4]
    d94e:	1aed      	subs	r5, r5, r3
    d950:	60a5      	str	r5, [r4, #8]
    d952:	9b01      	ldr	r3, [sp, #4]
    d954:	42b3      	cmp	r3, r6
    d956:	d200      	bcs.n	d95a <__ssputs_r+0x8e>
    d958:	001e      	movs	r6, r3
    d95a:	0032      	movs	r2, r6
    d95c:	9903      	ldr	r1, [sp, #12]
    d95e:	6820      	ldr	r0, [r4, #0]
    d960:	f7ff f99f 	bl	cca2 <memmove>
    d964:	68a3      	ldr	r3, [r4, #8]
    d966:	2000      	movs	r0, #0
    d968:	1b9b      	subs	r3, r3, r6
    d96a:	60a3      	str	r3, [r4, #8]
    d96c:	6823      	ldr	r3, [r4, #0]
    d96e:	199e      	adds	r6, r3, r6
    d970:	6026      	str	r6, [r4, #0]
    d972:	e7da      	b.n	d92a <__ssputs_r+0x5e>
    d974:	002a      	movs	r2, r5
    d976:	0038      	movs	r0, r7
    d978:	f000 fcd1 	bl	e31e <_realloc_r>
    d97c:	1e06      	subs	r6, r0, #0
    d97e:	d1e0      	bne.n	d942 <__ssputs_r+0x76>
    d980:	6921      	ldr	r1, [r4, #16]
    d982:	0038      	movs	r0, r7
    d984:	f7ff f9a8 	bl	ccd8 <_free_r>
    d988:	e7c7      	b.n	d91a <__ssputs_r+0x4e>
    d98a:	46c0      	nop			; (mov r8, r8)
    d98c:	fffffb7f 	.word	0xfffffb7f

0000d990 <_svfiprintf_r>:
    d990:	b5f0      	push	{r4, r5, r6, r7, lr}
    d992:	b09f      	sub	sp, #124	; 0x7c
    d994:	9002      	str	r0, [sp, #8]
    d996:	9305      	str	r3, [sp, #20]
    d998:	898b      	ldrh	r3, [r1, #12]
    d99a:	000f      	movs	r7, r1
    d99c:	0016      	movs	r6, r2
    d99e:	061b      	lsls	r3, r3, #24
    d9a0:	d511      	bpl.n	d9c6 <_svfiprintf_r+0x36>
    d9a2:	690b      	ldr	r3, [r1, #16]
    d9a4:	2b00      	cmp	r3, #0
    d9a6:	d10e      	bne.n	d9c6 <_svfiprintf_r+0x36>
    d9a8:	2140      	movs	r1, #64	; 0x40
    d9aa:	f7ff f9df 	bl	cd6c <_malloc_r>
    d9ae:	6038      	str	r0, [r7, #0]
    d9b0:	6138      	str	r0, [r7, #16]
    d9b2:	2800      	cmp	r0, #0
    d9b4:	d105      	bne.n	d9c2 <_svfiprintf_r+0x32>
    d9b6:	230c      	movs	r3, #12
    d9b8:	9a02      	ldr	r2, [sp, #8]
    d9ba:	3801      	subs	r0, #1
    d9bc:	6013      	str	r3, [r2, #0]
    d9be:	b01f      	add	sp, #124	; 0x7c
    d9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d9c2:	2340      	movs	r3, #64	; 0x40
    d9c4:	617b      	str	r3, [r7, #20]
    d9c6:	2300      	movs	r3, #0
    d9c8:	ad06      	add	r5, sp, #24
    d9ca:	616b      	str	r3, [r5, #20]
    d9cc:	3320      	adds	r3, #32
    d9ce:	766b      	strb	r3, [r5, #25]
    d9d0:	3310      	adds	r3, #16
    d9d2:	76ab      	strb	r3, [r5, #26]
    d9d4:	0034      	movs	r4, r6
    d9d6:	7823      	ldrb	r3, [r4, #0]
    d9d8:	2b00      	cmp	r3, #0
    d9da:	d147      	bne.n	da6c <_svfiprintf_r+0xdc>
    d9dc:	1ba3      	subs	r3, r4, r6
    d9de:	9304      	str	r3, [sp, #16]
    d9e0:	d00d      	beq.n	d9fe <_svfiprintf_r+0x6e>
    d9e2:	1ba3      	subs	r3, r4, r6
    d9e4:	0032      	movs	r2, r6
    d9e6:	0039      	movs	r1, r7
    d9e8:	9802      	ldr	r0, [sp, #8]
    d9ea:	f7ff ff6f 	bl	d8cc <__ssputs_r>
    d9ee:	1c43      	adds	r3, r0, #1
    d9f0:	d100      	bne.n	d9f4 <_svfiprintf_r+0x64>
    d9f2:	e0b5      	b.n	db60 <_svfiprintf_r+0x1d0>
    d9f4:	696a      	ldr	r2, [r5, #20]
    d9f6:	9b04      	ldr	r3, [sp, #16]
    d9f8:	4694      	mov	ip, r2
    d9fa:	4463      	add	r3, ip
    d9fc:	616b      	str	r3, [r5, #20]
    d9fe:	7823      	ldrb	r3, [r4, #0]
    da00:	2b00      	cmp	r3, #0
    da02:	d100      	bne.n	da06 <_svfiprintf_r+0x76>
    da04:	e0ac      	b.n	db60 <_svfiprintf_r+0x1d0>
    da06:	2201      	movs	r2, #1
    da08:	2300      	movs	r3, #0
    da0a:	4252      	negs	r2, r2
    da0c:	606a      	str	r2, [r5, #4]
    da0e:	a902      	add	r1, sp, #8
    da10:	3254      	adds	r2, #84	; 0x54
    da12:	1852      	adds	r2, r2, r1
    da14:	3401      	adds	r4, #1
    da16:	602b      	str	r3, [r5, #0]
    da18:	60eb      	str	r3, [r5, #12]
    da1a:	60ab      	str	r3, [r5, #8]
    da1c:	7013      	strb	r3, [r2, #0]
    da1e:	65ab      	str	r3, [r5, #88]	; 0x58
    da20:	4e58      	ldr	r6, [pc, #352]	; (db84 <_svfiprintf_r+0x1f4>)
    da22:	2205      	movs	r2, #5
    da24:	7821      	ldrb	r1, [r4, #0]
    da26:	0030      	movs	r0, r6
    da28:	f000 fc6e 	bl	e308 <memchr>
    da2c:	1c62      	adds	r2, r4, #1
    da2e:	2800      	cmp	r0, #0
    da30:	d120      	bne.n	da74 <_svfiprintf_r+0xe4>
    da32:	6829      	ldr	r1, [r5, #0]
    da34:	06cb      	lsls	r3, r1, #27
    da36:	d504      	bpl.n	da42 <_svfiprintf_r+0xb2>
    da38:	2353      	movs	r3, #83	; 0x53
    da3a:	ae02      	add	r6, sp, #8
    da3c:	3020      	adds	r0, #32
    da3e:	199b      	adds	r3, r3, r6
    da40:	7018      	strb	r0, [r3, #0]
    da42:	070b      	lsls	r3, r1, #28
    da44:	d504      	bpl.n	da50 <_svfiprintf_r+0xc0>
    da46:	2353      	movs	r3, #83	; 0x53
    da48:	202b      	movs	r0, #43	; 0x2b
    da4a:	ae02      	add	r6, sp, #8
    da4c:	199b      	adds	r3, r3, r6
    da4e:	7018      	strb	r0, [r3, #0]
    da50:	7823      	ldrb	r3, [r4, #0]
    da52:	2b2a      	cmp	r3, #42	; 0x2a
    da54:	d016      	beq.n	da84 <_svfiprintf_r+0xf4>
    da56:	2000      	movs	r0, #0
    da58:	210a      	movs	r1, #10
    da5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da5c:	7822      	ldrb	r2, [r4, #0]
    da5e:	3a30      	subs	r2, #48	; 0x30
    da60:	2a09      	cmp	r2, #9
    da62:	d955      	bls.n	db10 <_svfiprintf_r+0x180>
    da64:	2800      	cmp	r0, #0
    da66:	d015      	beq.n	da94 <_svfiprintf_r+0x104>
    da68:	9309      	str	r3, [sp, #36]	; 0x24
    da6a:	e013      	b.n	da94 <_svfiprintf_r+0x104>
    da6c:	2b25      	cmp	r3, #37	; 0x25
    da6e:	d0b5      	beq.n	d9dc <_svfiprintf_r+0x4c>
    da70:	3401      	adds	r4, #1
    da72:	e7b0      	b.n	d9d6 <_svfiprintf_r+0x46>
    da74:	2301      	movs	r3, #1
    da76:	1b80      	subs	r0, r0, r6
    da78:	4083      	lsls	r3, r0
    da7a:	6829      	ldr	r1, [r5, #0]
    da7c:	0014      	movs	r4, r2
    da7e:	430b      	orrs	r3, r1
    da80:	602b      	str	r3, [r5, #0]
    da82:	e7cd      	b.n	da20 <_svfiprintf_r+0x90>
    da84:	9b05      	ldr	r3, [sp, #20]
    da86:	1d18      	adds	r0, r3, #4
    da88:	681b      	ldr	r3, [r3, #0]
    da8a:	9005      	str	r0, [sp, #20]
    da8c:	2b00      	cmp	r3, #0
    da8e:	db39      	blt.n	db04 <_svfiprintf_r+0x174>
    da90:	9309      	str	r3, [sp, #36]	; 0x24
    da92:	0014      	movs	r4, r2
    da94:	7823      	ldrb	r3, [r4, #0]
    da96:	2b2e      	cmp	r3, #46	; 0x2e
    da98:	d10b      	bne.n	dab2 <_svfiprintf_r+0x122>
    da9a:	7863      	ldrb	r3, [r4, #1]
    da9c:	1c62      	adds	r2, r4, #1
    da9e:	2b2a      	cmp	r3, #42	; 0x2a
    daa0:	d13e      	bne.n	db20 <_svfiprintf_r+0x190>
    daa2:	9b05      	ldr	r3, [sp, #20]
    daa4:	3402      	adds	r4, #2
    daa6:	1d1a      	adds	r2, r3, #4
    daa8:	681b      	ldr	r3, [r3, #0]
    daaa:	9205      	str	r2, [sp, #20]
    daac:	2b00      	cmp	r3, #0
    daae:	db34      	blt.n	db1a <_svfiprintf_r+0x18a>
    dab0:	9307      	str	r3, [sp, #28]
    dab2:	4e35      	ldr	r6, [pc, #212]	; (db88 <_svfiprintf_r+0x1f8>)
    dab4:	7821      	ldrb	r1, [r4, #0]
    dab6:	2203      	movs	r2, #3
    dab8:	0030      	movs	r0, r6
    daba:	f000 fc25 	bl	e308 <memchr>
    dabe:	2800      	cmp	r0, #0
    dac0:	d006      	beq.n	dad0 <_svfiprintf_r+0x140>
    dac2:	2340      	movs	r3, #64	; 0x40
    dac4:	1b80      	subs	r0, r0, r6
    dac6:	4083      	lsls	r3, r0
    dac8:	682a      	ldr	r2, [r5, #0]
    daca:	3401      	adds	r4, #1
    dacc:	4313      	orrs	r3, r2
    dace:	602b      	str	r3, [r5, #0]
    dad0:	7821      	ldrb	r1, [r4, #0]
    dad2:	2206      	movs	r2, #6
    dad4:	482d      	ldr	r0, [pc, #180]	; (db8c <_svfiprintf_r+0x1fc>)
    dad6:	1c66      	adds	r6, r4, #1
    dad8:	7629      	strb	r1, [r5, #24]
    dada:	f000 fc15 	bl	e308 <memchr>
    dade:	2800      	cmp	r0, #0
    dae0:	d046      	beq.n	db70 <_svfiprintf_r+0x1e0>
    dae2:	4b2b      	ldr	r3, [pc, #172]	; (db90 <_svfiprintf_r+0x200>)
    dae4:	2b00      	cmp	r3, #0
    dae6:	d12f      	bne.n	db48 <_svfiprintf_r+0x1b8>
    dae8:	6829      	ldr	r1, [r5, #0]
    daea:	9b05      	ldr	r3, [sp, #20]
    daec:	2207      	movs	r2, #7
    daee:	05c9      	lsls	r1, r1, #23
    daf0:	d528      	bpl.n	db44 <_svfiprintf_r+0x1b4>
    daf2:	189b      	adds	r3, r3, r2
    daf4:	4393      	bics	r3, r2
    daf6:	3308      	adds	r3, #8
    daf8:	9305      	str	r3, [sp, #20]
    dafa:	696b      	ldr	r3, [r5, #20]
    dafc:	9a03      	ldr	r2, [sp, #12]
    dafe:	189b      	adds	r3, r3, r2
    db00:	616b      	str	r3, [r5, #20]
    db02:	e767      	b.n	d9d4 <_svfiprintf_r+0x44>
    db04:	425b      	negs	r3, r3
    db06:	60eb      	str	r3, [r5, #12]
    db08:	2302      	movs	r3, #2
    db0a:	430b      	orrs	r3, r1
    db0c:	602b      	str	r3, [r5, #0]
    db0e:	e7c0      	b.n	da92 <_svfiprintf_r+0x102>
    db10:	434b      	muls	r3, r1
    db12:	3401      	adds	r4, #1
    db14:	189b      	adds	r3, r3, r2
    db16:	2001      	movs	r0, #1
    db18:	e7a0      	b.n	da5c <_svfiprintf_r+0xcc>
    db1a:	2301      	movs	r3, #1
    db1c:	425b      	negs	r3, r3
    db1e:	e7c7      	b.n	dab0 <_svfiprintf_r+0x120>
    db20:	2300      	movs	r3, #0
    db22:	0014      	movs	r4, r2
    db24:	200a      	movs	r0, #10
    db26:	001a      	movs	r2, r3
    db28:	606b      	str	r3, [r5, #4]
    db2a:	7821      	ldrb	r1, [r4, #0]
    db2c:	3930      	subs	r1, #48	; 0x30
    db2e:	2909      	cmp	r1, #9
    db30:	d903      	bls.n	db3a <_svfiprintf_r+0x1aa>
    db32:	2b00      	cmp	r3, #0
    db34:	d0bd      	beq.n	dab2 <_svfiprintf_r+0x122>
    db36:	9207      	str	r2, [sp, #28]
    db38:	e7bb      	b.n	dab2 <_svfiprintf_r+0x122>
    db3a:	4342      	muls	r2, r0
    db3c:	3401      	adds	r4, #1
    db3e:	1852      	adds	r2, r2, r1
    db40:	2301      	movs	r3, #1
    db42:	e7f2      	b.n	db2a <_svfiprintf_r+0x19a>
    db44:	3307      	adds	r3, #7
    db46:	e7d5      	b.n	daf4 <_svfiprintf_r+0x164>
    db48:	ab05      	add	r3, sp, #20
    db4a:	9300      	str	r3, [sp, #0]
    db4c:	003a      	movs	r2, r7
    db4e:	4b11      	ldr	r3, [pc, #68]	; (db94 <_svfiprintf_r+0x204>)
    db50:	0029      	movs	r1, r5
    db52:	9802      	ldr	r0, [sp, #8]
    db54:	e000      	b.n	db58 <_svfiprintf_r+0x1c8>
    db56:	bf00      	nop
    db58:	9003      	str	r0, [sp, #12]
    db5a:	9b03      	ldr	r3, [sp, #12]
    db5c:	3301      	adds	r3, #1
    db5e:	d1cc      	bne.n	dafa <_svfiprintf_r+0x16a>
    db60:	89bb      	ldrh	r3, [r7, #12]
    db62:	980b      	ldr	r0, [sp, #44]	; 0x2c
    db64:	065b      	lsls	r3, r3, #25
    db66:	d400      	bmi.n	db6a <_svfiprintf_r+0x1da>
    db68:	e729      	b.n	d9be <_svfiprintf_r+0x2e>
    db6a:	2001      	movs	r0, #1
    db6c:	4240      	negs	r0, r0
    db6e:	e726      	b.n	d9be <_svfiprintf_r+0x2e>
    db70:	ab05      	add	r3, sp, #20
    db72:	9300      	str	r3, [sp, #0]
    db74:	003a      	movs	r2, r7
    db76:	4b07      	ldr	r3, [pc, #28]	; (db94 <_svfiprintf_r+0x204>)
    db78:	0029      	movs	r1, r5
    db7a:	9802      	ldr	r0, [sp, #8]
    db7c:	f000 f9be 	bl	defc <_printf_i>
    db80:	e7ea      	b.n	db58 <_svfiprintf_r+0x1c8>
    db82:	46c0      	nop			; (mov r8, r8)
    db84:	0000fec6 	.word	0x0000fec6
    db88:	0000fecc 	.word	0x0000fecc
    db8c:	0000fed0 	.word	0x0000fed0
    db90:	00000000 	.word	0x00000000
    db94:	0000d8cd 	.word	0x0000d8cd

0000db98 <__sfputc_r>:
    db98:	6893      	ldr	r3, [r2, #8]
    db9a:	b510      	push	{r4, lr}
    db9c:	3b01      	subs	r3, #1
    db9e:	6093      	str	r3, [r2, #8]
    dba0:	2b00      	cmp	r3, #0
    dba2:	da05      	bge.n	dbb0 <__sfputc_r+0x18>
    dba4:	6994      	ldr	r4, [r2, #24]
    dba6:	42a3      	cmp	r3, r4
    dba8:	db08      	blt.n	dbbc <__sfputc_r+0x24>
    dbaa:	b2cb      	uxtb	r3, r1
    dbac:	2b0a      	cmp	r3, #10
    dbae:	d005      	beq.n	dbbc <__sfputc_r+0x24>
    dbb0:	6813      	ldr	r3, [r2, #0]
    dbb2:	1c58      	adds	r0, r3, #1
    dbb4:	6010      	str	r0, [r2, #0]
    dbb6:	7019      	strb	r1, [r3, #0]
    dbb8:	b2c8      	uxtb	r0, r1
    dbba:	bd10      	pop	{r4, pc}
    dbbc:	f7ff fbb0 	bl	d320 <__swbuf_r>
    dbc0:	e7fb      	b.n	dbba <__sfputc_r+0x22>

0000dbc2 <__sfputs_r>:
    dbc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbc4:	0006      	movs	r6, r0
    dbc6:	000f      	movs	r7, r1
    dbc8:	0014      	movs	r4, r2
    dbca:	18d5      	adds	r5, r2, r3
    dbcc:	42ac      	cmp	r4, r5
    dbce:	d101      	bne.n	dbd4 <__sfputs_r+0x12>
    dbd0:	2000      	movs	r0, #0
    dbd2:	e007      	b.n	dbe4 <__sfputs_r+0x22>
    dbd4:	7821      	ldrb	r1, [r4, #0]
    dbd6:	003a      	movs	r2, r7
    dbd8:	0030      	movs	r0, r6
    dbda:	f7ff ffdd 	bl	db98 <__sfputc_r>
    dbde:	3401      	adds	r4, #1
    dbe0:	1c43      	adds	r3, r0, #1
    dbe2:	d1f3      	bne.n	dbcc <__sfputs_r+0xa>
    dbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000dbe8 <_vfiprintf_r>:
    dbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbea:	b09f      	sub	sp, #124	; 0x7c
    dbec:	0006      	movs	r6, r0
    dbee:	000f      	movs	r7, r1
    dbf0:	0014      	movs	r4, r2
    dbf2:	9305      	str	r3, [sp, #20]
    dbf4:	2800      	cmp	r0, #0
    dbf6:	d004      	beq.n	dc02 <_vfiprintf_r+0x1a>
    dbf8:	6983      	ldr	r3, [r0, #24]
    dbfa:	2b00      	cmp	r3, #0
    dbfc:	d101      	bne.n	dc02 <_vfiprintf_r+0x1a>
    dbfe:	f7ff fd53 	bl	d6a8 <__sinit>
    dc02:	4b7f      	ldr	r3, [pc, #508]	; (de00 <_vfiprintf_r+0x218>)
    dc04:	429f      	cmp	r7, r3
    dc06:	d15c      	bne.n	dcc2 <_vfiprintf_r+0xda>
    dc08:	6877      	ldr	r7, [r6, #4]
    dc0a:	89bb      	ldrh	r3, [r7, #12]
    dc0c:	071b      	lsls	r3, r3, #28
    dc0e:	d562      	bpl.n	dcd6 <_vfiprintf_r+0xee>
    dc10:	693b      	ldr	r3, [r7, #16]
    dc12:	2b00      	cmp	r3, #0
    dc14:	d05f      	beq.n	dcd6 <_vfiprintf_r+0xee>
    dc16:	2300      	movs	r3, #0
    dc18:	ad06      	add	r5, sp, #24
    dc1a:	616b      	str	r3, [r5, #20]
    dc1c:	3320      	adds	r3, #32
    dc1e:	766b      	strb	r3, [r5, #25]
    dc20:	3310      	adds	r3, #16
    dc22:	76ab      	strb	r3, [r5, #26]
    dc24:	9402      	str	r4, [sp, #8]
    dc26:	9c02      	ldr	r4, [sp, #8]
    dc28:	7823      	ldrb	r3, [r4, #0]
    dc2a:	2b00      	cmp	r3, #0
    dc2c:	d15d      	bne.n	dcea <_vfiprintf_r+0x102>
    dc2e:	9b02      	ldr	r3, [sp, #8]
    dc30:	1ae3      	subs	r3, r4, r3
    dc32:	9304      	str	r3, [sp, #16]
    dc34:	d00d      	beq.n	dc52 <_vfiprintf_r+0x6a>
    dc36:	9b04      	ldr	r3, [sp, #16]
    dc38:	9a02      	ldr	r2, [sp, #8]
    dc3a:	0039      	movs	r1, r7
    dc3c:	0030      	movs	r0, r6
    dc3e:	f7ff ffc0 	bl	dbc2 <__sfputs_r>
    dc42:	1c43      	adds	r3, r0, #1
    dc44:	d100      	bne.n	dc48 <_vfiprintf_r+0x60>
    dc46:	e0cc      	b.n	dde2 <_vfiprintf_r+0x1fa>
    dc48:	696a      	ldr	r2, [r5, #20]
    dc4a:	9b04      	ldr	r3, [sp, #16]
    dc4c:	4694      	mov	ip, r2
    dc4e:	4463      	add	r3, ip
    dc50:	616b      	str	r3, [r5, #20]
    dc52:	7823      	ldrb	r3, [r4, #0]
    dc54:	2b00      	cmp	r3, #0
    dc56:	d100      	bne.n	dc5a <_vfiprintf_r+0x72>
    dc58:	e0c3      	b.n	dde2 <_vfiprintf_r+0x1fa>
    dc5a:	2201      	movs	r2, #1
    dc5c:	2300      	movs	r3, #0
    dc5e:	4252      	negs	r2, r2
    dc60:	606a      	str	r2, [r5, #4]
    dc62:	a902      	add	r1, sp, #8
    dc64:	3254      	adds	r2, #84	; 0x54
    dc66:	1852      	adds	r2, r2, r1
    dc68:	3401      	adds	r4, #1
    dc6a:	602b      	str	r3, [r5, #0]
    dc6c:	60eb      	str	r3, [r5, #12]
    dc6e:	60ab      	str	r3, [r5, #8]
    dc70:	7013      	strb	r3, [r2, #0]
    dc72:	65ab      	str	r3, [r5, #88]	; 0x58
    dc74:	7821      	ldrb	r1, [r4, #0]
    dc76:	2205      	movs	r2, #5
    dc78:	4862      	ldr	r0, [pc, #392]	; (de04 <_vfiprintf_r+0x21c>)
    dc7a:	f000 fb45 	bl	e308 <memchr>
    dc7e:	1c63      	adds	r3, r4, #1
    dc80:	469c      	mov	ip, r3
    dc82:	2800      	cmp	r0, #0
    dc84:	d135      	bne.n	dcf2 <_vfiprintf_r+0x10a>
    dc86:	6829      	ldr	r1, [r5, #0]
    dc88:	06cb      	lsls	r3, r1, #27
    dc8a:	d504      	bpl.n	dc96 <_vfiprintf_r+0xae>
    dc8c:	2353      	movs	r3, #83	; 0x53
    dc8e:	aa02      	add	r2, sp, #8
    dc90:	3020      	adds	r0, #32
    dc92:	189b      	adds	r3, r3, r2
    dc94:	7018      	strb	r0, [r3, #0]
    dc96:	070b      	lsls	r3, r1, #28
    dc98:	d504      	bpl.n	dca4 <_vfiprintf_r+0xbc>
    dc9a:	2353      	movs	r3, #83	; 0x53
    dc9c:	202b      	movs	r0, #43	; 0x2b
    dc9e:	aa02      	add	r2, sp, #8
    dca0:	189b      	adds	r3, r3, r2
    dca2:	7018      	strb	r0, [r3, #0]
    dca4:	7823      	ldrb	r3, [r4, #0]
    dca6:	2b2a      	cmp	r3, #42	; 0x2a
    dca8:	d02c      	beq.n	dd04 <_vfiprintf_r+0x11c>
    dcaa:	2000      	movs	r0, #0
    dcac:	210a      	movs	r1, #10
    dcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dcb0:	7822      	ldrb	r2, [r4, #0]
    dcb2:	3a30      	subs	r2, #48	; 0x30
    dcb4:	2a09      	cmp	r2, #9
    dcb6:	d800      	bhi.n	dcba <_vfiprintf_r+0xd2>
    dcb8:	e06b      	b.n	dd92 <_vfiprintf_r+0x1aa>
    dcba:	2800      	cmp	r0, #0
    dcbc:	d02a      	beq.n	dd14 <_vfiprintf_r+0x12c>
    dcbe:	9309      	str	r3, [sp, #36]	; 0x24
    dcc0:	e028      	b.n	dd14 <_vfiprintf_r+0x12c>
    dcc2:	4b51      	ldr	r3, [pc, #324]	; (de08 <_vfiprintf_r+0x220>)
    dcc4:	429f      	cmp	r7, r3
    dcc6:	d101      	bne.n	dccc <_vfiprintf_r+0xe4>
    dcc8:	68b7      	ldr	r7, [r6, #8]
    dcca:	e79e      	b.n	dc0a <_vfiprintf_r+0x22>
    dccc:	4b4f      	ldr	r3, [pc, #316]	; (de0c <_vfiprintf_r+0x224>)
    dcce:	429f      	cmp	r7, r3
    dcd0:	d19b      	bne.n	dc0a <_vfiprintf_r+0x22>
    dcd2:	68f7      	ldr	r7, [r6, #12]
    dcd4:	e799      	b.n	dc0a <_vfiprintf_r+0x22>
    dcd6:	0039      	movs	r1, r7
    dcd8:	0030      	movs	r0, r6
    dcda:	f7ff fb77 	bl	d3cc <__swsetup_r>
    dcde:	2800      	cmp	r0, #0
    dce0:	d099      	beq.n	dc16 <_vfiprintf_r+0x2e>
    dce2:	2001      	movs	r0, #1
    dce4:	4240      	negs	r0, r0
    dce6:	b01f      	add	sp, #124	; 0x7c
    dce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dcea:	2b25      	cmp	r3, #37	; 0x25
    dcec:	d09f      	beq.n	dc2e <_vfiprintf_r+0x46>
    dcee:	3401      	adds	r4, #1
    dcf0:	e79a      	b.n	dc28 <_vfiprintf_r+0x40>
    dcf2:	4b44      	ldr	r3, [pc, #272]	; (de04 <_vfiprintf_r+0x21c>)
    dcf4:	6829      	ldr	r1, [r5, #0]
    dcf6:	1ac0      	subs	r0, r0, r3
    dcf8:	2301      	movs	r3, #1
    dcfa:	4083      	lsls	r3, r0
    dcfc:	430b      	orrs	r3, r1
    dcfe:	602b      	str	r3, [r5, #0]
    dd00:	4664      	mov	r4, ip
    dd02:	e7b7      	b.n	dc74 <_vfiprintf_r+0x8c>
    dd04:	9b05      	ldr	r3, [sp, #20]
    dd06:	1d18      	adds	r0, r3, #4
    dd08:	681b      	ldr	r3, [r3, #0]
    dd0a:	9005      	str	r0, [sp, #20]
    dd0c:	2b00      	cmp	r3, #0
    dd0e:	db3a      	blt.n	dd86 <_vfiprintf_r+0x19e>
    dd10:	9309      	str	r3, [sp, #36]	; 0x24
    dd12:	4664      	mov	r4, ip
    dd14:	7823      	ldrb	r3, [r4, #0]
    dd16:	2b2e      	cmp	r3, #46	; 0x2e
    dd18:	d10b      	bne.n	dd32 <_vfiprintf_r+0x14a>
    dd1a:	7863      	ldrb	r3, [r4, #1]
    dd1c:	1c62      	adds	r2, r4, #1
    dd1e:	2b2a      	cmp	r3, #42	; 0x2a
    dd20:	d13f      	bne.n	dda2 <_vfiprintf_r+0x1ba>
    dd22:	9b05      	ldr	r3, [sp, #20]
    dd24:	3402      	adds	r4, #2
    dd26:	1d1a      	adds	r2, r3, #4
    dd28:	681b      	ldr	r3, [r3, #0]
    dd2a:	9205      	str	r2, [sp, #20]
    dd2c:	2b00      	cmp	r3, #0
    dd2e:	db35      	blt.n	dd9c <_vfiprintf_r+0x1b4>
    dd30:	9307      	str	r3, [sp, #28]
    dd32:	7821      	ldrb	r1, [r4, #0]
    dd34:	2203      	movs	r2, #3
    dd36:	4836      	ldr	r0, [pc, #216]	; (de10 <_vfiprintf_r+0x228>)
    dd38:	f000 fae6 	bl	e308 <memchr>
    dd3c:	2800      	cmp	r0, #0
    dd3e:	d007      	beq.n	dd50 <_vfiprintf_r+0x168>
    dd40:	4b33      	ldr	r3, [pc, #204]	; (de10 <_vfiprintf_r+0x228>)
    dd42:	682a      	ldr	r2, [r5, #0]
    dd44:	1ac0      	subs	r0, r0, r3
    dd46:	2340      	movs	r3, #64	; 0x40
    dd48:	4083      	lsls	r3, r0
    dd4a:	4313      	orrs	r3, r2
    dd4c:	602b      	str	r3, [r5, #0]
    dd4e:	3401      	adds	r4, #1
    dd50:	7821      	ldrb	r1, [r4, #0]
    dd52:	1c63      	adds	r3, r4, #1
    dd54:	2206      	movs	r2, #6
    dd56:	482f      	ldr	r0, [pc, #188]	; (de14 <_vfiprintf_r+0x22c>)
    dd58:	9302      	str	r3, [sp, #8]
    dd5a:	7629      	strb	r1, [r5, #24]
    dd5c:	f000 fad4 	bl	e308 <memchr>
    dd60:	2800      	cmp	r0, #0
    dd62:	d044      	beq.n	ddee <_vfiprintf_r+0x206>
    dd64:	4b2c      	ldr	r3, [pc, #176]	; (de18 <_vfiprintf_r+0x230>)
    dd66:	2b00      	cmp	r3, #0
    dd68:	d12f      	bne.n	ddca <_vfiprintf_r+0x1e2>
    dd6a:	6829      	ldr	r1, [r5, #0]
    dd6c:	9b05      	ldr	r3, [sp, #20]
    dd6e:	2207      	movs	r2, #7
    dd70:	05c9      	lsls	r1, r1, #23
    dd72:	d528      	bpl.n	ddc6 <_vfiprintf_r+0x1de>
    dd74:	189b      	adds	r3, r3, r2
    dd76:	4393      	bics	r3, r2
    dd78:	3308      	adds	r3, #8
    dd7a:	9305      	str	r3, [sp, #20]
    dd7c:	696b      	ldr	r3, [r5, #20]
    dd7e:	9a03      	ldr	r2, [sp, #12]
    dd80:	189b      	adds	r3, r3, r2
    dd82:	616b      	str	r3, [r5, #20]
    dd84:	e74f      	b.n	dc26 <_vfiprintf_r+0x3e>
    dd86:	425b      	negs	r3, r3
    dd88:	60eb      	str	r3, [r5, #12]
    dd8a:	2302      	movs	r3, #2
    dd8c:	430b      	orrs	r3, r1
    dd8e:	602b      	str	r3, [r5, #0]
    dd90:	e7bf      	b.n	dd12 <_vfiprintf_r+0x12a>
    dd92:	434b      	muls	r3, r1
    dd94:	3401      	adds	r4, #1
    dd96:	189b      	adds	r3, r3, r2
    dd98:	2001      	movs	r0, #1
    dd9a:	e789      	b.n	dcb0 <_vfiprintf_r+0xc8>
    dd9c:	2301      	movs	r3, #1
    dd9e:	425b      	negs	r3, r3
    dda0:	e7c6      	b.n	dd30 <_vfiprintf_r+0x148>
    dda2:	2300      	movs	r3, #0
    dda4:	0014      	movs	r4, r2
    dda6:	200a      	movs	r0, #10
    dda8:	001a      	movs	r2, r3
    ddaa:	606b      	str	r3, [r5, #4]
    ddac:	7821      	ldrb	r1, [r4, #0]
    ddae:	3930      	subs	r1, #48	; 0x30
    ddb0:	2909      	cmp	r1, #9
    ddb2:	d903      	bls.n	ddbc <_vfiprintf_r+0x1d4>
    ddb4:	2b00      	cmp	r3, #0
    ddb6:	d0bc      	beq.n	dd32 <_vfiprintf_r+0x14a>
    ddb8:	9207      	str	r2, [sp, #28]
    ddba:	e7ba      	b.n	dd32 <_vfiprintf_r+0x14a>
    ddbc:	4342      	muls	r2, r0
    ddbe:	3401      	adds	r4, #1
    ddc0:	1852      	adds	r2, r2, r1
    ddc2:	2301      	movs	r3, #1
    ddc4:	e7f2      	b.n	ddac <_vfiprintf_r+0x1c4>
    ddc6:	3307      	adds	r3, #7
    ddc8:	e7d5      	b.n	dd76 <_vfiprintf_r+0x18e>
    ddca:	ab05      	add	r3, sp, #20
    ddcc:	9300      	str	r3, [sp, #0]
    ddce:	003a      	movs	r2, r7
    ddd0:	4b12      	ldr	r3, [pc, #72]	; (de1c <_vfiprintf_r+0x234>)
    ddd2:	0029      	movs	r1, r5
    ddd4:	0030      	movs	r0, r6
    ddd6:	e000      	b.n	ddda <_vfiprintf_r+0x1f2>
    ddd8:	bf00      	nop
    ddda:	9003      	str	r0, [sp, #12]
    dddc:	9b03      	ldr	r3, [sp, #12]
    ddde:	3301      	adds	r3, #1
    dde0:	d1cc      	bne.n	dd7c <_vfiprintf_r+0x194>
    dde2:	89bb      	ldrh	r3, [r7, #12]
    dde4:	065b      	lsls	r3, r3, #25
    dde6:	d500      	bpl.n	ddea <_vfiprintf_r+0x202>
    dde8:	e77b      	b.n	dce2 <_vfiprintf_r+0xfa>
    ddea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ddec:	e77b      	b.n	dce6 <_vfiprintf_r+0xfe>
    ddee:	ab05      	add	r3, sp, #20
    ddf0:	9300      	str	r3, [sp, #0]
    ddf2:	003a      	movs	r2, r7
    ddf4:	4b09      	ldr	r3, [pc, #36]	; (de1c <_vfiprintf_r+0x234>)
    ddf6:	0029      	movs	r1, r5
    ddf8:	0030      	movs	r0, r6
    ddfa:	f000 f87f 	bl	defc <_printf_i>
    ddfe:	e7ec      	b.n	ddda <_vfiprintf_r+0x1f2>
    de00:	0000fe7c 	.word	0x0000fe7c
    de04:	0000fec6 	.word	0x0000fec6
    de08:	0000fe9c 	.word	0x0000fe9c
    de0c:	0000fe5c 	.word	0x0000fe5c
    de10:	0000fecc 	.word	0x0000fecc
    de14:	0000fed0 	.word	0x0000fed0
    de18:	00000000 	.word	0x00000000
    de1c:	0000dbc3 	.word	0x0000dbc3

0000de20 <_printf_common>:
    de20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    de22:	0015      	movs	r5, r2
    de24:	9301      	str	r3, [sp, #4]
    de26:	688a      	ldr	r2, [r1, #8]
    de28:	690b      	ldr	r3, [r1, #16]
    de2a:	9000      	str	r0, [sp, #0]
    de2c:	000c      	movs	r4, r1
    de2e:	4293      	cmp	r3, r2
    de30:	da00      	bge.n	de34 <_printf_common+0x14>
    de32:	0013      	movs	r3, r2
    de34:	0022      	movs	r2, r4
    de36:	602b      	str	r3, [r5, #0]
    de38:	3243      	adds	r2, #67	; 0x43
    de3a:	7812      	ldrb	r2, [r2, #0]
    de3c:	2a00      	cmp	r2, #0
    de3e:	d001      	beq.n	de44 <_printf_common+0x24>
    de40:	3301      	adds	r3, #1
    de42:	602b      	str	r3, [r5, #0]
    de44:	6823      	ldr	r3, [r4, #0]
    de46:	069b      	lsls	r3, r3, #26
    de48:	d502      	bpl.n	de50 <_printf_common+0x30>
    de4a:	682b      	ldr	r3, [r5, #0]
    de4c:	3302      	adds	r3, #2
    de4e:	602b      	str	r3, [r5, #0]
    de50:	2706      	movs	r7, #6
    de52:	6823      	ldr	r3, [r4, #0]
    de54:	401f      	ands	r7, r3
    de56:	d027      	beq.n	dea8 <_printf_common+0x88>
    de58:	0023      	movs	r3, r4
    de5a:	3343      	adds	r3, #67	; 0x43
    de5c:	781b      	ldrb	r3, [r3, #0]
    de5e:	1e5a      	subs	r2, r3, #1
    de60:	4193      	sbcs	r3, r2
    de62:	6822      	ldr	r2, [r4, #0]
    de64:	0692      	lsls	r2, r2, #26
    de66:	d430      	bmi.n	deca <_printf_common+0xaa>
    de68:	0022      	movs	r2, r4
    de6a:	9901      	ldr	r1, [sp, #4]
    de6c:	3243      	adds	r2, #67	; 0x43
    de6e:	9800      	ldr	r0, [sp, #0]
    de70:	9e08      	ldr	r6, [sp, #32]
    de72:	47b0      	blx	r6
    de74:	1c43      	adds	r3, r0, #1
    de76:	d025      	beq.n	dec4 <_printf_common+0xa4>
    de78:	2306      	movs	r3, #6
    de7a:	6820      	ldr	r0, [r4, #0]
    de7c:	682a      	ldr	r2, [r5, #0]
    de7e:	68e1      	ldr	r1, [r4, #12]
    de80:	4003      	ands	r3, r0
    de82:	2500      	movs	r5, #0
    de84:	2b04      	cmp	r3, #4
    de86:	d103      	bne.n	de90 <_printf_common+0x70>
    de88:	1a8d      	subs	r5, r1, r2
    de8a:	43eb      	mvns	r3, r5
    de8c:	17db      	asrs	r3, r3, #31
    de8e:	401d      	ands	r5, r3
    de90:	68a3      	ldr	r3, [r4, #8]
    de92:	6922      	ldr	r2, [r4, #16]
    de94:	4293      	cmp	r3, r2
    de96:	dd01      	ble.n	de9c <_printf_common+0x7c>
    de98:	1a9b      	subs	r3, r3, r2
    de9a:	18ed      	adds	r5, r5, r3
    de9c:	2700      	movs	r7, #0
    de9e:	42bd      	cmp	r5, r7
    dea0:	d120      	bne.n	dee4 <_printf_common+0xc4>
    dea2:	2000      	movs	r0, #0
    dea4:	e010      	b.n	dec8 <_printf_common+0xa8>
    dea6:	3701      	adds	r7, #1
    dea8:	68e3      	ldr	r3, [r4, #12]
    deaa:	682a      	ldr	r2, [r5, #0]
    deac:	1a9b      	subs	r3, r3, r2
    deae:	429f      	cmp	r7, r3
    deb0:	dad2      	bge.n	de58 <_printf_common+0x38>
    deb2:	0022      	movs	r2, r4
    deb4:	2301      	movs	r3, #1
    deb6:	3219      	adds	r2, #25
    deb8:	9901      	ldr	r1, [sp, #4]
    deba:	9800      	ldr	r0, [sp, #0]
    debc:	9e08      	ldr	r6, [sp, #32]
    debe:	47b0      	blx	r6
    dec0:	1c43      	adds	r3, r0, #1
    dec2:	d1f0      	bne.n	dea6 <_printf_common+0x86>
    dec4:	2001      	movs	r0, #1
    dec6:	4240      	negs	r0, r0
    dec8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    deca:	2030      	movs	r0, #48	; 0x30
    decc:	18e1      	adds	r1, r4, r3
    dece:	3143      	adds	r1, #67	; 0x43
    ded0:	7008      	strb	r0, [r1, #0]
    ded2:	0021      	movs	r1, r4
    ded4:	1c5a      	adds	r2, r3, #1
    ded6:	3145      	adds	r1, #69	; 0x45
    ded8:	7809      	ldrb	r1, [r1, #0]
    deda:	18a2      	adds	r2, r4, r2
    dedc:	3243      	adds	r2, #67	; 0x43
    dede:	3302      	adds	r3, #2
    dee0:	7011      	strb	r1, [r2, #0]
    dee2:	e7c1      	b.n	de68 <_printf_common+0x48>
    dee4:	0022      	movs	r2, r4
    dee6:	2301      	movs	r3, #1
    dee8:	321a      	adds	r2, #26
    deea:	9901      	ldr	r1, [sp, #4]
    deec:	9800      	ldr	r0, [sp, #0]
    deee:	9e08      	ldr	r6, [sp, #32]
    def0:	47b0      	blx	r6
    def2:	1c43      	adds	r3, r0, #1
    def4:	d0e6      	beq.n	dec4 <_printf_common+0xa4>
    def6:	3701      	adds	r7, #1
    def8:	e7d1      	b.n	de9e <_printf_common+0x7e>
	...

0000defc <_printf_i>:
    defc:	b5f0      	push	{r4, r5, r6, r7, lr}
    defe:	b08b      	sub	sp, #44	; 0x2c
    df00:	9206      	str	r2, [sp, #24]
    df02:	000a      	movs	r2, r1
    df04:	3243      	adds	r2, #67	; 0x43
    df06:	9307      	str	r3, [sp, #28]
    df08:	9005      	str	r0, [sp, #20]
    df0a:	9204      	str	r2, [sp, #16]
    df0c:	7e0a      	ldrb	r2, [r1, #24]
    df0e:	000c      	movs	r4, r1
    df10:	9b10      	ldr	r3, [sp, #64]	; 0x40
    df12:	2a6e      	cmp	r2, #110	; 0x6e
    df14:	d100      	bne.n	df18 <_printf_i+0x1c>
    df16:	e08f      	b.n	e038 <_printf_i+0x13c>
    df18:	d817      	bhi.n	df4a <_printf_i+0x4e>
    df1a:	2a63      	cmp	r2, #99	; 0x63
    df1c:	d02c      	beq.n	df78 <_printf_i+0x7c>
    df1e:	d808      	bhi.n	df32 <_printf_i+0x36>
    df20:	2a00      	cmp	r2, #0
    df22:	d100      	bne.n	df26 <_printf_i+0x2a>
    df24:	e099      	b.n	e05a <_printf_i+0x15e>
    df26:	2a58      	cmp	r2, #88	; 0x58
    df28:	d054      	beq.n	dfd4 <_printf_i+0xd8>
    df2a:	0026      	movs	r6, r4
    df2c:	3642      	adds	r6, #66	; 0x42
    df2e:	7032      	strb	r2, [r6, #0]
    df30:	e029      	b.n	df86 <_printf_i+0x8a>
    df32:	2a64      	cmp	r2, #100	; 0x64
    df34:	d001      	beq.n	df3a <_printf_i+0x3e>
    df36:	2a69      	cmp	r2, #105	; 0x69
    df38:	d1f7      	bne.n	df2a <_printf_i+0x2e>
    df3a:	6821      	ldr	r1, [r4, #0]
    df3c:	681a      	ldr	r2, [r3, #0]
    df3e:	0608      	lsls	r0, r1, #24
    df40:	d523      	bpl.n	df8a <_printf_i+0x8e>
    df42:	1d11      	adds	r1, r2, #4
    df44:	6019      	str	r1, [r3, #0]
    df46:	6815      	ldr	r5, [r2, #0]
    df48:	e025      	b.n	df96 <_printf_i+0x9a>
    df4a:	2a73      	cmp	r2, #115	; 0x73
    df4c:	d100      	bne.n	df50 <_printf_i+0x54>
    df4e:	e088      	b.n	e062 <_printf_i+0x166>
    df50:	d808      	bhi.n	df64 <_printf_i+0x68>
    df52:	2a6f      	cmp	r2, #111	; 0x6f
    df54:	d029      	beq.n	dfaa <_printf_i+0xae>
    df56:	2a70      	cmp	r2, #112	; 0x70
    df58:	d1e7      	bne.n	df2a <_printf_i+0x2e>
    df5a:	2220      	movs	r2, #32
    df5c:	6809      	ldr	r1, [r1, #0]
    df5e:	430a      	orrs	r2, r1
    df60:	6022      	str	r2, [r4, #0]
    df62:	e003      	b.n	df6c <_printf_i+0x70>
    df64:	2a75      	cmp	r2, #117	; 0x75
    df66:	d020      	beq.n	dfaa <_printf_i+0xae>
    df68:	2a78      	cmp	r2, #120	; 0x78
    df6a:	d1de      	bne.n	df2a <_printf_i+0x2e>
    df6c:	0022      	movs	r2, r4
    df6e:	2178      	movs	r1, #120	; 0x78
    df70:	3245      	adds	r2, #69	; 0x45
    df72:	7011      	strb	r1, [r2, #0]
    df74:	4a6c      	ldr	r2, [pc, #432]	; (e128 <_printf_i+0x22c>)
    df76:	e030      	b.n	dfda <_printf_i+0xde>
    df78:	000e      	movs	r6, r1
    df7a:	681a      	ldr	r2, [r3, #0]
    df7c:	3642      	adds	r6, #66	; 0x42
    df7e:	1d11      	adds	r1, r2, #4
    df80:	6019      	str	r1, [r3, #0]
    df82:	6813      	ldr	r3, [r2, #0]
    df84:	7033      	strb	r3, [r6, #0]
    df86:	2301      	movs	r3, #1
    df88:	e079      	b.n	e07e <_printf_i+0x182>
    df8a:	0649      	lsls	r1, r1, #25
    df8c:	d5d9      	bpl.n	df42 <_printf_i+0x46>
    df8e:	1d11      	adds	r1, r2, #4
    df90:	6019      	str	r1, [r3, #0]
    df92:	2300      	movs	r3, #0
    df94:	5ed5      	ldrsh	r5, [r2, r3]
    df96:	2d00      	cmp	r5, #0
    df98:	da03      	bge.n	dfa2 <_printf_i+0xa6>
    df9a:	232d      	movs	r3, #45	; 0x2d
    df9c:	9a04      	ldr	r2, [sp, #16]
    df9e:	426d      	negs	r5, r5
    dfa0:	7013      	strb	r3, [r2, #0]
    dfa2:	4b62      	ldr	r3, [pc, #392]	; (e12c <_printf_i+0x230>)
    dfa4:	270a      	movs	r7, #10
    dfa6:	9303      	str	r3, [sp, #12]
    dfa8:	e02f      	b.n	e00a <_printf_i+0x10e>
    dfaa:	6820      	ldr	r0, [r4, #0]
    dfac:	6819      	ldr	r1, [r3, #0]
    dfae:	0605      	lsls	r5, r0, #24
    dfb0:	d503      	bpl.n	dfba <_printf_i+0xbe>
    dfb2:	1d08      	adds	r0, r1, #4
    dfb4:	6018      	str	r0, [r3, #0]
    dfb6:	680d      	ldr	r5, [r1, #0]
    dfb8:	e005      	b.n	dfc6 <_printf_i+0xca>
    dfba:	0640      	lsls	r0, r0, #25
    dfbc:	d5f9      	bpl.n	dfb2 <_printf_i+0xb6>
    dfbe:	680d      	ldr	r5, [r1, #0]
    dfc0:	1d08      	adds	r0, r1, #4
    dfc2:	6018      	str	r0, [r3, #0]
    dfc4:	b2ad      	uxth	r5, r5
    dfc6:	4b59      	ldr	r3, [pc, #356]	; (e12c <_printf_i+0x230>)
    dfc8:	2708      	movs	r7, #8
    dfca:	9303      	str	r3, [sp, #12]
    dfcc:	2a6f      	cmp	r2, #111	; 0x6f
    dfce:	d018      	beq.n	e002 <_printf_i+0x106>
    dfd0:	270a      	movs	r7, #10
    dfd2:	e016      	b.n	e002 <_printf_i+0x106>
    dfd4:	3145      	adds	r1, #69	; 0x45
    dfd6:	700a      	strb	r2, [r1, #0]
    dfd8:	4a54      	ldr	r2, [pc, #336]	; (e12c <_printf_i+0x230>)
    dfda:	9203      	str	r2, [sp, #12]
    dfdc:	681a      	ldr	r2, [r3, #0]
    dfde:	6821      	ldr	r1, [r4, #0]
    dfe0:	1d10      	adds	r0, r2, #4
    dfe2:	6018      	str	r0, [r3, #0]
    dfe4:	6815      	ldr	r5, [r2, #0]
    dfe6:	0608      	lsls	r0, r1, #24
    dfe8:	d522      	bpl.n	e030 <_printf_i+0x134>
    dfea:	07cb      	lsls	r3, r1, #31
    dfec:	d502      	bpl.n	dff4 <_printf_i+0xf8>
    dfee:	2320      	movs	r3, #32
    dff0:	4319      	orrs	r1, r3
    dff2:	6021      	str	r1, [r4, #0]
    dff4:	2710      	movs	r7, #16
    dff6:	2d00      	cmp	r5, #0
    dff8:	d103      	bne.n	e002 <_printf_i+0x106>
    dffa:	2320      	movs	r3, #32
    dffc:	6822      	ldr	r2, [r4, #0]
    dffe:	439a      	bics	r2, r3
    e000:	6022      	str	r2, [r4, #0]
    e002:	0023      	movs	r3, r4
    e004:	2200      	movs	r2, #0
    e006:	3343      	adds	r3, #67	; 0x43
    e008:	701a      	strb	r2, [r3, #0]
    e00a:	6863      	ldr	r3, [r4, #4]
    e00c:	60a3      	str	r3, [r4, #8]
    e00e:	2b00      	cmp	r3, #0
    e010:	db5c      	blt.n	e0cc <_printf_i+0x1d0>
    e012:	2204      	movs	r2, #4
    e014:	6821      	ldr	r1, [r4, #0]
    e016:	4391      	bics	r1, r2
    e018:	6021      	str	r1, [r4, #0]
    e01a:	2d00      	cmp	r5, #0
    e01c:	d158      	bne.n	e0d0 <_printf_i+0x1d4>
    e01e:	9e04      	ldr	r6, [sp, #16]
    e020:	2b00      	cmp	r3, #0
    e022:	d064      	beq.n	e0ee <_printf_i+0x1f2>
    e024:	0026      	movs	r6, r4
    e026:	9b03      	ldr	r3, [sp, #12]
    e028:	3642      	adds	r6, #66	; 0x42
    e02a:	781b      	ldrb	r3, [r3, #0]
    e02c:	7033      	strb	r3, [r6, #0]
    e02e:	e05e      	b.n	e0ee <_printf_i+0x1f2>
    e030:	0648      	lsls	r0, r1, #25
    e032:	d5da      	bpl.n	dfea <_printf_i+0xee>
    e034:	b2ad      	uxth	r5, r5
    e036:	e7d8      	b.n	dfea <_printf_i+0xee>
    e038:	6809      	ldr	r1, [r1, #0]
    e03a:	681a      	ldr	r2, [r3, #0]
    e03c:	0608      	lsls	r0, r1, #24
    e03e:	d505      	bpl.n	e04c <_printf_i+0x150>
    e040:	1d11      	adds	r1, r2, #4
    e042:	6019      	str	r1, [r3, #0]
    e044:	6813      	ldr	r3, [r2, #0]
    e046:	6962      	ldr	r2, [r4, #20]
    e048:	601a      	str	r2, [r3, #0]
    e04a:	e006      	b.n	e05a <_printf_i+0x15e>
    e04c:	0649      	lsls	r1, r1, #25
    e04e:	d5f7      	bpl.n	e040 <_printf_i+0x144>
    e050:	1d11      	adds	r1, r2, #4
    e052:	6019      	str	r1, [r3, #0]
    e054:	6813      	ldr	r3, [r2, #0]
    e056:	8aa2      	ldrh	r2, [r4, #20]
    e058:	801a      	strh	r2, [r3, #0]
    e05a:	2300      	movs	r3, #0
    e05c:	9e04      	ldr	r6, [sp, #16]
    e05e:	6123      	str	r3, [r4, #16]
    e060:	e054      	b.n	e10c <_printf_i+0x210>
    e062:	681a      	ldr	r2, [r3, #0]
    e064:	1d11      	adds	r1, r2, #4
    e066:	6019      	str	r1, [r3, #0]
    e068:	6816      	ldr	r6, [r2, #0]
    e06a:	2100      	movs	r1, #0
    e06c:	6862      	ldr	r2, [r4, #4]
    e06e:	0030      	movs	r0, r6
    e070:	f000 f94a 	bl	e308 <memchr>
    e074:	2800      	cmp	r0, #0
    e076:	d001      	beq.n	e07c <_printf_i+0x180>
    e078:	1b80      	subs	r0, r0, r6
    e07a:	6060      	str	r0, [r4, #4]
    e07c:	6863      	ldr	r3, [r4, #4]
    e07e:	6123      	str	r3, [r4, #16]
    e080:	2300      	movs	r3, #0
    e082:	9a04      	ldr	r2, [sp, #16]
    e084:	7013      	strb	r3, [r2, #0]
    e086:	e041      	b.n	e10c <_printf_i+0x210>
    e088:	6923      	ldr	r3, [r4, #16]
    e08a:	0032      	movs	r2, r6
    e08c:	9906      	ldr	r1, [sp, #24]
    e08e:	9805      	ldr	r0, [sp, #20]
    e090:	9d07      	ldr	r5, [sp, #28]
    e092:	47a8      	blx	r5
    e094:	1c43      	adds	r3, r0, #1
    e096:	d043      	beq.n	e120 <_printf_i+0x224>
    e098:	6823      	ldr	r3, [r4, #0]
    e09a:	2500      	movs	r5, #0
    e09c:	079b      	lsls	r3, r3, #30
    e09e:	d40f      	bmi.n	e0c0 <_printf_i+0x1c4>
    e0a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e0a2:	68e0      	ldr	r0, [r4, #12]
    e0a4:	4298      	cmp	r0, r3
    e0a6:	da3d      	bge.n	e124 <_printf_i+0x228>
    e0a8:	0018      	movs	r0, r3
    e0aa:	e03b      	b.n	e124 <_printf_i+0x228>
    e0ac:	0022      	movs	r2, r4
    e0ae:	2301      	movs	r3, #1
    e0b0:	3219      	adds	r2, #25
    e0b2:	9906      	ldr	r1, [sp, #24]
    e0b4:	9805      	ldr	r0, [sp, #20]
    e0b6:	9e07      	ldr	r6, [sp, #28]
    e0b8:	47b0      	blx	r6
    e0ba:	1c43      	adds	r3, r0, #1
    e0bc:	d030      	beq.n	e120 <_printf_i+0x224>
    e0be:	3501      	adds	r5, #1
    e0c0:	68e3      	ldr	r3, [r4, #12]
    e0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e0c4:	1a9b      	subs	r3, r3, r2
    e0c6:	429d      	cmp	r5, r3
    e0c8:	dbf0      	blt.n	e0ac <_printf_i+0x1b0>
    e0ca:	e7e9      	b.n	e0a0 <_printf_i+0x1a4>
    e0cc:	2d00      	cmp	r5, #0
    e0ce:	d0a9      	beq.n	e024 <_printf_i+0x128>
    e0d0:	9e04      	ldr	r6, [sp, #16]
    e0d2:	0028      	movs	r0, r5
    e0d4:	0039      	movs	r1, r7
    e0d6:	f7fe fc83 	bl	c9e0 <__aeabi_uidivmod>
    e0da:	9b03      	ldr	r3, [sp, #12]
    e0dc:	3e01      	subs	r6, #1
    e0de:	5c5b      	ldrb	r3, [r3, r1]
    e0e0:	0028      	movs	r0, r5
    e0e2:	7033      	strb	r3, [r6, #0]
    e0e4:	0039      	movs	r1, r7
    e0e6:	f7fe fbf5 	bl	c8d4 <__udivsi3>
    e0ea:	1e05      	subs	r5, r0, #0
    e0ec:	d1f1      	bne.n	e0d2 <_printf_i+0x1d6>
    e0ee:	2f08      	cmp	r7, #8
    e0f0:	d109      	bne.n	e106 <_printf_i+0x20a>
    e0f2:	6823      	ldr	r3, [r4, #0]
    e0f4:	07db      	lsls	r3, r3, #31
    e0f6:	d506      	bpl.n	e106 <_printf_i+0x20a>
    e0f8:	6863      	ldr	r3, [r4, #4]
    e0fa:	6922      	ldr	r2, [r4, #16]
    e0fc:	4293      	cmp	r3, r2
    e0fe:	dc02      	bgt.n	e106 <_printf_i+0x20a>
    e100:	2330      	movs	r3, #48	; 0x30
    e102:	3e01      	subs	r6, #1
    e104:	7033      	strb	r3, [r6, #0]
    e106:	9b04      	ldr	r3, [sp, #16]
    e108:	1b9b      	subs	r3, r3, r6
    e10a:	6123      	str	r3, [r4, #16]
    e10c:	9b07      	ldr	r3, [sp, #28]
    e10e:	aa09      	add	r2, sp, #36	; 0x24
    e110:	9300      	str	r3, [sp, #0]
    e112:	0021      	movs	r1, r4
    e114:	9b06      	ldr	r3, [sp, #24]
    e116:	9805      	ldr	r0, [sp, #20]
    e118:	f7ff fe82 	bl	de20 <_printf_common>
    e11c:	1c43      	adds	r3, r0, #1
    e11e:	d1b3      	bne.n	e088 <_printf_i+0x18c>
    e120:	2001      	movs	r0, #1
    e122:	4240      	negs	r0, r0
    e124:	b00b      	add	sp, #44	; 0x2c
    e126:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e128:	0000fee8 	.word	0x0000fee8
    e12c:	0000fed7 	.word	0x0000fed7

0000e130 <_putc_r>:
    e130:	b570      	push	{r4, r5, r6, lr}
    e132:	0006      	movs	r6, r0
    e134:	000d      	movs	r5, r1
    e136:	0014      	movs	r4, r2
    e138:	2800      	cmp	r0, #0
    e13a:	d004      	beq.n	e146 <_putc_r+0x16>
    e13c:	6983      	ldr	r3, [r0, #24]
    e13e:	2b00      	cmp	r3, #0
    e140:	d101      	bne.n	e146 <_putc_r+0x16>
    e142:	f7ff fab1 	bl	d6a8 <__sinit>
    e146:	4b12      	ldr	r3, [pc, #72]	; (e190 <_putc_r+0x60>)
    e148:	429c      	cmp	r4, r3
    e14a:	d111      	bne.n	e170 <_putc_r+0x40>
    e14c:	6874      	ldr	r4, [r6, #4]
    e14e:	68a3      	ldr	r3, [r4, #8]
    e150:	3b01      	subs	r3, #1
    e152:	60a3      	str	r3, [r4, #8]
    e154:	2b00      	cmp	r3, #0
    e156:	da05      	bge.n	e164 <_putc_r+0x34>
    e158:	69a2      	ldr	r2, [r4, #24]
    e15a:	4293      	cmp	r3, r2
    e15c:	db12      	blt.n	e184 <_putc_r+0x54>
    e15e:	b2eb      	uxtb	r3, r5
    e160:	2b0a      	cmp	r3, #10
    e162:	d00f      	beq.n	e184 <_putc_r+0x54>
    e164:	6823      	ldr	r3, [r4, #0]
    e166:	b2e8      	uxtb	r0, r5
    e168:	1c5a      	adds	r2, r3, #1
    e16a:	6022      	str	r2, [r4, #0]
    e16c:	701d      	strb	r5, [r3, #0]
    e16e:	bd70      	pop	{r4, r5, r6, pc}
    e170:	4b08      	ldr	r3, [pc, #32]	; (e194 <_putc_r+0x64>)
    e172:	429c      	cmp	r4, r3
    e174:	d101      	bne.n	e17a <_putc_r+0x4a>
    e176:	68b4      	ldr	r4, [r6, #8]
    e178:	e7e9      	b.n	e14e <_putc_r+0x1e>
    e17a:	4b07      	ldr	r3, [pc, #28]	; (e198 <_putc_r+0x68>)
    e17c:	429c      	cmp	r4, r3
    e17e:	d1e6      	bne.n	e14e <_putc_r+0x1e>
    e180:	68f4      	ldr	r4, [r6, #12]
    e182:	e7e4      	b.n	e14e <_putc_r+0x1e>
    e184:	0022      	movs	r2, r4
    e186:	0029      	movs	r1, r5
    e188:	0030      	movs	r0, r6
    e18a:	f7ff f8c9 	bl	d320 <__swbuf_r>
    e18e:	e7ee      	b.n	e16e <_putc_r+0x3e>
    e190:	0000fe7c 	.word	0x0000fe7c
    e194:	0000fe9c 	.word	0x0000fe9c
    e198:	0000fe5c 	.word	0x0000fe5c

0000e19c <__sread>:
    e19c:	b570      	push	{r4, r5, r6, lr}
    e19e:	000c      	movs	r4, r1
    e1a0:	250e      	movs	r5, #14
    e1a2:	5f49      	ldrsh	r1, [r1, r5]
    e1a4:	f000 f8e2 	bl	e36c <_read_r>
    e1a8:	2800      	cmp	r0, #0
    e1aa:	db03      	blt.n	e1b4 <__sread+0x18>
    e1ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
    e1ae:	181b      	adds	r3, r3, r0
    e1b0:	6563      	str	r3, [r4, #84]	; 0x54
    e1b2:	bd70      	pop	{r4, r5, r6, pc}
    e1b4:	89a3      	ldrh	r3, [r4, #12]
    e1b6:	4a02      	ldr	r2, [pc, #8]	; (e1c0 <__sread+0x24>)
    e1b8:	4013      	ands	r3, r2
    e1ba:	81a3      	strh	r3, [r4, #12]
    e1bc:	e7f9      	b.n	e1b2 <__sread+0x16>
    e1be:	46c0      	nop			; (mov r8, r8)
    e1c0:	ffffefff 	.word	0xffffefff

0000e1c4 <__swrite>:
    e1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1c6:	001f      	movs	r7, r3
    e1c8:	898b      	ldrh	r3, [r1, #12]
    e1ca:	0005      	movs	r5, r0
    e1cc:	000c      	movs	r4, r1
    e1ce:	0016      	movs	r6, r2
    e1d0:	05db      	lsls	r3, r3, #23
    e1d2:	d505      	bpl.n	e1e0 <__swrite+0x1c>
    e1d4:	230e      	movs	r3, #14
    e1d6:	5ec9      	ldrsh	r1, [r1, r3]
    e1d8:	2200      	movs	r2, #0
    e1da:	2302      	movs	r3, #2
    e1dc:	f000 f880 	bl	e2e0 <_lseek_r>
    e1e0:	89a3      	ldrh	r3, [r4, #12]
    e1e2:	4a05      	ldr	r2, [pc, #20]	; (e1f8 <__swrite+0x34>)
    e1e4:	0028      	movs	r0, r5
    e1e6:	4013      	ands	r3, r2
    e1e8:	81a3      	strh	r3, [r4, #12]
    e1ea:	0032      	movs	r2, r6
    e1ec:	230e      	movs	r3, #14
    e1ee:	5ee1      	ldrsh	r1, [r4, r3]
    e1f0:	003b      	movs	r3, r7
    e1f2:	f000 f82b 	bl	e24c <_write_r>
    e1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e1f8:	ffffefff 	.word	0xffffefff

0000e1fc <__sseek>:
    e1fc:	b570      	push	{r4, r5, r6, lr}
    e1fe:	000c      	movs	r4, r1
    e200:	250e      	movs	r5, #14
    e202:	5f49      	ldrsh	r1, [r1, r5]
    e204:	f000 f86c 	bl	e2e0 <_lseek_r>
    e208:	89a3      	ldrh	r3, [r4, #12]
    e20a:	1c42      	adds	r2, r0, #1
    e20c:	d103      	bne.n	e216 <__sseek+0x1a>
    e20e:	4a05      	ldr	r2, [pc, #20]	; (e224 <__sseek+0x28>)
    e210:	4013      	ands	r3, r2
    e212:	81a3      	strh	r3, [r4, #12]
    e214:	bd70      	pop	{r4, r5, r6, pc}
    e216:	2280      	movs	r2, #128	; 0x80
    e218:	0152      	lsls	r2, r2, #5
    e21a:	4313      	orrs	r3, r2
    e21c:	81a3      	strh	r3, [r4, #12]
    e21e:	6560      	str	r0, [r4, #84]	; 0x54
    e220:	e7f8      	b.n	e214 <__sseek+0x18>
    e222:	46c0      	nop			; (mov r8, r8)
    e224:	ffffefff 	.word	0xffffefff

0000e228 <__sclose>:
    e228:	b510      	push	{r4, lr}
    e22a:	230e      	movs	r3, #14
    e22c:	5ec9      	ldrsh	r1, [r1, r3]
    e22e:	f000 f821 	bl	e274 <_close_r>
    e232:	bd10      	pop	{r4, pc}

0000e234 <__ascii_wctomb>:
    e234:	1e0b      	subs	r3, r1, #0
    e236:	d004      	beq.n	e242 <__ascii_wctomb+0xe>
    e238:	2aff      	cmp	r2, #255	; 0xff
    e23a:	d904      	bls.n	e246 <__ascii_wctomb+0x12>
    e23c:	238a      	movs	r3, #138	; 0x8a
    e23e:	6003      	str	r3, [r0, #0]
    e240:	3b8b      	subs	r3, #139	; 0x8b
    e242:	0018      	movs	r0, r3
    e244:	4770      	bx	lr
    e246:	700a      	strb	r2, [r1, #0]
    e248:	2301      	movs	r3, #1
    e24a:	e7fa      	b.n	e242 <__ascii_wctomb+0xe>

0000e24c <_write_r>:
    e24c:	b570      	push	{r4, r5, r6, lr}
    e24e:	0005      	movs	r5, r0
    e250:	0008      	movs	r0, r1
    e252:	0011      	movs	r1, r2
    e254:	2200      	movs	r2, #0
    e256:	4c06      	ldr	r4, [pc, #24]	; (e270 <_write_r+0x24>)
    e258:	6022      	str	r2, [r4, #0]
    e25a:	001a      	movs	r2, r3
    e25c:	f7fd f924 	bl	b4a8 <_write>
    e260:	1c43      	adds	r3, r0, #1
    e262:	d103      	bne.n	e26c <_write_r+0x20>
    e264:	6823      	ldr	r3, [r4, #0]
    e266:	2b00      	cmp	r3, #0
    e268:	d000      	beq.n	e26c <_write_r+0x20>
    e26a:	602b      	str	r3, [r5, #0]
    e26c:	bd70      	pop	{r4, r5, r6, pc}
    e26e:	46c0      	nop			; (mov r8, r8)
    e270:	200007f8 	.word	0x200007f8

0000e274 <_close_r>:
    e274:	2300      	movs	r3, #0
    e276:	b570      	push	{r4, r5, r6, lr}
    e278:	4c06      	ldr	r4, [pc, #24]	; (e294 <_close_r+0x20>)
    e27a:	0005      	movs	r5, r0
    e27c:	0008      	movs	r0, r1
    e27e:	6023      	str	r3, [r4, #0]
    e280:	f7fd f94c 	bl	b51c <_close>
    e284:	1c43      	adds	r3, r0, #1
    e286:	d103      	bne.n	e290 <_close_r+0x1c>
    e288:	6823      	ldr	r3, [r4, #0]
    e28a:	2b00      	cmp	r3, #0
    e28c:	d000      	beq.n	e290 <_close_r+0x1c>
    e28e:	602b      	str	r3, [r5, #0]
    e290:	bd70      	pop	{r4, r5, r6, pc}
    e292:	46c0      	nop			; (mov r8, r8)
    e294:	200007f8 	.word	0x200007f8

0000e298 <_fstat_r>:
    e298:	2300      	movs	r3, #0
    e29a:	b570      	push	{r4, r5, r6, lr}
    e29c:	4c06      	ldr	r4, [pc, #24]	; (e2b8 <_fstat_r+0x20>)
    e29e:	0005      	movs	r5, r0
    e2a0:	0008      	movs	r0, r1
    e2a2:	0011      	movs	r1, r2
    e2a4:	6023      	str	r3, [r4, #0]
    e2a6:	f7fd f93c 	bl	b522 <_fstat>
    e2aa:	1c43      	adds	r3, r0, #1
    e2ac:	d103      	bne.n	e2b6 <_fstat_r+0x1e>
    e2ae:	6823      	ldr	r3, [r4, #0]
    e2b0:	2b00      	cmp	r3, #0
    e2b2:	d000      	beq.n	e2b6 <_fstat_r+0x1e>
    e2b4:	602b      	str	r3, [r5, #0]
    e2b6:	bd70      	pop	{r4, r5, r6, pc}
    e2b8:	200007f8 	.word	0x200007f8

0000e2bc <_isatty_r>:
    e2bc:	2300      	movs	r3, #0
    e2be:	b570      	push	{r4, r5, r6, lr}
    e2c0:	4c06      	ldr	r4, [pc, #24]	; (e2dc <_isatty_r+0x20>)
    e2c2:	0005      	movs	r5, r0
    e2c4:	0008      	movs	r0, r1
    e2c6:	6023      	str	r3, [r4, #0]
    e2c8:	f7fd f930 	bl	b52c <_isatty>
    e2cc:	1c43      	adds	r3, r0, #1
    e2ce:	d103      	bne.n	e2d8 <_isatty_r+0x1c>
    e2d0:	6823      	ldr	r3, [r4, #0]
    e2d2:	2b00      	cmp	r3, #0
    e2d4:	d000      	beq.n	e2d8 <_isatty_r+0x1c>
    e2d6:	602b      	str	r3, [r5, #0]
    e2d8:	bd70      	pop	{r4, r5, r6, pc}
    e2da:	46c0      	nop			; (mov r8, r8)
    e2dc:	200007f8 	.word	0x200007f8

0000e2e0 <_lseek_r>:
    e2e0:	b570      	push	{r4, r5, r6, lr}
    e2e2:	0005      	movs	r5, r0
    e2e4:	0008      	movs	r0, r1
    e2e6:	0011      	movs	r1, r2
    e2e8:	2200      	movs	r2, #0
    e2ea:	4c06      	ldr	r4, [pc, #24]	; (e304 <_lseek_r+0x24>)
    e2ec:	6022      	str	r2, [r4, #0]
    e2ee:	001a      	movs	r2, r3
    e2f0:	f7fd f91e 	bl	b530 <_lseek>
    e2f4:	1c43      	adds	r3, r0, #1
    e2f6:	d103      	bne.n	e300 <_lseek_r+0x20>
    e2f8:	6823      	ldr	r3, [r4, #0]
    e2fa:	2b00      	cmp	r3, #0
    e2fc:	d000      	beq.n	e300 <_lseek_r+0x20>
    e2fe:	602b      	str	r3, [r5, #0]
    e300:	bd70      	pop	{r4, r5, r6, pc}
    e302:	46c0      	nop			; (mov r8, r8)
    e304:	200007f8 	.word	0x200007f8

0000e308 <memchr>:
    e308:	b2c9      	uxtb	r1, r1
    e30a:	1882      	adds	r2, r0, r2
    e30c:	4290      	cmp	r0, r2
    e30e:	d101      	bne.n	e314 <memchr+0xc>
    e310:	2000      	movs	r0, #0
    e312:	4770      	bx	lr
    e314:	7803      	ldrb	r3, [r0, #0]
    e316:	428b      	cmp	r3, r1
    e318:	d0fb      	beq.n	e312 <memchr+0xa>
    e31a:	3001      	adds	r0, #1
    e31c:	e7f6      	b.n	e30c <memchr+0x4>

0000e31e <_realloc_r>:
    e31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e320:	0007      	movs	r7, r0
    e322:	000d      	movs	r5, r1
    e324:	0016      	movs	r6, r2
    e326:	2900      	cmp	r1, #0
    e328:	d105      	bne.n	e336 <_realloc_r+0x18>
    e32a:	0011      	movs	r1, r2
    e32c:	f7fe fd1e 	bl	cd6c <_malloc_r>
    e330:	0004      	movs	r4, r0
    e332:	0020      	movs	r0, r4
    e334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e336:	2a00      	cmp	r2, #0
    e338:	d103      	bne.n	e342 <_realloc_r+0x24>
    e33a:	f7fe fccd 	bl	ccd8 <_free_r>
    e33e:	0034      	movs	r4, r6
    e340:	e7f7      	b.n	e332 <_realloc_r+0x14>
    e342:	f000 f827 	bl	e394 <_malloc_usable_size_r>
    e346:	002c      	movs	r4, r5
    e348:	4286      	cmp	r6, r0
    e34a:	d9f2      	bls.n	e332 <_realloc_r+0x14>
    e34c:	0031      	movs	r1, r6
    e34e:	0038      	movs	r0, r7
    e350:	f7fe fd0c 	bl	cd6c <_malloc_r>
    e354:	1e04      	subs	r4, r0, #0
    e356:	d0ec      	beq.n	e332 <_realloc_r+0x14>
    e358:	0029      	movs	r1, r5
    e35a:	0032      	movs	r2, r6
    e35c:	f7fe fc98 	bl	cc90 <memcpy>
    e360:	0029      	movs	r1, r5
    e362:	0038      	movs	r0, r7
    e364:	f7fe fcb8 	bl	ccd8 <_free_r>
    e368:	e7e3      	b.n	e332 <_realloc_r+0x14>
	...

0000e36c <_read_r>:
    e36c:	b570      	push	{r4, r5, r6, lr}
    e36e:	0005      	movs	r5, r0
    e370:	0008      	movs	r0, r1
    e372:	0011      	movs	r1, r2
    e374:	2200      	movs	r2, #0
    e376:	4c06      	ldr	r4, [pc, #24]	; (e390 <_read_r+0x24>)
    e378:	6022      	str	r2, [r4, #0]
    e37a:	001a      	movs	r2, r3
    e37c:	f7fd f872 	bl	b464 <_read>
    e380:	1c43      	adds	r3, r0, #1
    e382:	d103      	bne.n	e38c <_read_r+0x20>
    e384:	6823      	ldr	r3, [r4, #0]
    e386:	2b00      	cmp	r3, #0
    e388:	d000      	beq.n	e38c <_read_r+0x20>
    e38a:	602b      	str	r3, [r5, #0]
    e38c:	bd70      	pop	{r4, r5, r6, pc}
    e38e:	46c0      	nop			; (mov r8, r8)
    e390:	200007f8 	.word	0x200007f8

0000e394 <_malloc_usable_size_r>:
    e394:	1f0b      	subs	r3, r1, #4
    e396:	681b      	ldr	r3, [r3, #0]
    e398:	1f18      	subs	r0, r3, #4
    e39a:	2b00      	cmp	r3, #0
    e39c:	da01      	bge.n	e3a2 <_malloc_usable_size_r+0xe>
    e39e:	580b      	ldr	r3, [r1, r0]
    e3a0:	18c0      	adds	r0, r0, r3
    e3a2:	4770      	bx	lr
    e3a4:	000042fc 	.word	0x000042fc
    e3a8:	000042fc 	.word	0x000042fc
    e3ac:	000042d8 	.word	0x000042d8
    e3b0:	000042fc 	.word	0x000042fc
    e3b4:	000042d8 	.word	0x000042d8
    e3b8:	000042be 	.word	0x000042be
    e3bc:	000042be 	.word	0x000042be
    e3c0:	000042fc 	.word	0x000042fc
    e3c4:	000042fc 	.word	0x000042fc
    e3c8:	000042fc 	.word	0x000042fc
    e3cc:	000042fc 	.word	0x000042fc
    e3d0:	000042fc 	.word	0x000042fc
    e3d4:	000042fc 	.word	0x000042fc
    e3d8:	000042fc 	.word	0x000042fc
    e3dc:	000042fc 	.word	0x000042fc
    e3e0:	000042fc 	.word	0x000042fc
    e3e4:	000042fc 	.word	0x000042fc
    e3e8:	000042fc 	.word	0x000042fc
    e3ec:	000042fc 	.word	0x000042fc
    e3f0:	000042fc 	.word	0x000042fc
    e3f4:	000042fc 	.word	0x000042fc
    e3f8:	000042fc 	.word	0x000042fc
    e3fc:	000042fc 	.word	0x000042fc
    e400:	000042fc 	.word	0x000042fc
    e404:	000042fc 	.word	0x000042fc
    e408:	000042fc 	.word	0x000042fc
    e40c:	000042fc 	.word	0x000042fc
    e410:	000042fc 	.word	0x000042fc
    e414:	000042fc 	.word	0x000042fc
    e418:	000042fc 	.word	0x000042fc
    e41c:	000042fc 	.word	0x000042fc
    e420:	000042fc 	.word	0x000042fc
    e424:	000042fc 	.word	0x000042fc
    e428:	000042fc 	.word	0x000042fc
    e42c:	000042fc 	.word	0x000042fc
    e430:	000042fc 	.word	0x000042fc
    e434:	000042fc 	.word	0x000042fc
    e438:	000042fc 	.word	0x000042fc
    e43c:	000042fc 	.word	0x000042fc
    e440:	000042fc 	.word	0x000042fc
    e444:	000042fc 	.word	0x000042fc
    e448:	000042fc 	.word	0x000042fc
    e44c:	000042fc 	.word	0x000042fc
    e450:	000042fc 	.word	0x000042fc
    e454:	000042fc 	.word	0x000042fc
    e458:	000042fc 	.word	0x000042fc
    e45c:	000042fc 	.word	0x000042fc
    e460:	000042fc 	.word	0x000042fc
    e464:	000042fc 	.word	0x000042fc
    e468:	000042fc 	.word	0x000042fc
    e46c:	000042fc 	.word	0x000042fc
    e470:	000042fc 	.word	0x000042fc
    e474:	000042fc 	.word	0x000042fc
    e478:	000042fc 	.word	0x000042fc
    e47c:	000042fc 	.word	0x000042fc
    e480:	000042fc 	.word	0x000042fc
    e484:	000042fc 	.word	0x000042fc
    e488:	000042fc 	.word	0x000042fc
    e48c:	000042fc 	.word	0x000042fc
    e490:	000042fc 	.word	0x000042fc
    e494:	000042fc 	.word	0x000042fc
    e498:	000042fc 	.word	0x000042fc
    e49c:	000042fc 	.word	0x000042fc
    e4a0:	000042fc 	.word	0x000042fc
    e4a4:	000042d8 	.word	0x000042d8
    e4a8:	000042d8 	.word	0x000042d8
    e4ac:	000042e0 	.word	0x000042e0
    e4b0:	000042e0 	.word	0x000042e0
    e4b4:	000042e0 	.word	0x000042e0
    e4b8:	000042e0 	.word	0x000042e0
    e4bc:	35325441 	.word	0x35325441
    e4c0:	73205844 	.word	0x73205844
    e4c4:	6f746365 	.word	0x6f746365
    e4c8:	72652072 	.word	0x72652072
    e4cc:	20657361 	.word	0x20657361
    e4d0:	6c696166 	.word	0x6c696166
    e4d4:	000d6465 	.word	0x000d6465
    e4d8:	35325441 	.word	0x35325441
    e4dc:	63205844 	.word	0x63205844
    e4e0:	6b636568 	.word	0x6b636568
    e4e4:	65727020 	.word	0x65727020
    e4e8:	636e6573 	.word	0x636e6573
    e4ec:	61662065 	.word	0x61662065
    e4f0:	64656c69 	.word	0x64656c69
    e4f4:	0000000d 	.word	0x0000000d
    e4f8:	35325441 	.word	0x35325441
    e4fc:	73205844 	.word	0x73205844
    e500:	7065656c 	.word	0x7065656c
    e504:	69616620 	.word	0x69616620
    e508:	0d64656c 	.word	0x0d64656c
    e50c:	00000000 	.word	0x00000000
    e510:	6d726946 	.word	0x6d726946
    e514:	65726177 	.word	0x65726177
    e518:	00000000 	.word	0x00000000
    e51c:	6174654d 	.word	0x6174654d
    e520:	61746164 	.word	0x61746164
    e524:	00000000 	.word	0x00000000
    e528:	726f7473 	.word	0x726f7473
    e52c:	69665f65 	.word	0x69665f65
    e530:	705f656c 	.word	0x705f656c
    e534:	656b6361 	.word	0x656b6361
    e538:	65203a74 	.word	0x65203a74
    e53c:	7974706d 	.word	0x7974706d
    e540:	74616420 	.word	0x74616420
    e544:	000d2e61 	.word	0x000d2e61
    e548:	35325441 	.word	0x35325441
    e54c:	77205844 	.word	0x77205844
    e550:	65746972 	.word	0x65746972
    e554:	69616620 	.word	0x69616620
    e558:	2064656c 	.word	0x2064656c
    e55c:	70207461 	.word	0x70207461
    e560:	20656761 	.word	0x20656761
    e564:	6c257830 	.word	0x6c257830
    e568:	000a0d78 	.word	0x000a0d78
    e56c:	726f7473 	.word	0x726f7473
    e570:	69665f65 	.word	0x69665f65
    e574:	705f656c 	.word	0x705f656c
    e578:	656b6361 	.word	0x656b6361
    e57c:	63203a74 	.word	0x63203a74
    e580:	6b6e7568 	.word	0x6b6e7568
    e584:	7a697320 	.word	0x7a697320
    e588:	6c255b65 	.word	0x6c255b65
    e58c:	202c5d75 	.word	0x202c5d75
    e590:	65636572 	.word	0x65636572
    e594:	64657669 	.word	0x64657669
    e598:	756c255b 	.word	0x756c255b
    e59c:	66202c5d 	.word	0x66202c5d
    e5a0:	20656c69 	.word	0x20656c69
    e5a4:	657a6973 	.word	0x657a6973
    e5a8:	756c255b 	.word	0x756c255b
    e5ac:	000a0d5d 	.word	0x000a0d5d
    e5b0:	726f7473 	.word	0x726f7473
    e5b4:	69665f65 	.word	0x69665f65
    e5b8:	705f656c 	.word	0x705f656c
    e5bc:	656b6361 	.word	0x656b6361
    e5c0:	25203a74 	.word	0x25203a74
    e5c4:	69662073 	.word	0x69662073
    e5c8:	7320656c 	.word	0x7320656c
    e5cc:	64657661 	.word	0x64657661
    e5d0:	63757320 	.word	0x63757320
    e5d4:	73736563 	.word	0x73736563
    e5d8:	6c6c7566 	.word	0x6c6c7566
    e5dc:	0a0d2e79 	.word	0x0a0d2e79
    e5e0:	00000000 	.word	0x00000000
    e5e4:	726f7473 	.word	0x726f7473
    e5e8:	69665f65 	.word	0x69665f65
    e5ec:	705f656c 	.word	0x705f656c
    e5f0:	656b6361 	.word	0x656b6361
    e5f4:	63203a74 	.word	0x63203a74
    e5f8:	6b6e7568 	.word	0x6b6e7568
    e5fc:	7a697320 	.word	0x7a697320
    e600:	6c255b65 	.word	0x6c255b65
    e604:	202c5d75 	.word	0x202c5d75
    e608:	65636572 	.word	0x65636572
    e60c:	64657669 	.word	0x64657669
    e610:	756c255b 	.word	0x756c255b
    e614:	66202c5d 	.word	0x66202c5d
    e618:	20656c69 	.word	0x20656c69
    e61c:	657a6973 	.word	0x657a6973
    e620:	756c255b 	.word	0x756c255b
    e624:	00000d5d 	.word	0x00000d5d
    e628:	35325441 	.word	0x35325441
    e62c:	77205844 	.word	0x77205844
    e630:	20656b61 	.word	0x20656b61
    e634:	6c696166 	.word	0x6c696166
    e638:	000d6465 	.word	0x000d6465
    e63c:	696c6176 	.word	0x696c6176
    e640:	00000064 	.word	0x00000064
    e644:	61766e69 	.word	0x61766e69
    e648:	0064696c 	.word	0x0064696c
    e64c:	73616c46 	.word	0x73616c46
    e650:	74732068 	.word	0x74732068
    e654:	73757461 	.word	0x73757461
    e658:	6d49203a 	.word	0x6d49203a
    e65c:	31656761 	.word	0x31656761
    e660:	7325203a 	.word	0x7325203a
    e664:	6d49202c 	.word	0x6d49202c
    e668:	32656761 	.word	0x32656761
    e66c:	7325203a 	.word	0x7325203a
    e670:	00000a0d 	.word	0x00000a0d
    e674:	35325441 	.word	0x35325441
    e678:	72205844 	.word	0x72205844
    e67c:	20646165 	.word	0x20646165
    e680:	6c696166 	.word	0x6c696166
    e684:	61206465 	.word	0x61206465
    e688:	61702074 	.word	0x61702074
    e68c:	30206567 	.word	0x30206567
    e690:	0d782578 	.word	0x0d782578
    e694:	0000000a 	.word	0x0000000a
    e698:	72727543 	.word	0x72727543
    e69c:	20746e65 	.word	0x20746e65
    e6a0:	67616d49 	.word	0x67616d49
    e6a4:	65562065 	.word	0x65562065
    e6a8:	6f697372 	.word	0x6f697372
    e6ac:	25203a6e 	.word	0x25203a6e
    e6b0:	53202c64 	.word	0x53202c64
    e6b4:	3a657a69 	.word	0x3a657a69
    e6b8:	2c642520 	.word	0x2c642520
    e6bc:	65684320 	.word	0x65684320
    e6c0:	75736b63 	.word	0x75736b63
    e6c4:	25203a6d 	.word	0x25203a6d
    e6c8:	0a0d786c 	.word	0x0a0d786c
    e6cc:	00000000 	.word	0x00000000
    e6d0:	35325441 	.word	0x35325441
    e6d4:	72205844 	.word	0x72205844
    e6d8:	20646165 	.word	0x20646165
    e6dc:	6c696166 	.word	0x6c696166
    e6e0:	61206465 	.word	0x61206465
    e6e4:	61702074 	.word	0x61702074
    e6e8:	30206567 	.word	0x30206567
    e6ec:	786c2578 	.word	0x786c2578
    e6f0:	00000a0d 	.word	0x00000a0d
    e6f4:	2077654e 	.word	0x2077654e
    e6f8:	67616d69 	.word	0x67616d69
    e6fc:	68432065 	.word	0x68432065
    e700:	736b6365 	.word	0x736b6365
    e704:	203a6d75 	.word	0x203a6d75
    e708:	0d786c25 	.word	0x0d786c25
    e70c:	0000000a 	.word	0x0000000a
    e710:	35325441 	.word	0x35325441
    e714:	73205844 	.word	0x73205844
    e718:	6f746365 	.word	0x6f746365
    e71c:	72702072 	.word	0x72702072
    e720:	6365746f 	.word	0x6365746f
    e724:	61662074 	.word	0x61662074
    e728:	64656c69 	.word	0x64656c69
    e72c:	0000000d 	.word	0x0000000d
    e730:	35325441 	.word	0x35325441
    e734:	73205844 	.word	0x73205844
    e738:	6f746365 	.word	0x6f746365
    e73c:	72652072 	.word	0x72652072
    e740:	20657361 	.word	0x20657361
    e744:	6c696166 	.word	0x6c696166
    e748:	61206465 	.word	0x61206465
    e74c:	61702074 	.word	0x61702074
    e750:	30206567 	.word	0x30206567
    e754:	0d782578 	.word	0x0d782578
    e758:	0000000a 	.word	0x0000000a
    e75c:	35325441 	.word	0x35325441
    e760:	77205844 	.word	0x77205844
    e764:	65746972 	.word	0x65746972
    e768:	69616620 	.word	0x69616620
    e76c:	2064656c 	.word	0x2064656c
    e770:	70207461 	.word	0x70207461
    e774:	20656761 	.word	0x20656761
    e778:	78257830 	.word	0x78257830
    e77c:	00000a0d 	.word	0x00000a0d
    e780:	00004f9c 	.word	0x00004f9c
    e784:	00004fa4 	.word	0x00004fa4
    e788:	00004fb2 	.word	0x00004fb2
    e78c:	00004fea 	.word	0x00004fea
    e790:	00005000 	.word	0x00005000
    e794:	76726553 	.word	0x76726553
    e798:	49207265 	.word	0x49207265
    e79c:	6567616d 	.word	0x6567616d
    e7a0:	72655620 	.word	0x72655620
    e7a4:	6e6f6973 	.word	0x6e6f6973
    e7a8:	6425203a 	.word	0x6425203a
    e7ac:	6953202c 	.word	0x6953202c
    e7b0:	203a657a 	.word	0x203a657a
    e7b4:	202c6425 	.word	0x202c6425
    e7b8:	63656843 	.word	0x63656843
    e7bc:	6d75736b 	.word	0x6d75736b
    e7c0:	6c25203a 	.word	0x6c25203a
    e7c4:	000a0d78 	.word	0x000a0d78
    e7c8:	70657250 	.word	0x70657250
    e7cc:	6e697261 	.word	0x6e697261
    e7d0:	69662067 	.word	0x69662067
    e7d4:	61776d72 	.word	0x61776d72
    e7d8:	75206572 	.word	0x75206572
    e7dc:	61726770 	.word	0x61726770
    e7e0:	000d6564 	.word	0x000d6564
    e7e4:	6b72614d 	.word	0x6b72614d
    e7e8:	69206465 	.word	0x69206465
    e7ec:	6567616d 	.word	0x6567616d
    e7f0:	6e692031 	.word	0x6e692031
    e7f4:	696c6176 	.word	0x696c6176
    e7f8:	00000d64 	.word	0x00000d64
    e7fc:	61647055 	.word	0x61647055
    e800:	20646574 	.word	0x20646574
    e804:	2077656e 	.word	0x2077656e
    e808:	6174656d 	.word	0x6174656d
    e80c:	61746164 	.word	0x61746164
    e810:	0000000d 	.word	0x0000000d
    e814:	63656843 	.word	0x63656843
    e818:	6d75736b 	.word	0x6d75736b
    e81c:	72657620 	.word	0x72657620
    e820:	65696669 	.word	0x65696669
    e824:	00000d64 	.word	0x00000d64
    e828:	6b72614d 	.word	0x6b72614d
    e82c:	69206465 	.word	0x69206465
    e830:	6567616d 	.word	0x6567616d
    e834:	61762031 	.word	0x61762031
    e838:	0d64696c 	.word	0x0d64696c
    e83c:	00000000 	.word	0x00000000
    e840:	74737953 	.word	0x74737953
    e844:	72206d65 	.word	0x72206d65
    e848:	6f6f6265 	.word	0x6f6f6265
    e84c:	0d212174 	.word	0x0d212174
    e850:	00000000 	.word	0x00000000
    e854:	63656843 	.word	0x63656843
    e858:	6d75736b 	.word	0x6d75736b
    e85c:	73696d20 	.word	0x73696d20
    e860:	6374616d 	.word	0x6374616d
    e864:	49202e68 	.word	0x49202e68
    e868:	6567616d 	.word	0x6567616d
    e86c:	74732031 	.word	0x74732031
    e870:	206c6c69 	.word	0x206c6c69
    e874:	61766e69 	.word	0x61766e69
    e878:	0d64696c 	.word	0x0d64696c
    e87c:	00000000 	.word	0x00000000
    e880:	76726553 	.word	0x76726553
    e884:	69207265 	.word	0x69207265
    e888:	6567616d 	.word	0x6567616d
    e88c:	72657620 	.word	0x72657620
    e890:	6e6f6973 	.word	0x6e6f6973
    e894:	6d617320 	.word	0x6d617320
    e898:	726f2065 	.word	0x726f2065
    e89c:	646c6f20 	.word	0x646c6f20
    e8a0:	202e7265 	.word	0x202e7265
    e8a4:	6f6e6749 	.word	0x6f6e6749
    e8a8:	676e6972 	.word	0x676e6972
    e8ac:	0000000d 	.word	0x0000000d
    e8b0:	6e69616d 	.word	0x6e69616d
    e8b4:	6f63203a 	.word	0x6f63203a
    e8b8:	63656e6e 	.word	0x63656e6e
    e8bc:	676e6974 	.word	0x676e6974
    e8c0:	206f7420 	.word	0x206f7420
    e8c4:	69466957 	.word	0x69466957
    e8c8:	20504120 	.word	0x20504120
    e8cc:	2e2e7325 	.word	0x2e2e7325
    e8d0:	000a0d2e 	.word	0x000a0d2e
    e8d4:	6e776f44 	.word	0x6e776f44
    e8d8:	64616f6c 	.word	0x64616f6c
    e8dc:	20676e69 	.word	0x20676e69
    e8e0:	0a0d7325 	.word	0x0a0d7325
    e8e4:	00000000 	.word	0x00000000
    e8e8:	6e776f44 	.word	0x6e776f44
    e8ec:	64616f6c 	.word	0x64616f6c
    e8f0:	20676e69 	.word	0x20676e69
    e8f4:	64207325 	.word	0x64207325
    e8f8:	2e656e6f 	.word	0x2e656e6f
    e8fc:	00000a0d 	.word	0x00000a0d
    e900:	70747468 	.word	0x70747468
    e904:	696c635f 	.word	0x696c635f
    e908:	5f746e65 	.word	0x5f746e65
    e90c:	6c6c6163 	.word	0x6c6c6163
    e910:	6b636162 	.word	0x6b636162
    e914:	5448203a 	.word	0x5448203a
    e918:	63205054 	.word	0x63205054
    e91c:	6e65696c 	.word	0x6e65696c
    e920:	6f732074 	.word	0x6f732074
    e924:	74656b63 	.word	0x74656b63
    e928:	6e6f6320 	.word	0x6e6f6320
    e92c:	7463656e 	.word	0x7463656e
    e930:	0d2e6465 	.word	0x0d2e6465
    e934:	00000000 	.word	0x00000000
    e938:	70747468 	.word	0x70747468
    e93c:	696c635f 	.word	0x696c635f
    e940:	5f746e65 	.word	0x5f746e65
    e944:	6c6c6163 	.word	0x6c6c6163
    e948:	6b636162 	.word	0x6b636162
    e94c:	6572203a 	.word	0x6572203a
    e950:	73657571 	.word	0x73657571
    e954:	6f632074 	.word	0x6f632074
    e958:	656c706d 	.word	0x656c706d
    e95c:	2e646574 	.word	0x2e646574
    e960:	0000000d 	.word	0x0000000d
    e964:	70747468 	.word	0x70747468
    e968:	696c635f 	.word	0x696c635f
    e96c:	5f746e65 	.word	0x5f746e65
    e970:	6c6c6163 	.word	0x6c6c6163
    e974:	6b636162 	.word	0x6b636162
    e978:	6572203a 	.word	0x6572203a
    e97c:	76696563 	.word	0x76696563
    e980:	72206465 	.word	0x72206465
    e984:	6f707365 	.word	0x6f707365
    e988:	2065736e 	.word	0x2065736e
    e98c:	64207525 	.word	0x64207525
    e990:	20617461 	.word	0x20617461
    e994:	657a6973 	.word	0x657a6973
    e998:	0d752520 	.word	0x0d752520
    e99c:	0000000a 	.word	0x0000000a
    e9a0:	70747468 	.word	0x70747468
    e9a4:	696c635f 	.word	0x696c635f
    e9a8:	5f746e65 	.word	0x5f746e65
    e9ac:	6c6c6163 	.word	0x6c6c6163
    e9b0:	6b636162 	.word	0x6b636162
    e9b4:	6964203a 	.word	0x6964203a
    e9b8:	6e6f6373 	.word	0x6e6f6373
    e9bc:	7463656e 	.word	0x7463656e
    e9c0:	206e6f69 	.word	0x206e6f69
    e9c4:	73616572 	.word	0x73616572
    e9c8:	253a6e6f 	.word	0x253a6e6f
    e9cc:	000a0d64 	.word	0x000a0d64
    e9d0:	666e6f63 	.word	0x666e6f63
    e9d4:	72756769 	.word	0x72756769
    e9d8:	74685f65 	.word	0x74685f65
    e9dc:	635f7074 	.word	0x635f7074
    e9e0:	6e65696c 	.word	0x6e65696c
    e9e4:	48203a74 	.word	0x48203a74
    e9e8:	20505454 	.word	0x20505454
    e9ec:	65696c63 	.word	0x65696c63
    e9f0:	6920746e 	.word	0x6920746e
    e9f4:	6974696e 	.word	0x6974696e
    e9f8:	7a696c61 	.word	0x7a696c61
    e9fc:	6f697461 	.word	0x6f697461
    ea00:	6166206e 	.word	0x6166206e
    ea04:	64656c69 	.word	0x64656c69
    ea08:	72282021 	.word	0x72282021
    ea0c:	25207365 	.word	0x25207365
    ea10:	0a0d2964 	.word	0x0a0d2964
    ea14:	00000000 	.word	0x00000000
    ea18:	6e69616d 	.word	0x6e69616d
    ea1c:	326d203a 	.word	0x326d203a
    ea20:	69775f6d 	.word	0x69775f6d
    ea24:	695f6966 	.word	0x695f6966
    ea28:	2074696e 	.word	0x2074696e
    ea2c:	6c6c6163 	.word	0x6c6c6163
    ea30:	72726520 	.word	0x72726520
    ea34:	2021726f 	.word	0x2021726f
    ea38:	73657228 	.word	0x73657228
    ea3c:	29642520 	.word	0x29642520
    ea40:	00000a0d 	.word	0x00000a0d
    ea44:	6f736572 	.word	0x6f736572
    ea48:	5f65766c 	.word	0x5f65766c
    ea4c:	203a6263 	.word	0x203a6263
    ea50:	49207325 	.word	0x49207325
    ea54:	64612050 	.word	0x64612050
    ea58:	73657264 	.word	0x73657264
    ea5c:	73692073 	.word	0x73692073
    ea60:	2e642520 	.word	0x2e642520
    ea64:	252e6425 	.word	0x252e6425
    ea68:	64252e64 	.word	0x64252e64
    ea6c:	0a0d0a0d 	.word	0x0a0d0a0d
    ea70:	00000000 	.word	0x00000000
    ea74:	72617473 	.word	0x72617473
    ea78:	6f645f74 	.word	0x6f645f74
    ea7c:	6f6c6e77 	.word	0x6f6c6e77
    ea80:	203a6461 	.word	0x203a6461
    ea84:	73616c46 	.word	0x73616c46
    ea88:	74732068 	.word	0x74732068
    ea8c:	6761726f 	.word	0x6761726f
    ea90:	6f6e2065 	.word	0x6f6e2065
    ea94:	65722074 	.word	0x65722074
    ea98:	2e796461 	.word	0x2e796461
    ea9c:	0000000d 	.word	0x0000000d
    eaa0:	72617473 	.word	0x72617473
    eaa4:	6f645f74 	.word	0x6f645f74
    eaa8:	6f6c6e77 	.word	0x6f6c6e77
    eaac:	203a6461 	.word	0x203a6461
    eab0:	462d6957 	.word	0x462d6957
    eab4:	73692069 	.word	0x73692069
    eab8:	746f6e20 	.word	0x746f6e20
    eabc:	6e6f6320 	.word	0x6e6f6320
    eac0:	7463656e 	.word	0x7463656e
    eac4:	0d2e6465 	.word	0x0d2e6465
    eac8:	00000000 	.word	0x00000000
    eacc:	72617473 	.word	0x72617473
    ead0:	6f645f74 	.word	0x6f645f74
    ead4:	6f6c6e77 	.word	0x6f6c6e77
    ead8:	203a6461 	.word	0x203a6461
    eadc:	75716572 	.word	0x75716572
    eae0:	20747365 	.word	0x20747365
    eae4:	73207369 	.word	0x73207369
    eae8:	20746e65 	.word	0x20746e65
    eaec:	65726c61 	.word	0x65726c61
    eaf0:	2e796461 	.word	0x2e796461
    eaf4:	0000000d 	.word	0x0000000d
    eaf8:	72617473 	.word	0x72617473
    eafc:	6f645f74 	.word	0x6f645f74
    eb00:	6f6c6e77 	.word	0x6f6c6e77
    eb04:	203a6461 	.word	0x203a6461
    eb08:	6e6e7572 	.word	0x6e6e7572
    eb0c:	20676e69 	.word	0x20676e69
    eb10:	6e776f64 	.word	0x6e776f64
    eb14:	64616f6c 	.word	0x64616f6c
    eb18:	726c6120 	.word	0x726c6120
    eb1c:	79646165 	.word	0x79646165
    eb20:	00000d2e 	.word	0x00000d2e
    eb24:	72617473 	.word	0x72617473
    eb28:	6f645f74 	.word	0x6f645f74
    eb2c:	6f6c6e77 	.word	0x6f6c6e77
    eb30:	203a6461 	.word	0x203a6461
    eb34:	646e6573 	.word	0x646e6573
    eb38:	20676e69 	.word	0x20676e69
    eb3c:	50545448 	.word	0x50545448
    eb40:	71657220 	.word	0x71657220
    eb44:	74736575 	.word	0x74736575
    eb48:	0d2e2e2e 	.word	0x0d2e2e2e
    eb4c:	00000000 	.word	0x00000000
    eb50:	70747468 	.word	0x70747468
    eb54:	2f2f3a73 	.word	0x2f2f3a73
    eb58:	2e777777 	.word	0x2e777777
    eb5c:	73616573 	.word	0x73616573
    eb60:	6570752e 	.word	0x6570752e
    eb64:	652e6e6e 	.word	0x652e6e6e
    eb68:	7e2f7564 	.word	0x7e2f7564
    eb6c:	61726562 	.word	0x61726562
    eb70:	53452f61 	.word	0x53452f61
    eb74:	36313545 	.word	0x36313545
    eb78:	7465525f 	.word	0x7465525f
    eb7c:	735f6f72 	.word	0x735f6f72
    eb80:	5f746174 	.word	0x5f746174
    eb84:	6d726946 	.word	0x6d726946
    eb88:	65726177 	.word	0x65726177
    eb8c:	6e69622e 	.word	0x6e69622e
    eb90:	00000000 	.word	0x00000000
    eb94:	70747468 	.word	0x70747468
    eb98:	2f2f3a73 	.word	0x2f2f3a73
    eb9c:	2e777777 	.word	0x2e777777
    eba0:	73616573 	.word	0x73616573
    eba4:	6570752e 	.word	0x6570752e
    eba8:	652e6e6e 	.word	0x652e6e6e
    ebac:	7e2f7564 	.word	0x7e2f7564
    ebb0:	61726562 	.word	0x61726562
    ebb4:	53452f61 	.word	0x53452f61
    ebb8:	36313545 	.word	0x36313545
    ebbc:	7465525f 	.word	0x7465525f
    ebc0:	735f6f72 	.word	0x735f6f72
    ebc4:	5f746174 	.word	0x5f746174
    ebc8:	6d726946 	.word	0x6d726946
    ebcc:	65726177 	.word	0x65726177
    ebd0:	6e69622e 	.word	0x6e69622e
    ebd4:	74656d2e 	.word	0x74656d2e
    ebd8:	74616461 	.word	0x74616461
    ebdc:	00000061 	.word	0x00000061
    ebe0:	67616d49 	.word	0x67616d49
    ebe4:	656d2065 	.word	0x656d2065
    ebe8:	61646174 	.word	0x61646174
    ebec:	69206174 	.word	0x69206174
    ebf0:	7277206e 	.word	0x7277206e
    ebf4:	20676e6f 	.word	0x20676e6f
    ebf8:	6d726f66 	.word	0x6d726f66
    ebfc:	000d7461 	.word	0x000d7461
    ec00:	69666977 	.word	0x69666977
    ec04:	3a62635f 	.word	0x3a62635f
    ec08:	4d324d20 	.word	0x4d324d20
    ec0c:	4649575f 	.word	0x4649575f
    ec10:	4f435f49 	.word	0x4f435f49
    ec14:	43454e4e 	.word	0x43454e4e
    ec18:	0d444554 	.word	0x0d444554
    ec1c:	00000000 	.word	0x00000000
    ec20:	69666977 	.word	0x69666977
    ec24:	3a62635f 	.word	0x3a62635f
    ec28:	4d324d20 	.word	0x4d324d20
    ec2c:	4649575f 	.word	0x4649575f
    ec30:	49445f49 	.word	0x49445f49
    ec34:	4e4f4353 	.word	0x4e4f4353
    ec38:	5443454e 	.word	0x5443454e
    ec3c:	000d4445 	.word	0x000d4445
    ec40:	6c707041 	.word	0x6c707041
    ec44:	72304065 	.word	0x72304065
    ec48:	65676e61 	.word	0x65676e61
    ec4c:	00000000 	.word	0x00000000
    ec50:	6f666e49 	.word	0x6f666e49
    ec54:	74616d72 	.word	0x74616d72
    ec58:	5f6e6f69 	.word	0x5f6e6f69
    ec5c:	65707553 	.word	0x65707553
    ec60:	67696872 	.word	0x67696872
    ec64:	79617768 	.word	0x79617768
    ec68:	342e322d 	.word	0x342e322d
    ec6c:	00000000 	.word	0x00000000
    ec70:	69666977 	.word	0x69666977
    ec74:	3a62635f 	.word	0x3a62635f
    ec78:	20504920 	.word	0x20504920
    ec7c:	72646461 	.word	0x72646461
    ec80:	20737365 	.word	0x20737365
    ec84:	25207369 	.word	0x25207369
    ec88:	75252e75 	.word	0x75252e75
    ec8c:	2e75252e 	.word	0x2e75252e
    ec90:	0a0d7525 	.word	0x0a0d7525
    ec94:	00000000 	.word	0x00000000
    ec98:	00005462 	.word	0x00005462
    ec9c:	0000543a 	.word	0x0000543a
    eca0:	0000543e 	.word	0x0000543e
    eca4:	00005442 	.word	0x00005442
    eca8:	00005446 	.word	0x00005446
    ecac:	0000544a 	.word	0x0000544a
    ecb0:	0000544e 	.word	0x0000544e
    ecb4:	00005452 	.word	0x00005452
    ecb8:	00005456 	.word	0x00005456
    ecbc:	0000545a 	.word	0x0000545a
    ecc0:	000054fc 	.word	0x000054fc
    ecc4:	000054d4 	.word	0x000054d4
    ecc8:	000054da 	.word	0x000054da
    eccc:	000054e0 	.word	0x000054e0
    ecd0:	000054e0 	.word	0x000054e0
    ecd4:	000054e6 	.word	0x000054e6
    ecd8:	000054e6 	.word	0x000054e6
    ecdc:	000054e6 	.word	0x000054e6
    ece0:	000054ec 	.word	0x000054ec
    ece4:	000054f2 	.word	0x000054f2
    ece8:	00000100 	.word	0x00000100
    ecec:	0000561a 	.word	0x0000561a
    ecf0:	000055f2 	.word	0x000055f2
    ecf4:	000055f8 	.word	0x000055f8
    ecf8:	000055fe 	.word	0x000055fe
    ecfc:	000055fe 	.word	0x000055fe
    ed00:	00005604 	.word	0x00005604
    ed04:	00005604 	.word	0x00005604
    ed08:	00005604 	.word	0x00005604
    ed0c:	0000560a 	.word	0x0000560a
    ed10:	00005610 	.word	0x00005610
    ed14:	00005a0a 	.word	0x00005a0a
    ed18:	000059e6 	.word	0x000059e6
    ed1c:	000059ec 	.word	0x000059ec
    ed20:	000059f2 	.word	0x000059f2
    ed24:	000059f2 	.word	0x000059f2
    ed28:	000059f8 	.word	0x000059f8
    ed2c:	000059f8 	.word	0x000059f8
    ed30:	000059f8 	.word	0x000059f8
    ed34:	000059fe 	.word	0x000059fe
    ed38:	00005a04 	.word	0x00005a04
    ed3c:	00005bf6 	.word	0x00005bf6
    ed40:	00005bd2 	.word	0x00005bd2
    ed44:	00005bd8 	.word	0x00005bd8
    ed48:	00005bde 	.word	0x00005bde
    ed4c:	00005bde 	.word	0x00005bde
    ed50:	00005be4 	.word	0x00005be4
    ed54:	00005be4 	.word	0x00005be4
    ed58:	00005be4 	.word	0x00005be4
    ed5c:	00005bea 	.word	0x00005bea
    ed60:	00005bf0 	.word	0x00005bf0

0000ed64 <__FUNCTION__.14455>:
    ed64:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    ed74:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    ed84:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
    ed94:	6320746c 0000646d 00006b34 00006b04     lt cmd..4k...k..
    eda4:	00006afc 00006b14 00006b0c 00006b2c     .j...k...k..,k..
    edb4:	00006b1c 00006b24                       .k..$k..

0000edbc <__FUNCTION__.13058>:
    edbc:	5f666968 646e6573 00000000              hif_send....

0000edc8 <__FUNCTION__.13068>:
    edc8:	5f666968 00727369                       hif_isr.

0000edd0 <__FUNCTION__.13074>:
    edd0:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0000ede0 <__FUNCTION__.13086>:
    ede0:	5f666968 65636572 00657669              hif_receive.

0000edec <__FUNCTION__.13102>:
    edec:	5f666968 69676572 72657473 0062635f     hif_register_cb.
    edfc:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    ee0c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    ee1c:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    ee2c:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    ee3c:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    ee4c:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    ee5c:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    ee6c:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
    ee7c:	6c616320 6361626c 7369206b 746f6e20      callback is not
    ee8c:	67657220 65747369 00646572 6b6f6353      registered.Scok
    ee9c:	63207465 626c6c61 206b6361 6e207369     et callback is n
    eeac:	7220746f 73696765 65726574 00000064     ot registered...
    eebc:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
    eecc:	20746f6e 69676572 72657473 00006465     not registered..
    eedc:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
    eeec:	6e207369 7220746f 73696765 65726574     is not registere
    eefc:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
    ef0c:	69206b63 6f6e2073 65722074 74736967     ck is not regist
    ef1c:	64657265 00000000 66696828 6e692029     ered....(hif) in
    ef2c:	696c6176 72672064 2070756f 00004449     valid group ID..
    ef3c:	66696828 6f682029 61207473 64207070     (hif) host app d
    ef4c:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
    ef5c:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
    ef6c:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
    ef7c:	66696828 61462029 2065736c 65746e69     (hif) False inte
    ef8c:	70757272 6c252074 00000078 66696828     rrupt %lx...(hif
    ef9c:	61462029 74206c69 6552206f 69206461     ) Fail to Read i
    efac:	7265746e 74707572 67657220 00000000     nterrupt reg....
    efbc:	46494828 61462029 74206c69 6168206f     (HIF) Fail to ha
    efcc:	656c646e 746e6920 75727265 25207470     ndle interrupt %
    efdc:	72742064 67412079 2e6e6961 00000a2e     d try Again.....
    efec:	66696820 6365725f 65766965 6e49203a      hif_receive: In
    effc:	696c6176 72612064 656d7567 0000746e     valid argument..
    f00c:	20505041 75716552 65747365 69532064     APP Requested Si
    f01c:	6920657a 616c2073 72656772 61687420     ze is larger tha
    f02c:	6874206e 65722065 65766963 75622064     n the recived bu
    f03c:	72656666 7a697320 253c2065 253c3e75     ffer size <%u><%
    f04c:	0a3e756c 00000000 20505041 75716552     lu>.....APP Requ
    f05c:	65747365 64412064 73657264 65622073     ested Address be
    f06c:	646e6f79 65687420 63657220 64657669     yond the recived
    f07c:	66756220 20726566 72646461 20737365      buffer address 
    f08c:	20646e61 676e656c 00006874 20705247     and length..GRp 
    f09c:	6425203f 0000000a 50504128 4e492829     ? %d....(APP)(IN
    f0ac:	00294f46 776f6c53 20676e69 6e776f64     FO).Slowing down
    f0bc:	002e2e2e 46494828 69614629 6f74206c     ....(HIF)Fail to
    f0cc:	6b617720 74207075 63206568 00706968      wakup the chip.

0000f0dc <__FUNCTION__.13037>:
    f0dc:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000f0e8 <__FUNCTION__.13066>:
    f0e8:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

0000f0f8 <__FUNCTION__.13094>:
    f0f8:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    f108:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
    f118:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
    f128:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
    f138:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
    f148:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    f158:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    f168:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    f178:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    f188:	20706557 2079656b 65646e69 64252078     Wep key index %d
    f198:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    f1a8:	2079656b 676e656c 25206874 00000a64     key length %d...
    f1b8:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    f1c8:	656c2079 6874676e 00000000 65646e75     y length....unde
    f1d8:	656e6966 65732064 79742063 00006570     fined sec type..
    f1e8:	6d726946 65726177 72657620 3a202020     Firmware ver   :
    f1f8:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
    f208:	0a752520 00000000 6d726946 65726177      %u.....Firmware
    f218:	69754220 2520646c 69542073 2520656d      Build %s Time %
    f228:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
    f238:	69726420 20726576 20726576 7525203a      driver ver : %u
    f248:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
    f258:	203a7265 252e7525 75252e75 0000000a     er: %u.%u.%u....
    f268:	323a3031 34313a36 00000000 20727041     10:26:14....Apr 
    f278:	32203820 00383130 76697244 62207265      8 2018.Driver b
    f288:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
    f298:	6d73694d 68637461 72694620 7277616d     Mismatch Firmawr
    f2a8:	65562065 6f697372 0000006e              e Version...

0000f2b4 <__FUNCTION__.12900>:
    f2b4:	70696863 6b61775f 00000065              chip_wake...

0000f2c0 <__FUNCTION__.12949>:
    f2c0:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
    f2d0:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    f2e0:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
    f2f0:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
    f300:	74206465 6177206f 2070756b 20656874     ed to wakup the 
    f310:	70696863 00000000 76697244 65567265     chip....DriverVe
    f320:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

0000f330 <__FUNCTION__.12947>:
    f330:	645f6d6e 695f7672 0074696e              nm_drv_init.

0000f33c <__FUNCTION__.12954>:
    f33c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    f34c:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
    f35c:	6965645f 2074696e 6c696166 00000000     _deinit fail....
    f36c:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
    f37c:	73616c66 69642068 6c626173 61662065     flash disable fa
    f38c:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
    f39c:	6c696166 696e6920 75622074 00000073     fail init bus...
    f3ac:	6c696166 74206465 6e65206f 656c6261     failed to enable
    f3bc:	746e6920 75727265 2e737470 0000002e      interrupts.....
    f3cc:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    f3dc:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    f3ec:	20444920 0a786c25 00000000 00007b14      ID %lx......{..
    f3fc:	00007b14 00007b44 00007ac6 00007aea     .{..D{...z...z..
    f40c:	00007af8 00007b2a 00007b2a 00007b72     .z..*{..*{..r{..
    f41c:	00007aaa 00007bac 00007bac 00007bac     .z...{...{...{..
    f42c:	00007bac 00007b06 cac4c9c3              .{...{......

0000f438 <__FUNCTION__.12253>:
    f438:	5f697073 00646d63                       spi_cmd.

0000f440 <__FUNCTION__.12260>:
    f440:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0000f450 <__FUNCTION__.12269>:
    f450:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000f45c <__FUNCTION__.12285>:
    f45c:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000f46c <__FUNCTION__.12300>:
    f46c:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000f47c <__FUNCTION__.12312>:
    f47c:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000f48c <__FUNCTION__.12323>:
    f48c:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000f49c <__FUNCTION__.12335>:
    f49c:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000f4ac <__FUNCTION__.12348>:
    f4ac:	735f6d6e 725f6970 00646165              nm_spi_read.

0000f4b8 <__FUNCTION__.12369>:
    f4b8:	735f6d6e 695f6970 0074696e              nm_spi_init.

0000f4c4 <crc7_syndrome_table>:
    f4c4:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    f4d4:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    f4e4:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    f4f4:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    f504:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    f514:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    f524:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    f534:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    f544:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    f554:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    f564:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    f574:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    f584:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    f594:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    f5a4:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    f5b4:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    f5c4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f5d4:	6e692064 6e726574 72206c61 20646165     d internal read 
    f5e4:	746f7270 6c6f636f 74697720 52432068     protocol with CR
    f5f4:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
    f604:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
    f614:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f624:	6e692064 6e726574 72206c61 20646165     d internal read 
    f634:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
    f644:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
    f654:	6e726574 77206c61 65746972 6f727020     ternal write pro
    f664:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
    f674:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
    f684:	20646d63 64616572 69686320 64692070     cmd read chip id
    f694:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f6a4:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    f6b4:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    f6c4:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f6d4:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    f6e4:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    f6f4:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    f704:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    f714:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    f724:	00000000 65736552 6e612074 65722064     ....Reset and re
    f734:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
    f744:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f754:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
    f764:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
    f774:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
    f784:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
    f794:	69727720 62206574 6b636f6c 30252820      write block (%0
    f7a4:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    f7b4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    f7c4:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
    f7d4:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    f7e4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f7f4:	61642064 62206174 6b636f6c 69727720     d data block wri
    f804:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    f814:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f824:	656c6961 61642064 62206174 6b636f6c     ailed data block
    f834:	63726320 69727720 202c6574 20737562      crc write, bus 
    f844:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    f854:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
    f864:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
    f874:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    f884:	72206174 6f707365 2065736e 64616572     ta response read
    f894:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
    f8a4:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    f8b4:	206b636f 61746164 69727720 2e2e6574     ock data write..
    f8c4:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f8d4:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    f8e4:	73756220 72726520 2e2e726f 0000002e      bus error......
    f8f4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    f904:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    f914:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    f924:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    f934:	656c6961 61642064 72206174 6f707365     ailed data respo
    f944:	2065736e 64616572 7562202c 72652073     nse read, bus er
    f954:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    f964:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    f974:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    f984:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    f994:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    f9a4:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    f9b4:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    f9c4:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    f9d4:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    f9e4:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    f9f4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    fa04:	72202c64 20646165 20676572 38302528     d, read reg (%08
    fa14:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
    fa24:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
    fa34:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
    fa44:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    fa54:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    fa64:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
    fa74:	6e612074 65722064 20797274 25206425     t and retry %d %
    fa84:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
    fa94:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    faa4:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    fab4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    fac4:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    fad4:	74697277 65722065 25282067 29783830     write reg (%08x)
    fae4:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
    faf4:	65722064 20797274 25206425 2520786c     d retry %d %lx %
    fb04:	000a786c 52524528 75432952 6e657272     lx..(ERRR)Curren
    fb14:	253c2074 000a3e64 6b636f53 206f7420     t <%d>..Sock to 
    fb24:	656c6564 3c206574 0a3e6425 00000000     delete <%d>.....
    fb34:	6b636f53 25207465 65732064 6f697373     Socket %d sessio
    fb44:	4449206e 25203d20 000a0d64 42000800     n ID = %d......B
    fb54:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    fb64:	42001c00 0000a592 0000a58e 0000a58e     ...B............
    fb74:	0000a5f0 0000a5f0 0000a5a6 0000a598     ................
    fb84:	0000a5ac 0000a5de 0000a7b0 0000a790     ................
    fb94:	0000a790 0000a81c 0000a7a2 0000a7be     ................
    fba4:	0000a794 0000a7cc 0000a80c              ............

0000fbb0 <_tcc_apbcmasks>:
    fbb0:	00000100 00000200 00000400              ............

0000fbbc <_tcc_cc_nums>:
    fbbc:	00020204                                ....

0000fbc0 <_tcc_gclk_ids>:
    fbc0:	001b1a1a                                ....

0000fbc4 <_tcc_maxs>:
    fbc4:	00ffffff 00ffffff 0000ffff              ............

0000fbd0 <_tcc_ow_nums>:
    fbd0:	00020408                                ....

0000fbd4 <_tcc_intflag>:
    fbd4:	00000001 00000002 00000004 00000008     ................
    fbe4:	00001000 00002000 00004000 00008000     ..... ...@......
    fbf4:	00010000 00020000 00040000 00080000     ................

0000fc04 <tcc_interrupt_vectors.12434>:
    fc04:	0011100f 0000c3d6 0000c3d0 0000c3ca     ................
    fc14:	0000c3c4 0000c3dc 0000c3e4 0000c3dc     ................
    fc24:	0000c3be 0000c3b8 0000c3dc 0000c3b2     ................
    fc34:	0000c3b2 0000c3ac 0000c3a6 0000c3e4     ................
    fc44:	0000c44e 0000c448 0000c442 0000c43c     N...H...B...<...
    fc54:	0000c454 0000c45c 0000c454 0000c436     T...\...T...6...
    fc64:	0000c430 0000c454 0000c42a 0000c42a     0...T...*...*...
    fc74:	0000c424 0000c41e 0000c45c 0000c4c8     $.......\.......
    fc84:	0000c4c2 0000c4bc 0000c4b6 0000c4ce     ................
    fc94:	0000c4ce 0000c4ce 0000c4b0 0000c4aa     ................
    fca4:	0000c4ce 0000c4a4 0000c4a4 0000c49e     ................
    fcb4:	0000c498 33323130 37363534 62613938     ....0123456789ab
    fcc4:	66656463 00000d31 6e617254 72656673     cdef1...Transfer
    fcd4:	636e452d 6e69646f 00203a67 6e6e6f43     -Encoding: .Conn
    fce4:	69746365 203a6e6f 00000000 50545448     ection: ....HTTP
    fcf4:	0000002f 20544547 00000000 54534f50     /...GET ....POST
    fd04:	00000020 454c4544 00204554 20545550      ...DELETE .PUT 
    fd14:	00000000 4954504f 20534e4f 00000000     ....OPTIONS ....
    fd24:	44414548 00000020 54544820 2e312f50     HEAD ... HTTP/1.
    fd34:	000a0d31 72657355 6567412d 203a746e     1...User-Agent: 
    fd44:	00000000 74736f48 0000203a 6e6e6f43     ....Host: ..Conn
    fd54:	69746365 203a6e6f 7065654b 696c412d     ection: Keep-Ali
    fd64:	0a0d6576 00000000 65636341 452d7470     ve......Accept-E
    fd74:	646f636e 3a676e69 000a0d20 65636341     ncoding: ...Acce
    fd84:	432d7470 73726168 203a7465 2d667475     pt-Charset: utf-
    fd94:	000a0d38 6e617254 72656673 636e452d     8...Transfer-Enc
    fda4:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
    fdb4:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
    fdc4:	676e654c 203a6874 00000000 656d7461     Length: ....atme
    fdd4:	2e312f6c 00322e30 70747468 002f2f3a     l/1.0.2.http://.
    fde4:	70747468 2f2f3a73 00000000 42002000     https://..... .B
    fdf4:	42002400 42002800 0a0d0a0d 23232323     .$.B.(.B....####
    fe04:	6d532023 20747261 72746552 74732d6f     # Smart Retro-st
    fe14:	23207461 23232323 000d0a0d 73696854     at #####....This
    fe24:	61786520 656c706d 71657220 65726975      example require
    fe34:	68742073 50412065 206f7420 65766168     s the AP to have
    fe44:	746e6920 656e7265 63612074 73736563      internet access
    fe54:	00000d2e                                ....

0000fe58 <_global_impure_ptr>:
    fe58:	20000010                                ... 

0000fe5c <__sf_fake_stderr>:
	...

0000fe7c <__sf_fake_stdin>:
	...

0000fe9c <__sf_fake_stdout>:
	...
    febc:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
    fecc:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
    fedc:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
    feec:	37363534 62613938 66656463 20200000              456789abcdef.

0000fef9 <_ctype_>:
    fef9:	20202000 20202020 28282020 20282828     .         ((((( 
    ff09:	20202020 20202020 20202020 20202020                     
    ff19:	10108820 10101010 10101010 10101010      ...............
    ff29:	04040410 04040404 10040404 10101010     ................
    ff39:	41411010 41414141 01010101 01010101     ..AAAAAA........
    ff49:	01010101 01010101 01010101 10101010     ................
    ff59:	42421010 42424242 02020202 02020202     ..BBBBBB........
    ff69:	02020202 02020202 02020202 10101010     ................
    ff79:	00000020 00000000 00000000 00000000      ...............
	...

0000fffc <_init>:
    fffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fffe:	46c0      	nop			; (mov r8, r8)
   10000:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10002:	bc08      	pop	{r3}
   10004:	469e      	mov	lr, r3
   10006:	4770      	bx	lr

00010008 <__init_array_start>:
   10008:	000040dd 	.word	0x000040dd

0001000c <_fini>:
   1000c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1000e:	46c0      	nop			; (mov r8, r8)
   10010:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10012:	bc08      	pop	{r3}
   10014:	469e      	mov	lr, r3
   10016:	4770      	bx	lr

00010018 <__fini_array_start>:
   10018:	000040b5 	.word	0x000040b5
