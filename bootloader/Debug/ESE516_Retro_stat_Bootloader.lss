
ESE516_Retro_stat_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d88  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00003d88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000208  20000068  00003df0  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000270  00003ff8  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003183d  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004206  00000000  00000000  00051926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00009a3a  00000000  00000000  00055b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000578  00000000  00000000  0005f566  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009d8  00000000  00000000  0005fade  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001aea7  00000000  00000000  000604b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e04e  00000000  00000000  0007b35d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a5d2  00000000  00000000  000893ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001558  00000000  00000000  00113980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 22 00 20 9d 1d 00 00 99 1d 00 00 99 1d 00 00     p". ............
	...
      2c:	99 1d 00 00 00 00 00 00 00 00 00 00 99 1d 00 00     ................
      3c:	99 1d 00 00 99 1d 00 00 99 1d 00 00 99 1d 00 00     ................
      4c:	99 1d 00 00 99 1d 00 00 99 1d 00 00 99 1d 00 00     ................
      5c:	99 1d 00 00 99 1d 00 00 5d 0f 00 00 6d 0f 00 00     ........]...m...
      6c:	7d 0f 00 00 8d 0f 00 00 9d 0f 00 00 ad 0f 00 00     }...............
      7c:	99 1d 00 00 99 1d 00 00 99 1d 00 00 99 1d 00 00     ................
      8c:	99 1d 00 00 99 1d 00 00 00 00 00 00 00 00 00 00     ................
      9c:	99 1d 00 00 99 1d 00 00 99 1d 00 00 99 1d 00 00     ................
      ac:	99 1d 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00003d88 	.word	0x00003d88

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00003d88 	.word	0x00003d88
     10c:	00003d88 	.word	0x00003d88
     110:	00000000 	.word	0x00000000

00000114 <at25dfx_chip_check_presence>:

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
     114:	b530      	push	{r4, r5, lr}
     116:	b089      	sub	sp, #36	; 0x24
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     118:	0004      	movs	r4, r0
     11a:	2300      	movs	r3, #0
     11c:	9307      	str	r3, [sp, #28]
     11e:	6805      	ldr	r5, [r0, #0]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     120:	4b37      	ldr	r3, [pc, #220]	; (200 <at25dfx_chip_check_presence+0xec>)
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
	}

	_at25dfx_chip_select(chip);

	vectors[0].data = cmd_buffer;
     122:	4798      	blx	r3
     124:	792b      	ldrb	r3, [r5, #4]
     126:	2b00      	cmp	r3, #0
	vectors[0].length = cmd.command_size;
     128:	d166      	bne.n	1f8 <at25dfx_chip_check_presence+0xe4>
     12a:	3301      	adds	r3, #1
	vectors[1].length = 0;
     12c:	712b      	strb	r3, [r5, #4]
     12e:	4b35      	ldr	r3, [pc, #212]	; (204 <at25dfx_chip_check_presence+0xf0>)

	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
     130:	4798      	blx	r3
     132:	229f      	movs	r2, #159	; 0x9f
     134:	ab01      	add	r3, sp, #4
     136:	701a      	strb	r2, [r3, #0]
	Assert(status == STATUS_OK);
	status = spi_master_vec_get_job_status_wait(chip->spi);
     138:	7961      	ldrb	r1, [r4, #5]
 * \retval <other> if previous transfer failed.
 */
static inline enum status_code spi_master_vec_get_job_status(
		const struct spi_master_vec_module *const module)
{
	return module->status;
     13a:	09ca      	lsrs	r2, r1, #7
	status = spi_master_vec_get_job_status(module);
	CONF_SPI_MASTER_VEC_GIVE_SEMAPHORE(module->busy_semaphore);
#else
	do {
		status = spi_master_vec_get_job_status(module);
	} while (status == STATUS_BUSY);
     13c:	2300      	movs	r3, #0
     13e:	2a00      	cmp	r2, #0
	Assert(status == STATUS_OK);

	if (cmd.length) {
     140:	d104      	bne.n	14c <at25dfx_chip_check_presence+0x38>
     142:	094b      	lsrs	r3, r1, #5
     144:	01db      	lsls	r3, r3, #7
 *
 * \param[in] chip Address of SerialFlash chip instance to operate on.
 */
static inline void _at25dfx_chip_deselect(struct at25dfx_chip_module *chip)
{
	port_pin_set_output_level(chip->cs_pin, true);
     146:	4a30      	ldr	r2, [pc, #192]	; (208 <at25dfx_chip_check_presence+0xf4>)
	if (port_index < PORT_INST_NUM) {
     148:	4694      	mov	ip, r2
	} else {
		Assert(false);
		return NULL;
     14a:	4463      	add	r3, ip
	if (port_index < PORT_INST_NUM) {
     14c:	221f      	movs	r2, #31
     14e:	400a      	ands	r2, r1
		return &(ports[port_index]->Group[group_index]);
     150:	2001      	movs	r0, #1
     152:	0001      	movs	r1, r0
     154:	4091      	lsls	r1, r2
     156:	6159      	str	r1, [r3, #20]
     158:	a903      	add	r1, sp, #12
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     15a:	ab01      	add	r3, sp, #4
     15c:	9303      	str	r3, [sp, #12]
     15e:	8088      	strh	r0, [r1, #4]
     160:	2300      	movs	r3, #0
     162:	818b      	strh	r3, [r1, #12]
		port_base->OUTSET.reg = pin_mask;
     164:	2200      	movs	r2, #0
	struct spi_master_vec_bufdesc vectors[2];

	enum status_code status;
	uint8_t data;

	vectors[0].data = &data;
     166:	6820      	ldr	r0, [r4, #0]
     168:	4b28      	ldr	r3, [pc, #160]	; (20c <at25dfx_chip_check_presence+0xf8>)
     16a:	4798      	blx	r3
	vectors[0].length = 1;
     16c:	6820      	ldr	r0, [r4, #0]
	vectors[1].length = 0;
     16e:	7983      	ldrb	r3, [r0, #6]
     170:	2b05      	cmp	r3, #5
	port_pin_set_output_level(chip->cs_pin, false);
     172:	d0fc      	beq.n	16e <at25dfx_chip_check_presence+0x5a>
	if (port_index < PORT_INST_NUM) {
     174:	aa03      	add	r2, sp, #12
		return NULL;
     176:	ab07      	add	r3, sp, #28
	if (port_index < PORT_INST_NUM) {
     178:	9303      	str	r3, [sp, #12]
     17a:	2303      	movs	r3, #3
		return &(ports[port_index]->Group[group_index]);
     17c:	8093      	strh	r3, [r2, #4]
     17e:	2100      	movs	r1, #0
     180:	4b22      	ldr	r3, [pc, #136]	; (20c <at25dfx_chip_check_presence+0xf8>)
     182:	4798      	blx	r3
     184:	6822      	ldr	r2, [r4, #0]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     186:	7993      	ldrb	r3, [r2, #6]
     188:	2b05      	cmp	r3, #5
     18a:	d0fc      	beq.n	186 <at25dfx_chip_check_presence+0x72>
     18c:	7962      	ldrb	r2, [r4, #5]
		port_base->OUTCLR.reg = pin_mask;
     18e:	09d1      	lsrs	r1, r2, #7

	_at25dfx_chip_select(chip);

	// Issue status read command
	data = AT25DFX_COMMAND_READ_STATUS;
     190:	2300      	movs	r3, #0
     192:	2900      	cmp	r1, #0
     194:	d104      	bne.n	1a0 <at25dfx_chip_check_presence+0x8c>

	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
     196:	0953      	lsrs	r3, r2, #5
     198:	01db      	lsls	r3, r3, #7
     19a:	491b      	ldr	r1, [pc, #108]	; (208 <at25dfx_chip_check_presence+0xf4>)
     19c:	468c      	mov	ip, r1
     19e:	4463      	add	r3, ip
	Assert(status == STATUS_OK);
	status = spi_master_vec_get_job_status_wait(chip->spi);
     1a0:	211f      	movs	r1, #31
	return module->status;
     1a2:	4011      	ands	r1, r2
	} while (status == STATUS_BUSY);
     1a4:	2201      	movs	r2, #1
     1a6:	408a      	lsls	r2, r1
	Assert(status == STATUS_OK);

	// Keep reading until busy flag clears
	do {
		status = spi_master_vec_transceive_buffer_job(chip->spi, NULL, vectors);
     1a8:	619a      	str	r2, [r3, #24]
     1aa:	2300      	movs	r3, #0
     1ac:	6822      	ldr	r2, [r4, #0]
     1ae:	7113      	strb	r3, [r2, #4]
     1b0:	7923      	ldrb	r3, [r4, #4]
		Assert(status == STATUS_OK);
		status = spi_master_vec_get_job_status_wait(chip->spi);
     1b2:	2b09      	cmp	r3, #9
	return module->status;
     1b4:	d815      	bhi.n	1e2 <at25dfx_chip_check_presence+0xce>
	} while (status == STATUS_BUSY);
     1b6:	009b      	lsls	r3, r3, #2
     1b8:	4a15      	ldr	r2, [pc, #84]	; (210 <at25dfx_chip_check_presence+0xfc>)
		Assert(status == STATUS_OK);
	} while (data & AT25DFX_STATUS_BUSY);
     1ba:	58d3      	ldr	r3, [r2, r3]
     1bc:	469f      	mov	pc, r3
     1be:	4b15      	ldr	r3, [pc, #84]	; (214 <at25dfx_chip_check_presence+0x100>)
     1c0:	e012      	b.n	1e8 <at25dfx_chip_check_presence+0xd4>
	port_pin_set_output_level(chip->cs_pin, true);
     1c2:	4b15      	ldr	r3, [pc, #84]	; (218 <at25dfx_chip_check_presence+0x104>)
	if (port_index < PORT_INST_NUM) {
     1c4:	e010      	b.n	1e8 <at25dfx_chip_check_presence+0xd4>
		return NULL;
     1c6:	4b15      	ldr	r3, [pc, #84]	; (21c <at25dfx_chip_check_presence+0x108>)
	if (port_index < PORT_INST_NUM) {
     1c8:	e00e      	b.n	1e8 <at25dfx_chip_check_presence+0xd4>
     1ca:	4b15      	ldr	r3, [pc, #84]	; (220 <at25dfx_chip_check_presence+0x10c>)
		return &(ports[port_index]->Group[group_index]);
     1cc:	e00c      	b.n	1e8 <at25dfx_chip_check_presence+0xd4>
     1ce:	4b15      	ldr	r3, [pc, #84]	; (224 <at25dfx_chip_check_presence+0x110>)
     1d0:	e00a      	b.n	1e8 <at25dfx_chip_check_presence+0xd4>
     1d2:	4b15      	ldr	r3, [pc, #84]	; (228 <at25dfx_chip_check_presence+0x114>)
     1d4:	e008      	b.n	1e8 <at25dfx_chip_check_presence+0xd4>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1d6:	4b15      	ldr	r3, [pc, #84]	; (22c <at25dfx_chip_check_presence+0x118>)
     1d8:	e006      	b.n	1e8 <at25dfx_chip_check_presence+0xd4>
     1da:	4b15      	ldr	r3, [pc, #84]	; (230 <at25dfx_chip_check_presence+0x11c>)
     1dc:	e004      	b.n	1e8 <at25dfx_chip_check_presence+0xd4>
		port_base->OUTSET.reg = pin_mask;
     1de:	4b15      	ldr	r3, [pc, #84]	; (234 <at25dfx_chip_check_presence+0x120>)

	_at25dfx_chip_deselect(chip);

	// Return final status
	if (data & AT25DFX_STATUS_ERROR) {
		return STATUS_ERR_IO;
     1e0:	e002      	b.n	1e8 <at25dfx_chip_check_presence+0xd4>
	if (data & AT25DFX_STATUS_ERROR) {
     1e2:	2300      	movs	r3, #0
     1e4:	e000      	b.n	1e8 <at25dfx_chip_check_presence+0xd4>
     1e6:	4b14      	ldr	r3, [pc, #80]	; (238 <at25dfx_chip_check_presence+0x124>)
	cmd.length = min(page_bytes, length);
	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	status = _at25dfx_chip_get_nonbusy_status(chip);

	length -= cmd.length;
     1e8:	9a07      	ldr	r2, [sp, #28]
     1ea:	429a      	cmp	r2, r3
     1ec:	d002      	beq.n	1f4 <at25dfx_chip_check_presence+0xe0>
     1ee:	2014      	movs	r0, #20
	}
	return STATUS_OK;
     1f0:	b009      	add	sp, #36	; 0x24

	while (length && (status == STATUS_OK)) {
     1f2:	bd30      	pop	{r4, r5, pc}
     1f4:	2000      	movs	r0, #0
     1f6:	e7fb      	b.n	1f0 <at25dfx_chip_check_presence+0xdc>
	cmd_buffer[0] = cmd.opcode;
     1f8:	4b02      	ldr	r3, [pc, #8]	; (204 <at25dfx_chip_check_presence+0xf0>)
     1fa:	4798      	blx	r3
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1fc:	2005      	movs	r0, #5
     1fe:	e7f7      	b.n	1f0 <at25dfx_chip_check_presence+0xdc>
     200:	00000fbd 	.word	0x00000fbd
	vectors[1].length = 0;
     204:	00000ffd 	.word	0x00000ffd
     208:	41004400 	.word	0x41004400
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
     20c:	00000e61 	.word	0x00000e61
		vectors[0].data = (uint8_t *)cmd.data.tx;
     210:	000038c4 	.word	0x000038c4
		vectors[0].length = cmd.length;
     214:	0000431f 	.word	0x0000431f
		status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
     218:	0001441f 	.word	0x0001441f
     21c:	0002451f 	.word	0x0002451f
	return module->status;
     220:	0001451f 	.word	0x0001451f
	} while (status == STATUS_BUSY);
     224:	0002461f 	.word	0x0002461f
		vectors[0].data = (uint8_t *)cmd.data.tx;
     228:	0003461f 	.word	0x0003461f
		vectors[0].length = cmd.length;
     22c:	0000861f 	.word	0x0000861f
		status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
     230:	0001471f 	.word	0x0001471f
     234:	0000481f 	.word	0x0000481f
		status = spi_master_vec_get_job_status_wait(chip->spi);
     238:	0000651f 	.word	0x0000651f

0000023c <at25dfx_chip_read_buffer>:
     23c:	b5f0      	push	{r4, r5, r6, r7, lr}
     23e:	b089      	sub	sp, #36	; 0x24
     240:	0004      	movs	r4, r0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     242:	000e      	movs	r6, r1
     244:	9201      	str	r2, [sp, #4]
		return status;
     246:	001f      	movs	r7, r3
     248:	185a      	adds	r2, r3, r1
     24a:	7903      	ldrb	r3, [r0, #4]
     24c:	2b09      	cmp	r3, #9
     24e:	d815      	bhi.n	27c <at25dfx_chip_read_buffer+0x40>
     250:	009b      	lsls	r3, r3, #2
     252:	493a      	ldr	r1, [pc, #232]	; (33c <at25dfx_chip_read_buffer+0x100>)
     254:	58cb      	ldr	r3, [r1, r3]
     256:	469f      	mov	pc, r3
     258:	2380      	movs	r3, #128	; 0x80
     25a:	02db      	lsls	r3, r3, #11
     25c:	e012      	b.n	284 <at25dfx_chip_read_buffer+0x48>
     25e:	2380      	movs	r3, #128	; 0x80

		_at25dfx_chip_issue_write_command_wait(chip, cmd);

		status = _at25dfx_chip_get_nonbusy_status(chip);

		length -= cmd.length;
     260:	031b      	lsls	r3, r3, #12
     262:	e00f      	b.n	284 <at25dfx_chip_read_buffer+0x48>
     264:	2380      	movs	r3, #128	; 0x80
     266:	035b      	lsls	r3, r3, #13
     268:	e00c      	b.n	284 <at25dfx_chip_read_buffer+0x48>
	while (length && (status == STATUS_OK)) {
     26a:	2380      	movs	r3, #128	; 0x80
     26c:	039b      	lsls	r3, r3, #14
     26e:	e009      	b.n	284 <at25dfx_chip_read_buffer+0x48>
	cmd_buffer[0] = cmd.opcode;
     270:	2380      	movs	r3, #128	; 0x80
     272:	03db      	lsls	r3, r3, #15
     274:	e006      	b.n	284 <at25dfx_chip_read_buffer+0x48>
	port_pin_set_output_level(chip->cs_pin, false);
     276:	2380      	movs	r3, #128	; 0x80
	if (port_index < PORT_INST_NUM) {
     278:	041b      	lsls	r3, r3, #16
		return NULL;
     27a:	e003      	b.n	284 <at25dfx_chip_read_buffer+0x48>
	if (port_index < PORT_INST_NUM) {
     27c:	2300      	movs	r3, #0
     27e:	e001      	b.n	284 <at25dfx_chip_read_buffer+0x48>
		return &(ports[port_index]->Group[group_index]);
     280:	2380      	movs	r3, #128	; 0x80
     282:	025b      	lsls	r3, r3, #9
     284:	2017      	movs	r0, #23
     286:	429a      	cmp	r2, r3
     288:	d901      	bls.n	28e <at25dfx_chip_read_buffer+0x52>
     28a:	b009      	add	sp, #36	; 0x24
     28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     28e:	6825      	ldr	r5, [r4, #0]
     290:	4b2b      	ldr	r3, [pc, #172]	; (340 <at25dfx_chip_read_buffer+0x104>)
		port_base->OUTCLR.reg = pin_mask;
     292:	4798      	blx	r3
	vectors[0].data = cmd_buffer;
     294:	792b      	ldrb	r3, [r5, #4]
     296:	2b00      	cmp	r3, #0
	vectors[0].length = cmd.command_size;
     298:	d14b      	bne.n	332 <at25dfx_chip_read_buffer+0xf6>
	vectors[1].length = 0;
     29a:	3301      	adds	r3, #1
     29c:	712b      	strb	r3, [r5, #4]
     29e:	4b29      	ldr	r3, [pc, #164]	; (344 <at25dfx_chip_read_buffer+0x108>)
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
     2a0:	4798      	blx	r3
     2a2:	230b      	movs	r3, #11
     2a4:	aa02      	add	r2, sp, #8
     2a6:	7013      	strb	r3, [r2, #0]
     2a8:	70d6      	strb	r6, [r2, #3]
	status = spi_master_vec_get_job_status_wait(chip->spi);
     2aa:	0a33      	lsrs	r3, r6, #8
	return module->status;
     2ac:	7093      	strb	r3, [r2, #2]
	} while (status == STATUS_BUSY);
     2ae:	0c36      	lsrs	r6, r6, #16
     2b0:	7056      	strb	r6, [r2, #1]
	port_pin_set_output_level(chip->cs_pin, true);
     2b2:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     2b4:	09d1      	lsrs	r1, r2, #7
		return NULL;
     2b6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     2b8:	2900      	cmp	r1, #0
     2ba:	d104      	bne.n	2c6 <at25dfx_chip_read_buffer+0x8a>
		return &(ports[port_index]->Group[group_index]);
     2bc:	0953      	lsrs	r3, r2, #5
     2be:	01db      	lsls	r3, r3, #7
     2c0:	4921      	ldr	r1, [pc, #132]	; (348 <at25dfx_chip_read_buffer+0x10c>)
     2c2:	468c      	mov	ip, r1
     2c4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c6:	211f      	movs	r1, #31
     2c8:	4011      	ands	r1, r2
     2ca:	2201      	movs	r2, #1
     2cc:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     2ce:	615a      	str	r2, [r3, #20]
		cmd.address += cmd.length;
     2d0:	a904      	add	r1, sp, #16
		cmd.data.tx += cmd.length;
     2d2:	ab02      	add	r3, sp, #8
     2d4:	9304      	str	r3, [sp, #16]
     2d6:	2305      	movs	r3, #5
		cmd.length = min(AT25DFX_PAGE_SIZE, length);
     2d8:	808b      	strh	r3, [r1, #4]
     2da:	2300      	movs	r3, #0
     2dc:	818b      	strh	r3, [r1, #12]
     2de:	2200      	movs	r2, #0
     2e0:	6820      	ldr	r0, [r4, #0]
     2e2:	4b1a      	ldr	r3, [pc, #104]	; (34c <at25dfx_chip_read_buffer+0x110>)
     2e4:	4798      	blx	r3
     2e6:	6820      	ldr	r0, [r4, #0]
     2e8:	7983      	ldrb	r3, [r0, #6]
     2ea:	2b05      	cmp	r3, #5
	cmd_buffer[0] = cmd.opcode;
     2ec:	d0fc      	beq.n	2e8 <at25dfx_chip_read_buffer+0xac>
     2ee:	2f00      	cmp	r7, #0
     2f0:	d113      	bne.n	31a <at25dfx_chip_read_buffer+0xde>
		cmd_buffer[3] = cmd.address & 0xff;
     2f2:	7962      	ldrb	r2, [r4, #5]
     2f4:	09d1      	lsrs	r1, r2, #7
     2f6:	2300      	movs	r3, #0
		cmd_buffer[2] = (cmd.address >> 8) & 0xff;
     2f8:	2900      	cmp	r1, #0
     2fa:	d104      	bne.n	306 <at25dfx_chip_read_buffer+0xca>
     2fc:	0953      	lsrs	r3, r2, #5
     2fe:	01db      	lsls	r3, r3, #7
		cmd_buffer[1] = (cmd.address >> 16) & 0xff;
     300:	4911      	ldr	r1, [pc, #68]	; (348 <at25dfx_chip_read_buffer+0x10c>)
     302:	468c      	mov	ip, r1
     304:	4463      	add	r3, ip
	port_pin_set_output_level(chip->cs_pin, false);
     306:	211f      	movs	r1, #31
	if (port_index < PORT_INST_NUM) {
     308:	4011      	ands	r1, r2
		return NULL;
     30a:	2201      	movs	r2, #1
	if (port_index < PORT_INST_NUM) {
     30c:	408a      	lsls	r2, r1
     30e:	619a      	str	r2, [r3, #24]
		return &(ports[port_index]->Group[group_index]);
     310:	6823      	ldr	r3, [r4, #0]
     312:	2200      	movs	r2, #0
     314:	711a      	strb	r2, [r3, #4]
     316:	2000      	movs	r0, #0
     318:	e7b7      	b.n	28a <at25dfx_chip_read_buffer+0x4e>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     31a:	aa04      	add	r2, sp, #16
     31c:	9b01      	ldr	r3, [sp, #4]
     31e:	9304      	str	r3, [sp, #16]
     320:	8097      	strh	r7, [r2, #4]
		port_base->OUTCLR.reg = pin_mask;
     322:	2100      	movs	r1, #0
	vectors[0].data = cmd_buffer;
     324:	4b09      	ldr	r3, [pc, #36]	; (34c <at25dfx_chip_read_buffer+0x110>)
     326:	4798      	blx	r3
	vectors[0].length = cmd.command_size;
     328:	6822      	ldr	r2, [r4, #0]
     32a:	7993      	ldrb	r3, [r2, #6]
	vectors[1].length = 0;
     32c:	2b05      	cmp	r3, #5
     32e:	d0fc      	beq.n	32a <at25dfx_chip_read_buffer+0xee>
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
     330:	e7df      	b.n	2f2 <at25dfx_chip_read_buffer+0xb6>
     332:	4b04      	ldr	r3, [pc, #16]	; (344 <at25dfx_chip_read_buffer+0x108>)
     334:	4798      	blx	r3
     336:	2005      	movs	r0, #5
     338:	e7a7      	b.n	28a <at25dfx_chip_read_buffer+0x4e>
	status = spi_master_vec_get_job_status_wait(chip->spi);
     33a:	46c0      	nop			; (mov r8, r8)
	return module->status;
     33c:	000038ec 	.word	0x000038ec
	} while (status == STATUS_BUSY);
     340:	00000fbd 	.word	0x00000fbd
	if (cmd.length) {
     344:	00000ffd 	.word	0x00000ffd
     348:	41004400 	.word	0x41004400
	if (port_index < PORT_INST_NUM) {
     34c:	00000e61 	.word	0x00000e61

00000350 <at25dfx_chip_sleep>:
     350:	b530      	push	{r4, r5, lr}
     352:	b087      	sub	sp, #28
		return &(ports[port_index]->Group[group_index]);
     354:	0004      	movs	r4, r0
     356:	6805      	ldr	r5, [r0, #0]
     358:	4b21      	ldr	r3, [pc, #132]	; (3e0 <at25dfx_chip_sleep+0x90>)
     35a:	4798      	blx	r3
     35c:	792b      	ldrb	r3, [r5, #4]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     35e:	2b00      	cmp	r3, #0
     360:	d138      	bne.n	3d4 <at25dfx_chip_sleep+0x84>
     362:	3301      	adds	r3, #1
     364:	712b      	strb	r3, [r5, #4]
		port_base->OUTSET.reg = pin_mask;
     366:	4b1f      	ldr	r3, [pc, #124]	; (3e4 <at25dfx_chip_sleep+0x94>)
	vectors[0].data = &data;
     368:	4798      	blx	r3
     36a:	23b9      	movs	r3, #185	; 0xb9
	vectors[0].length = 1;
     36c:	466a      	mov	r2, sp
	vectors[1].length = 0;
     36e:	7013      	strb	r3, [r2, #0]
     370:	7961      	ldrb	r1, [r4, #5]
     372:	09ca      	lsrs	r2, r1, #7
	if (port_index < PORT_INST_NUM) {
     374:	2300      	movs	r3, #0
		return NULL;
     376:	2a00      	cmp	r2, #0
	if (port_index < PORT_INST_NUM) {
     378:	d104      	bne.n	384 <at25dfx_chip_sleep+0x34>
     37a:	094b      	lsrs	r3, r1, #5
		return &(ports[port_index]->Group[group_index]);
     37c:	01db      	lsls	r3, r3, #7
     37e:	4a1a      	ldr	r2, [pc, #104]	; (3e8 <at25dfx_chip_sleep+0x98>)
     380:	4694      	mov	ip, r2
     382:	4463      	add	r3, ip
     384:	221f      	movs	r2, #31
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     386:	400a      	ands	r2, r1
     388:	2001      	movs	r0, #1
     38a:	0001      	movs	r1, r0
     38c:	4091      	lsls	r1, r2
		port_base->OUTCLR.reg = pin_mask;
     38e:	6159      	str	r1, [r3, #20]
	data = AT25DFX_COMMAND_READ_STATUS;
     390:	a902      	add	r1, sp, #8
     392:	466b      	mov	r3, sp
     394:	9302      	str	r3, [sp, #8]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
     396:	8088      	strh	r0, [r1, #4]
     398:	2300      	movs	r3, #0
     39a:	818b      	strh	r3, [r1, #12]
     39c:	2200      	movs	r2, #0
     39e:	6820      	ldr	r0, [r4, #0]
	status = spi_master_vec_get_job_status_wait(chip->spi);
     3a0:	4b12      	ldr	r3, [pc, #72]	; (3ec <at25dfx_chip_sleep+0x9c>)
	return module->status;
     3a2:	4798      	blx	r3
	} while (status == STATUS_BUSY);
     3a4:	6822      	ldr	r2, [r4, #0]
     3a6:	7993      	ldrb	r3, [r2, #6]
		status = spi_master_vec_transceive_buffer_job(chip->spi, NULL, vectors);
     3a8:	2b05      	cmp	r3, #5
     3aa:	d0fc      	beq.n	3a6 <at25dfx_chip_sleep+0x56>
     3ac:	7962      	ldrb	r2, [r4, #5]
     3ae:	09d1      	lsrs	r1, r2, #7
     3b0:	2300      	movs	r3, #0
		status = spi_master_vec_get_job_status_wait(chip->spi);
     3b2:	2900      	cmp	r1, #0
	return module->status;
     3b4:	d104      	bne.n	3c0 <at25dfx_chip_sleep+0x70>
	} while (status == STATUS_BUSY);
     3b6:	0953      	lsrs	r3, r2, #5
     3b8:	01db      	lsls	r3, r3, #7
	} while (data & AT25DFX_STATUS_BUSY);
     3ba:	490b      	ldr	r1, [pc, #44]	; (3e8 <at25dfx_chip_sleep+0x98>)
     3bc:	468c      	mov	ip, r1
     3be:	4463      	add	r3, ip
     3c0:	211f      	movs	r1, #31
	port_pin_set_output_level(chip->cs_pin, true);
     3c2:	4011      	ands	r1, r2
	if (port_index < PORT_INST_NUM) {
     3c4:	2201      	movs	r2, #1
		return NULL;
     3c6:	408a      	lsls	r2, r1
	if (port_index < PORT_INST_NUM) {
     3c8:	619a      	str	r2, [r3, #24]
     3ca:	6823      	ldr	r3, [r4, #0]
		return &(ports[port_index]->Group[group_index]);
     3cc:	2200      	movs	r2, #0
     3ce:	711a      	strb	r2, [r3, #4]
     3d0:	2000      	movs	r0, #0
     3d2:	e002      	b.n	3da <at25dfx_chip_sleep+0x8a>
     3d4:	4b03      	ldr	r3, [pc, #12]	; (3e4 <at25dfx_chip_sleep+0x94>)
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     3d6:	4798      	blx	r3
     3d8:	2005      	movs	r0, #5
     3da:	b007      	add	sp, #28
     3dc:	bd30      	pop	{r4, r5, pc}
		port_base->OUTSET.reg = pin_mask;
     3de:	46c0      	nop			; (mov r8, r8)
	if (data & AT25DFX_STATUS_ERROR) {
     3e0:	00000fbd 	.word	0x00000fbd
     3e4:	00000ffd 	.word	0x00000ffd
	}

	_at25dfx_spi_unlock(chip->spi);
     3e8:	41004400 	.word	0x41004400
	module->locked = false;
     3ec:	00000e61 	.word	0x00000e61

000003f0 <at25dfx_chip_wake>:
	return STATUS_OK;
     3f0:	b530      	push	{r4, r5, lr}
     3f2:	b087      	sub	sp, #28
     3f4:	0004      	movs	r4, r0
     3f6:	6805      	ldr	r5, [r0, #0]
     3f8:	4b21      	ldr	r3, [pc, #132]	; (480 <at25dfx_chip_wake+0x90>)
     3fa:	4798      	blx	r3
     3fc:	792b      	ldrb	r3, [r5, #4]
     3fe:	2b00      	cmp	r3, #0
	if (module->locked) {
     400:	d138      	bne.n	474 <at25dfx_chip_wake+0x84>
		module->locked = true;
     402:	3301      	adds	r3, #1
     404:	712b      	strb	r3, [r5, #4]
     406:	4b1f      	ldr	r3, [pc, #124]	; (484 <at25dfx_chip_wake+0x94>)
     408:	4798      	blx	r3
	cmd_buffer[0] = cmd.opcode;
     40a:	23ab      	movs	r3, #171	; 0xab
     40c:	466a      	mov	r2, sp
     40e:	7013      	strb	r3, [r2, #0]
	port_pin_set_output_level(chip->cs_pin, false);
     410:	7961      	ldrb	r1, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     412:	09ca      	lsrs	r2, r1, #7
		return NULL;
     414:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     416:	2a00      	cmp	r2, #0
     418:	d104      	bne.n	424 <at25dfx_chip_wake+0x34>
		return &(ports[port_index]->Group[group_index]);
     41a:	094b      	lsrs	r3, r1, #5
     41c:	01db      	lsls	r3, r3, #7
     41e:	4a1a      	ldr	r2, [pc, #104]	; (488 <at25dfx_chip_wake+0x98>)
     420:	4694      	mov	ip, r2
     422:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     424:	221f      	movs	r2, #31
     426:	400a      	ands	r2, r1
     428:	2001      	movs	r0, #1
     42a:	0001      	movs	r1, r0
     42c:	4091      	lsls	r1, r2
		port_base->OUTCLR.reg = pin_mask;
     42e:	6159      	str	r1, [r3, #20]
	vectors[0].data = cmd_buffer;
     430:	a902      	add	r1, sp, #8
     432:	466b      	mov	r3, sp
     434:	9302      	str	r3, [sp, #8]
	vectors[0].length = cmd.command_size;
     436:	8088      	strh	r0, [r1, #4]
	vectors[1].length = 0;
     438:	2300      	movs	r3, #0
     43a:	818b      	strh	r3, [r1, #12]
	status = spi_master_vec_transceive_buffer_job(chip->spi, vectors, NULL);
     43c:	2200      	movs	r2, #0
     43e:	6820      	ldr	r0, [r4, #0]
     440:	4b12      	ldr	r3, [pc, #72]	; (48c <at25dfx_chip_wake+0x9c>)
     442:	4798      	blx	r3
	status = spi_master_vec_get_job_status_wait(chip->spi);
     444:	6822      	ldr	r2, [r4, #0]
	return module->status;
     446:	7993      	ldrb	r3, [r2, #6]
	} while (status == STATUS_BUSY);
     448:	2b05      	cmp	r3, #5
     44a:	d0fc      	beq.n	446 <at25dfx_chip_wake+0x56>
	port_pin_set_output_level(chip->cs_pin, true);
     44c:	7962      	ldrb	r2, [r4, #5]
	if (port_index < PORT_INST_NUM) {
     44e:	09d1      	lsrs	r1, r2, #7
		return NULL;
     450:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     452:	2900      	cmp	r1, #0
     454:	d104      	bne.n	460 <at25dfx_chip_wake+0x70>
		return &(ports[port_index]->Group[group_index]);
     456:	0953      	lsrs	r3, r2, #5
     458:	01db      	lsls	r3, r3, #7
     45a:	490b      	ldr	r1, [pc, #44]	; (488 <at25dfx_chip_wake+0x98>)
     45c:	468c      	mov	ip, r1
     45e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     460:	211f      	movs	r1, #31
     462:	4011      	ands	r1, r2
     464:	2201      	movs	r2, #1
     466:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     468:	619a      	str	r2, [r3, #24]
	cmd.address = (at25dfx_address_t)NULL;
	cmd.data.tx = NULL;

	_at25dfx_chip_issue_write_command_wait(chip, cmd);

	_at25dfx_spi_unlock(chip->spi);
     46a:	6823      	ldr	r3, [r4, #0]
	module->locked = false;
     46c:	2200      	movs	r2, #0
     46e:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
     470:	2000      	movs	r0, #0
     472:	e002      	b.n	47a <at25dfx_chip_wake+0x8a>
     474:	4b03      	ldr	r3, [pc, #12]	; (484 <at25dfx_chip_wake+0x94>)
     476:	4798      	blx	r3
		return status;
     478:	2005      	movs	r0, #5
     47a:	b007      	add	sp, #28
     47c:	bd30      	pop	{r4, r5, pc}
     47e:	46c0      	nop			; (mov r8, r8)
     480:	00000fbd 	.word	0x00000fbd
     484:	00000ffd 	.word	0x00000ffd
     488:	41004400 	.word	0x41004400
     48c:	00000e61 	.word	0x00000e61

00000490 <crc32_recalculate>:
 * first, then this function for the following blocks.
 *
 * \attention This implementation assumes a little-endian architecture.
 */
enum status_code crc32_recalculate(const void *data, size_t length, crc32_t *crc)
{
     490:	b5f0      	push	{r4, r5, r6, r7, lr}
     492:	46c6      	mov	lr, r8
     494:	b500      	push	{lr}
	const word_t *word_ptr =
			(word_t *)((uintptr_t)data & WORD_ALIGNMENT_MASK);
     496:	2303      	movs	r3, #3
     498:	0007      	movs	r7, r0
     49a:	439f      	bics	r7, r3
	size_t temp_length;
	crc32_t temp_crc = COMPLEMENT_CRC(*crc);
     49c:	6813      	ldr	r3, [r2, #0]
     49e:	43db      	mvns	r3, r3
	word_t word;

	// Calculate for initial bytes to get word-aligned
	if (length < WORD_SIZE) {
		temp_length = length;
     4a0:	000c      	movs	r4, r1
	if (length < WORD_SIZE) {
     4a2:	2903      	cmp	r1, #3
     4a4:	d902      	bls.n	4ac <crc32_recalculate+0x1c>
	} else {
		temp_length = ~WORD_ALIGNMENT_MASK & (WORD_SIZE - (uintptr_t)data);
     4a6:	4244      	negs	r4, r0
     4a8:	2003      	movs	r0, #3
     4aa:	4004      	ands	r4, r0
	}

	if (temp_length) {
     4ac:	2c00      	cmp	r4, #0
     4ae:	d016      	beq.n	4de <crc32_recalculate+0x4e>
		length -= temp_length;
     4b0:	1b09      	subs	r1, r1, r4

		word = *(word_ptr++);
     4b2:	1d3e      	adds	r6, r7, #4
     4b4:	683d      	ldr	r5, [r7, #0]
		word >>= 8 * (WORD_SIZE - temp_length);
     4b6:	00e0      	lsls	r0, r4, #3
     4b8:	4240      	negs	r0, r0
     4ba:	3020      	adds	r0, #32
     4bc:	40c5      	lsrs	r5, r0
	crc ^= data;
     4be:	406b      	eors	r3, r5
	for (bit = 8 * bytes; bit > 0; bit--) {
     4c0:	00e0      	lsls	r0, r4, #3
     4c2:	d019      	beq.n	4f8 <crc32_recalculate+0x68>
		if (crc & 1) {
     4c4:	2401      	movs	r4, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     4c6:	4d27      	ldr	r5, [pc, #156]	; (564 <crc32_recalculate+0xd4>)
     4c8:	e003      	b.n	4d2 <crc32_recalculate+0x42>
			crc >>= 1;
     4ca:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     4cc:	3801      	subs	r0, #1
     4ce:	2800      	cmp	r0, #0
     4d0:	d004      	beq.n	4dc <crc32_recalculate+0x4c>
		if (crc & 1) {
     4d2:	421c      	tst	r4, r3
     4d4:	d0f9      	beq.n	4ca <crc32_recalculate+0x3a>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     4d6:	085b      	lsrs	r3, r3, #1
     4d8:	406b      	eors	r3, r5
     4da:	e7f7      	b.n	4cc <crc32_recalculate+0x3c>
		word = *(word_ptr++);
     4dc:	0037      	movs	r7, r6
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, temp_length);
	}

	// Calculate for whole words, if any
	temp_length = length & WORD_ALIGNMENT_MASK;
     4de:	2003      	movs	r0, #3
     4e0:	000c      	movs	r4, r1
     4e2:	4384      	bics	r4, r0

	if (temp_length) {
     4e4:	d01e      	beq.n	524 <crc32_recalculate+0x94>
		length -= temp_length;
     4e6:	1b08      	subs	r0, r1, r4
     4e8:	4684      	mov	ip, r0
		temp_length /= WORD_SIZE;
     4ea:	0889      	lsrs	r1, r1, #2
     4ec:	4688      	mov	r8, r1
     4ee:	003e      	movs	r6, r7
     4f0:	000d      	movs	r5, r1
		if (crc & 1) {
     4f2:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     4f4:	4c1b      	ldr	r4, [pc, #108]	; (564 <crc32_recalculate+0xd4>)

		while (temp_length--) {
     4f6:	e00b      	b.n	510 <crc32_recalculate+0x80>
		word = *(word_ptr++);
     4f8:	0037      	movs	r7, r6
     4fa:	e7f0      	b.n	4de <crc32_recalculate+0x4e>
			crc >>= 1;
     4fc:	085b      	lsrs	r3, r3, #1
     4fe:	3901      	subs	r1, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     500:	2900      	cmp	r1, #0
     502:	d004      	beq.n	50e <crc32_recalculate+0x7e>
		if (crc & 1) {
     504:	4218      	tst	r0, r3
     506:	d0f9      	beq.n	4fc <crc32_recalculate+0x6c>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     508:	085b      	lsrs	r3, r3, #1
     50a:	4063      	eors	r3, r4
     50c:	e7f7      	b.n	4fe <crc32_recalculate+0x6e>
     50e:	3604      	adds	r6, #4
		while (temp_length--) {
     510:	3d01      	subs	r5, #1
     512:	d303      	bcc.n	51c <crc32_recalculate+0x8c>
	crc ^= data;
     514:	6831      	ldr	r1, [r6, #0]
     516:	404b      	eors	r3, r1
     518:	2120      	movs	r1, #32
     51a:	e7f3      	b.n	504 <crc32_recalculate+0x74>
     51c:	4641      	mov	r1, r8
     51e:	0089      	lsls	r1, r1, #2
     520:	187f      	adds	r7, r7, r1
		length -= temp_length;
     522:	4661      	mov	r1, ip
			temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, WORD_SIZE);
		}
	}

	// Calculate for tailing bytes
	if (length) {
     524:	2900      	cmp	r1, #0
     526:	d017      	beq.n	558 <crc32_recalculate+0xc8>
		word = *word_ptr;
     528:	683c      	ldr	r4, [r7, #0]
		word &= 0xffffffffUL >> (8 * (WORD_SIZE - length));
     52a:	00c8      	lsls	r0, r1, #3
     52c:	4240      	negs	r0, r0
     52e:	3020      	adds	r0, #32
     530:	2501      	movs	r5, #1
     532:	426d      	negs	r5, r5
     534:	40c5      	lsrs	r5, r0
     536:	0028      	movs	r0, r5
     538:	4020      	ands	r0, r4
	crc ^= data;
     53a:	4043      	eors	r3, r0
	for (bit = 8 * bytes; bit > 0; bit--) {
     53c:	00c9      	lsls	r1, r1, #3
     53e:	d00b      	beq.n	558 <crc32_recalculate+0xc8>
		if (crc & 1) {
     540:	2001      	movs	r0, #1
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     542:	4c08      	ldr	r4, [pc, #32]	; (564 <crc32_recalculate+0xd4>)
     544:	e003      	b.n	54e <crc32_recalculate+0xbe>
			crc >>= 1;
     546:	085b      	lsrs	r3, r3, #1
	for (bit = 8 * bytes; bit > 0; bit--) {
     548:	3901      	subs	r1, #1
     54a:	2900      	cmp	r1, #0
     54c:	d004      	beq.n	558 <crc32_recalculate+0xc8>
		if (crc & 1) {
     54e:	4218      	tst	r0, r3
     550:	d0f9      	beq.n	546 <crc32_recalculate+0xb6>
			crc = (crc >> 1) ^ CRC32_POLYNOMIAL;
     552:	085b      	lsrs	r3, r3, #1
     554:	4063      	eors	r3, r4
     556:	e7f7      	b.n	548 <crc32_recalculate+0xb8>
		temp_crc = _crc32_recalculate_bytes_helper(word, temp_crc, length);
	}

	*crc = COMPLEMENT_CRC(temp_crc);
     558:	43db      	mvns	r3, r3
     55a:	6013      	str	r3, [r2, #0]

	return STATUS_OK;
     55c:	2000      	movs	r0, #0
     55e:	bc04      	pop	{r2}
     560:	4690      	mov	r8, r2
     562:	bdf0      	pop	{r4, r5, r6, r7, pc}
     564:	edb88320 	.word	0xedb88320

00000568 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     568:	b510      	push	{r4, lr}
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     56a:	4a1e      	ldr	r2, [pc, #120]	; (5e4 <nvm_set_config+0x7c>)
     56c:	69d3      	ldr	r3, [r2, #28]
     56e:	2104      	movs	r1, #4
     570:	430b      	orrs	r3, r1
     572:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     574:	4b1c      	ldr	r3, [pc, #112]	; (5e8 <nvm_set_config+0x80>)
     576:	2220      	movs	r2, #32
     578:	32ff      	adds	r2, #255	; 0xff
     57a:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     57c:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     57e:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     580:	07d2      	lsls	r2, r2, #31
     582:	d401      	bmi.n	588 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     584:	0018      	movs	r0, r3
     586:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     588:	7803      	ldrb	r3, [r0, #0]
     58a:	021b      	lsls	r3, r3, #8
     58c:	22c0      	movs	r2, #192	; 0xc0
     58e:	0092      	lsls	r2, r2, #2
     590:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     592:	7841      	ldrb	r1, [r0, #1]
     594:	01c9      	lsls	r1, r1, #7
     596:	22ff      	movs	r2, #255	; 0xff
     598:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     59a:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     59c:	7881      	ldrb	r1, [r0, #2]
     59e:	0049      	lsls	r1, r1, #1
     5a0:	221e      	movs	r2, #30
     5a2:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     5a4:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     5a6:	78c2      	ldrb	r2, [r0, #3]
     5a8:	0492      	lsls	r2, r2, #18
     5aa:	2180      	movs	r1, #128	; 0x80
     5ac:	02c9      	lsls	r1, r1, #11
     5ae:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     5b0:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     5b2:	7902      	ldrb	r2, [r0, #4]
     5b4:	0412      	lsls	r2, r2, #16
     5b6:	21c0      	movs	r1, #192	; 0xc0
     5b8:	0289      	lsls	r1, r1, #10
     5ba:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     5bc:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     5be:	4a0a      	ldr	r2, [pc, #40]	; (5e8 <nvm_set_config+0x80>)
     5c0:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     5c2:	6893      	ldr	r3, [r2, #8]
     5c4:	035b      	lsls	r3, r3, #13
     5c6:	0f5b      	lsrs	r3, r3, #29
     5c8:	4908      	ldr	r1, [pc, #32]	; (5ec <nvm_set_config+0x84>)
     5ca:	2408      	movs	r4, #8
     5cc:	409c      	lsls	r4, r3
     5ce:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     5d0:	6893      	ldr	r3, [r2, #8]
     5d2:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     5d4:	7843      	ldrb	r3, [r0, #1]
     5d6:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     5d8:	8b13      	ldrh	r3, [r2, #24]
     5da:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     5dc:	0fdb      	lsrs	r3, r3, #31
     5de:	011b      	lsls	r3, r3, #4
     5e0:	e7d0      	b.n	584 <nvm_set_config+0x1c>
     5e2:	46c0      	nop			; (mov r8, r8)
     5e4:	40000400 	.word	0x40000400
     5e8:	41004000 	.word	0x41004000
     5ec:	20000084 	.word	0x20000084

000005f0 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     5f0:	b530      	push	{r4, r5, lr}
     5f2:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     5f4:	4a22      	ldr	r2, [pc, #136]	; (680 <nvm_execute_command+0x90>)
     5f6:	8810      	ldrh	r0, [r2, #0]
     5f8:	8853      	ldrh	r3, [r2, #2]
     5fa:	4343      	muls	r3, r0
     5fc:	428b      	cmp	r3, r1
     5fe:	d206      	bcs.n	60e <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     600:	2280      	movs	r2, #128	; 0x80
     602:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     604:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     606:	4b1f      	ldr	r3, [pc, #124]	; (684 <nvm_execute_command+0x94>)
     608:	18cb      	adds	r3, r1, r3
     60a:	4293      	cmp	r3, r2
     60c:	d80e      	bhi.n	62c <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     60e:	4b1e      	ldr	r3, [pc, #120]	; (688 <nvm_execute_command+0x98>)
     610:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     612:	2280      	movs	r2, #128	; 0x80
     614:	02d2      	lsls	r2, r2, #11
     616:	432a      	orrs	r2, r5
     618:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     61a:	2220      	movs	r2, #32
     61c:	32ff      	adds	r2, #255	; 0xff
     61e:	831a      	strh	r2, [r3, #24]
     620:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     622:	07db      	lsls	r3, r3, #31
     624:	d403      	bmi.n	62e <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     626:	4b18      	ldr	r3, [pc, #96]	; (688 <nvm_execute_command+0x98>)
     628:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     62a:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     62c:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     62e:	2c45      	cmp	r4, #69	; 0x45
     630:	d822      	bhi.n	678 <nvm_execute_command+0x88>
     632:	00a3      	lsls	r3, r4, #2
     634:	4a15      	ldr	r2, [pc, #84]	; (68c <nvm_execute_command+0x9c>)
     636:	58d3      	ldr	r3, [r2, r3]
     638:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     63a:	4b13      	ldr	r3, [pc, #76]	; (688 <nvm_execute_command+0x98>)
     63c:	8b1b      	ldrh	r3, [r3, #24]
     63e:	05db      	lsls	r3, r3, #23
     640:	d503      	bpl.n	64a <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     642:	4b11      	ldr	r3, [pc, #68]	; (688 <nvm_execute_command+0x98>)
     644:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     646:	2010      	movs	r0, #16
     648:	e7f0      	b.n	62c <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     64a:	0889      	lsrs	r1, r1, #2
     64c:	0049      	lsls	r1, r1, #1
     64e:	4b0e      	ldr	r3, [pc, #56]	; (688 <nvm_execute_command+0x98>)
     650:	61d9      	str	r1, [r3, #28]
			break;
     652:	e003      	b.n	65c <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     654:	0889      	lsrs	r1, r1, #2
     656:	0049      	lsls	r1, r1, #1
     658:	4b0b      	ldr	r3, [pc, #44]	; (688 <nvm_execute_command+0x98>)
     65a:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     65c:	20a5      	movs	r0, #165	; 0xa5
     65e:	0200      	lsls	r0, r0, #8
     660:	4304      	orrs	r4, r0
     662:	4b09      	ldr	r3, [pc, #36]	; (688 <nvm_execute_command+0x98>)
     664:	801c      	strh	r4, [r3, #0]
     666:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     668:	2201      	movs	r2, #1
     66a:	7d0b      	ldrb	r3, [r1, #20]
     66c:	4213      	tst	r3, r2
     66e:	d0fc      	beq.n	66a <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     670:	4b05      	ldr	r3, [pc, #20]	; (688 <nvm_execute_command+0x98>)
     672:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     674:	2000      	movs	r0, #0
     676:	e7d9      	b.n	62c <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     678:	4b03      	ldr	r3, [pc, #12]	; (688 <nvm_execute_command+0x98>)
     67a:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     67c:	2017      	movs	r0, #23
     67e:	e7d5      	b.n	62c <nvm_execute_command+0x3c>
     680:	20000084 	.word	0x20000084
     684:	ff7fc000 	.word	0xff7fc000
     688:	41004000 	.word	0x41004000
     68c:	00003914 	.word	0x00003914

00000690 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     692:	4b25      	ldr	r3, [pc, #148]	; (728 <nvm_write_buffer+0x98>)
     694:	881d      	ldrh	r5, [r3, #0]
     696:	885b      	ldrh	r3, [r3, #2]
     698:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     69a:	2418      	movs	r4, #24
	if (destination_address >
     69c:	4283      	cmp	r3, r0
     69e:	d201      	bcs.n	6a4 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     6a0:	0020      	movs	r0, r4
     6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     6a4:	1e6b      	subs	r3, r5, #1
     6a6:	4218      	tst	r0, r3
     6a8:	d1fa      	bne.n	6a0 <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     6aa:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     6ac:	4295      	cmp	r5, r2
     6ae:	d3f7      	bcc.n	6a0 <nvm_write_buffer+0x10>
     6b0:	4b1e      	ldr	r3, [pc, #120]	; (72c <nvm_write_buffer+0x9c>)
     6b2:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     6b4:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     6b6:	07db      	lsls	r3, r3, #31
     6b8:	d5f2      	bpl.n	6a0 <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     6ba:	4c1d      	ldr	r4, [pc, #116]	; (730 <nvm_write_buffer+0xa0>)
     6bc:	4b1b      	ldr	r3, [pc, #108]	; (72c <nvm_write_buffer+0x9c>)
     6be:	801c      	strh	r4, [r3, #0]
     6c0:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     6c2:	2401      	movs	r4, #1
     6c4:	7d2b      	ldrb	r3, [r5, #20]
     6c6:	4223      	tst	r3, r4
     6c8:	d0fc      	beq.n	6c4 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     6ca:	2420      	movs	r4, #32
     6cc:	34ff      	adds	r4, #255	; 0xff
     6ce:	4b17      	ldr	r3, [pc, #92]	; (72c <nvm_write_buffer+0x9c>)
     6d0:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     6d2:	2a00      	cmp	r2, #0
     6d4:	d022      	beq.n	71c <nvm_write_buffer+0x8c>
     6d6:	2301      	movs	r3, #1
     6d8:	0005      	movs	r5, r0
     6da:	439d      	bics	r5, r3
     6dc:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     6de:	1e57      	subs	r7, r2, #1
     6e0:	e009      	b.n	6f6 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     6e2:	18ce      	adds	r6, r1, r3
     6e4:	7876      	ldrb	r6, [r6, #1]
     6e6:	0236      	lsls	r6, r6, #8
     6e8:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     6ea:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     6ec:	3302      	adds	r3, #2
     6ee:	b29b      	uxth	r3, r3
     6f0:	3502      	adds	r5, #2
     6f2:	429a      	cmp	r2, r3
     6f4:	d904      	bls.n	700 <nvm_write_buffer+0x70>
		data = buffer[i];
     6f6:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     6f8:	42bb      	cmp	r3, r7
     6fa:	dbf2      	blt.n	6e2 <nvm_write_buffer+0x52>
		data = buffer[i];
     6fc:	b2a4      	uxth	r4, r4
     6fe:	e7f4      	b.n	6ea <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     700:	4b09      	ldr	r3, [pc, #36]	; (728 <nvm_write_buffer+0x98>)
     702:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     704:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     706:	2b00      	cmp	r3, #0
     708:	d1ca      	bne.n	6a0 <nvm_write_buffer+0x10>
     70a:	2a3f      	cmp	r2, #63	; 0x3f
     70c:	d8c8      	bhi.n	6a0 <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     70e:	2200      	movs	r2, #0
     710:	0001      	movs	r1, r0
     712:	2004      	movs	r0, #4
     714:	4b07      	ldr	r3, [pc, #28]	; (734 <nvm_write_buffer+0xa4>)
     716:	4798      	blx	r3
     718:	0004      	movs	r4, r0
     71a:	e7c1      	b.n	6a0 <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     71c:	4b02      	ldr	r3, [pc, #8]	; (728 <nvm_write_buffer+0x98>)
     71e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     720:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     722:	2b00      	cmp	r3, #0
     724:	d0f3      	beq.n	70e <nvm_write_buffer+0x7e>
     726:	e7bb      	b.n	6a0 <nvm_write_buffer+0x10>
     728:	20000084 	.word	0x20000084
     72c:	41004000 	.word	0x41004000
     730:	ffffa544 	.word	0xffffa544
     734:	000005f1 	.word	0x000005f1

00000738 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     738:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     73a:	4b18      	ldr	r3, [pc, #96]	; (79c <nvm_read_buffer+0x64>)
     73c:	881d      	ldrh	r5, [r3, #0]
     73e:	885b      	ldrh	r3, [r3, #2]
     740:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     742:	2418      	movs	r4, #24
	if (source_address >
     744:	4283      	cmp	r3, r0
     746:	d201      	bcs.n	74c <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
     748:	0020      	movs	r0, r4
     74a:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
     74c:	1e6b      	subs	r3, r5, #1
     74e:	4218      	tst	r0, r3
     750:	d1fa      	bne.n	748 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     752:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     754:	4295      	cmp	r5, r2
     756:	d3f7      	bcc.n	748 <nvm_read_buffer+0x10>
     758:	4b11      	ldr	r3, [pc, #68]	; (7a0 <nvm_read_buffer+0x68>)
     75a:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     75c:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     75e:	07db      	lsls	r3, r3, #31
     760:	d5f2      	bpl.n	748 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     762:	2420      	movs	r4, #32
     764:	34ff      	adds	r4, #255	; 0xff
     766:	4b0e      	ldr	r3, [pc, #56]	; (7a0 <nvm_read_buffer+0x68>)
     768:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     76a:	2a00      	cmp	r2, #0
     76c:	d014      	beq.n	798 <nvm_read_buffer+0x60>
     76e:	2301      	movs	r3, #1
     770:	4398      	bics	r0, r3
     772:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     774:	1e56      	subs	r6, r2, #1
     776:	e004      	b.n	782 <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
     778:	3302      	adds	r3, #2
     77a:	b29b      	uxth	r3, r3
     77c:	3002      	adds	r0, #2
     77e:	429a      	cmp	r2, r3
     780:	d908      	bls.n	794 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
     782:	8804      	ldrh	r4, [r0, #0]
     784:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     786:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     788:	42b3      	cmp	r3, r6
     78a:	daf5      	bge.n	778 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
     78c:	18cd      	adds	r5, r1, r3
     78e:	0a24      	lsrs	r4, r4, #8
     790:	706c      	strb	r4, [r5, #1]
     792:	e7f1      	b.n	778 <nvm_read_buffer+0x40>
	return STATUS_OK;
     794:	2400      	movs	r4, #0
     796:	e7d7      	b.n	748 <nvm_read_buffer+0x10>
     798:	2400      	movs	r4, #0
     79a:	e7d5      	b.n	748 <nvm_read_buffer+0x10>
     79c:	20000084 	.word	0x20000084
     7a0:	41004000 	.word	0x41004000

000007a4 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     7a4:	4b13      	ldr	r3, [pc, #76]	; (7f4 <nvm_erase_row+0x50>)
     7a6:	881a      	ldrh	r2, [r3, #0]
     7a8:	885b      	ldrh	r3, [r3, #2]
     7aa:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     7ac:	2118      	movs	r1, #24
	if (row_address >
     7ae:	4283      	cmp	r3, r0
     7b0:	d201      	bcs.n	7b6 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     7b2:	0008      	movs	r0, r1
     7b4:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     7b6:	0092      	lsls	r2, r2, #2
     7b8:	3a01      	subs	r2, #1
     7ba:	4210      	tst	r0, r2
     7bc:	d1f9      	bne.n	7b2 <nvm_erase_row+0xe>
     7be:	4b0e      	ldr	r3, [pc, #56]	; (7f8 <nvm_erase_row+0x54>)
     7c0:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     7c2:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     7c4:	07db      	lsls	r3, r3, #31
     7c6:	d5f4      	bpl.n	7b2 <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     7c8:	4b0b      	ldr	r3, [pc, #44]	; (7f8 <nvm_erase_row+0x54>)
     7ca:	2220      	movs	r2, #32
     7cc:	32ff      	adds	r2, #255	; 0xff
     7ce:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     7d0:	0880      	lsrs	r0, r0, #2
     7d2:	0040      	lsls	r0, r0, #1
     7d4:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     7d6:	4a09      	ldr	r2, [pc, #36]	; (7fc <nvm_erase_row+0x58>)
     7d8:	801a      	strh	r2, [r3, #0]
     7da:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     7dc:	2201      	movs	r2, #1
     7de:	7d0b      	ldrb	r3, [r1, #20]
     7e0:	4213      	tst	r3, r2
     7e2:	d0fc      	beq.n	7de <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     7e4:	4b04      	ldr	r3, [pc, #16]	; (7f8 <nvm_erase_row+0x54>)
     7e6:	8b19      	ldrh	r1, [r3, #24]
     7e8:	201c      	movs	r0, #28
     7ea:	4001      	ands	r1, r0
	return STATUS_OK;
     7ec:	1e48      	subs	r0, r1, #1
     7ee:	4181      	sbcs	r1, r0
     7f0:	0089      	lsls	r1, r1, #2
     7f2:	e7de      	b.n	7b2 <nvm_erase_row+0xe>
     7f4:	20000084 	.word	0x20000084
     7f8:	41004000 	.word	0x41004000
     7fc:	ffffa502 	.word	0xffffa502

00000800 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     800:	b5f0      	push	{r4, r5, r6, r7, lr}
     802:	46de      	mov	lr, fp
     804:	4657      	mov	r7, sl
     806:	464e      	mov	r6, r9
     808:	4645      	mov	r5, r8
     80a:	b5e0      	push	{r5, r6, r7, lr}
     80c:	b087      	sub	sp, #28
     80e:	4680      	mov	r8, r0
     810:	9104      	str	r1, [sp, #16]
     812:	0016      	movs	r6, r2
     814:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     816:	2200      	movs	r2, #0
     818:	2300      	movs	r3, #0
     81a:	2100      	movs	r1, #0
     81c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     81e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     820:	2001      	movs	r0, #1
     822:	0021      	movs	r1, r4
     824:	9600      	str	r6, [sp, #0]
     826:	9701      	str	r7, [sp, #4]
     828:	465c      	mov	r4, fp
     82a:	9403      	str	r4, [sp, #12]
     82c:	4644      	mov	r4, r8
     82e:	9405      	str	r4, [sp, #20]
     830:	e013      	b.n	85a <long_division+0x5a>
     832:	2420      	movs	r4, #32
     834:	1a64      	subs	r4, r4, r1
     836:	0005      	movs	r5, r0
     838:	40e5      	lsrs	r5, r4
     83a:	46a8      	mov	r8, r5
     83c:	e014      	b.n	868 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     83e:	9c00      	ldr	r4, [sp, #0]
     840:	9d01      	ldr	r5, [sp, #4]
     842:	1b12      	subs	r2, r2, r4
     844:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     846:	465c      	mov	r4, fp
     848:	464d      	mov	r5, r9
     84a:	432c      	orrs	r4, r5
     84c:	46a3      	mov	fp, r4
     84e:	9c03      	ldr	r4, [sp, #12]
     850:	4645      	mov	r5, r8
     852:	432c      	orrs	r4, r5
     854:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     856:	3901      	subs	r1, #1
     858:	d325      	bcc.n	8a6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     85a:	2420      	movs	r4, #32
     85c:	4264      	negs	r4, r4
     85e:	190c      	adds	r4, r1, r4
     860:	d4e7      	bmi.n	832 <long_division+0x32>
     862:	0005      	movs	r5, r0
     864:	40a5      	lsls	r5, r4
     866:	46a8      	mov	r8, r5
     868:	0004      	movs	r4, r0
     86a:	408c      	lsls	r4, r1
     86c:	46a1      	mov	r9, r4
		r = r << 1;
     86e:	1892      	adds	r2, r2, r2
     870:	415b      	adcs	r3, r3
     872:	0014      	movs	r4, r2
     874:	001d      	movs	r5, r3
		if (n & bit_shift) {
     876:	9e05      	ldr	r6, [sp, #20]
     878:	464f      	mov	r7, r9
     87a:	403e      	ands	r6, r7
     87c:	46b4      	mov	ip, r6
     87e:	9e04      	ldr	r6, [sp, #16]
     880:	4647      	mov	r7, r8
     882:	403e      	ands	r6, r7
     884:	46b2      	mov	sl, r6
     886:	4666      	mov	r6, ip
     888:	4657      	mov	r7, sl
     88a:	433e      	orrs	r6, r7
     88c:	d003      	beq.n	896 <long_division+0x96>
			r |= 0x01;
     88e:	0006      	movs	r6, r0
     890:	4326      	orrs	r6, r4
     892:	0032      	movs	r2, r6
     894:	002b      	movs	r3, r5
		if (r >= d) {
     896:	9c00      	ldr	r4, [sp, #0]
     898:	9d01      	ldr	r5, [sp, #4]
     89a:	429d      	cmp	r5, r3
     89c:	d8db      	bhi.n	856 <long_division+0x56>
     89e:	d1ce      	bne.n	83e <long_division+0x3e>
     8a0:	4294      	cmp	r4, r2
     8a2:	d8d8      	bhi.n	856 <long_division+0x56>
     8a4:	e7cb      	b.n	83e <long_division+0x3e>
     8a6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     8a8:	4658      	mov	r0, fp
     8aa:	0019      	movs	r1, r3
     8ac:	b007      	add	sp, #28
     8ae:	bc3c      	pop	{r2, r3, r4, r5}
     8b0:	4690      	mov	r8, r2
     8b2:	4699      	mov	r9, r3
     8b4:	46a2      	mov	sl, r4
     8b6:	46ab      	mov	fp, r5
     8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000008ba <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     8ba:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     8bc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8be:	2340      	movs	r3, #64	; 0x40
     8c0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     8c2:	4281      	cmp	r1, r0
     8c4:	d202      	bcs.n	8cc <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     8c6:	0018      	movs	r0, r3
     8c8:	bd10      	pop	{r4, pc}
		baud_calculated++;
     8ca:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     8cc:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     8ce:	1c63      	adds	r3, r4, #1
     8d0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     8d2:	4288      	cmp	r0, r1
     8d4:	d9f9      	bls.n	8ca <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8d6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     8d8:	2cff      	cmp	r4, #255	; 0xff
     8da:	d8f4      	bhi.n	8c6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     8dc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     8de:	2300      	movs	r3, #0
     8e0:	e7f1      	b.n	8c6 <_sercom_get_sync_baud_val+0xc>
	...

000008e4 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8e6:	b083      	sub	sp, #12
     8e8:	000f      	movs	r7, r1
     8ea:	0016      	movs	r6, r2
     8ec:	aa08      	add	r2, sp, #32
     8ee:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     8f0:	0004      	movs	r4, r0
     8f2:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     8f4:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     8f6:	42bc      	cmp	r4, r7
     8f8:	d902      	bls.n	900 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     8fa:	0010      	movs	r0, r2
     8fc:	b003      	add	sp, #12
     8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     900:	2b00      	cmp	r3, #0
     902:	d114      	bne.n	92e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     904:	0002      	movs	r2, r0
     906:	0008      	movs	r0, r1
     908:	2100      	movs	r1, #0
     90a:	4c19      	ldr	r4, [pc, #100]	; (970 <_sercom_get_async_baud_val+0x8c>)
     90c:	47a0      	blx	r4
     90e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     910:	003a      	movs	r2, r7
     912:	2300      	movs	r3, #0
     914:	2000      	movs	r0, #0
     916:	4c17      	ldr	r4, [pc, #92]	; (974 <_sercom_get_async_baud_val+0x90>)
     918:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     91a:	2200      	movs	r2, #0
     91c:	2301      	movs	r3, #1
     91e:	1a12      	subs	r2, r2, r0
     920:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     922:	0c12      	lsrs	r2, r2, #16
     924:	041b      	lsls	r3, r3, #16
     926:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     928:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     92a:	2200      	movs	r2, #0
     92c:	e7e5      	b.n	8fa <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     92e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     930:	2b01      	cmp	r3, #1
     932:	d1f9      	bne.n	928 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     934:	000a      	movs	r2, r1
     936:	2300      	movs	r3, #0
     938:	2100      	movs	r1, #0
     93a:	4c0d      	ldr	r4, [pc, #52]	; (970 <_sercom_get_async_baud_val+0x8c>)
     93c:	47a0      	blx	r4
     93e:	0002      	movs	r2, r0
     940:	000b      	movs	r3, r1
     942:	9200      	str	r2, [sp, #0]
     944:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     946:	0038      	movs	r0, r7
     948:	2100      	movs	r1, #0
     94a:	4c0a      	ldr	r4, [pc, #40]	; (974 <_sercom_get_async_baud_val+0x90>)
     94c:	47a0      	blx	r4
     94e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     950:	2380      	movs	r3, #128	; 0x80
     952:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     954:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     956:	4298      	cmp	r0, r3
     958:	d8cf      	bhi.n	8fa <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     95a:	0f79      	lsrs	r1, r7, #29
     95c:	00f8      	lsls	r0, r7, #3
     95e:	9a00      	ldr	r2, [sp, #0]
     960:	9b01      	ldr	r3, [sp, #4]
     962:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     964:	00ea      	lsls	r2, r5, #3
     966:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     968:	b2d2      	uxtb	r2, r2
     96a:	0352      	lsls	r2, r2, #13
     96c:	432a      	orrs	r2, r5
     96e:	e7db      	b.n	928 <_sercom_get_async_baud_val+0x44>
     970:	0000276d 	.word	0x0000276d
     974:	00000801 	.word	0x00000801

00000978 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     978:	b510      	push	{r4, lr}
     97a:	b082      	sub	sp, #8
     97c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     97e:	4b0e      	ldr	r3, [pc, #56]	; (9b8 <sercom_set_gclk_generator+0x40>)
     980:	781b      	ldrb	r3, [r3, #0]
     982:	2b00      	cmp	r3, #0
     984:	d007      	beq.n	996 <sercom_set_gclk_generator+0x1e>
     986:	2900      	cmp	r1, #0
     988:	d105      	bne.n	996 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     98a:	4b0b      	ldr	r3, [pc, #44]	; (9b8 <sercom_set_gclk_generator+0x40>)
     98c:	785b      	ldrb	r3, [r3, #1]
     98e:	4283      	cmp	r3, r0
     990:	d010      	beq.n	9b4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     992:	201d      	movs	r0, #29
     994:	e00c      	b.n	9b0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     996:	a901      	add	r1, sp, #4
     998:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     99a:	2013      	movs	r0, #19
     99c:	4b07      	ldr	r3, [pc, #28]	; (9bc <sercom_set_gclk_generator+0x44>)
     99e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     9a0:	2013      	movs	r0, #19
     9a2:	4b07      	ldr	r3, [pc, #28]	; (9c0 <sercom_set_gclk_generator+0x48>)
     9a4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     9a6:	4b04      	ldr	r3, [pc, #16]	; (9b8 <sercom_set_gclk_generator+0x40>)
     9a8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     9aa:	2201      	movs	r2, #1
     9ac:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     9ae:	2000      	movs	r0, #0
}
     9b0:	b002      	add	sp, #8
     9b2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     9b4:	2000      	movs	r0, #0
     9b6:	e7fb      	b.n	9b0 <sercom_set_gclk_generator+0x38>
     9b8:	2000008c 	.word	0x2000008c
     9bc:	00001c41 	.word	0x00001c41
     9c0:	00001bb5 	.word	0x00001bb5

000009c4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     9c4:	4b40      	ldr	r3, [pc, #256]	; (ac8 <_sercom_get_default_pad+0x104>)
     9c6:	4298      	cmp	r0, r3
     9c8:	d031      	beq.n	a2e <_sercom_get_default_pad+0x6a>
     9ca:	d90a      	bls.n	9e2 <_sercom_get_default_pad+0x1e>
     9cc:	4b3f      	ldr	r3, [pc, #252]	; (acc <_sercom_get_default_pad+0x108>)
     9ce:	4298      	cmp	r0, r3
     9d0:	d04d      	beq.n	a6e <_sercom_get_default_pad+0xaa>
     9d2:	4b3f      	ldr	r3, [pc, #252]	; (ad0 <_sercom_get_default_pad+0x10c>)
     9d4:	4298      	cmp	r0, r3
     9d6:	d05a      	beq.n	a8e <_sercom_get_default_pad+0xca>
     9d8:	4b3e      	ldr	r3, [pc, #248]	; (ad4 <_sercom_get_default_pad+0x110>)
     9da:	4298      	cmp	r0, r3
     9dc:	d037      	beq.n	a4e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     9de:	2000      	movs	r0, #0
}
     9e0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     9e2:	4b3d      	ldr	r3, [pc, #244]	; (ad8 <_sercom_get_default_pad+0x114>)
     9e4:	4298      	cmp	r0, r3
     9e6:	d00c      	beq.n	a02 <_sercom_get_default_pad+0x3e>
     9e8:	4b3c      	ldr	r3, [pc, #240]	; (adc <_sercom_get_default_pad+0x118>)
     9ea:	4298      	cmp	r0, r3
     9ec:	d1f7      	bne.n	9de <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     9ee:	2901      	cmp	r1, #1
     9f0:	d017      	beq.n	a22 <_sercom_get_default_pad+0x5e>
     9f2:	2900      	cmp	r1, #0
     9f4:	d05d      	beq.n	ab2 <_sercom_get_default_pad+0xee>
     9f6:	2902      	cmp	r1, #2
     9f8:	d015      	beq.n	a26 <_sercom_get_default_pad+0x62>
     9fa:	2903      	cmp	r1, #3
     9fc:	d015      	beq.n	a2a <_sercom_get_default_pad+0x66>
	return 0;
     9fe:	2000      	movs	r0, #0
     a00:	e7ee      	b.n	9e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a02:	2901      	cmp	r1, #1
     a04:	d007      	beq.n	a16 <_sercom_get_default_pad+0x52>
     a06:	2900      	cmp	r1, #0
     a08:	d051      	beq.n	aae <_sercom_get_default_pad+0xea>
     a0a:	2902      	cmp	r1, #2
     a0c:	d005      	beq.n	a1a <_sercom_get_default_pad+0x56>
     a0e:	2903      	cmp	r1, #3
     a10:	d005      	beq.n	a1e <_sercom_get_default_pad+0x5a>
	return 0;
     a12:	2000      	movs	r0, #0
     a14:	e7e4      	b.n	9e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a16:	4832      	ldr	r0, [pc, #200]	; (ae0 <_sercom_get_default_pad+0x11c>)
     a18:	e7e2      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a1a:	4832      	ldr	r0, [pc, #200]	; (ae4 <_sercom_get_default_pad+0x120>)
     a1c:	e7e0      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a1e:	4832      	ldr	r0, [pc, #200]	; (ae8 <_sercom_get_default_pad+0x124>)
     a20:	e7de      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a22:	4832      	ldr	r0, [pc, #200]	; (aec <_sercom_get_default_pad+0x128>)
     a24:	e7dc      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a26:	4832      	ldr	r0, [pc, #200]	; (af0 <_sercom_get_default_pad+0x12c>)
     a28:	e7da      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a2a:	4832      	ldr	r0, [pc, #200]	; (af4 <_sercom_get_default_pad+0x130>)
     a2c:	e7d8      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a2e:	2901      	cmp	r1, #1
     a30:	d007      	beq.n	a42 <_sercom_get_default_pad+0x7e>
     a32:	2900      	cmp	r1, #0
     a34:	d03f      	beq.n	ab6 <_sercom_get_default_pad+0xf2>
     a36:	2902      	cmp	r1, #2
     a38:	d005      	beq.n	a46 <_sercom_get_default_pad+0x82>
     a3a:	2903      	cmp	r1, #3
     a3c:	d005      	beq.n	a4a <_sercom_get_default_pad+0x86>
	return 0;
     a3e:	2000      	movs	r0, #0
     a40:	e7ce      	b.n	9e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a42:	482d      	ldr	r0, [pc, #180]	; (af8 <_sercom_get_default_pad+0x134>)
     a44:	e7cc      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a46:	482d      	ldr	r0, [pc, #180]	; (afc <_sercom_get_default_pad+0x138>)
     a48:	e7ca      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a4a:	482d      	ldr	r0, [pc, #180]	; (b00 <_sercom_get_default_pad+0x13c>)
     a4c:	e7c8      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a4e:	2901      	cmp	r1, #1
     a50:	d007      	beq.n	a62 <_sercom_get_default_pad+0x9e>
     a52:	2900      	cmp	r1, #0
     a54:	d031      	beq.n	aba <_sercom_get_default_pad+0xf6>
     a56:	2902      	cmp	r1, #2
     a58:	d005      	beq.n	a66 <_sercom_get_default_pad+0xa2>
     a5a:	2903      	cmp	r1, #3
     a5c:	d005      	beq.n	a6a <_sercom_get_default_pad+0xa6>
	return 0;
     a5e:	2000      	movs	r0, #0
     a60:	e7be      	b.n	9e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a62:	4828      	ldr	r0, [pc, #160]	; (b04 <_sercom_get_default_pad+0x140>)
     a64:	e7bc      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a66:	4828      	ldr	r0, [pc, #160]	; (b08 <_sercom_get_default_pad+0x144>)
     a68:	e7ba      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a6a:	4828      	ldr	r0, [pc, #160]	; (b0c <_sercom_get_default_pad+0x148>)
     a6c:	e7b8      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a6e:	2901      	cmp	r1, #1
     a70:	d007      	beq.n	a82 <_sercom_get_default_pad+0xbe>
     a72:	2900      	cmp	r1, #0
     a74:	d023      	beq.n	abe <_sercom_get_default_pad+0xfa>
     a76:	2902      	cmp	r1, #2
     a78:	d005      	beq.n	a86 <_sercom_get_default_pad+0xc2>
     a7a:	2903      	cmp	r1, #3
     a7c:	d005      	beq.n	a8a <_sercom_get_default_pad+0xc6>
	return 0;
     a7e:	2000      	movs	r0, #0
     a80:	e7ae      	b.n	9e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     a82:	4823      	ldr	r0, [pc, #140]	; (b10 <_sercom_get_default_pad+0x14c>)
     a84:	e7ac      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a86:	4823      	ldr	r0, [pc, #140]	; (b14 <_sercom_get_default_pad+0x150>)
     a88:	e7aa      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a8a:	4823      	ldr	r0, [pc, #140]	; (b18 <_sercom_get_default_pad+0x154>)
     a8c:	e7a8      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     a8e:	2901      	cmp	r1, #1
     a90:	d007      	beq.n	aa2 <_sercom_get_default_pad+0xde>
     a92:	2900      	cmp	r1, #0
     a94:	d015      	beq.n	ac2 <_sercom_get_default_pad+0xfe>
     a96:	2902      	cmp	r1, #2
     a98:	d005      	beq.n	aa6 <_sercom_get_default_pad+0xe2>
     a9a:	2903      	cmp	r1, #3
     a9c:	d005      	beq.n	aaa <_sercom_get_default_pad+0xe6>
	return 0;
     a9e:	2000      	movs	r0, #0
     aa0:	e79e      	b.n	9e0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     aa2:	481e      	ldr	r0, [pc, #120]	; (b1c <_sercom_get_default_pad+0x158>)
     aa4:	e79c      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     aa6:	481e      	ldr	r0, [pc, #120]	; (b20 <_sercom_get_default_pad+0x15c>)
     aa8:	e79a      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     aaa:	481e      	ldr	r0, [pc, #120]	; (b24 <_sercom_get_default_pad+0x160>)
     aac:	e798      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     aae:	481e      	ldr	r0, [pc, #120]	; (b28 <_sercom_get_default_pad+0x164>)
     ab0:	e796      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     ab2:	2003      	movs	r0, #3
     ab4:	e794      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     ab6:	481d      	ldr	r0, [pc, #116]	; (b2c <_sercom_get_default_pad+0x168>)
     ab8:	e792      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     aba:	481d      	ldr	r0, [pc, #116]	; (b30 <_sercom_get_default_pad+0x16c>)
     abc:	e790      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     abe:	481d      	ldr	r0, [pc, #116]	; (b34 <_sercom_get_default_pad+0x170>)
     ac0:	e78e      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     ac2:	481d      	ldr	r0, [pc, #116]	; (b38 <_sercom_get_default_pad+0x174>)
     ac4:	e78c      	b.n	9e0 <_sercom_get_default_pad+0x1c>
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	42001000 	.word	0x42001000
     acc:	42001800 	.word	0x42001800
     ad0:	42001c00 	.word	0x42001c00
     ad4:	42001400 	.word	0x42001400
     ad8:	42000800 	.word	0x42000800
     adc:	42000c00 	.word	0x42000c00
     ae0:	00050003 	.word	0x00050003
     ae4:	00060003 	.word	0x00060003
     ae8:	00070003 	.word	0x00070003
     aec:	00010003 	.word	0x00010003
     af0:	001e0003 	.word	0x001e0003
     af4:	001f0003 	.word	0x001f0003
     af8:	00090003 	.word	0x00090003
     afc:	000a0003 	.word	0x000a0003
     b00:	000b0003 	.word	0x000b0003
     b04:	00110003 	.word	0x00110003
     b08:	00120003 	.word	0x00120003
     b0c:	00130003 	.word	0x00130003
     b10:	000d0003 	.word	0x000d0003
     b14:	000e0003 	.word	0x000e0003
     b18:	000f0003 	.word	0x000f0003
     b1c:	00170003 	.word	0x00170003
     b20:	00180003 	.word	0x00180003
     b24:	00190003 	.word	0x00190003
     b28:	00040003 	.word	0x00040003
     b2c:	00080003 	.word	0x00080003
     b30:	00100003 	.word	0x00100003
     b34:	000c0003 	.word	0x000c0003
     b38:	00160003 	.word	0x00160003

00000b3c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     b3c:	b530      	push	{r4, r5, lr}
     b3e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     b40:	4b0b      	ldr	r3, [pc, #44]	; (b70 <_sercom_get_sercom_inst_index+0x34>)
     b42:	466a      	mov	r2, sp
     b44:	cb32      	ldmia	r3!, {r1, r4, r5}
     b46:	c232      	stmia	r2!, {r1, r4, r5}
     b48:	cb32      	ldmia	r3!, {r1, r4, r5}
     b4a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     b4c:	9b00      	ldr	r3, [sp, #0]
     b4e:	4283      	cmp	r3, r0
     b50:	d00b      	beq.n	b6a <_sercom_get_sercom_inst_index+0x2e>
     b52:	2301      	movs	r3, #1
     b54:	009a      	lsls	r2, r3, #2
     b56:	4669      	mov	r1, sp
     b58:	5852      	ldr	r2, [r2, r1]
     b5a:	4282      	cmp	r2, r0
     b5c:	d006      	beq.n	b6c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b5e:	3301      	adds	r3, #1
     b60:	2b06      	cmp	r3, #6
     b62:	d1f7      	bne.n	b54 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     b64:	2000      	movs	r0, #0
}
     b66:	b007      	add	sp, #28
     b68:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b6a:	2300      	movs	r3, #0
			return i;
     b6c:	b2d8      	uxtb	r0, r3
     b6e:	e7fa      	b.n	b66 <_sercom_get_sercom_inst_index+0x2a>
     b70:	00003a2c 	.word	0x00003a2c

00000b74 <_spi_master_vec_int_handler>:
 *
 * \param[in] sercom_index SERCOM instance number passed from the master SERCOM
 * driver.
 */
static void _spi_master_vec_int_handler(uint8_t sercom_index)
{
     b74:	b570      	push	{r4, r5, r6, lr}
	struct spi_master_vec_module *const module =
     b76:	0080      	lsls	r0, r0, #2
     b78:	4b40      	ldr	r3, [pc, #256]	; (c7c <_spi_master_vec_int_handler+0x108>)
     b7a:	58c3      	ldr	r3, [r0, r3]
			_sercom_instances[sercom_index];
	enum _spi_master_vec_direction dir = module->direction;
     b7c:	795c      	ldrb	r4, [r3, #5]
     b7e:	b2e4      	uxtb	r4, r4
	SercomSpi *const spi_hw = &(module->sercom->SPI);
     b80:	6818      	ldr	r0, [r3, #0]
	uint8_t int_status;

	int_status = spi_hw->INTFLAG.reg ;
     b82:	7e02      	ldrb	r2, [r0, #24]
    int_status &= spi_hw->INTENSET.reg;
     b84:	7d81      	ldrb	r1, [r0, #22]
     b86:	400a      	ands	r2, r1

	if (int_status & SERCOM_SPI_INTFLAG_DRE) {
     b88:	07d1      	lsls	r1, r2, #31
     b8a:	d504      	bpl.n	b96 <_spi_master_vec_int_handler+0x22>
		uint_fast8_t tx_lead_on_rx = module->tx_lead_on_rx;
     b8c:	6959      	ldr	r1, [r3, #20]

		/* If TX is ahead of RX by 2+ bytes, allow RX to catch up.
		 * Note: will only happen _once_ per READ or BOTH.
		 */
		if ((tx_lead_on_rx >= 2) && (dir != SPI_MASTER_VEC_DIRECTION_WRITE)) {
     b8e:	2901      	cmp	r1, #1
     b90:	d91c      	bls.n	bcc <_spi_master_vec_int_handler+0x58>
     b92:	2c01      	cmp	r4, #1
     b94:	d063      	beq.n	c5e <_spi_master_vec_int_handler+0xea>
			}
		}
	}

	/* For READ and BOTH, store the received byte */
	if (int_status & SERCOM_SPI_INTFLAG_RXC) {
     b96:	0751      	lsls	r1, r2, #29
     b98:	d50f      	bpl.n	bba <_spi_master_vec_int_handler+0x46>
		spi_master_vec_buflen_t rx_length;
		uint8_t *rx_head_ptr;

		rx_head_ptr = module->rx_head_ptr;
     b9a:	68d9      	ldr	r1, [r3, #12]
		if (rx_head_ptr != NULL) {
     b9c:	2900      	cmp	r1, #0
     b9e:	d041      	beq.n	c24 <_spi_master_vec_int_handler+0xb0>
			*(rx_head_ptr++) = spi_hw->DATA.reg;
     ba0:	1c4e      	adds	r6, r1, #1
     ba2:	6a85      	ldr	r5, [r0, #40]	; 0x28
     ba4:	700d      	strb	r5, [r1, #0]
		} else {
			uint8_t dummy;
			dummy = spi_hw->DATA.reg;
			UNUSED(dummy);
		}
		module->tx_lead_on_rx--;
     ba6:	6959      	ldr	r1, [r3, #20]
     ba8:	3901      	subs	r1, #1
     baa:	6159      	str	r1, [r3, #20]

		/* Check if this was the last byte to receive */
		rx_length = module->rx_length - 1;
     bac:	8919      	ldrh	r1, [r3, #8]
     bae:	3901      	subs	r1, #1
     bb0:	b289      	uxth	r1, r1

		if (rx_length) {
     bb2:	2900      	cmp	r1, #0
     bb4:	d039      	beq.n	c2a <_spi_master_vec_int_handler+0xb6>
			module->rx_head_ptr = rx_head_ptr;
     bb6:	60de      	str	r6, [r3, #12]
			module->rx_length = rx_length;
     bb8:	8119      	strh	r1, [r3, #8]
			}
		}
	}

	/* For WRITE */
	if (int_status & SERCOM_SPI_INTFLAG_TXC) {
     bba:	0792      	lsls	r2, r2, #30
     bbc:	d505      	bpl.n	bca <_spi_master_vec_int_handler+0x56>
		/* End transaction here, since last byte has been sent */
		spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_TXC;
     bbe:	2202      	movs	r2, #2
     bc0:	7502      	strb	r2, [r0, #20]

		dir = SPI_MASTER_VEC_DIRECTION_IDLE;
		module->direction = dir;
     bc2:	3201      	adds	r2, #1
     bc4:	715a      	strb	r2, [r3, #5]
		module->status = STATUS_OK;
     bc6:	2200      	movs	r2, #0
     bc8:	719a      	strb	r2, [r3, #6]
#ifdef CONF_SPI_MASTER_VEC_OS_SUPPORT
		CONF_SPI_MASTER_VEC_GIVE_SEMAPHORE_FROM_ISR(module->busy_semaphore);
#endif
	}
}
     bca:	bd70      	pop	{r4, r5, r6, pc}
			module->tx_lead_on_rx = ++tx_lead_on_rx;
     bcc:	3101      	adds	r1, #1
     bce:	6159      	str	r1, [r3, #20]
			if (dir == SPI_MASTER_VEC_DIRECTION_READ) {
     bd0:	2c00      	cmp	r4, #0
     bd2:	d146      	bne.n	c62 <_spi_master_vec_int_handler+0xee>
				spi_hw->DATA.reg = 0;
     bd4:	6284      	str	r4, [r0, #40]	; 0x28
				tx_lead_limit = (module->rx_bufdesc_ptr + 1)->length;
     bd6:	699c      	ldr	r4, [r3, #24]
     bd8:	89a6      	ldrh	r6, [r4, #12]
				if (!tx_lead_limit || !(module->rx_bufdesc_ptr + 2)->length) {
     bda:	2e00      	cmp	r6, #0
     bdc:	d004      	beq.n	be8 <_spi_master_vec_int_handler+0x74>
     bde:	699c      	ldr	r4, [r3, #24]
     be0:	8aa5      	ldrh	r5, [r4, #20]
     be2:	2400      	movs	r4, #0
     be4:	2d00      	cmp	r5, #0
     be6:	d1d6      	bne.n	b96 <_spi_master_vec_int_handler+0x22>
					tx_lead_limit += module->rx_length;
     be8:	891d      	ldrh	r5, [r3, #8]
     bea:	19ad      	adds	r5, r5, r6
     bec:	2400      	movs	r4, #0
					if (tx_lead_on_rx >= tx_lead_limit) {
     bee:	428d      	cmp	r5, r1
     bf0:	d8d1      	bhi.n	b96 <_spi_master_vec_int_handler+0x22>
						spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_DRE;
     bf2:	2101      	movs	r1, #1
     bf4:	7501      	strb	r1, [r0, #20]
     bf6:	e7ce      	b.n	b96 <_spi_master_vec_int_handler+0x22>
					tx_length = (++module->tx_bufdesc_ptr)->length;
     bf8:	69dd      	ldr	r5, [r3, #28]
     bfa:	002e      	movs	r6, r5
     bfc:	3608      	adds	r6, #8
     bfe:	61de      	str	r6, [r3, #28]
     c00:	89ad      	ldrh	r5, [r5, #12]
					if (tx_length) {
     c02:	2d00      	cmp	r5, #0
     c04:	d004      	beq.n	c10 <_spi_master_vec_int_handler+0x9c>
						module->tx_head_ptr = module->tx_bufdesc_ptr->data;
     c06:	69d9      	ldr	r1, [r3, #28]
     c08:	6809      	ldr	r1, [r1, #0]
     c0a:	6119      	str	r1, [r3, #16]
						module->tx_length = tx_length;
     c0c:	815d      	strh	r5, [r3, #10]
     c0e:	e7c2      	b.n	b96 <_spi_master_vec_int_handler+0x22>
						if (dir == SPI_MASTER_VEC_DIRECTION_WRITE) {
     c10:	2c01      	cmp	r4, #1
     c12:	d002      	beq.n	c1a <_spi_master_vec_int_handler+0xa6>
							module->direction = dir;
     c14:	2400      	movs	r4, #0
     c16:	715c      	strb	r4, [r3, #5]
							goto check_for_read_end;
     c18:	e7dd      	b.n	bd6 <_spi_master_vec_int_handler+0x62>
							spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_DRE;
     c1a:	2101      	movs	r1, #1
     c1c:	7501      	strb	r1, [r0, #20]
							spi_hw->INTENSET.reg = SERCOM_SPI_INTFLAG_TXC;
     c1e:	3101      	adds	r1, #1
     c20:	7581      	strb	r1, [r0, #22]
     c22:	e7b8      	b.n	b96 <_spi_master_vec_int_handler+0x22>
			dummy = spi_hw->DATA.reg;
     c24:	6a85      	ldr	r5, [r0, #40]	; 0x28
		rx_head_ptr = module->rx_head_ptr;
     c26:	000e      	movs	r6, r1
     c28:	e7bd      	b.n	ba6 <_spi_master_vec_int_handler+0x32>
			rx_length = (++module->rx_bufdesc_ptr)->length;
     c2a:	6999      	ldr	r1, [r3, #24]
     c2c:	000d      	movs	r5, r1
     c2e:	3508      	adds	r5, #8
     c30:	619d      	str	r5, [r3, #24]
     c32:	8989      	ldrh	r1, [r1, #12]
			if (rx_length) {
     c34:	2900      	cmp	r1, #0
     c36:	d004      	beq.n	c42 <_spi_master_vec_int_handler+0xce>
				module->rx_head_ptr = module->rx_bufdesc_ptr->data;
     c38:	699c      	ldr	r4, [r3, #24]
     c3a:	6824      	ldr	r4, [r4, #0]
     c3c:	60dc      	str	r4, [r3, #12]
				module->rx_length = rx_length;
     c3e:	8119      	strh	r1, [r3, #8]
     c40:	e7bb      	b.n	bba <_spi_master_vec_int_handler+0x46>
				spi_hw->CTRLB.reg = 0;
     c42:	2100      	movs	r1, #0
     c44:	6041      	str	r1, [r0, #4]
				spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_RXC;
     c46:	3104      	adds	r1, #4
     c48:	7501      	strb	r1, [r0, #20]
				if (dir == SPI_MASTER_VEC_DIRECTION_READ) {
     c4a:	2c00      	cmp	r4, #0
     c4c:	d104      	bne.n	c58 <_spi_master_vec_int_handler+0xe4>
					module->direction = dir;
     c4e:	3901      	subs	r1, #1
     c50:	7159      	strb	r1, [r3, #5]
					module->status = STATUS_OK;
     c52:	2100      	movs	r1, #0
     c54:	7199      	strb	r1, [r3, #6]
     c56:	e7b0      	b.n	bba <_spi_master_vec_int_handler+0x46>
					module->direction = dir;
     c58:	2101      	movs	r1, #1
     c5a:	7159      	strb	r1, [r3, #5]
     c5c:	e7ad      	b.n	bba <_spi_master_vec_int_handler+0x46>
			module->tx_lead_on_rx = ++tx_lead_on_rx;
     c5e:	3101      	adds	r1, #1
     c60:	6159      	str	r1, [r3, #20]
				tx_head_ptr = module->tx_head_ptr;
     c62:	691e      	ldr	r6, [r3, #16]
				spi_hw->DATA.reg = *(tx_head_ptr++);
     c64:	7835      	ldrb	r5, [r6, #0]
     c66:	6285      	str	r5, [r0, #40]	; 0x28
				tx_length = module->tx_length - 1;
     c68:	895d      	ldrh	r5, [r3, #10]
     c6a:	3d01      	subs	r5, #1
     c6c:	b2ad      	uxth	r5, r5
				if (tx_length) {
     c6e:	2d00      	cmp	r5, #0
     c70:	d0c2      	beq.n	bf8 <_spi_master_vec_int_handler+0x84>
				spi_hw->DATA.reg = *(tx_head_ptr++);
     c72:	3601      	adds	r6, #1
					module->tx_head_ptr = tx_head_ptr;
     c74:	611e      	str	r6, [r3, #16]
					module->tx_length = tx_length;
     c76:	815d      	strh	r5, [r3, #10]
     c78:	e78d      	b.n	b96 <_spi_master_vec_int_handler+0x22>
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	20000208 	.word	0x20000208

00000c80 <spi_master_vec_init>:
{
     c80:	b5f0      	push	{r4, r5, r6, r7, lr}
     c82:	46c6      	mov	lr, r8
     c84:	b500      	push	{lr}
     c86:	b084      	sub	sp, #16
     c88:	4680      	mov	r8, r0
     c8a:	000c      	movs	r4, r1
     c8c:	0015      	movs	r5, r2
	uint32_t sercom_index = _sercom_get_sercom_inst_index((Sercom *)spi_hw);
     c8e:	0008      	movs	r0, r1
     c90:	4b59      	ldr	r3, [pc, #356]	; (df8 <spi_master_vec_init+0x178>)
     c92:	4798      	blx	r3
     c94:	0007      	movs	r7, r0
	module->sercom = sercom;
     c96:	4643      	mov	r3, r8
     c98:	601c      	str	r4, [r3, #0]
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     c9a:	4a58      	ldr	r2, [pc, #352]	; (dfc <spi_master_vec_init+0x17c>)
     c9c:	6a11      	ldr	r1, [r2, #32]
	uint32_t pm_index = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     c9e:	3002      	adds	r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     ca0:	2301      	movs	r3, #1
     ca2:	4083      	lsls	r3, r0
     ca4:	430b      	orrs	r3, r1
     ca6:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->gclk_generator;
     ca8:	a903      	add	r1, sp, #12
     caa:	792b      	ldrb	r3, [r5, #4]
     cac:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index = sercom_index + SERCOM0_GCLK_ID_CORE;
     cae:	003e      	movs	r6, r7
     cb0:	3614      	adds	r6, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     cb2:	b2f6      	uxtb	r6, r6
     cb4:	0030      	movs	r0, r6
     cb6:	4b52      	ldr	r3, [pc, #328]	; (e00 <spi_master_vec_init+0x180>)
     cb8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     cba:	0030      	movs	r0, r6
     cbc:	4b51      	ldr	r3, [pc, #324]	; (e04 <spi_master_vec_init+0x184>)
     cbe:	4798      	blx	r3
	sercom_set_gclk_generator(config->gclk_generator, false);
     cc0:	7928      	ldrb	r0, [r5, #4]
     cc2:	2100      	movs	r1, #0
     cc4:	4b50      	ldr	r3, [pc, #320]	; (e08 <spi_master_vec_init+0x188>)
     cc6:	4798      	blx	r3
	while (sercom_spi->SYNCBUSY.reg) {
     cc8:	69e3      	ldr	r3, [r4, #28]
     cca:	2b00      	cmp	r3, #0
     ccc:	d1fc      	bne.n	cc8 <spi_master_vec_init+0x48>
	spi_hw->CTRLA.reg = SERCOM_SPI_CTRLA_MODE(0x3);
     cce:	330c      	adds	r3, #12
     cd0:	6023      	str	r3, [r4, #0]
     cd2:	68aa      	ldr	r2, [r5, #8]
     cd4:	68eb      	ldr	r3, [r5, #12]
     cd6:	431a      	orrs	r2, r3
     cd8:	692b      	ldr	r3, [r5, #16]
     cda:	431a      	orrs	r2, r3
					SERCOM_SPI_CTRLA_RUNSTDBY : 0);
     cdc:	796b      	ldrb	r3, [r5, #5]
     cde:	2180      	movs	r1, #128	; 0x80
     ce0:	2b00      	cmp	r3, #0
     ce2:	d104      	bne.n	cee <spi_master_vec_init+0x6e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     ce4:	4b49      	ldr	r3, [pc, #292]	; (e0c <spi_master_vec_init+0x18c>)
     ce6:	789b      	ldrb	r3, [r3, #2]
			| ((config->run_in_standby || system_is_debugger_present()) ?
     ce8:	079b      	lsls	r3, r3, #30
					SERCOM_SPI_CTRLA_RUNSTDBY : 0);
     cea:	0fdb      	lsrs	r3, r3, #31
     cec:	01d9      	lsls	r1, r3, #7
	spi_hw->CTRLA.reg |= (uint32_t)config->mux_setting
     cee:	6823      	ldr	r3, [r4, #0]
     cf0:	4313      	orrs	r3, r2
     cf2:	430b      	orrs	r3, r1
     cf4:	6023      	str	r3, [r4, #0]
	gclk_hz = system_gclk_chan_get_hz(gclk_index);
     cf6:	0030      	movs	r0, r6
     cf8:	4b45      	ldr	r3, [pc, #276]	; (e10 <spi_master_vec_init+0x190>)
     cfa:	4798      	blx	r3
     cfc:	0001      	movs	r1, r0
	status = _sercom_get_sync_baud_val(config->baudrate, gclk_hz, &tmp_baud);
     cfe:	220a      	movs	r2, #10
     d00:	446a      	add	r2, sp
     d02:	6828      	ldr	r0, [r5, #0]
     d04:	4b43      	ldr	r3, [pc, #268]	; (e14 <spi_master_vec_init+0x194>)
     d06:	4798      	blx	r3
     d08:	1e06      	subs	r6, r0, #0
	if (status != STATUS_OK) {
     d0a:	d005      	beq.n	d18 <spi_master_vec_init+0x98>
		return STATUS_ERR_INVALID_ARG;
     d0c:	2617      	movs	r6, #23
}
     d0e:	0030      	movs	r0, r6
     d10:	b004      	add	sp, #16
     d12:	bc04      	pop	{r2}
     d14:	4690      	mov	r8, r2
     d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	spi_hw->BAUD.reg = (uint8_t)tmp_baud;
     d18:	230a      	movs	r3, #10
     d1a:	446b      	add	r3, sp
     d1c:	781b      	ldrb	r3, [r3, #0]
     d1e:	7323      	strb	r3, [r4, #12]
	_spi_master_vec_pinmux_helper(config->pinmux_pad0, sercom, 0);
     d20:	6968      	ldr	r0, [r5, #20]
	if (pinmux == PINMUX_DEFAULT) {
     d22:	2800      	cmp	r0, #0
     d24:	d01f      	beq.n	d66 <spi_master_vec_init+0xe6>
	if (pinmux == PINMUX_UNUSED) {
     d26:	1c43      	adds	r3, r0, #1
     d28:	d122      	bne.n	d70 <spi_master_vec_init+0xf0>
	_spi_master_vec_pinmux_helper(config->pinmux_pad3, sercom, 3);
     d2a:	6a28      	ldr	r0, [r5, #32]
	if (pinmux == PINMUX_DEFAULT) {
     d2c:	2800      	cmp	r0, #0
     d2e:	d02b      	beq.n	d88 <spi_master_vec_init+0x108>
	if (pinmux == PINMUX_UNUSED) {
     d30:	1c43      	adds	r3, r0, #1
     d32:	d12e      	bne.n	d92 <spi_master_vec_init+0x112>
	if (config->mux_setting & (1 << SERCOM_SPI_CTRLA_DOPO_Pos)) {
     d34:	68ab      	ldr	r3, [r5, #8]
     d36:	03db      	lsls	r3, r3, #15
     d38:	d548      	bpl.n	dcc <spi_master_vec_init+0x14c>
		_spi_master_vec_pinmux_helper(config->pinmux_pad2, sercom, 2);
     d3a:	69e8      	ldr	r0, [r5, #28]
	if (pinmux == PINMUX_DEFAULT) {
     d3c:	2800      	cmp	r0, #0
     d3e:	d034      	beq.n	daa <spi_master_vec_init+0x12a>
	if (pinmux == PINMUX_UNUSED) {
     d40:	1c43      	adds	r3, r0, #1
     d42:	d137      	bne.n	db4 <spi_master_vec_init+0x134>
	module->rx_bufdesc_ptr = NULL;
     d44:	2300      	movs	r3, #0
     d46:	4642      	mov	r2, r8
     d48:	6193      	str	r3, [r2, #24]
	module->tx_bufdesc_ptr = NULL;
     d4a:	61d3      	str	r3, [r2, #28]
	module->direction = SPI_MASTER_VEC_DIRECTION_IDLE;
     d4c:	2203      	movs	r2, #3
     d4e:	4641      	mov	r1, r8
     d50:	714a      	strb	r2, [r1, #5]
	module->status = STATUS_OK;
     d52:	718b      	strb	r3, [r1, #6]
	_sercom_set_handler(sercom_index, _spi_master_vec_int_handler);
     d54:	4930      	ldr	r1, [pc, #192]	; (e18 <spi_master_vec_init+0x198>)
     d56:	0038      	movs	r0, r7
     d58:	4b30      	ldr	r3, [pc, #192]	; (e1c <spi_master_vec_init+0x19c>)
     d5a:	4798      	blx	r3
	_sercom_instances[sercom_index] = module;
     d5c:	00bf      	lsls	r7, r7, #2
     d5e:	4b30      	ldr	r3, [pc, #192]	; (e20 <spi_master_vec_init+0x1a0>)
     d60:	4642      	mov	r2, r8
     d62:	50fa      	str	r2, [r7, r3]
	return STATUS_OK;
     d64:	e7d3      	b.n	d0e <spi_master_vec_init+0x8e>
		pinmux = _sercom_get_default_pad(sercom, padnum);
     d66:	2100      	movs	r1, #0
     d68:	0020      	movs	r0, r4
     d6a:	4b2e      	ldr	r3, [pc, #184]	; (e24 <spi_master_vec_init+0x1a4>)
     d6c:	4798      	blx	r3
     d6e:	e7da      	b.n	d26 <spi_master_vec_init+0xa6>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d70:	a901      	add	r1, sp, #4
     d72:	2300      	movs	r3, #0
     d74:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d76:	2201      	movs	r2, #1
     d78:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     d7a:	70cb      	strb	r3, [r1, #3]
	pin_conf.mux_position = pinmux & 0xFFFF;
     d7c:	7008      	strb	r0, [r1, #0]
	system_pinmux_pin_set_config(pinmux >> 16, &pin_conf);
     d7e:	0c00      	lsrs	r0, r0, #16
     d80:	b2c0      	uxtb	r0, r0
     d82:	4b29      	ldr	r3, [pc, #164]	; (e28 <spi_master_vec_init+0x1a8>)
     d84:	4798      	blx	r3
     d86:	e7d0      	b.n	d2a <spi_master_vec_init+0xaa>
		pinmux = _sercom_get_default_pad(sercom, padnum);
     d88:	2103      	movs	r1, #3
     d8a:	0020      	movs	r0, r4
     d8c:	4b25      	ldr	r3, [pc, #148]	; (e24 <spi_master_vec_init+0x1a4>)
     d8e:	4798      	blx	r3
     d90:	e7ce      	b.n	d30 <spi_master_vec_init+0xb0>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     d92:	a901      	add	r1, sp, #4
     d94:	2300      	movs	r3, #0
     d96:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     d98:	2201      	movs	r2, #1
     d9a:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     d9c:	70cb      	strb	r3, [r1, #3]
	pin_conf.mux_position = pinmux & 0xFFFF;
     d9e:	7008      	strb	r0, [r1, #0]
	system_pinmux_pin_set_config(pinmux >> 16, &pin_conf);
     da0:	0c00      	lsrs	r0, r0, #16
     da2:	b2c0      	uxtb	r0, r0
     da4:	4b20      	ldr	r3, [pc, #128]	; (e28 <spi_master_vec_init+0x1a8>)
     da6:	4798      	blx	r3
     da8:	e7c4      	b.n	d34 <spi_master_vec_init+0xb4>
		pinmux = _sercom_get_default_pad(sercom, padnum);
     daa:	2102      	movs	r1, #2
     dac:	0020      	movs	r0, r4
     dae:	4b1d      	ldr	r3, [pc, #116]	; (e24 <spi_master_vec_init+0x1a4>)
     db0:	4798      	blx	r3
     db2:	e7c5      	b.n	d40 <spi_master_vec_init+0xc0>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     db4:	a901      	add	r1, sp, #4
     db6:	2300      	movs	r3, #0
     db8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     dba:	2201      	movs	r2, #1
     dbc:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     dbe:	70cb      	strb	r3, [r1, #3]
	pin_conf.mux_position = pinmux & 0xFFFF;
     dc0:	7008      	strb	r0, [r1, #0]
	system_pinmux_pin_set_config(pinmux >> 16, &pin_conf);
     dc2:	0c00      	lsrs	r0, r0, #16
     dc4:	b2c0      	uxtb	r0, r0
     dc6:	4b18      	ldr	r3, [pc, #96]	; (e28 <spi_master_vec_init+0x1a8>)
     dc8:	4798      	blx	r3
     dca:	e7bb      	b.n	d44 <spi_master_vec_init+0xc4>
		_spi_master_vec_pinmux_helper(config->pinmux_pad1, sercom, 1);
     dcc:	69a8      	ldr	r0, [r5, #24]
	if (pinmux == PINMUX_DEFAULT) {
     dce:	2800      	cmp	r0, #0
     dd0:	d00d      	beq.n	dee <spi_master_vec_init+0x16e>
	if (pinmux == PINMUX_UNUSED) {
     dd2:	1c43      	adds	r3, r0, #1
     dd4:	d0b6      	beq.n	d44 <spi_master_vec_init+0xc4>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dd6:	a901      	add	r1, sp, #4
     dd8:	2300      	movs	r3, #0
     dda:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ddc:	2201      	movs	r2, #1
     dde:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
     de0:	70cb      	strb	r3, [r1, #3]
	pin_conf.mux_position = pinmux & 0xFFFF;
     de2:	7008      	strb	r0, [r1, #0]
	system_pinmux_pin_set_config(pinmux >> 16, &pin_conf);
     de4:	0c00      	lsrs	r0, r0, #16
     de6:	b2c0      	uxtb	r0, r0
     de8:	4b0f      	ldr	r3, [pc, #60]	; (e28 <spi_master_vec_init+0x1a8>)
     dea:	4798      	blx	r3
     dec:	e7aa      	b.n	d44 <spi_master_vec_init+0xc4>
		pinmux = _sercom_get_default_pad(sercom, padnum);
     dee:	2101      	movs	r1, #1
     df0:	0020      	movs	r0, r4
     df2:	4b0c      	ldr	r3, [pc, #48]	; (e24 <spi_master_vec_init+0x1a4>)
     df4:	4798      	blx	r3
     df6:	e7ec      	b.n	dd2 <spi_master_vec_init+0x152>
     df8:	00000b3d 	.word	0x00000b3d
     dfc:	40000400 	.word	0x40000400
     e00:	00001c41 	.word	0x00001c41
     e04:	00001bb5 	.word	0x00001bb5
     e08:	00000979 	.word	0x00000979
     e0c:	41002000 	.word	0x41002000
     e10:	00001c5d 	.word	0x00001c5d
     e14:	000008bb 	.word	0x000008bb
     e18:	00000b75 	.word	0x00000b75
     e1c:	00000ef1 	.word	0x00000ef1
     e20:	20000208 	.word	0x20000208
     e24:	000009c5 	.word	0x000009c5
     e28:	00001d39 	.word	0x00001d39

00000e2c <spi_master_vec_enable>:
{
     e2c:	b510      	push	{r4, lr}
	SercomSpi *const spi_hw = &(module->sercom->SPI);
     e2e:	6802      	ldr	r2, [r0, #0]
	spi_hw->INTENCLR.reg = SERCOM_SPI_INTFLAG_DRE | SERCOM_SPI_INTFLAG_RXC
     e30:	2307      	movs	r3, #7
     e32:	7513      	strb	r3, [r2, #20]
	while (sercom_spi->SYNCBUSY.reg) {
     e34:	69d3      	ldr	r3, [r2, #28]
     e36:	2b00      	cmp	r3, #0
     e38:	d1fc      	bne.n	e34 <spi_master_vec_enable+0x8>
	spi_hw->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     e3a:	6813      	ldr	r3, [r2, #0]
     e3c:	2102      	movs	r1, #2
     e3e:	430b      	orrs	r3, r1
     e40:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->sercom));
     e42:	6800      	ldr	r0, [r0, #0]
     e44:	4b04      	ldr	r3, [pc, #16]	; (e58 <spi_master_vec_enable+0x2c>)
     e46:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     e48:	231f      	movs	r3, #31
     e4a:	4018      	ands	r0, r3
     e4c:	3b1e      	subs	r3, #30
     e4e:	4083      	lsls	r3, r0
     e50:	4a02      	ldr	r2, [pc, #8]	; (e5c <spi_master_vec_enable+0x30>)
     e52:	6013      	str	r3, [r2, #0]
}
     e54:	bd10      	pop	{r4, pc}
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	00000f2d 	.word	0x00000f2d
     e5c:	e000e100 	.word	0xe000e100

00000e60 <spi_master_vec_transceive_buffer_job>:
{
     e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e62:	0005      	movs	r5, r0
     e64:	000e      	movs	r6, r1
     e66:	0017      	movs	r7, r2
	SercomSpi *const spi_hw = &(module->sercom->SPI);
     e68:	6804      	ldr	r4, [r0, #0]
	cpu_irq_enter_critical();
     e6a:	4b1e      	ldr	r3, [pc, #120]	; (ee4 <spi_master_vec_transceive_buffer_job+0x84>)
     e6c:	4798      	blx	r3
	if (module->status == STATUS_BUSY) {
     e6e:	79ab      	ldrb	r3, [r5, #6]
     e70:	2b05      	cmp	r3, #5
     e72:	d01f      	beq.n	eb4 <spi_master_vec_transceive_buffer_job+0x54>
		module->status = STATUS_BUSY;
     e74:	2305      	movs	r3, #5
     e76:	71ab      	strb	r3, [r5, #6]
	cpu_irq_leave_critical();
     e78:	4b1b      	ldr	r3, [pc, #108]	; (ee8 <spi_master_vec_transceive_buffer_job+0x88>)
     e7a:	4798      	blx	r3
	module->tx_bufdesc_ptr = tx_bufdescs;
     e7c:	61ee      	str	r6, [r5, #28]
	module->rx_bufdesc_ptr = rx_bufdescs;
     e7e:	61af      	str	r7, [r5, #24]
	if (tx_bufdescs && rx_bufdescs) {
     e80:	2e00      	cmp	r6, #0
     e82:	d024      	beq.n	ece <spi_master_vec_transceive_buffer_job+0x6e>
     e84:	2f00      	cmp	r7, #0
     e86:	d019      	beq.n	ebc <spi_master_vec_transceive_buffer_job+0x5c>
		module->direction = SPI_MASTER_VEC_DIRECTION_BOTH;
     e88:	2302      	movs	r3, #2
     e8a:	716b      	strb	r3, [r5, #5]
		module->tx_length = tx_bufdescs[0].length;
     e8c:	88b3      	ldrh	r3, [r6, #4]
     e8e:	816b      	strh	r3, [r5, #10]
		module->tx_head_ptr = tx_bufdescs[0].data;
     e90:	6833      	ldr	r3, [r6, #0]
     e92:	612b      	str	r3, [r5, #16]
		module->rx_length = rx_bufdescs[0].length;
     e94:	88bb      	ldrh	r3, [r7, #4]
     e96:	812b      	strh	r3, [r5, #8]
		module->rx_head_ptr = rx_bufdescs[0].data;
     e98:	683b      	ldr	r3, [r7, #0]
     e9a:	60eb      	str	r3, [r5, #12]
		module->tx_lead_on_rx = 0;
     e9c:	2300      	movs	r3, #0
     e9e:	616b      	str	r3, [r5, #20]
		tmp_intenset = SERCOM_SPI_INTFLAG_DRE | SERCOM_SPI_INTFLAG_RXC;
     ea0:	2205      	movs	r2, #5
		tmp_ctrlb = SERCOM_SPI_CTRLB_RXEN;
     ea2:	2180      	movs	r1, #128	; 0x80
     ea4:	0289      	lsls	r1, r1, #10
	while (sercom_spi->SYNCBUSY.reg) {
     ea6:	69e3      	ldr	r3, [r4, #28]
     ea8:	2b00      	cmp	r3, #0
     eaa:	d1fc      	bne.n	ea6 <spi_master_vec_transceive_buffer_job+0x46>
	spi_hw->CTRLB.reg = tmp_ctrlb;
     eac:	6061      	str	r1, [r4, #4]
	spi_hw->INTENSET.reg = tmp_intenset;
     eae:	75a2      	strb	r2, [r4, #22]
	return STATUS_OK;
     eb0:	2000      	movs	r0, #0
}
     eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eb4:	4b0c      	ldr	r3, [pc, #48]	; (ee8 <spi_master_vec_transceive_buffer_job+0x88>)
     eb6:	4798      	blx	r3
		return STATUS_BUSY;
     eb8:	2005      	movs	r0, #5
     eba:	e7fa      	b.n	eb2 <spi_master_vec_transceive_buffer_job+0x52>
			module->direction = SPI_MASTER_VEC_DIRECTION_WRITE;
     ebc:	2301      	movs	r3, #1
     ebe:	716b      	strb	r3, [r5, #5]
			module->tx_length = tx_bufdescs[0].length;
     ec0:	88b3      	ldrh	r3, [r6, #4]
     ec2:	816b      	strh	r3, [r5, #10]
			module->tx_head_ptr = tx_bufdescs[0].data;
     ec4:	6833      	ldr	r3, [r6, #0]
     ec6:	612b      	str	r3, [r5, #16]
			tmp_intenset = SERCOM_SPI_INTFLAG_DRE;
     ec8:	2201      	movs	r2, #1
			tmp_ctrlb = 0;
     eca:	2100      	movs	r1, #0
     ecc:	e7eb      	b.n	ea6 <spi_master_vec_transceive_buffer_job+0x46>
			module->direction = SPI_MASTER_VEC_DIRECTION_READ;
     ece:	2300      	movs	r3, #0
     ed0:	716b      	strb	r3, [r5, #5]
			module->rx_length = rx_bufdescs[0].length;
     ed2:	88ba      	ldrh	r2, [r7, #4]
     ed4:	812a      	strh	r2, [r5, #8]
			module->rx_head_ptr = rx_bufdescs[0].data;
     ed6:	683a      	ldr	r2, [r7, #0]
     ed8:	60ea      	str	r2, [r5, #12]
			module->tx_lead_on_rx = 0;
     eda:	616b      	str	r3, [r5, #20]
			tmp_intenset = SERCOM_SPI_INTFLAG_DRE | SERCOM_SPI_INTFLAG_RXC;
     edc:	2205      	movs	r2, #5
			tmp_ctrlb = SERCOM_SPI_CTRLB_RXEN;
     ede:	2180      	movs	r1, #128	; 0x80
     ee0:	0289      	lsls	r1, r1, #10
     ee2:	e7e0      	b.n	ea6 <spi_master_vec_transceive_buffer_job+0x46>
     ee4:	00000fbd 	.word	0x00000fbd
     ee8:	00000ffd 	.word	0x00000ffd

00000eec <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     eec:	4770      	bx	lr
	...

00000ef0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     ef2:	4b0a      	ldr	r3, [pc, #40]	; (f1c <_sercom_set_handler+0x2c>)
     ef4:	781b      	ldrb	r3, [r3, #0]
     ef6:	2b00      	cmp	r3, #0
     ef8:	d10c      	bne.n	f14 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     efa:	4f09      	ldr	r7, [pc, #36]	; (f20 <_sercom_set_handler+0x30>)
     efc:	4e09      	ldr	r6, [pc, #36]	; (f24 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     efe:	4d0a      	ldr	r5, [pc, #40]	; (f28 <_sercom_set_handler+0x38>)
     f00:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     f02:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     f04:	195a      	adds	r2, r3, r5
     f06:	6014      	str	r4, [r2, #0]
     f08:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     f0a:	2b18      	cmp	r3, #24
     f0c:	d1f9      	bne.n	f02 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     f0e:	2201      	movs	r2, #1
     f10:	4b02      	ldr	r3, [pc, #8]	; (f1c <_sercom_set_handler+0x2c>)
     f12:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     f14:	0080      	lsls	r0, r0, #2
     f16:	4b02      	ldr	r3, [pc, #8]	; (f20 <_sercom_set_handler+0x30>)
     f18:	50c1      	str	r1, [r0, r3]
}
     f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f1c:	2000008e 	.word	0x2000008e
     f20:	20000090 	.word	0x20000090
     f24:	00000eed 	.word	0x00000eed
     f28:	20000208 	.word	0x20000208

00000f2c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     f2c:	b500      	push	{lr}
     f2e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     f30:	2309      	movs	r3, #9
     f32:	466a      	mov	r2, sp
     f34:	7013      	strb	r3, [r2, #0]
     f36:	3301      	adds	r3, #1
     f38:	7053      	strb	r3, [r2, #1]
     f3a:	3301      	adds	r3, #1
     f3c:	7093      	strb	r3, [r2, #2]
     f3e:	3301      	adds	r3, #1
     f40:	70d3      	strb	r3, [r2, #3]
     f42:	3301      	adds	r3, #1
     f44:	7113      	strb	r3, [r2, #4]
     f46:	3301      	adds	r3, #1
     f48:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     f4a:	4b03      	ldr	r3, [pc, #12]	; (f58 <_sercom_get_interrupt_vector+0x2c>)
     f4c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     f4e:	466b      	mov	r3, sp
     f50:	5618      	ldrsb	r0, [r3, r0]
}
     f52:	b003      	add	sp, #12
     f54:	bd00      	pop	{pc}
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	00000b3d 	.word	0x00000b3d

00000f5c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     f5c:	b510      	push	{r4, lr}
     f5e:	4b02      	ldr	r3, [pc, #8]	; (f68 <SERCOM0_Handler+0xc>)
     f60:	681b      	ldr	r3, [r3, #0]
     f62:	2000      	movs	r0, #0
     f64:	4798      	blx	r3
     f66:	bd10      	pop	{r4, pc}
     f68:	20000090 	.word	0x20000090

00000f6c <SERCOM1_Handler>:
     f6c:	b510      	push	{r4, lr}
     f6e:	4b02      	ldr	r3, [pc, #8]	; (f78 <SERCOM1_Handler+0xc>)
     f70:	685b      	ldr	r3, [r3, #4]
     f72:	2001      	movs	r0, #1
     f74:	4798      	blx	r3
     f76:	bd10      	pop	{r4, pc}
     f78:	20000090 	.word	0x20000090

00000f7c <SERCOM2_Handler>:
     f7c:	b510      	push	{r4, lr}
     f7e:	4b02      	ldr	r3, [pc, #8]	; (f88 <SERCOM2_Handler+0xc>)
     f80:	689b      	ldr	r3, [r3, #8]
     f82:	2002      	movs	r0, #2
     f84:	4798      	blx	r3
     f86:	bd10      	pop	{r4, pc}
     f88:	20000090 	.word	0x20000090

00000f8c <SERCOM3_Handler>:
     f8c:	b510      	push	{r4, lr}
     f8e:	4b02      	ldr	r3, [pc, #8]	; (f98 <SERCOM3_Handler+0xc>)
     f90:	68db      	ldr	r3, [r3, #12]
     f92:	2003      	movs	r0, #3
     f94:	4798      	blx	r3
     f96:	bd10      	pop	{r4, pc}
     f98:	20000090 	.word	0x20000090

00000f9c <SERCOM4_Handler>:
     f9c:	b510      	push	{r4, lr}
     f9e:	4b02      	ldr	r3, [pc, #8]	; (fa8 <SERCOM4_Handler+0xc>)
     fa0:	691b      	ldr	r3, [r3, #16]
     fa2:	2004      	movs	r0, #4
     fa4:	4798      	blx	r3
     fa6:	bd10      	pop	{r4, pc}
     fa8:	20000090 	.word	0x20000090

00000fac <SERCOM5_Handler>:
     fac:	b510      	push	{r4, lr}
     fae:	4b02      	ldr	r3, [pc, #8]	; (fb8 <SERCOM5_Handler+0xc>)
     fb0:	695b      	ldr	r3, [r3, #20]
     fb2:	2005      	movs	r0, #5
     fb4:	4798      	blx	r3
     fb6:	bd10      	pop	{r4, pc}
     fb8:	20000090 	.word	0x20000090

00000fbc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     fbc:	4b0c      	ldr	r3, [pc, #48]	; (ff0 <cpu_irq_enter_critical+0x34>)
     fbe:	681b      	ldr	r3, [r3, #0]
     fc0:	2b00      	cmp	r3, #0
     fc2:	d106      	bne.n	fd2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     fc4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     fc8:	2b00      	cmp	r3, #0
     fca:	d007      	beq.n	fdc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     fcc:	2200      	movs	r2, #0
     fce:	4b09      	ldr	r3, [pc, #36]	; (ff4 <cpu_irq_enter_critical+0x38>)
     fd0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     fd2:	4a07      	ldr	r2, [pc, #28]	; (ff0 <cpu_irq_enter_critical+0x34>)
     fd4:	6813      	ldr	r3, [r2, #0]
     fd6:	3301      	adds	r3, #1
     fd8:	6013      	str	r3, [r2, #0]
}
     fda:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     fdc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     fde:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     fe2:	2200      	movs	r2, #0
     fe4:	4b04      	ldr	r3, [pc, #16]	; (ff8 <cpu_irq_enter_critical+0x3c>)
     fe6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     fe8:	3201      	adds	r2, #1
     fea:	4b02      	ldr	r3, [pc, #8]	; (ff4 <cpu_irq_enter_critical+0x38>)
     fec:	701a      	strb	r2, [r3, #0]
     fee:	e7f0      	b.n	fd2 <cpu_irq_enter_critical+0x16>
     ff0:	200000a8 	.word	0x200000a8
     ff4:	200000ac 	.word	0x200000ac
     ff8:	20000000 	.word	0x20000000

00000ffc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     ffc:	4b08      	ldr	r3, [pc, #32]	; (1020 <cpu_irq_leave_critical+0x24>)
     ffe:	681a      	ldr	r2, [r3, #0]
    1000:	3a01      	subs	r2, #1
    1002:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1004:	681b      	ldr	r3, [r3, #0]
    1006:	2b00      	cmp	r3, #0
    1008:	d109      	bne.n	101e <cpu_irq_leave_critical+0x22>
    100a:	4b06      	ldr	r3, [pc, #24]	; (1024 <cpu_irq_leave_critical+0x28>)
    100c:	781b      	ldrb	r3, [r3, #0]
    100e:	2b00      	cmp	r3, #0
    1010:	d005      	beq.n	101e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1012:	2201      	movs	r2, #1
    1014:	4b04      	ldr	r3, [pc, #16]	; (1028 <cpu_irq_leave_critical+0x2c>)
    1016:	701a      	strb	r2, [r3, #0]
    1018:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    101c:	b662      	cpsie	i
	}
}
    101e:	4770      	bx	lr
    1020:	200000a8 	.word	0x200000a8
    1024:	200000ac 	.word	0x200000ac
    1028:	20000000 	.word	0x20000000

0000102c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    102c:	b5f0      	push	{r4, r5, r6, r7, lr}
    102e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    1030:	ac01      	add	r4, sp, #4
    1032:	2501      	movs	r5, #1
    1034:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1036:	2700      	movs	r7, #0
    1038:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    103a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    103c:	0021      	movs	r1, r4
    103e:	2017      	movs	r0, #23
    1040:	4e06      	ldr	r6, [pc, #24]	; (105c <system_board_init+0x30>)
    1042:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    1044:	2280      	movs	r2, #128	; 0x80
    1046:	0412      	lsls	r2, r2, #16
    1048:	4b05      	ldr	r3, [pc, #20]	; (1060 <system_board_init+0x34>)
    104a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    104c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    104e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    1050:	0021      	movs	r1, r4
    1052:	2037      	movs	r0, #55	; 0x37
    1054:	47b0      	blx	r6
}
    1056:	b003      	add	sp, #12
    1058:	bdf0      	pop	{r4, r5, r6, r7, pc}
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	00001065 	.word	0x00001065
    1060:	41004400 	.word	0x41004400

00001064 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1064:	b500      	push	{lr}
    1066:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1068:	ab01      	add	r3, sp, #4
    106a:	2280      	movs	r2, #128	; 0x80
    106c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    106e:	780a      	ldrb	r2, [r1, #0]
    1070:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1072:	784a      	ldrb	r2, [r1, #1]
    1074:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1076:	788a      	ldrb	r2, [r1, #2]
    1078:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    107a:	0019      	movs	r1, r3
    107c:	4b01      	ldr	r3, [pc, #4]	; (1084 <port_pin_set_config+0x20>)
    107e:	4798      	blx	r3
}
    1080:	b003      	add	sp, #12
    1082:	bd00      	pop	{pc}
    1084:	00001d39 	.word	0x00001d39

00001088 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1088:	b5f0      	push	{r4, r5, r6, r7, lr}
    108a:	46de      	mov	lr, fp
    108c:	4657      	mov	r7, sl
    108e:	464e      	mov	r6, r9
    1090:	4645      	mov	r5, r8
    1092:	b5e0      	push	{r5, r6, r7, lr}
    1094:	b091      	sub	sp, #68	; 0x44
    1096:	0005      	movs	r5, r0
    1098:	000c      	movs	r4, r1
    109a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    109c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    109e:	0008      	movs	r0, r1
    10a0:	4bbc      	ldr	r3, [pc, #752]	; (1394 <usart_init+0x30c>)
    10a2:	4798      	blx	r3
    10a4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    10a6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    10a8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    10aa:	07db      	lsls	r3, r3, #31
    10ac:	d506      	bpl.n	10bc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    10ae:	b011      	add	sp, #68	; 0x44
    10b0:	bc3c      	pop	{r2, r3, r4, r5}
    10b2:	4690      	mov	r8, r2
    10b4:	4699      	mov	r9, r3
    10b6:	46a2      	mov	sl, r4
    10b8:	46ab      	mov	fp, r5
    10ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    10bc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    10be:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    10c0:	079b      	lsls	r3, r3, #30
    10c2:	d4f4      	bmi.n	10ae <usart_init+0x26>
    10c4:	49b4      	ldr	r1, [pc, #720]	; (1398 <usart_init+0x310>)
    10c6:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    10c8:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    10ca:	2301      	movs	r3, #1
    10cc:	40bb      	lsls	r3, r7
    10ce:	4303      	orrs	r3, r0
    10d0:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    10d2:	a90f      	add	r1, sp, #60	; 0x3c
    10d4:	272d      	movs	r7, #45	; 0x2d
    10d6:	5df3      	ldrb	r3, [r6, r7]
    10d8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    10da:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    10dc:	b2d3      	uxtb	r3, r2
    10de:	9302      	str	r3, [sp, #8]
    10e0:	0018      	movs	r0, r3
    10e2:	4bae      	ldr	r3, [pc, #696]	; (139c <usart_init+0x314>)
    10e4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    10e6:	9802      	ldr	r0, [sp, #8]
    10e8:	4bad      	ldr	r3, [pc, #692]	; (13a0 <usart_init+0x318>)
    10ea:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    10ec:	5df0      	ldrb	r0, [r6, r7]
    10ee:	2100      	movs	r1, #0
    10f0:	4bac      	ldr	r3, [pc, #688]	; (13a4 <usart_init+0x31c>)
    10f2:	4798      	blx	r3
	module->character_size = config->character_size;
    10f4:	7af3      	ldrb	r3, [r6, #11]
    10f6:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    10f8:	2324      	movs	r3, #36	; 0x24
    10fa:	5cf3      	ldrb	r3, [r6, r3]
    10fc:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    10fe:	2325      	movs	r3, #37	; 0x25
    1100:	5cf3      	ldrb	r3, [r6, r3]
    1102:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1104:	7ef3      	ldrb	r3, [r6, #27]
    1106:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1108:	7f33      	ldrb	r3, [r6, #28]
    110a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    110c:	682b      	ldr	r3, [r5, #0]
    110e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1110:	0018      	movs	r0, r3
    1112:	4ba0      	ldr	r3, [pc, #640]	; (1394 <usart_init+0x30c>)
    1114:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1116:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    1118:	2200      	movs	r2, #0
    111a:	230e      	movs	r3, #14
    111c:	a906      	add	r1, sp, #24
    111e:	468c      	mov	ip, r1
    1120:	4463      	add	r3, ip
    1122:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1124:	8a32      	ldrh	r2, [r6, #16]
    1126:	9202      	str	r2, [sp, #8]
    1128:	2380      	movs	r3, #128	; 0x80
    112a:	01db      	lsls	r3, r3, #7
    112c:	429a      	cmp	r2, r3
    112e:	d100      	bne.n	1132 <usart_init+0xaa>
    1130:	e09e      	b.n	1270 <usart_init+0x1e8>
    1132:	d90f      	bls.n	1154 <usart_init+0xcc>
    1134:	23c0      	movs	r3, #192	; 0xc0
    1136:	01db      	lsls	r3, r3, #7
    1138:	9a02      	ldr	r2, [sp, #8]
    113a:	429a      	cmp	r2, r3
    113c:	d100      	bne.n	1140 <usart_init+0xb8>
    113e:	e092      	b.n	1266 <usart_init+0x1de>
    1140:	2380      	movs	r3, #128	; 0x80
    1142:	021b      	lsls	r3, r3, #8
    1144:	429a      	cmp	r2, r3
    1146:	d000      	beq.n	114a <usart_init+0xc2>
    1148:	e11f      	b.n	138a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    114a:	2303      	movs	r3, #3
    114c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    114e:	2300      	movs	r3, #0
    1150:	9307      	str	r3, [sp, #28]
    1152:	e008      	b.n	1166 <usart_init+0xde>
	switch (config->sample_rate) {
    1154:	2380      	movs	r3, #128	; 0x80
    1156:	019b      	lsls	r3, r3, #6
    1158:	429a      	cmp	r2, r3
    115a:	d000      	beq.n	115e <usart_init+0xd6>
    115c:	e115      	b.n	138a <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    115e:	2310      	movs	r3, #16
    1160:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1162:	3b0f      	subs	r3, #15
    1164:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1166:	6833      	ldr	r3, [r6, #0]
    1168:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    116a:	68f3      	ldr	r3, [r6, #12]
    116c:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    116e:	6973      	ldr	r3, [r6, #20]
    1170:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1172:	7e33      	ldrb	r3, [r6, #24]
    1174:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1176:	2326      	movs	r3, #38	; 0x26
    1178:	5cf3      	ldrb	r3, [r6, r3]
    117a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    117c:	6873      	ldr	r3, [r6, #4]
    117e:	4699      	mov	r9, r3
	switch (transfer_mode)
    1180:	2b00      	cmp	r3, #0
    1182:	d100      	bne.n	1186 <usart_init+0xfe>
    1184:	e0a0      	b.n	12c8 <usart_init+0x240>
    1186:	2380      	movs	r3, #128	; 0x80
    1188:	055b      	lsls	r3, r3, #21
    118a:	4599      	cmp	r9, r3
    118c:	d100      	bne.n	1190 <usart_init+0x108>
    118e:	e084      	b.n	129a <usart_init+0x212>
	if(config->encoding_format_enable) {
    1190:	7e73      	ldrb	r3, [r6, #25]
    1192:	2b00      	cmp	r3, #0
    1194:	d002      	beq.n	119c <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1196:	7eb3      	ldrb	r3, [r6, #26]
    1198:	4642      	mov	r2, r8
    119a:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    119c:	682a      	ldr	r2, [r5, #0]
    119e:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    11a0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    11a2:	2b00      	cmp	r3, #0
    11a4:	d1fc      	bne.n	11a0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    11a6:	330e      	adds	r3, #14
    11a8:	aa06      	add	r2, sp, #24
    11aa:	4694      	mov	ip, r2
    11ac:	4463      	add	r3, ip
    11ae:	881b      	ldrh	r3, [r3, #0]
    11b0:	4642      	mov	r2, r8
    11b2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    11b4:	9b05      	ldr	r3, [sp, #20]
    11b6:	9a03      	ldr	r2, [sp, #12]
    11b8:	4313      	orrs	r3, r2
    11ba:	9a04      	ldr	r2, [sp, #16]
    11bc:	4313      	orrs	r3, r2
    11be:	464a      	mov	r2, r9
    11c0:	4313      	orrs	r3, r2
    11c2:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    11c4:	465b      	mov	r3, fp
    11c6:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    11c8:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    11ca:	4653      	mov	r3, sl
    11cc:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    11ce:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    11d0:	2327      	movs	r3, #39	; 0x27
    11d2:	5cf3      	ldrb	r3, [r6, r3]
    11d4:	2b00      	cmp	r3, #0
    11d6:	d101      	bne.n	11dc <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    11d8:	3304      	adds	r3, #4
    11da:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    11dc:	7e73      	ldrb	r3, [r6, #25]
    11de:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    11e0:	7f32      	ldrb	r2, [r6, #28]
    11e2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    11e4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    11e6:	7f72      	ldrb	r2, [r6, #29]
    11e8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    11ea:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    11ec:	2224      	movs	r2, #36	; 0x24
    11ee:	5cb2      	ldrb	r2, [r6, r2]
    11f0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    11f2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    11f4:	2225      	movs	r2, #37	; 0x25
    11f6:	5cb2      	ldrb	r2, [r6, r2]
    11f8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    11fa:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    11fc:	7ab1      	ldrb	r1, [r6, #10]
    11fe:	7af2      	ldrb	r2, [r6, #11]
    1200:	4311      	orrs	r1, r2
    1202:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    1204:	8933      	ldrh	r3, [r6, #8]
    1206:	2bff      	cmp	r3, #255	; 0xff
    1208:	d100      	bne.n	120c <usart_init+0x184>
    120a:	e081      	b.n	1310 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    120c:	2280      	movs	r2, #128	; 0x80
    120e:	0452      	lsls	r2, r2, #17
    1210:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    1212:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1214:	232c      	movs	r3, #44	; 0x2c
    1216:	5cf3      	ldrb	r3, [r6, r3]
    1218:	2b00      	cmp	r3, #0
    121a:	d103      	bne.n	1224 <usart_init+0x19c>
    121c:	4b62      	ldr	r3, [pc, #392]	; (13a8 <usart_init+0x320>)
    121e:	789b      	ldrb	r3, [r3, #2]
    1220:	079b      	lsls	r3, r3, #30
    1222:	d501      	bpl.n	1228 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1224:	2380      	movs	r3, #128	; 0x80
    1226:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1228:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    122a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    122c:	2b00      	cmp	r3, #0
    122e:	d1fc      	bne.n	122a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    1230:	4643      	mov	r3, r8
    1232:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1234:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1236:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1238:	2b00      	cmp	r3, #0
    123a:	d1fc      	bne.n	1236 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    123c:	4643      	mov	r3, r8
    123e:	601f      	str	r7, [r3, #0]
    1240:	ab0e      	add	r3, sp, #56	; 0x38
    1242:	2280      	movs	r2, #128	; 0x80
    1244:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1246:	2200      	movs	r2, #0
    1248:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    124a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    124c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    124e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1250:	930a      	str	r3, [sp, #40]	; 0x28
    1252:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1254:	930b      	str	r3, [sp, #44]	; 0x2c
    1256:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1258:	930c      	str	r3, [sp, #48]	; 0x30
    125a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    125c:	9302      	str	r3, [sp, #8]
    125e:	930d      	str	r3, [sp, #52]	; 0x34
    1260:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1262:	ae0a      	add	r6, sp, #40	; 0x28
    1264:	e063      	b.n	132e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1266:	2308      	movs	r3, #8
    1268:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    126a:	3b07      	subs	r3, #7
    126c:	9307      	str	r3, [sp, #28]
    126e:	e77a      	b.n	1166 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    1270:	6833      	ldr	r3, [r6, #0]
    1272:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1274:	68f3      	ldr	r3, [r6, #12]
    1276:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    1278:	6973      	ldr	r3, [r6, #20]
    127a:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    127c:	7e33      	ldrb	r3, [r6, #24]
    127e:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1280:	2326      	movs	r3, #38	; 0x26
    1282:	5cf3      	ldrb	r3, [r6, r3]
    1284:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1286:	6873      	ldr	r3, [r6, #4]
    1288:	4699      	mov	r9, r3
	switch (transfer_mode)
    128a:	2b00      	cmp	r3, #0
    128c:	d018      	beq.n	12c0 <usart_init+0x238>
    128e:	2380      	movs	r3, #128	; 0x80
    1290:	055b      	lsls	r3, r3, #21
    1292:	4599      	cmp	r9, r3
    1294:	d001      	beq.n	129a <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    1296:	2000      	movs	r0, #0
    1298:	e025      	b.n	12e6 <usart_init+0x25e>
			if (!config->use_external_clock) {
    129a:	2327      	movs	r3, #39	; 0x27
    129c:	5cf3      	ldrb	r3, [r6, r3]
    129e:	2b00      	cmp	r3, #0
    12a0:	d000      	beq.n	12a4 <usart_init+0x21c>
    12a2:	e775      	b.n	1190 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    12a4:	6a33      	ldr	r3, [r6, #32]
    12a6:	001f      	movs	r7, r3
    12a8:	b2c0      	uxtb	r0, r0
    12aa:	4b40      	ldr	r3, [pc, #256]	; (13ac <usart_init+0x324>)
    12ac:	4798      	blx	r3
    12ae:	0001      	movs	r1, r0
    12b0:	220e      	movs	r2, #14
    12b2:	ab06      	add	r3, sp, #24
    12b4:	469c      	mov	ip, r3
    12b6:	4462      	add	r2, ip
    12b8:	0038      	movs	r0, r7
    12ba:	4b3d      	ldr	r3, [pc, #244]	; (13b0 <usart_init+0x328>)
    12bc:	4798      	blx	r3
    12be:	e012      	b.n	12e6 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    12c0:	2308      	movs	r3, #8
    12c2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    12c4:	2300      	movs	r3, #0
    12c6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    12c8:	2327      	movs	r3, #39	; 0x27
    12ca:	5cf3      	ldrb	r3, [r6, r3]
    12cc:	2b00      	cmp	r3, #0
    12ce:	d00e      	beq.n	12ee <usart_init+0x266>
				status_code =
    12d0:	9b06      	ldr	r3, [sp, #24]
    12d2:	9300      	str	r3, [sp, #0]
    12d4:	9b07      	ldr	r3, [sp, #28]
    12d6:	220e      	movs	r2, #14
    12d8:	a906      	add	r1, sp, #24
    12da:	468c      	mov	ip, r1
    12dc:	4462      	add	r2, ip
    12de:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    12e0:	6a30      	ldr	r0, [r6, #32]
    12e2:	4f34      	ldr	r7, [pc, #208]	; (13b4 <usart_init+0x32c>)
    12e4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    12e6:	2800      	cmp	r0, #0
    12e8:	d000      	beq.n	12ec <usart_init+0x264>
    12ea:	e6e0      	b.n	10ae <usart_init+0x26>
    12ec:	e750      	b.n	1190 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    12ee:	6a33      	ldr	r3, [r6, #32]
    12f0:	001f      	movs	r7, r3
    12f2:	b2c0      	uxtb	r0, r0
    12f4:	4b2d      	ldr	r3, [pc, #180]	; (13ac <usart_init+0x324>)
    12f6:	4798      	blx	r3
    12f8:	0001      	movs	r1, r0
				status_code =
    12fa:	9b06      	ldr	r3, [sp, #24]
    12fc:	9300      	str	r3, [sp, #0]
    12fe:	9b07      	ldr	r3, [sp, #28]
    1300:	220e      	movs	r2, #14
    1302:	a806      	add	r0, sp, #24
    1304:	4684      	mov	ip, r0
    1306:	4462      	add	r2, ip
    1308:	0038      	movs	r0, r7
    130a:	4f2a      	ldr	r7, [pc, #168]	; (13b4 <usart_init+0x32c>)
    130c:	47b8      	blx	r7
    130e:	e7ea      	b.n	12e6 <usart_init+0x25e>
		if(config->lin_slave_enable) {
    1310:	7ef3      	ldrb	r3, [r6, #27]
    1312:	2b00      	cmp	r3, #0
    1314:	d100      	bne.n	1318 <usart_init+0x290>
    1316:	e77d      	b.n	1214 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1318:	2380      	movs	r3, #128	; 0x80
    131a:	04db      	lsls	r3, r3, #19
    131c:	431f      	orrs	r7, r3
    131e:	e779      	b.n	1214 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1320:	0020      	movs	r0, r4
    1322:	4b25      	ldr	r3, [pc, #148]	; (13b8 <usart_init+0x330>)
    1324:	4798      	blx	r3
    1326:	e007      	b.n	1338 <usart_init+0x2b0>
    1328:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    132a:	2f04      	cmp	r7, #4
    132c:	d00d      	beq.n	134a <usart_init+0x2c2>
    132e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1330:	00bb      	lsls	r3, r7, #2
    1332:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1334:	2800      	cmp	r0, #0
    1336:	d0f3      	beq.n	1320 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    1338:	1c43      	adds	r3, r0, #1
    133a:	d0f5      	beq.n	1328 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    133c:	a90e      	add	r1, sp, #56	; 0x38
    133e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1340:	0c00      	lsrs	r0, r0, #16
    1342:	b2c0      	uxtb	r0, r0
    1344:	4b1d      	ldr	r3, [pc, #116]	; (13bc <usart_init+0x334>)
    1346:	4798      	blx	r3
    1348:	e7ee      	b.n	1328 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    134a:	2300      	movs	r3, #0
    134c:	60eb      	str	r3, [r5, #12]
    134e:	612b      	str	r3, [r5, #16]
    1350:	616b      	str	r3, [r5, #20]
    1352:	61ab      	str	r3, [r5, #24]
    1354:	61eb      	str	r3, [r5, #28]
    1356:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1358:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    135a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    135c:	2200      	movs	r2, #0
    135e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1360:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1362:	3330      	adds	r3, #48	; 0x30
    1364:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1366:	3301      	adds	r3, #1
    1368:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    136a:	3301      	adds	r3, #1
    136c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    136e:	3301      	adds	r3, #1
    1370:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1372:	6828      	ldr	r0, [r5, #0]
    1374:	4b07      	ldr	r3, [pc, #28]	; (1394 <usart_init+0x30c>)
    1376:	4798      	blx	r3
    1378:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    137a:	4911      	ldr	r1, [pc, #68]	; (13c0 <usart_init+0x338>)
    137c:	4b11      	ldr	r3, [pc, #68]	; (13c4 <usart_init+0x33c>)
    137e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1380:	00a4      	lsls	r4, r4, #2
    1382:	4b11      	ldr	r3, [pc, #68]	; (13c8 <usart_init+0x340>)
    1384:	50e5      	str	r5, [r4, r3]
	return status_code;
    1386:	2000      	movs	r0, #0
    1388:	e691      	b.n	10ae <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    138a:	2310      	movs	r3, #16
    138c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    138e:	2300      	movs	r3, #0
    1390:	9307      	str	r3, [sp, #28]
    1392:	e6e8      	b.n	1166 <usart_init+0xde>
    1394:	00000b3d 	.word	0x00000b3d
    1398:	40000400 	.word	0x40000400
    139c:	00001c41 	.word	0x00001c41
    13a0:	00001bb5 	.word	0x00001bb5
    13a4:	00000979 	.word	0x00000979
    13a8:	41002000 	.word	0x41002000
    13ac:	00001c5d 	.word	0x00001c5d
    13b0:	000008bb 	.word	0x000008bb
    13b4:	000008e5 	.word	0x000008e5
    13b8:	000009c5 	.word	0x000009c5
    13bc:	00001d39 	.word	0x00001d39
    13c0:	00001469 	.word	0x00001469
    13c4:	00000ef1 	.word	0x00000ef1
    13c8:	20000208 	.word	0x20000208

000013cc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    13cc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    13ce:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    13d0:	2a00      	cmp	r2, #0
    13d2:	d101      	bne.n	13d8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    13d4:	0018      	movs	r0, r3
    13d6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    13d8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    13da:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    13dc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    13de:	2a00      	cmp	r2, #0
    13e0:	d1f8      	bne.n	13d4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    13e2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    13e4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    13e6:	2a00      	cmp	r2, #0
    13e8:	d1fc      	bne.n	13e4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    13ea:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    13ec:	2102      	movs	r1, #2
    13ee:	7e1a      	ldrb	r2, [r3, #24]
    13f0:	420a      	tst	r2, r1
    13f2:	d0fc      	beq.n	13ee <usart_write_wait+0x22>
	return STATUS_OK;
    13f4:	2300      	movs	r3, #0
    13f6:	e7ed      	b.n	13d4 <usart_write_wait+0x8>

000013f8 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    13f8:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    13fa:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    13fc:	2a00      	cmp	r2, #0
    13fe:	d101      	bne.n	1404 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1400:	0018      	movs	r0, r3
    1402:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1404:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1406:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1408:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    140a:	2a00      	cmp	r2, #0
    140c:	d1f8      	bne.n	1400 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    140e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1410:	7e10      	ldrb	r0, [r2, #24]
    1412:	0740      	lsls	r0, r0, #29
    1414:	d5f4      	bpl.n	1400 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1416:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1418:	2b00      	cmp	r3, #0
    141a:	d1fc      	bne.n	1416 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    141c:	8b53      	ldrh	r3, [r2, #26]
    141e:	b2db      	uxtb	r3, r3
	if (error_code) {
    1420:	0698      	lsls	r0, r3, #26
    1422:	d01d      	beq.n	1460 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1424:	0798      	lsls	r0, r3, #30
    1426:	d503      	bpl.n	1430 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1428:	2302      	movs	r3, #2
    142a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    142c:	3318      	adds	r3, #24
    142e:	e7e7      	b.n	1400 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1430:	0758      	lsls	r0, r3, #29
    1432:	d503      	bpl.n	143c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1434:	2304      	movs	r3, #4
    1436:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1438:	331a      	adds	r3, #26
    143a:	e7e1      	b.n	1400 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    143c:	07d8      	lsls	r0, r3, #31
    143e:	d503      	bpl.n	1448 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1440:	2301      	movs	r3, #1
    1442:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1444:	3312      	adds	r3, #18
    1446:	e7db      	b.n	1400 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1448:	06d8      	lsls	r0, r3, #27
    144a:	d503      	bpl.n	1454 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    144c:	2310      	movs	r3, #16
    144e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1450:	3332      	adds	r3, #50	; 0x32
    1452:	e7d5      	b.n	1400 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1454:	069b      	lsls	r3, r3, #26
    1456:	d503      	bpl.n	1460 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1458:	2320      	movs	r3, #32
    145a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    145c:	3321      	adds	r3, #33	; 0x21
    145e:	e7cf      	b.n	1400 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1460:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1462:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1464:	2300      	movs	r3, #0
    1466:	e7cb      	b.n	1400 <usart_read_wait+0x8>

00001468 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    146a:	0080      	lsls	r0, r0, #2
    146c:	4b62      	ldr	r3, [pc, #392]	; (15f8 <_usart_interrupt_handler+0x190>)
    146e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1470:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1472:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1474:	2b00      	cmp	r3, #0
    1476:	d1fc      	bne.n	1472 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1478:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    147a:	7da6      	ldrb	r6, [r4, #22]
    147c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    147e:	2330      	movs	r3, #48	; 0x30
    1480:	5ceb      	ldrb	r3, [r5, r3]
    1482:	2231      	movs	r2, #49	; 0x31
    1484:	5caf      	ldrb	r7, [r5, r2]
    1486:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1488:	07f3      	lsls	r3, r6, #31
    148a:	d522      	bpl.n	14d2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    148c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    148e:	b29b      	uxth	r3, r3
    1490:	2b00      	cmp	r3, #0
    1492:	d01c      	beq.n	14ce <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1494:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1496:	7813      	ldrb	r3, [r2, #0]
    1498:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    149a:	1c51      	adds	r1, r2, #1
    149c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    149e:	7969      	ldrb	r1, [r5, #5]
    14a0:	2901      	cmp	r1, #1
    14a2:	d00e      	beq.n	14c2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    14a4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    14a6:	05db      	lsls	r3, r3, #23
    14a8:	0ddb      	lsrs	r3, r3, #23
    14aa:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    14ac:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    14ae:	3b01      	subs	r3, #1
    14b0:	b29b      	uxth	r3, r3
    14b2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    14b4:	2b00      	cmp	r3, #0
    14b6:	d10c      	bne.n	14d2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    14b8:	3301      	adds	r3, #1
    14ba:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    14bc:	3301      	adds	r3, #1
    14be:	75a3      	strb	r3, [r4, #22]
    14c0:	e007      	b.n	14d2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    14c2:	7851      	ldrb	r1, [r2, #1]
    14c4:	0209      	lsls	r1, r1, #8
    14c6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    14c8:	3202      	adds	r2, #2
    14ca:	62aa      	str	r2, [r5, #40]	; 0x28
    14cc:	e7eb      	b.n	14a6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    14ce:	2301      	movs	r3, #1
    14d0:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    14d2:	07b3      	lsls	r3, r6, #30
    14d4:	d506      	bpl.n	14e4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    14d6:	2302      	movs	r3, #2
    14d8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    14da:	2200      	movs	r2, #0
    14dc:	3331      	adds	r3, #49	; 0x31
    14de:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    14e0:	07fb      	lsls	r3, r7, #31
    14e2:	d41a      	bmi.n	151a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    14e4:	0773      	lsls	r3, r6, #29
    14e6:	d565      	bpl.n	15b4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    14e8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    14ea:	b29b      	uxth	r3, r3
    14ec:	2b00      	cmp	r3, #0
    14ee:	d05f      	beq.n	15b0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    14f0:	8b63      	ldrh	r3, [r4, #26]
    14f2:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    14f4:	071a      	lsls	r2, r3, #28
    14f6:	d414      	bmi.n	1522 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    14f8:	223f      	movs	r2, #63	; 0x3f
    14fa:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    14fc:	2b00      	cmp	r3, #0
    14fe:	d034      	beq.n	156a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1500:	079a      	lsls	r2, r3, #30
    1502:	d511      	bpl.n	1528 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1504:	221a      	movs	r2, #26
    1506:	2332      	movs	r3, #50	; 0x32
    1508:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    150a:	3b30      	subs	r3, #48	; 0x30
    150c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    150e:	077b      	lsls	r3, r7, #29
    1510:	d550      	bpl.n	15b4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1512:	0028      	movs	r0, r5
    1514:	696b      	ldr	r3, [r5, #20]
    1516:	4798      	blx	r3
    1518:	e04c      	b.n	15b4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    151a:	0028      	movs	r0, r5
    151c:	68eb      	ldr	r3, [r5, #12]
    151e:	4798      	blx	r3
    1520:	e7e0      	b.n	14e4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1522:	2237      	movs	r2, #55	; 0x37
    1524:	4013      	ands	r3, r2
    1526:	e7e9      	b.n	14fc <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1528:	075a      	lsls	r2, r3, #29
    152a:	d505      	bpl.n	1538 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    152c:	221e      	movs	r2, #30
    152e:	2332      	movs	r3, #50	; 0x32
    1530:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1532:	3b2e      	subs	r3, #46	; 0x2e
    1534:	8363      	strh	r3, [r4, #26]
    1536:	e7ea      	b.n	150e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1538:	07da      	lsls	r2, r3, #31
    153a:	d505      	bpl.n	1548 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    153c:	2213      	movs	r2, #19
    153e:	2332      	movs	r3, #50	; 0x32
    1540:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1542:	3b31      	subs	r3, #49	; 0x31
    1544:	8363      	strh	r3, [r4, #26]
    1546:	e7e2      	b.n	150e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1548:	06da      	lsls	r2, r3, #27
    154a:	d505      	bpl.n	1558 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    154c:	2242      	movs	r2, #66	; 0x42
    154e:	2332      	movs	r3, #50	; 0x32
    1550:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1552:	3b22      	subs	r3, #34	; 0x22
    1554:	8363      	strh	r3, [r4, #26]
    1556:	e7da      	b.n	150e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1558:	2220      	movs	r2, #32
    155a:	421a      	tst	r2, r3
    155c:	d0d7      	beq.n	150e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    155e:	3221      	adds	r2, #33	; 0x21
    1560:	2332      	movs	r3, #50	; 0x32
    1562:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1564:	3b12      	subs	r3, #18
    1566:	8363      	strh	r3, [r4, #26]
    1568:	e7d1      	b.n	150e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    156a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    156c:	05db      	lsls	r3, r3, #23
    156e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1570:	b2da      	uxtb	r2, r3
    1572:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1574:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1576:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1578:	1c51      	adds	r1, r2, #1
    157a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    157c:	7969      	ldrb	r1, [r5, #5]
    157e:	2901      	cmp	r1, #1
    1580:	d010      	beq.n	15a4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1582:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1584:	3b01      	subs	r3, #1
    1586:	b29b      	uxth	r3, r3
    1588:	85ab      	strh	r3, [r5, #44]	; 0x2c
    158a:	2b00      	cmp	r3, #0
    158c:	d112      	bne.n	15b4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    158e:	3304      	adds	r3, #4
    1590:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1592:	2200      	movs	r2, #0
    1594:	332e      	adds	r3, #46	; 0x2e
    1596:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1598:	07bb      	lsls	r3, r7, #30
    159a:	d50b      	bpl.n	15b4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    159c:	0028      	movs	r0, r5
    159e:	692b      	ldr	r3, [r5, #16]
    15a0:	4798      	blx	r3
    15a2:	e007      	b.n	15b4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    15a4:	0a1b      	lsrs	r3, r3, #8
    15a6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    15a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    15aa:	3301      	adds	r3, #1
    15ac:	626b      	str	r3, [r5, #36]	; 0x24
    15ae:	e7e8      	b.n	1582 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    15b0:	2304      	movs	r3, #4
    15b2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    15b4:	06f3      	lsls	r3, r6, #27
    15b6:	d504      	bpl.n	15c2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    15b8:	2310      	movs	r3, #16
    15ba:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    15bc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    15be:	06fb      	lsls	r3, r7, #27
    15c0:	d40e      	bmi.n	15e0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    15c2:	06b3      	lsls	r3, r6, #26
    15c4:	d504      	bpl.n	15d0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    15c6:	2320      	movs	r3, #32
    15c8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    15ca:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    15cc:	073b      	lsls	r3, r7, #28
    15ce:	d40b      	bmi.n	15e8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    15d0:	0733      	lsls	r3, r6, #28
    15d2:	d504      	bpl.n	15de <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    15d4:	2308      	movs	r3, #8
    15d6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    15d8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    15da:	06bb      	lsls	r3, r7, #26
    15dc:	d408      	bmi.n	15f0 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    15de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    15e0:	0028      	movs	r0, r5
    15e2:	69eb      	ldr	r3, [r5, #28]
    15e4:	4798      	blx	r3
    15e6:	e7ec      	b.n	15c2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    15e8:	0028      	movs	r0, r5
    15ea:	69ab      	ldr	r3, [r5, #24]
    15ec:	4798      	blx	r3
    15ee:	e7ef      	b.n	15d0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    15f0:	6a2b      	ldr	r3, [r5, #32]
    15f2:	0028      	movs	r0, r5
    15f4:	4798      	blx	r3
}
    15f6:	e7f2      	b.n	15de <_usart_interrupt_handler+0x176>
    15f8:	20000208 	.word	0x20000208

000015fc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    15fc:	b510      	push	{r4, lr}
	switch (clock_source) {
    15fe:	2808      	cmp	r0, #8
    1600:	d803      	bhi.n	160a <system_clock_source_get_hz+0xe>
    1602:	0080      	lsls	r0, r0, #2
    1604:	4b1b      	ldr	r3, [pc, #108]	; (1674 <system_clock_source_get_hz+0x78>)
    1606:	581b      	ldr	r3, [r3, r0]
    1608:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    160a:	2000      	movs	r0, #0
    160c:	e030      	b.n	1670 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
    160e:	4b1a      	ldr	r3, [pc, #104]	; (1678 <system_clock_source_get_hz+0x7c>)
    1610:	6918      	ldr	r0, [r3, #16]
    1612:	e02d      	b.n	1670 <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1614:	4b19      	ldr	r3, [pc, #100]	; (167c <system_clock_source_get_hz+0x80>)
    1616:	6a1b      	ldr	r3, [r3, #32]
    1618:	059b      	lsls	r3, r3, #22
    161a:	0f9b      	lsrs	r3, r3, #30
    161c:	4818      	ldr	r0, [pc, #96]	; (1680 <system_clock_source_get_hz+0x84>)
    161e:	40d8      	lsrs	r0, r3
    1620:	e026      	b.n	1670 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
    1622:	4b15      	ldr	r3, [pc, #84]	; (1678 <system_clock_source_get_hz+0x7c>)
    1624:	6958      	ldr	r0, [r3, #20]
    1626:	e023      	b.n	1670 <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1628:	4b13      	ldr	r3, [pc, #76]	; (1678 <system_clock_source_get_hz+0x7c>)
    162a:	681b      	ldr	r3, [r3, #0]
			return 0;
    162c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    162e:	079b      	lsls	r3, r3, #30
    1630:	d51e      	bpl.n	1670 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1632:	4912      	ldr	r1, [pc, #72]	; (167c <system_clock_source_get_hz+0x80>)
    1634:	2210      	movs	r2, #16
    1636:	68cb      	ldr	r3, [r1, #12]
    1638:	421a      	tst	r2, r3
    163a:	d0fc      	beq.n	1636 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    163c:	4b0e      	ldr	r3, [pc, #56]	; (1678 <system_clock_source_get_hz+0x7c>)
    163e:	681b      	ldr	r3, [r3, #0]
    1640:	075b      	lsls	r3, r3, #29
    1642:	d401      	bmi.n	1648 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1644:	480f      	ldr	r0, [pc, #60]	; (1684 <system_clock_source_get_hz+0x88>)
    1646:	e013      	b.n	1670 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1648:	2000      	movs	r0, #0
    164a:	4b0f      	ldr	r3, [pc, #60]	; (1688 <system_clock_source_get_hz+0x8c>)
    164c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    164e:	4b0a      	ldr	r3, [pc, #40]	; (1678 <system_clock_source_get_hz+0x7c>)
    1650:	689b      	ldr	r3, [r3, #8]
    1652:	041b      	lsls	r3, r3, #16
    1654:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1656:	4358      	muls	r0, r3
    1658:	e00a      	b.n	1670 <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    165a:	2350      	movs	r3, #80	; 0x50
    165c:	4a07      	ldr	r2, [pc, #28]	; (167c <system_clock_source_get_hz+0x80>)
    165e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1660:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1662:	075b      	lsls	r3, r3, #29
    1664:	d504      	bpl.n	1670 <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
    1666:	4b04      	ldr	r3, [pc, #16]	; (1678 <system_clock_source_get_hz+0x7c>)
    1668:	68d8      	ldr	r0, [r3, #12]
    166a:	e001      	b.n	1670 <system_clock_source_get_hz+0x74>
		return 32768UL;
    166c:	2080      	movs	r0, #128	; 0x80
    166e:	0200      	lsls	r0, r0, #8
	}
}
    1670:	bd10      	pop	{r4, pc}
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	00003a44 	.word	0x00003a44
    1678:	200000b0 	.word	0x200000b0
    167c:	40000800 	.word	0x40000800
    1680:	007a1200 	.word	0x007a1200
    1684:	02dc6c00 	.word	0x02dc6c00
    1688:	00001c5d 	.word	0x00001c5d

0000168c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    168c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    168e:	490c      	ldr	r1, [pc, #48]	; (16c0 <system_clock_source_osc8m_set_config+0x34>)
    1690:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1692:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1694:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1696:	7840      	ldrb	r0, [r0, #1]
    1698:	2201      	movs	r2, #1
    169a:	4010      	ands	r0, r2
    169c:	0180      	lsls	r0, r0, #6
    169e:	2640      	movs	r6, #64	; 0x40
    16a0:	43b3      	bics	r3, r6
    16a2:	4303      	orrs	r3, r0
    16a4:	402a      	ands	r2, r5
    16a6:	01d2      	lsls	r2, r2, #7
    16a8:	2080      	movs	r0, #128	; 0x80
    16aa:	4383      	bics	r3, r0
    16ac:	4313      	orrs	r3, r2
    16ae:	2203      	movs	r2, #3
    16b0:	4022      	ands	r2, r4
    16b2:	0212      	lsls	r2, r2, #8
    16b4:	4803      	ldr	r0, [pc, #12]	; (16c4 <system_clock_source_osc8m_set_config+0x38>)
    16b6:	4003      	ands	r3, r0
    16b8:	4313      	orrs	r3, r2
    16ba:	620b      	str	r3, [r1, #32]
}
    16bc:	bd70      	pop	{r4, r5, r6, pc}
    16be:	46c0      	nop			; (mov r8, r8)
    16c0:	40000800 	.word	0x40000800
    16c4:	fffffcff 	.word	0xfffffcff

000016c8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    16c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ca:	46de      	mov	lr, fp
    16cc:	4657      	mov	r7, sl
    16ce:	464e      	mov	r6, r9
    16d0:	4645      	mov	r5, r8
    16d2:	b5e0      	push	{r5, r6, r7, lr}
    16d4:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    16d6:	4b26      	ldr	r3, [pc, #152]	; (1770 <system_clock_source_xosc32k_set_config+0xa8>)
    16d8:	469b      	mov	fp, r3
    16da:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    16dc:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    16de:	7800      	ldrb	r0, [r0, #0]
    16e0:	4242      	negs	r2, r0
    16e2:	4142      	adcs	r2, r0
    16e4:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    16e6:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    16e8:	78ca      	ldrb	r2, [r1, #3]
    16ea:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    16ec:	790a      	ldrb	r2, [r1, #4]
    16ee:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    16f0:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    16f2:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    16f4:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    16f6:	688a      	ldr	r2, [r1, #8]
    16f8:	491e      	ldr	r1, [pc, #120]	; (1774 <system_clock_source_xosc32k_set_config+0xac>)
    16fa:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    16fc:	2101      	movs	r1, #1
    16fe:	464a      	mov	r2, r9
    1700:	0092      	lsls	r2, r2, #2
    1702:	4691      	mov	r9, r2
    1704:	2204      	movs	r2, #4
    1706:	4393      	bics	r3, r2
    1708:	464a      	mov	r2, r9
    170a:	4313      	orrs	r3, r2
    170c:	4642      	mov	r2, r8
    170e:	400a      	ands	r2, r1
    1710:	00d2      	lsls	r2, r2, #3
    1712:	4690      	mov	r8, r2
    1714:	2208      	movs	r2, #8
    1716:	4393      	bics	r3, r2
    1718:	4642      	mov	r2, r8
    171a:	4313      	orrs	r3, r2
    171c:	4662      	mov	r2, ip
    171e:	400a      	ands	r2, r1
    1720:	0112      	lsls	r2, r2, #4
    1722:	4694      	mov	ip, r2
    1724:	2210      	movs	r2, #16
    1726:	4393      	bics	r3, r2
    1728:	4662      	mov	r2, ip
    172a:	4313      	orrs	r3, r2
    172c:	4008      	ands	r0, r1
    172e:	0140      	lsls	r0, r0, #5
    1730:	2220      	movs	r2, #32
    1732:	4393      	bics	r3, r2
    1734:	4303      	orrs	r3, r0
    1736:	400f      	ands	r7, r1
    1738:	01bf      	lsls	r7, r7, #6
    173a:	2040      	movs	r0, #64	; 0x40
    173c:	4383      	bics	r3, r0
    173e:	433b      	orrs	r3, r7
    1740:	400e      	ands	r6, r1
    1742:	01f6      	lsls	r6, r6, #7
    1744:	3040      	adds	r0, #64	; 0x40
    1746:	4383      	bics	r3, r0
    1748:	4333      	orrs	r3, r6
    174a:	3879      	subs	r0, #121	; 0x79
    174c:	4005      	ands	r5, r0
    174e:	022d      	lsls	r5, r5, #8
    1750:	4809      	ldr	r0, [pc, #36]	; (1778 <system_clock_source_xosc32k_set_config+0xb0>)
    1752:	4003      	ands	r3, r0
    1754:	432b      	orrs	r3, r5
    1756:	4021      	ands	r1, r4
    1758:	0309      	lsls	r1, r1, #12
    175a:	4808      	ldr	r0, [pc, #32]	; (177c <system_clock_source_xosc32k_set_config+0xb4>)
    175c:	4003      	ands	r3, r0
    175e:	430b      	orrs	r3, r1
    1760:	465a      	mov	r2, fp
    1762:	8293      	strh	r3, [r2, #20]
}
    1764:	bc3c      	pop	{r2, r3, r4, r5}
    1766:	4690      	mov	r8, r2
    1768:	4699      	mov	r9, r3
    176a:	46a2      	mov	sl, r4
    176c:	46ab      	mov	fp, r5
    176e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1770:	40000800 	.word	0x40000800
    1774:	200000b0 	.word	0x200000b0
    1778:	fffff8ff 	.word	0xfffff8ff
    177c:	ffffefff 	.word	0xffffefff

00001780 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1780:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1782:	7a03      	ldrb	r3, [r0, #8]
    1784:	069b      	lsls	r3, r3, #26
    1786:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1788:	8942      	ldrh	r2, [r0, #10]
    178a:	0592      	lsls	r2, r2, #22
    178c:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    178e:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1790:	4918      	ldr	r1, [pc, #96]	; (17f4 <system_clock_source_dfll_set_config+0x74>)
    1792:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1794:	7983      	ldrb	r3, [r0, #6]
    1796:	79c2      	ldrb	r2, [r0, #7]
    1798:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    179a:	8842      	ldrh	r2, [r0, #2]
    179c:	8884      	ldrh	r4, [r0, #4]
    179e:	4322      	orrs	r2, r4
    17a0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    17a2:	7842      	ldrb	r2, [r0, #1]
    17a4:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    17a6:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    17a8:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    17aa:	7803      	ldrb	r3, [r0, #0]
    17ac:	2b04      	cmp	r3, #4
    17ae:	d011      	beq.n	17d4 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    17b0:	2b20      	cmp	r3, #32
    17b2:	d10e      	bne.n	17d2 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    17b4:	7b03      	ldrb	r3, [r0, #12]
    17b6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    17b8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    17ba:	4313      	orrs	r3, r2
    17bc:	89c2      	ldrh	r2, [r0, #14]
    17be:	0412      	lsls	r2, r2, #16
    17c0:	490d      	ldr	r1, [pc, #52]	; (17f8 <system_clock_source_dfll_set_config+0x78>)
    17c2:	400a      	ands	r2, r1
    17c4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    17c6:	4a0b      	ldr	r2, [pc, #44]	; (17f4 <system_clock_source_dfll_set_config+0x74>)
    17c8:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    17ca:	6811      	ldr	r1, [r2, #0]
    17cc:	4b0b      	ldr	r3, [pc, #44]	; (17fc <system_clock_source_dfll_set_config+0x7c>)
    17ce:	430b      	orrs	r3, r1
    17d0:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    17d2:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    17d4:	7b03      	ldrb	r3, [r0, #12]
    17d6:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    17d8:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    17da:	4313      	orrs	r3, r2
    17dc:	89c2      	ldrh	r2, [r0, #14]
    17de:	0412      	lsls	r2, r2, #16
    17e0:	4905      	ldr	r1, [pc, #20]	; (17f8 <system_clock_source_dfll_set_config+0x78>)
    17e2:	400a      	ands	r2, r1
    17e4:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    17e6:	4a03      	ldr	r2, [pc, #12]	; (17f4 <system_clock_source_dfll_set_config+0x74>)
    17e8:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    17ea:	6813      	ldr	r3, [r2, #0]
    17ec:	2104      	movs	r1, #4
    17ee:	430b      	orrs	r3, r1
    17f0:	6013      	str	r3, [r2, #0]
    17f2:	e7ee      	b.n	17d2 <system_clock_source_dfll_set_config+0x52>
    17f4:	200000b0 	.word	0x200000b0
    17f8:	03ff0000 	.word	0x03ff0000
    17fc:	00000424 	.word	0x00000424

00001800 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1800:	2808      	cmp	r0, #8
    1802:	d803      	bhi.n	180c <system_clock_source_enable+0xc>
    1804:	0080      	lsls	r0, r0, #2
    1806:	4b25      	ldr	r3, [pc, #148]	; (189c <system_clock_source_enable+0x9c>)
    1808:	581b      	ldr	r3, [r3, r0]
    180a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    180c:	2017      	movs	r0, #23
    180e:	e044      	b.n	189a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1810:	4a23      	ldr	r2, [pc, #140]	; (18a0 <system_clock_source_enable+0xa0>)
    1812:	6a13      	ldr	r3, [r2, #32]
    1814:	2102      	movs	r1, #2
    1816:	430b      	orrs	r3, r1
    1818:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    181a:	2000      	movs	r0, #0
    181c:	e03d      	b.n	189a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    181e:	4a20      	ldr	r2, [pc, #128]	; (18a0 <system_clock_source_enable+0xa0>)
    1820:	6993      	ldr	r3, [r2, #24]
    1822:	2102      	movs	r1, #2
    1824:	430b      	orrs	r3, r1
    1826:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1828:	2000      	movs	r0, #0
		break;
    182a:	e036      	b.n	189a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    182c:	4a1c      	ldr	r2, [pc, #112]	; (18a0 <system_clock_source_enable+0xa0>)
    182e:	8a13      	ldrh	r3, [r2, #16]
    1830:	2102      	movs	r1, #2
    1832:	430b      	orrs	r3, r1
    1834:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1836:	2000      	movs	r0, #0
		break;
    1838:	e02f      	b.n	189a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    183a:	4a19      	ldr	r2, [pc, #100]	; (18a0 <system_clock_source_enable+0xa0>)
    183c:	8a93      	ldrh	r3, [r2, #20]
    183e:	2102      	movs	r1, #2
    1840:	430b      	orrs	r3, r1
    1842:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1844:	2000      	movs	r0, #0
		break;
    1846:	e028      	b.n	189a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1848:	4916      	ldr	r1, [pc, #88]	; (18a4 <system_clock_source_enable+0xa4>)
    184a:	680b      	ldr	r3, [r1, #0]
    184c:	2202      	movs	r2, #2
    184e:	4313      	orrs	r3, r2
    1850:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1852:	4b13      	ldr	r3, [pc, #76]	; (18a0 <system_clock_source_enable+0xa0>)
    1854:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1856:	0019      	movs	r1, r3
    1858:	320e      	adds	r2, #14
    185a:	68cb      	ldr	r3, [r1, #12]
    185c:	421a      	tst	r2, r3
    185e:	d0fc      	beq.n	185a <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1860:	4a10      	ldr	r2, [pc, #64]	; (18a4 <system_clock_source_enable+0xa4>)
    1862:	6891      	ldr	r1, [r2, #8]
    1864:	4b0e      	ldr	r3, [pc, #56]	; (18a0 <system_clock_source_enable+0xa0>)
    1866:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1868:	6852      	ldr	r2, [r2, #4]
    186a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    186c:	2200      	movs	r2, #0
    186e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1870:	0019      	movs	r1, r3
    1872:	3210      	adds	r2, #16
    1874:	68cb      	ldr	r3, [r1, #12]
    1876:	421a      	tst	r2, r3
    1878:	d0fc      	beq.n	1874 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    187a:	4b0a      	ldr	r3, [pc, #40]	; (18a4 <system_clock_source_enable+0xa4>)
    187c:	681b      	ldr	r3, [r3, #0]
    187e:	b29b      	uxth	r3, r3
    1880:	4a07      	ldr	r2, [pc, #28]	; (18a0 <system_clock_source_enable+0xa0>)
    1882:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1884:	2000      	movs	r0, #0
    1886:	e008      	b.n	189a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1888:	4905      	ldr	r1, [pc, #20]	; (18a0 <system_clock_source_enable+0xa0>)
    188a:	2244      	movs	r2, #68	; 0x44
    188c:	5c8b      	ldrb	r3, [r1, r2]
    188e:	2002      	movs	r0, #2
    1890:	4303      	orrs	r3, r0
    1892:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1894:	2000      	movs	r0, #0
		break;
    1896:	e000      	b.n	189a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1898:	2000      	movs	r0, #0
}
    189a:	4770      	bx	lr
    189c:	00003a68 	.word	0x00003a68
    18a0:	40000800 	.word	0x40000800
    18a4:	200000b0 	.word	0x200000b0

000018a8 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    18a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18aa:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    18ac:	22c2      	movs	r2, #194	; 0xc2
    18ae:	00d2      	lsls	r2, r2, #3
    18b0:	4b47      	ldr	r3, [pc, #284]	; (19d0 <system_clock_init+0x128>)
    18b2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    18b4:	4a47      	ldr	r2, [pc, #284]	; (19d4 <system_clock_init+0x12c>)
    18b6:	6853      	ldr	r3, [r2, #4]
    18b8:	211e      	movs	r1, #30
    18ba:	438b      	bics	r3, r1
    18bc:	391a      	subs	r1, #26
    18be:	430b      	orrs	r3, r1
    18c0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    18c2:	2202      	movs	r2, #2
    18c4:	ab01      	add	r3, sp, #4
    18c6:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    18c8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    18ca:	4d43      	ldr	r5, [pc, #268]	; (19d8 <system_clock_init+0x130>)
    18cc:	b2e0      	uxtb	r0, r4
    18ce:	a901      	add	r1, sp, #4
    18d0:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    18d2:	3401      	adds	r4, #1
    18d4:	2c25      	cmp	r4, #37	; 0x25
    18d6:	d1f9      	bne.n	18cc <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    18d8:	a80a      	add	r0, sp, #40	; 0x28
    18da:	2300      	movs	r3, #0
    18dc:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    18de:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    18e0:	2280      	movs	r2, #128	; 0x80
    18e2:	0212      	lsls	r2, r2, #8
    18e4:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    18e6:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    18e8:	2201      	movs	r2, #1
    18ea:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    18ec:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    18ee:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    18f0:	3202      	adds	r2, #2
    18f2:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    18f4:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    18f6:	4b39      	ldr	r3, [pc, #228]	; (19dc <system_clock_init+0x134>)
    18f8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    18fa:	2005      	movs	r0, #5
    18fc:	4b38      	ldr	r3, [pc, #224]	; (19e0 <system_clock_init+0x138>)
    18fe:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1900:	4933      	ldr	r1, [pc, #204]	; (19d0 <system_clock_init+0x128>)
    1902:	2202      	movs	r2, #2
    1904:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1906:	421a      	tst	r2, r3
    1908:	d0fc      	beq.n	1904 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    190a:	4a31      	ldr	r2, [pc, #196]	; (19d0 <system_clock_init+0x128>)
    190c:	8a93      	ldrh	r3, [r2, #20]
    190e:	2180      	movs	r1, #128	; 0x80
    1910:	430b      	orrs	r3, r1
    1912:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1914:	ab05      	add	r3, sp, #20
    1916:	2100      	movs	r1, #0
    1918:	2200      	movs	r2, #0
    191a:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    191c:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    191e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1920:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1922:	313f      	adds	r1, #63	; 0x3f
    1924:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1926:	393b      	subs	r1, #59	; 0x3b
    1928:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    192a:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    192c:	4b2d      	ldr	r3, [pc, #180]	; (19e4 <system_clock_init+0x13c>)
    192e:	681b      	ldr	r3, [r3, #0]
    1930:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1932:	2b3f      	cmp	r3, #63	; 0x3f
    1934:	d04a      	beq.n	19cc <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1936:	a805      	add	r0, sp, #20
    1938:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    193a:	4b2b      	ldr	r3, [pc, #172]	; (19e8 <system_clock_init+0x140>)
    193c:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    193e:	2307      	movs	r3, #7
    1940:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1942:	3338      	adds	r3, #56	; 0x38
    1944:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1946:	4b29      	ldr	r3, [pc, #164]	; (19ec <system_clock_init+0x144>)
    1948:	4798      	blx	r3
	config->run_in_standby  = false;
    194a:	a804      	add	r0, sp, #16
    194c:	2500      	movs	r5, #0
    194e:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1950:	2601      	movs	r6, #1
    1952:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1954:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1956:	4b26      	ldr	r3, [pc, #152]	; (19f0 <system_clock_init+0x148>)
    1958:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    195a:	2006      	movs	r0, #6
    195c:	4f20      	ldr	r7, [pc, #128]	; (19e0 <system_clock_init+0x138>)
    195e:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1960:	4b24      	ldr	r3, [pc, #144]	; (19f4 <system_clock_init+0x14c>)
    1962:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1964:	ac01      	add	r4, sp, #4
    1966:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1968:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    196a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    196c:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    196e:	2305      	movs	r3, #5
    1970:	7023      	strb	r3, [r4, #0]
    1972:	0021      	movs	r1, r4
    1974:	2001      	movs	r0, #1
    1976:	4b20      	ldr	r3, [pc, #128]	; (19f8 <system_clock_init+0x150>)
    1978:	4798      	blx	r3
    197a:	2001      	movs	r0, #1
    197c:	4b1f      	ldr	r3, [pc, #124]	; (19fc <system_clock_init+0x154>)
    197e:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1980:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1982:	0021      	movs	r1, r4
    1984:	2000      	movs	r0, #0
    1986:	4b14      	ldr	r3, [pc, #80]	; (19d8 <system_clock_init+0x130>)
    1988:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    198a:	2000      	movs	r0, #0
    198c:	4b1c      	ldr	r3, [pc, #112]	; (1a00 <system_clock_init+0x158>)
    198e:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1990:	2007      	movs	r0, #7
    1992:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1994:	490e      	ldr	r1, [pc, #56]	; (19d0 <system_clock_init+0x128>)
    1996:	22d0      	movs	r2, #208	; 0xd0
    1998:	68cb      	ldr	r3, [r1, #12]
    199a:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    199c:	2bd0      	cmp	r3, #208	; 0xd0
    199e:	d1fb      	bne.n	1998 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    19a0:	4a18      	ldr	r2, [pc, #96]	; (1a04 <system_clock_init+0x15c>)
    19a2:	2300      	movs	r3, #0
    19a4:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    19a6:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    19a8:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    19aa:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    19ac:	a901      	add	r1, sp, #4
    19ae:	2201      	movs	r2, #1
    19b0:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    19b2:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    19b4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    19b6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    19b8:	3307      	adds	r3, #7
    19ba:	700b      	strb	r3, [r1, #0]
    19bc:	2000      	movs	r0, #0
    19be:	4b0e      	ldr	r3, [pc, #56]	; (19f8 <system_clock_init+0x150>)
    19c0:	4798      	blx	r3
    19c2:	2000      	movs	r0, #0
    19c4:	4b0d      	ldr	r3, [pc, #52]	; (19fc <system_clock_init+0x154>)
    19c6:	4798      	blx	r3
#endif
}
    19c8:	b00f      	add	sp, #60	; 0x3c
    19ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    19cc:	3b20      	subs	r3, #32
    19ce:	e7b2      	b.n	1936 <system_clock_init+0x8e>
    19d0:	40000800 	.word	0x40000800
    19d4:	41004000 	.word	0x41004000
    19d8:	00001c41 	.word	0x00001c41
    19dc:	000016c9 	.word	0x000016c9
    19e0:	00001801 	.word	0x00001801
    19e4:	00806024 	.word	0x00806024
    19e8:	000005b9 	.word	0x000005b9
    19ec:	00001781 	.word	0x00001781
    19f0:	0000168d 	.word	0x0000168d
    19f4:	00001a09 	.word	0x00001a09
    19f8:	00001a2d 	.word	0x00001a2d
    19fc:	00001ae5 	.word	0x00001ae5
    1a00:	00001bb5 	.word	0x00001bb5
    1a04:	40000400 	.word	0x40000400

00001a08 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1a08:	4a06      	ldr	r2, [pc, #24]	; (1a24 <system_gclk_init+0x1c>)
    1a0a:	6993      	ldr	r3, [r2, #24]
    1a0c:	2108      	movs	r1, #8
    1a0e:	430b      	orrs	r3, r1
    1a10:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1a12:	2201      	movs	r2, #1
    1a14:	4b04      	ldr	r3, [pc, #16]	; (1a28 <system_gclk_init+0x20>)
    1a16:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1a18:	0019      	movs	r1, r3
    1a1a:	780b      	ldrb	r3, [r1, #0]
    1a1c:	4213      	tst	r3, r2
    1a1e:	d1fc      	bne.n	1a1a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1a20:	4770      	bx	lr
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	40000400 	.word	0x40000400
    1a28:	40000c00 	.word	0x40000c00

00001a2c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1a2c:	b570      	push	{r4, r5, r6, lr}
    1a2e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1a30:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1a32:	780d      	ldrb	r5, [r1, #0]
    1a34:	022d      	lsls	r5, r5, #8
    1a36:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1a38:	784b      	ldrb	r3, [r1, #1]
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d002      	beq.n	1a44 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1a3e:	2380      	movs	r3, #128	; 0x80
    1a40:	02db      	lsls	r3, r3, #11
    1a42:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1a44:	7a4b      	ldrb	r3, [r1, #9]
    1a46:	2b00      	cmp	r3, #0
    1a48:	d002      	beq.n	1a50 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1a4a:	2380      	movs	r3, #128	; 0x80
    1a4c:	031b      	lsls	r3, r3, #12
    1a4e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1a50:	6848      	ldr	r0, [r1, #4]
    1a52:	2801      	cmp	r0, #1
    1a54:	d910      	bls.n	1a78 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1a56:	1e43      	subs	r3, r0, #1
    1a58:	4218      	tst	r0, r3
    1a5a:	d134      	bne.n	1ac6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1a5c:	2802      	cmp	r0, #2
    1a5e:	d930      	bls.n	1ac2 <system_gclk_gen_set_config+0x96>
    1a60:	2302      	movs	r3, #2
    1a62:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1a64:	3201      	adds	r2, #1
						mask <<= 1) {
    1a66:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1a68:	4298      	cmp	r0, r3
    1a6a:	d8fb      	bhi.n	1a64 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1a6c:	0212      	lsls	r2, r2, #8
    1a6e:	4332      	orrs	r2, r6
    1a70:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1a72:	2380      	movs	r3, #128	; 0x80
    1a74:	035b      	lsls	r3, r3, #13
    1a76:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1a78:	7a0b      	ldrb	r3, [r1, #8]
    1a7a:	2b00      	cmp	r3, #0
    1a7c:	d002      	beq.n	1a84 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1a7e:	2380      	movs	r3, #128	; 0x80
    1a80:	039b      	lsls	r3, r3, #14
    1a82:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a84:	4a13      	ldr	r2, [pc, #76]	; (1ad4 <system_gclk_gen_set_config+0xa8>)
    1a86:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1a88:	b25b      	sxtb	r3, r3
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	dbfb      	blt.n	1a86 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1a8e:	4b12      	ldr	r3, [pc, #72]	; (1ad8 <system_gclk_gen_set_config+0xac>)
    1a90:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a92:	4b12      	ldr	r3, [pc, #72]	; (1adc <system_gclk_gen_set_config+0xb0>)
    1a94:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1a96:	4a0f      	ldr	r2, [pc, #60]	; (1ad4 <system_gclk_gen_set_config+0xa8>)
    1a98:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1a9a:	b25b      	sxtb	r3, r3
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	dbfb      	blt.n	1a98 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1aa0:	4b0c      	ldr	r3, [pc, #48]	; (1ad4 <system_gclk_gen_set_config+0xa8>)
    1aa2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1aa4:	001a      	movs	r2, r3
    1aa6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1aa8:	b25b      	sxtb	r3, r3
    1aaa:	2b00      	cmp	r3, #0
    1aac:	dbfb      	blt.n	1aa6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1aae:	4a09      	ldr	r2, [pc, #36]	; (1ad4 <system_gclk_gen_set_config+0xa8>)
    1ab0:	6853      	ldr	r3, [r2, #4]
    1ab2:	2180      	movs	r1, #128	; 0x80
    1ab4:	0249      	lsls	r1, r1, #9
    1ab6:	400b      	ands	r3, r1
    1ab8:	431d      	orrs	r5, r3
    1aba:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1abc:	4b08      	ldr	r3, [pc, #32]	; (1ae0 <system_gclk_gen_set_config+0xb4>)
    1abe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ac0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1ac2:	2200      	movs	r2, #0
    1ac4:	e7d2      	b.n	1a6c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1ac6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1ac8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1aca:	2380      	movs	r3, #128	; 0x80
    1acc:	029b      	lsls	r3, r3, #10
    1ace:	431d      	orrs	r5, r3
    1ad0:	e7d2      	b.n	1a78 <system_gclk_gen_set_config+0x4c>
    1ad2:	46c0      	nop			; (mov r8, r8)
    1ad4:	40000c00 	.word	0x40000c00
    1ad8:	00000fbd 	.word	0x00000fbd
    1adc:	40000c08 	.word	0x40000c08
    1ae0:	00000ffd 	.word	0x00000ffd

00001ae4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1ae4:	b510      	push	{r4, lr}
    1ae6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ae8:	4a0b      	ldr	r2, [pc, #44]	; (1b18 <system_gclk_gen_enable+0x34>)
    1aea:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1aec:	b25b      	sxtb	r3, r3
    1aee:	2b00      	cmp	r3, #0
    1af0:	dbfb      	blt.n	1aea <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1af2:	4b0a      	ldr	r3, [pc, #40]	; (1b1c <system_gclk_gen_enable+0x38>)
    1af4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1af6:	4b0a      	ldr	r3, [pc, #40]	; (1b20 <system_gclk_gen_enable+0x3c>)
    1af8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1afa:	4a07      	ldr	r2, [pc, #28]	; (1b18 <system_gclk_gen_enable+0x34>)
    1afc:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1afe:	b25b      	sxtb	r3, r3
    1b00:	2b00      	cmp	r3, #0
    1b02:	dbfb      	blt.n	1afc <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1b04:	4a04      	ldr	r2, [pc, #16]	; (1b18 <system_gclk_gen_enable+0x34>)
    1b06:	6851      	ldr	r1, [r2, #4]
    1b08:	2380      	movs	r3, #128	; 0x80
    1b0a:	025b      	lsls	r3, r3, #9
    1b0c:	430b      	orrs	r3, r1
    1b0e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1b10:	4b04      	ldr	r3, [pc, #16]	; (1b24 <system_gclk_gen_enable+0x40>)
    1b12:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1b14:	bd10      	pop	{r4, pc}
    1b16:	46c0      	nop			; (mov r8, r8)
    1b18:	40000c00 	.word	0x40000c00
    1b1c:	00000fbd 	.word	0x00000fbd
    1b20:	40000c04 	.word	0x40000c04
    1b24:	00000ffd 	.word	0x00000ffd

00001b28 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1b28:	b570      	push	{r4, r5, r6, lr}
    1b2a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b2c:	4a1a      	ldr	r2, [pc, #104]	; (1b98 <system_gclk_gen_get_hz+0x70>)
    1b2e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b30:	b25b      	sxtb	r3, r3
    1b32:	2b00      	cmp	r3, #0
    1b34:	dbfb      	blt.n	1b2e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1b36:	4b19      	ldr	r3, [pc, #100]	; (1b9c <system_gclk_gen_get_hz+0x74>)
    1b38:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b3a:	4b19      	ldr	r3, [pc, #100]	; (1ba0 <system_gclk_gen_get_hz+0x78>)
    1b3c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b3e:	4a16      	ldr	r2, [pc, #88]	; (1b98 <system_gclk_gen_get_hz+0x70>)
    1b40:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b42:	b25b      	sxtb	r3, r3
    1b44:	2b00      	cmp	r3, #0
    1b46:	dbfb      	blt.n	1b40 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1b48:	4e13      	ldr	r6, [pc, #76]	; (1b98 <system_gclk_gen_get_hz+0x70>)
    1b4a:	6870      	ldr	r0, [r6, #4]
    1b4c:	04c0      	lsls	r0, r0, #19
    1b4e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1b50:	4b14      	ldr	r3, [pc, #80]	; (1ba4 <system_gclk_gen_get_hz+0x7c>)
    1b52:	4798      	blx	r3
    1b54:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1b56:	4b12      	ldr	r3, [pc, #72]	; (1ba0 <system_gclk_gen_get_hz+0x78>)
    1b58:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1b5a:	6876      	ldr	r6, [r6, #4]
    1b5c:	02f6      	lsls	r6, r6, #11
    1b5e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1b60:	4b11      	ldr	r3, [pc, #68]	; (1ba8 <system_gclk_gen_get_hz+0x80>)
    1b62:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1b64:	4a0c      	ldr	r2, [pc, #48]	; (1b98 <system_gclk_gen_get_hz+0x70>)
    1b66:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1b68:	b25b      	sxtb	r3, r3
    1b6a:	2b00      	cmp	r3, #0
    1b6c:	dbfb      	blt.n	1b66 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1b6e:	4b0a      	ldr	r3, [pc, #40]	; (1b98 <system_gclk_gen_get_hz+0x70>)
    1b70:	689c      	ldr	r4, [r3, #8]
    1b72:	0224      	lsls	r4, r4, #8
    1b74:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1b76:	4b0d      	ldr	r3, [pc, #52]	; (1bac <system_gclk_gen_get_hz+0x84>)
    1b78:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1b7a:	2e00      	cmp	r6, #0
    1b7c:	d107      	bne.n	1b8e <system_gclk_gen_get_hz+0x66>
    1b7e:	2c01      	cmp	r4, #1
    1b80:	d907      	bls.n	1b92 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1b82:	0021      	movs	r1, r4
    1b84:	0028      	movs	r0, r5
    1b86:	4b0a      	ldr	r3, [pc, #40]	; (1bb0 <system_gclk_gen_get_hz+0x88>)
    1b88:	4798      	blx	r3
    1b8a:	0005      	movs	r5, r0
    1b8c:	e001      	b.n	1b92 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1b8e:	3401      	adds	r4, #1
    1b90:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1b92:	0028      	movs	r0, r5
    1b94:	bd70      	pop	{r4, r5, r6, pc}
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	40000c00 	.word	0x40000c00
    1b9c:	00000fbd 	.word	0x00000fbd
    1ba0:	40000c04 	.word	0x40000c04
    1ba4:	000015fd 	.word	0x000015fd
    1ba8:	40000c08 	.word	0x40000c08
    1bac:	00000ffd 	.word	0x00000ffd
    1bb0:	00002655 	.word	0x00002655

00001bb4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1bb4:	b510      	push	{r4, lr}
    1bb6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1bb8:	4b06      	ldr	r3, [pc, #24]	; (1bd4 <system_gclk_chan_enable+0x20>)
    1bba:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bbc:	4b06      	ldr	r3, [pc, #24]	; (1bd8 <system_gclk_chan_enable+0x24>)
    1bbe:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1bc0:	4a06      	ldr	r2, [pc, #24]	; (1bdc <system_gclk_chan_enable+0x28>)
    1bc2:	8853      	ldrh	r3, [r2, #2]
    1bc4:	2180      	movs	r1, #128	; 0x80
    1bc6:	01c9      	lsls	r1, r1, #7
    1bc8:	430b      	orrs	r3, r1
    1bca:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1bcc:	4b04      	ldr	r3, [pc, #16]	; (1be0 <system_gclk_chan_enable+0x2c>)
    1bce:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1bd0:	bd10      	pop	{r4, pc}
    1bd2:	46c0      	nop			; (mov r8, r8)
    1bd4:	00000fbd 	.word	0x00000fbd
    1bd8:	40000c02 	.word	0x40000c02
    1bdc:	40000c00 	.word	0x40000c00
    1be0:	00000ffd 	.word	0x00000ffd

00001be4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1be4:	b510      	push	{r4, lr}
    1be6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1be8:	4b0f      	ldr	r3, [pc, #60]	; (1c28 <system_gclk_chan_disable+0x44>)
    1bea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1bec:	4b0f      	ldr	r3, [pc, #60]	; (1c2c <system_gclk_chan_disable+0x48>)
    1bee:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1bf0:	4a0f      	ldr	r2, [pc, #60]	; (1c30 <system_gclk_chan_disable+0x4c>)
    1bf2:	8853      	ldrh	r3, [r2, #2]
    1bf4:	051b      	lsls	r3, r3, #20
    1bf6:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1bf8:	8853      	ldrh	r3, [r2, #2]
    1bfa:	490e      	ldr	r1, [pc, #56]	; (1c34 <system_gclk_chan_disable+0x50>)
    1bfc:	400b      	ands	r3, r1
    1bfe:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1c00:	8853      	ldrh	r3, [r2, #2]
    1c02:	490d      	ldr	r1, [pc, #52]	; (1c38 <system_gclk_chan_disable+0x54>)
    1c04:	400b      	ands	r3, r1
    1c06:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1c08:	0011      	movs	r1, r2
    1c0a:	2280      	movs	r2, #128	; 0x80
    1c0c:	01d2      	lsls	r2, r2, #7
    1c0e:	884b      	ldrh	r3, [r1, #2]
    1c10:	4213      	tst	r3, r2
    1c12:	d1fc      	bne.n	1c0e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1c14:	4906      	ldr	r1, [pc, #24]	; (1c30 <system_gclk_chan_disable+0x4c>)
    1c16:	884a      	ldrh	r2, [r1, #2]
    1c18:	0203      	lsls	r3, r0, #8
    1c1a:	4806      	ldr	r0, [pc, #24]	; (1c34 <system_gclk_chan_disable+0x50>)
    1c1c:	4002      	ands	r2, r0
    1c1e:	4313      	orrs	r3, r2
    1c20:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1c22:	4b06      	ldr	r3, [pc, #24]	; (1c3c <system_gclk_chan_disable+0x58>)
    1c24:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1c26:	bd10      	pop	{r4, pc}
    1c28:	00000fbd 	.word	0x00000fbd
    1c2c:	40000c02 	.word	0x40000c02
    1c30:	40000c00 	.word	0x40000c00
    1c34:	fffff0ff 	.word	0xfffff0ff
    1c38:	ffffbfff 	.word	0xffffbfff
    1c3c:	00000ffd 	.word	0x00000ffd

00001c40 <system_gclk_chan_set_config>:
{
    1c40:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1c42:	780c      	ldrb	r4, [r1, #0]
    1c44:	0224      	lsls	r4, r4, #8
    1c46:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1c48:	4b02      	ldr	r3, [pc, #8]	; (1c54 <system_gclk_chan_set_config+0x14>)
    1c4a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1c4c:	b2a4      	uxth	r4, r4
    1c4e:	4b02      	ldr	r3, [pc, #8]	; (1c58 <system_gclk_chan_set_config+0x18>)
    1c50:	805c      	strh	r4, [r3, #2]
}
    1c52:	bd10      	pop	{r4, pc}
    1c54:	00001be5 	.word	0x00001be5
    1c58:	40000c00 	.word	0x40000c00

00001c5c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1c5c:	b510      	push	{r4, lr}
    1c5e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1c60:	4b06      	ldr	r3, [pc, #24]	; (1c7c <system_gclk_chan_get_hz+0x20>)
    1c62:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1c64:	4b06      	ldr	r3, [pc, #24]	; (1c80 <system_gclk_chan_get_hz+0x24>)
    1c66:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1c68:	4b06      	ldr	r3, [pc, #24]	; (1c84 <system_gclk_chan_get_hz+0x28>)
    1c6a:	885c      	ldrh	r4, [r3, #2]
    1c6c:	0524      	lsls	r4, r4, #20
    1c6e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1c70:	4b05      	ldr	r3, [pc, #20]	; (1c88 <system_gclk_chan_get_hz+0x2c>)
    1c72:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1c74:	0020      	movs	r0, r4
    1c76:	4b05      	ldr	r3, [pc, #20]	; (1c8c <system_gclk_chan_get_hz+0x30>)
    1c78:	4798      	blx	r3
}
    1c7a:	bd10      	pop	{r4, pc}
    1c7c:	00000fbd 	.word	0x00000fbd
    1c80:	40000c02 	.word	0x40000c02
    1c84:	40000c00 	.word	0x40000c00
    1c88:	00000ffd 	.word	0x00000ffd
    1c8c:	00001b29 	.word	0x00001b29

00001c90 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1c90:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1c92:	78d3      	ldrb	r3, [r2, #3]
    1c94:	2b00      	cmp	r3, #0
    1c96:	d135      	bne.n	1d04 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1c98:	7813      	ldrb	r3, [r2, #0]
    1c9a:	2b80      	cmp	r3, #128	; 0x80
    1c9c:	d029      	beq.n	1cf2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1c9e:	061b      	lsls	r3, r3, #24
    1ca0:	2480      	movs	r4, #128	; 0x80
    1ca2:	0264      	lsls	r4, r4, #9
    1ca4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ca6:	7854      	ldrb	r4, [r2, #1]
    1ca8:	2502      	movs	r5, #2
    1caa:	43ac      	bics	r4, r5
    1cac:	d106      	bne.n	1cbc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1cae:	7894      	ldrb	r4, [r2, #2]
    1cb0:	2c00      	cmp	r4, #0
    1cb2:	d120      	bne.n	1cf6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1cb4:	2480      	movs	r4, #128	; 0x80
    1cb6:	02a4      	lsls	r4, r4, #10
    1cb8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1cba:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1cbc:	7854      	ldrb	r4, [r2, #1]
    1cbe:	3c01      	subs	r4, #1
    1cc0:	2c01      	cmp	r4, #1
    1cc2:	d91c      	bls.n	1cfe <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1cc4:	040d      	lsls	r5, r1, #16
    1cc6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1cc8:	24a0      	movs	r4, #160	; 0xa0
    1cca:	05e4      	lsls	r4, r4, #23
    1ccc:	432c      	orrs	r4, r5
    1cce:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cd0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1cd2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1cd4:	24d0      	movs	r4, #208	; 0xd0
    1cd6:	0624      	lsls	r4, r4, #24
    1cd8:	432c      	orrs	r4, r5
    1cda:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1cdc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1cde:	78d4      	ldrb	r4, [r2, #3]
    1ce0:	2c00      	cmp	r4, #0
    1ce2:	d122      	bne.n	1d2a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ce4:	035b      	lsls	r3, r3, #13
    1ce6:	d51c      	bpl.n	1d22 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ce8:	7893      	ldrb	r3, [r2, #2]
    1cea:	2b01      	cmp	r3, #1
    1cec:	d01e      	beq.n	1d2c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1cee:	6141      	str	r1, [r0, #20]
    1cf0:	e017      	b.n	1d22 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1cf2:	2300      	movs	r3, #0
    1cf4:	e7d7      	b.n	1ca6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1cf6:	24c0      	movs	r4, #192	; 0xc0
    1cf8:	02e4      	lsls	r4, r4, #11
    1cfa:	4323      	orrs	r3, r4
    1cfc:	e7dd      	b.n	1cba <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1cfe:	4c0d      	ldr	r4, [pc, #52]	; (1d34 <_system_pinmux_config+0xa4>)
    1d00:	4023      	ands	r3, r4
    1d02:	e7df      	b.n	1cc4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1d04:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1d06:	040c      	lsls	r4, r1, #16
    1d08:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1d0a:	23a0      	movs	r3, #160	; 0xa0
    1d0c:	05db      	lsls	r3, r3, #23
    1d0e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d10:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1d12:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1d14:	23d0      	movs	r3, #208	; 0xd0
    1d16:	061b      	lsls	r3, r3, #24
    1d18:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1d1a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1d1c:	78d3      	ldrb	r3, [r2, #3]
    1d1e:	2b00      	cmp	r3, #0
    1d20:	d103      	bne.n	1d2a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1d22:	7853      	ldrb	r3, [r2, #1]
    1d24:	3b01      	subs	r3, #1
    1d26:	2b01      	cmp	r3, #1
    1d28:	d902      	bls.n	1d30 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1d2a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1d2c:	6181      	str	r1, [r0, #24]
    1d2e:	e7f8      	b.n	1d22 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1d30:	6081      	str	r1, [r0, #8]
}
    1d32:	e7fa      	b.n	1d2a <_system_pinmux_config+0x9a>
    1d34:	fffbffff 	.word	0xfffbffff

00001d38 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1d38:	b510      	push	{r4, lr}
    1d3a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1d3c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1d3e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1d40:	2900      	cmp	r1, #0
    1d42:	d104      	bne.n	1d4e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1d44:	0943      	lsrs	r3, r0, #5
    1d46:	01db      	lsls	r3, r3, #7
    1d48:	4905      	ldr	r1, [pc, #20]	; (1d60 <system_pinmux_pin_set_config+0x28>)
    1d4a:	468c      	mov	ip, r1
    1d4c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1d4e:	241f      	movs	r4, #31
    1d50:	4020      	ands	r0, r4
    1d52:	2101      	movs	r1, #1
    1d54:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1d56:	0018      	movs	r0, r3
    1d58:	4b02      	ldr	r3, [pc, #8]	; (1d64 <system_pinmux_pin_set_config+0x2c>)
    1d5a:	4798      	blx	r3
}
    1d5c:	bd10      	pop	{r4, pc}
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	41004400 	.word	0x41004400
    1d64:	00001c91 	.word	0x00001c91

00001d68 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1d68:	4770      	bx	lr
	...

00001d6c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1d6c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1d6e:	4b05      	ldr	r3, [pc, #20]	; (1d84 <system_init+0x18>)
    1d70:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1d72:	4b05      	ldr	r3, [pc, #20]	; (1d88 <system_init+0x1c>)
    1d74:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1d76:	4b05      	ldr	r3, [pc, #20]	; (1d8c <system_init+0x20>)
    1d78:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1d7a:	4b05      	ldr	r3, [pc, #20]	; (1d90 <system_init+0x24>)
    1d7c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1d7e:	4b05      	ldr	r3, [pc, #20]	; (1d94 <system_init+0x28>)
    1d80:	4798      	blx	r3
}
    1d82:	bd10      	pop	{r4, pc}
    1d84:	000018a9 	.word	0x000018a9
    1d88:	0000102d 	.word	0x0000102d
    1d8c:	00001d69 	.word	0x00001d69
    1d90:	00001d69 	.word	0x00001d69
    1d94:	00001d69 	.word	0x00001d69

00001d98 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1d98:	e7fe      	b.n	1d98 <Dummy_Handler>
	...

00001d9c <Reset_Handler>:
{
    1d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1d9e:	4a2a      	ldr	r2, [pc, #168]	; (1e48 <Reset_Handler+0xac>)
    1da0:	4b2a      	ldr	r3, [pc, #168]	; (1e4c <Reset_Handler+0xb0>)
    1da2:	429a      	cmp	r2, r3
    1da4:	d011      	beq.n	1dca <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1da6:	001a      	movs	r2, r3
    1da8:	4b29      	ldr	r3, [pc, #164]	; (1e50 <Reset_Handler+0xb4>)
    1daa:	429a      	cmp	r2, r3
    1dac:	d20d      	bcs.n	1dca <Reset_Handler+0x2e>
    1dae:	4a29      	ldr	r2, [pc, #164]	; (1e54 <Reset_Handler+0xb8>)
    1db0:	3303      	adds	r3, #3
    1db2:	1a9b      	subs	r3, r3, r2
    1db4:	089b      	lsrs	r3, r3, #2
    1db6:	3301      	adds	r3, #1
    1db8:	009b      	lsls	r3, r3, #2
    1dba:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1dbc:	4823      	ldr	r0, [pc, #140]	; (1e4c <Reset_Handler+0xb0>)
    1dbe:	4922      	ldr	r1, [pc, #136]	; (1e48 <Reset_Handler+0xac>)
    1dc0:	588c      	ldr	r4, [r1, r2]
    1dc2:	5084      	str	r4, [r0, r2]
    1dc4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1dc6:	429a      	cmp	r2, r3
    1dc8:	d1fa      	bne.n	1dc0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1dca:	4a23      	ldr	r2, [pc, #140]	; (1e58 <Reset_Handler+0xbc>)
    1dcc:	4b23      	ldr	r3, [pc, #140]	; (1e5c <Reset_Handler+0xc0>)
    1dce:	429a      	cmp	r2, r3
    1dd0:	d20a      	bcs.n	1de8 <Reset_Handler+0x4c>
    1dd2:	43d3      	mvns	r3, r2
    1dd4:	4921      	ldr	r1, [pc, #132]	; (1e5c <Reset_Handler+0xc0>)
    1dd6:	185b      	adds	r3, r3, r1
    1dd8:	2103      	movs	r1, #3
    1dda:	438b      	bics	r3, r1
    1ddc:	3304      	adds	r3, #4
    1dde:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1de0:	2100      	movs	r1, #0
    1de2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1de4:	4293      	cmp	r3, r2
    1de6:	d1fc      	bne.n	1de2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1de8:	4a1d      	ldr	r2, [pc, #116]	; (1e60 <Reset_Handler+0xc4>)
    1dea:	21ff      	movs	r1, #255	; 0xff
    1dec:	4b1d      	ldr	r3, [pc, #116]	; (1e64 <Reset_Handler+0xc8>)
    1dee:	438b      	bics	r3, r1
    1df0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1df2:	39fd      	subs	r1, #253	; 0xfd
    1df4:	2390      	movs	r3, #144	; 0x90
    1df6:	005b      	lsls	r3, r3, #1
    1df8:	4a1b      	ldr	r2, [pc, #108]	; (1e68 <Reset_Handler+0xcc>)
    1dfa:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1dfc:	4a1b      	ldr	r2, [pc, #108]	; (1e6c <Reset_Handler+0xd0>)
    1dfe:	78d3      	ldrb	r3, [r2, #3]
    1e00:	2503      	movs	r5, #3
    1e02:	43ab      	bics	r3, r5
    1e04:	2402      	movs	r4, #2
    1e06:	4323      	orrs	r3, r4
    1e08:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1e0a:	78d3      	ldrb	r3, [r2, #3]
    1e0c:	270c      	movs	r7, #12
    1e0e:	43bb      	bics	r3, r7
    1e10:	2608      	movs	r6, #8
    1e12:	4333      	orrs	r3, r6
    1e14:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1e16:	4b16      	ldr	r3, [pc, #88]	; (1e70 <Reset_Handler+0xd4>)
    1e18:	7b98      	ldrb	r0, [r3, #14]
    1e1a:	2230      	movs	r2, #48	; 0x30
    1e1c:	4390      	bics	r0, r2
    1e1e:	2220      	movs	r2, #32
    1e20:	4310      	orrs	r0, r2
    1e22:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1e24:	7b99      	ldrb	r1, [r3, #14]
    1e26:	43b9      	bics	r1, r7
    1e28:	4331      	orrs	r1, r6
    1e2a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1e2c:	7b9a      	ldrb	r2, [r3, #14]
    1e2e:	43aa      	bics	r2, r5
    1e30:	4322      	orrs	r2, r4
    1e32:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1e34:	4a0f      	ldr	r2, [pc, #60]	; (1e74 <Reset_Handler+0xd8>)
    1e36:	6853      	ldr	r3, [r2, #4]
    1e38:	2180      	movs	r1, #128	; 0x80
    1e3a:	430b      	orrs	r3, r1
    1e3c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1e3e:	4b0e      	ldr	r3, [pc, #56]	; (1e78 <Reset_Handler+0xdc>)
    1e40:	4798      	blx	r3
        main();
    1e42:	4b0e      	ldr	r3, [pc, #56]	; (1e7c <Reset_Handler+0xe0>)
    1e44:	4798      	blx	r3
    1e46:	e7fe      	b.n	1e46 <Reset_Handler+0xaa>
    1e48:	00003d88 	.word	0x00003d88
    1e4c:	20000000 	.word	0x20000000
    1e50:	20000068 	.word	0x20000068
    1e54:	20000004 	.word	0x20000004
    1e58:	20000068 	.word	0x20000068
    1e5c:	20000270 	.word	0x20000270
    1e60:	e000ed00 	.word	0xe000ed00
    1e64:	00000000 	.word	0x00000000
    1e68:	41007000 	.word	0x41007000
    1e6c:	41005000 	.word	0x41005000
    1e70:	41004800 	.word	0x41004800
    1e74:	41004000 	.word	0x41004000
    1e78:	000027c1 	.word	0x000027c1
    1e7c:	0000225d 	.word	0x0000225d

00001e80 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e82:	46c6      	mov	lr, r8
    1e84:	b500      	push	{lr}
    1e86:	000c      	movs	r4, r1
    1e88:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1e8a:	2800      	cmp	r0, #0
    1e8c:	d10f      	bne.n	1eae <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    1e8e:	2a00      	cmp	r2, #0
    1e90:	dd11      	ble.n	1eb6 <_read+0x36>
    1e92:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1e94:	4e09      	ldr	r6, [pc, #36]	; (1ebc <_read+0x3c>)
    1e96:	4d0a      	ldr	r5, [pc, #40]	; (1ec0 <_read+0x40>)
    1e98:	6830      	ldr	r0, [r6, #0]
    1e9a:	0021      	movs	r1, r4
    1e9c:	682b      	ldr	r3, [r5, #0]
    1e9e:	4798      	blx	r3
		ptr++;
    1ea0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1ea2:	42bc      	cmp	r4, r7
    1ea4:	d1f8      	bne.n	1e98 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1ea6:	4640      	mov	r0, r8
    1ea8:	bc04      	pop	{r2}
    1eaa:	4690      	mov	r8, r2
    1eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    1eae:	2301      	movs	r3, #1
    1eb0:	425b      	negs	r3, r3
    1eb2:	4698      	mov	r8, r3
    1eb4:	e7f7      	b.n	1ea6 <_read+0x26>
	for (; len > 0; --len) {
    1eb6:	4680      	mov	r8, r0
    1eb8:	e7f5      	b.n	1ea6 <_read+0x26>
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	20000228 	.word	0x20000228
    1ec0:	20000220 	.word	0x20000220

00001ec4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ec6:	46c6      	mov	lr, r8
    1ec8:	b500      	push	{lr}
    1eca:	000e      	movs	r6, r1
    1ecc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    1ece:	3801      	subs	r0, #1
    1ed0:	2802      	cmp	r0, #2
    1ed2:	d810      	bhi.n	1ef6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1ed4:	2a00      	cmp	r2, #0
    1ed6:	d011      	beq.n	1efc <_write+0x38>
    1ed8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1eda:	4b0c      	ldr	r3, [pc, #48]	; (1f0c <_write+0x48>)
    1edc:	4698      	mov	r8, r3
    1ede:	4f0c      	ldr	r7, [pc, #48]	; (1f10 <_write+0x4c>)
    1ee0:	4643      	mov	r3, r8
    1ee2:	6818      	ldr	r0, [r3, #0]
    1ee4:	5d31      	ldrb	r1, [r6, r4]
    1ee6:	683b      	ldr	r3, [r7, #0]
    1ee8:	4798      	blx	r3
    1eea:	2800      	cmp	r0, #0
    1eec:	db08      	blt.n	1f00 <_write+0x3c>
			return -1;
		}
		++nChars;
    1eee:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    1ef0:	42a5      	cmp	r5, r4
    1ef2:	d1f5      	bne.n	1ee0 <_write+0x1c>
    1ef4:	e006      	b.n	1f04 <_write+0x40>
		return -1;
    1ef6:	2401      	movs	r4, #1
    1ef8:	4264      	negs	r4, r4
    1efa:	e003      	b.n	1f04 <_write+0x40>
	for (; len != 0; --len) {
    1efc:	0014      	movs	r4, r2
    1efe:	e001      	b.n	1f04 <_write+0x40>
			return -1;
    1f00:	2401      	movs	r4, #1
    1f02:	4264      	negs	r4, r4
	}
	return nChars;
}
    1f04:	0020      	movs	r0, r4
    1f06:	bc04      	pop	{r2}
    1f08:	4690      	mov	r8, r2
    1f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f0c:	20000228 	.word	0x20000228
    1f10:	20000224 	.word	0x20000224

00001f14 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1f14:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1f16:	4a06      	ldr	r2, [pc, #24]	; (1f30 <_sbrk+0x1c>)
    1f18:	6812      	ldr	r2, [r2, #0]
    1f1a:	2a00      	cmp	r2, #0
    1f1c:	d004      	beq.n	1f28 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1f1e:	4a04      	ldr	r2, [pc, #16]	; (1f30 <_sbrk+0x1c>)
    1f20:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1f22:	18c3      	adds	r3, r0, r3
    1f24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1f26:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1f28:	4902      	ldr	r1, [pc, #8]	; (1f34 <_sbrk+0x20>)
    1f2a:	4a01      	ldr	r2, [pc, #4]	; (1f30 <_sbrk+0x1c>)
    1f2c:	6011      	str	r1, [r2, #0]
    1f2e:	e7f6      	b.n	1f1e <_sbrk+0xa>
    1f30:	200000c8 	.word	0x200000c8
    1f34:	20002270 	.word	0x20002270

00001f38 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1f38:	2001      	movs	r0, #1
    1f3a:	4240      	negs	r0, r0
    1f3c:	4770      	bx	lr

00001f3e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1f3e:	2380      	movs	r3, #128	; 0x80
    1f40:	019b      	lsls	r3, r3, #6
    1f42:	604b      	str	r3, [r1, #4]

	return 0;
}
    1f44:	2000      	movs	r0, #0
    1f46:	4770      	bx	lr

00001f48 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1f48:	2001      	movs	r0, #1
    1f4a:	4770      	bx	lr

00001f4c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1f4c:	2000      	movs	r0, #0
    1f4e:	4770      	bx	lr

00001f50 <jump_to_firmware>:
	else
		return 0;
}


static void jump_to_firmware(void){
    1f50:	b580      	push	{r7, lr}
    1f52:	af00      	add	r7, sp, #0
	/* Pointer to the Application Section */
	void (*application_code_entry)(void);
	/* Rebase the Stack Pointer */
	__set_MSP(*(uint32_t *)APP_START_ADDRESS);
    1f54:	2380      	movs	r3, #128	; 0x80
    1f56:	01db      	lsls	r3, r3, #7
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    1f58:	681a      	ldr	r2, [r3, #0]
    1f5a:	f382 8808 	msr	MSP, r2
	/* Rebase the vector table base address TODO: use RAM */
	SCB->VTOR = ((uint32_t)APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    1f5e:	4a03      	ldr	r2, [pc, #12]	; (1f6c <jump_to_firmware+0x1c>)
    1f60:	6093      	str	r3, [r2, #8]
	/* Load the Reset Handler address of the application */
	application_code_entry = (void (*)(void))(unsigned *)(*(unsigned *)
    1f62:	4b03      	ldr	r3, [pc, #12]	; (1f70 <jump_to_firmware+0x20>)
	(APP_START_ADDRESS + 4));
	/* Jump to user Reset Handler in the application */
	application_code_entry();
    1f64:	681b      	ldr	r3, [r3, #0]
    1f66:	4798      	blx	r3
}
    1f68:	46bd      	mov	sp, r7
    1f6a:	bd80      	pop	{r7, pc}
    1f6c:	e000ed00 	.word	0xe000ed00
    1f70:	00004004 	.word	0x00004004

00001f74 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1f74:	b570      	push	{r4, r5, r6, lr}
    1f76:	b082      	sub	sp, #8
    1f78:	0005      	movs	r5, r0
    1f7a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1f7c:	2200      	movs	r2, #0
    1f7e:	466b      	mov	r3, sp
    1f80:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1f82:	4c06      	ldr	r4, [pc, #24]	; (1f9c <usart_serial_getchar+0x28>)
    1f84:	466b      	mov	r3, sp
    1f86:	1d99      	adds	r1, r3, #6
    1f88:	0028      	movs	r0, r5
    1f8a:	47a0      	blx	r4
    1f8c:	2800      	cmp	r0, #0
    1f8e:	d1f9      	bne.n	1f84 <usart_serial_getchar+0x10>

	*c = temp;
    1f90:	466b      	mov	r3, sp
    1f92:	3306      	adds	r3, #6
    1f94:	881b      	ldrh	r3, [r3, #0]
    1f96:	7033      	strb	r3, [r6, #0]
}
    1f98:	b002      	add	sp, #8
    1f9a:	bd70      	pop	{r4, r5, r6, pc}
    1f9c:	000013f9 	.word	0x000013f9

00001fa0 <usart_serial_putchar>:
{
    1fa0:	b570      	push	{r4, r5, r6, lr}
    1fa2:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1fa4:	b28c      	uxth	r4, r1
    1fa6:	4e03      	ldr	r6, [pc, #12]	; (1fb4 <usart_serial_putchar+0x14>)
    1fa8:	0021      	movs	r1, r4
    1faa:	0028      	movs	r0, r5
    1fac:	47b0      	blx	r6
    1fae:	2800      	cmp	r0, #0
    1fb0:	d1fa      	bne.n	1fa8 <usart_serial_putchar+0x8>
}
    1fb2:	bd70      	pop	{r4, r5, r6, pc}
    1fb4:	000013cd 	.word	0x000013cd

00001fb8 <write_nvm>:
static void write_nvm(image_t image){
    1fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fba:	46de      	mov	lr, fp
    1fbc:	4657      	mov	r7, sl
    1fbe:	464e      	mov	r6, r9
    1fc0:	4645      	mov	r5, r8
    1fc2:	b5e0      	push	{r5, r6, r7, lr}
    1fc4:	b085      	sub	sp, #20
    1fc6:	1e06      	subs	r6, r0, #0
		printf("Preparing %s Flash to NVM write\r\n", ((image == IMAGE1) ? "Image1" : "Image2"));
    1fc8:	4954      	ldr	r1, [pc, #336]	; (211c <STACK_SIZE+0x11c>)
    1fca:	d000      	beq.n	1fce <write_nvm+0x16>
    1fcc:	4954      	ldr	r1, [pc, #336]	; (2120 <STACK_SIZE+0x120>)
    1fce:	4855      	ldr	r0, [pc, #340]	; (2124 <STACK_SIZE+0x124>)
    1fd0:	4b55      	ldr	r3, [pc, #340]	; (2128 <STACK_SIZE+0x128>)
    1fd2:	4798      	blx	r3
		uint32_t img_size = ((image == IMAGE1) ? image1_metadata.size : image2_metadata.size);
    1fd4:	2e00      	cmp	r6, #0
    1fd6:	d119      	bne.n	200c <STACK_SIZE+0xc>
    1fd8:	4b54      	ldr	r3, [pc, #336]	; (212c <STACK_SIZE+0x12c>)
    1fda:	885d      	ldrh	r5, [r3, #2]
		int flash_pages = img_size / AT25DFX_BUFFER_SIZE;
    1fdc:	0a2b      	lsrs	r3, r5, #8
    1fde:	9301      	str	r3, [sp, #4]
		uint32_t img_base = ((image == IMAGE1) ? AT25DFX_IMAGE1_ADDR : AT25DFX_IMAGE2_ADDR);
    1fe0:	2e00      	cmp	r6, #0
    1fe2:	d016      	beq.n	2012 <STACK_SIZE+0x12>
    1fe4:	22a0      	movs	r2, #160	; 0xa0
    1fe6:	02d2      	lsls	r2, r2, #11
    1fe8:	4692      	mov	sl, r2
		int nvm_rows = (img_size / ( NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE)) + ((img_size % ( NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE)) ? 1 : 0);
    1fea:	b2ec      	uxtb	r4, r5
    1fec:	1e62      	subs	r2, r4, #1
    1fee:	4194      	sbcs	r4, r2
    1ff0:	18e4      	adds	r4, r4, r3
		for(blk = 0; blk < nvm_rows; blk++){
    1ff2:	2600      	movs	r6, #0
    1ff4:	42a6      	cmp	r6, r4
    1ff6:	da10      	bge.n	201a <STACK_SIZE+0x1a>
    1ff8:	0037      	movs	r7, r6
    1ffa:	3740      	adds	r7, #64	; 0x40
    1ffc:	023f      	lsls	r7, r7, #8
				error_code = nvm_erase_row(APP_START_ADDRESS + (blk * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE));
    1ffe:	0038      	movs	r0, r7
    2000:	4b4b      	ldr	r3, [pc, #300]	; (2130 <STACK_SIZE+0x130>)
    2002:	4798      	blx	r3
			} while (error_code == STATUS_BUSY);
    2004:	2805      	cmp	r0, #5
    2006:	d0fa      	beq.n	1ffe <write_nvm+0x46>
		for(blk = 0; blk < nvm_rows; blk++){
    2008:	3601      	adds	r6, #1
    200a:	e7f3      	b.n	1ff4 <write_nvm+0x3c>
		uint32_t img_size = ((image == IMAGE1) ? image1_metadata.size : image2_metadata.size);
    200c:	4b49      	ldr	r3, [pc, #292]	; (2134 <STACK_SIZE+0x134>)
    200e:	885d      	ldrh	r5, [r3, #2]
    2010:	e7e4      	b.n	1fdc <write_nvm+0x24>
		uint32_t img_base = ((image == IMAGE1) ? AT25DFX_IMAGE1_ADDR : AT25DFX_IMAGE2_ADDR);
    2012:	2280      	movs	r2, #128	; 0x80
    2014:	0252      	lsls	r2, r2, #9
    2016:	4692      	mov	sl, r2
    2018:	e7e7      	b.n	1fea <write_nvm+0x32>
		printf("Done nvm erase\r\n");
    201a:	4847      	ldr	r0, [pc, #284]	; (2138 <STACK_SIZE+0x138>)
    201c:	4b47      	ldr	r3, [pc, #284]	; (213c <STACK_SIZE+0x13c>)
    201e:	4798      	blx	r3
		for(blk = 0; blk < flash_pages; blk++){
    2020:	2400      	movs	r4, #0
			if(at25dfx_chip_read_buffer(&at25dfx_chip, img_base + (blk * AT25DFX_BUFFER_SIZE), read_buffer, AT25DFX_BUFFER_SIZE) != STATUS_OK){
    2022:	2380      	movs	r3, #128	; 0x80
    2024:	005b      	lsls	r3, r3, #1
    2026:	469b      	mov	fp, r3
    2028:	46a9      	mov	r9, r5
		for(blk = 0; blk < flash_pages; blk++){
    202a:	9b01      	ldr	r3, [sp, #4]
    202c:	429c      	cmp	r4, r3
    202e:	db2b      	blt.n	2088 <STACK_SIZE+0x88>
    2030:	464d      	mov	r5, r9
		int flash_extra_bytes = img_size % AT25DFX_BUFFER_SIZE;
    2032:	b2ed      	uxtb	r5, r5
		if(flash_extra_bytes){
    2034:	2d00      	cmp	r5, #0
    2036:	d066      	beq.n	2106 <STACK_SIZE+0x106>
			if(at25dfx_chip_read_buffer(&at25dfx_chip, img_base + (blk * AT25DFX_BUFFER_SIZE), read_buffer, flash_extra_bytes) != STATUS_OK){
    2038:	0227      	lsls	r7, r4, #8
    203a:	4653      	mov	r3, sl
    203c:	18fb      	adds	r3, r7, r3
    203e:	9301      	str	r3, [sp, #4]
    2040:	b2ab      	uxth	r3, r5
    2042:	4a3f      	ldr	r2, [pc, #252]	; (2140 <STACK_SIZE+0x140>)
    2044:	9901      	ldr	r1, [sp, #4]
    2046:	483f      	ldr	r0, [pc, #252]	; (2144 <STACK_SIZE+0x144>)
    2048:	4e3f      	ldr	r6, [pc, #252]	; (2148 <STACK_SIZE+0x148>)
    204a:	47b0      	blx	r6
    204c:	2800      	cmp	r0, #0
    204e:	d142      	bne.n	20d6 <STACK_SIZE+0xd6>
			for(nvm_pages = 0; nvm_pages < (flash_extra_bytes / NVMCTRL_PAGE_SIZE); nvm_pages++){
    2050:	09ab      	lsrs	r3, r5, #6
    2052:	469b      	mov	fp, r3
					error_code = nvm_write_buffer(APP_START_ADDRESS + (blk * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE)
    2054:	3440      	adds	r4, #64	; 0x40
					+ (nvm_pages * NVMCTRL_PAGE_SIZE), &read_buffer[nvm_pages * NVMCTRL_PAGE_SIZE], NVMCTRL_PAGE_SIZE);
    2056:	00a4      	lsls	r4, r4, #2
    2058:	2380      	movs	r3, #128	; 0x80
    205a:	01db      	lsls	r3, r3, #7
    205c:	4698      	mov	r8, r3
    205e:	44b8      	add	r8, r7
    2060:	4647      	mov	r7, r8
    2062:	2600      	movs	r6, #0
    2064:	46a2      	mov	sl, r4
			for(nvm_pages = 0; nvm_pages < (flash_extra_bytes / NVMCTRL_PAGE_SIZE); nvm_pages++){
    2066:	455e      	cmp	r6, fp
    2068:	d03a      	beq.n	20e0 <STACK_SIZE+0xe0>
    206a:	4643      	mov	r3, r8
    206c:	1afc      	subs	r4, r7, r3
    206e:	4b34      	ldr	r3, [pc, #208]	; (2140 <STACK_SIZE+0x140>)
    2070:	469c      	mov	ip, r3
    2072:	4464      	add	r4, ip
					error_code = nvm_write_buffer(APP_START_ADDRESS + (blk * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE)
    2074:	2240      	movs	r2, #64	; 0x40
    2076:	0021      	movs	r1, r4
    2078:	0038      	movs	r0, r7
    207a:	4b34      	ldr	r3, [pc, #208]	; (214c <STACK_SIZE+0x14c>)
    207c:	4798      	blx	r3
				} while (error_code == STATUS_BUSY);
    207e:	2805      	cmp	r0, #5
    2080:	d0f8      	beq.n	2074 <STACK_SIZE+0x74>
			for(nvm_pages = 0; nvm_pages < (flash_extra_bytes / NVMCTRL_PAGE_SIZE); nvm_pages++){
    2082:	3601      	adds	r6, #1
    2084:	3740      	adds	r7, #64	; 0x40
    2086:	e7ee      	b.n	2066 <STACK_SIZE+0x66>
    2088:	0225      	lsls	r5, r4, #8
    208a:	4653      	mov	r3, sl
    208c:	195e      	adds	r6, r3, r5
			if(at25dfx_chip_read_buffer(&at25dfx_chip, img_base + (blk * AT25DFX_BUFFER_SIZE), read_buffer, AT25DFX_BUFFER_SIZE) != STATUS_OK){
    208e:	465b      	mov	r3, fp
    2090:	4a2b      	ldr	r2, [pc, #172]	; (2140 <STACK_SIZE+0x140>)
    2092:	0031      	movs	r1, r6
    2094:	482b      	ldr	r0, [pc, #172]	; (2144 <STACK_SIZE+0x144>)
    2096:	4f2c      	ldr	r7, [pc, #176]	; (2148 <STACK_SIZE+0x148>)
    2098:	47b8      	blx	r7
    209a:	2800      	cmp	r0, #0
    209c:	d004      	beq.n	20a8 <STACK_SIZE+0xa8>
				printf("AT25DX read failed at page 0x%lx\r\n", img_base + (blk * AT25DFX_BUFFER_SIZE));
    209e:	0031      	movs	r1, r6
    20a0:	482b      	ldr	r0, [pc, #172]	; (2150 <STACK_SIZE+0x150>)
    20a2:	4b21      	ldr	r3, [pc, #132]	; (2128 <STACK_SIZE+0x128>)
    20a4:	4798      	blx	r3
    20a6:	e7fe      	b.n	20a6 <STACK_SIZE+0xa6>
    20a8:	2380      	movs	r3, #128	; 0x80
    20aa:	01db      	lsls	r3, r3, #7
    20ac:	4698      	mov	r8, r3
    20ae:	44a8      	add	r8, r5
			if(at25dfx_chip_read_buffer(&at25dfx_chip, img_base + (blk * AT25DFX_BUFFER_SIZE), read_buffer, AT25DFX_BUFFER_SIZE) != STATUS_OK){
    20b0:	2600      	movs	r6, #0
    20b2:	4d23      	ldr	r5, [pc, #140]	; (2140 <STACK_SIZE+0x140>)
    20b4:	0033      	movs	r3, r6
    20b6:	4443      	add	r3, r8
    20b8:	9302      	str	r3, [sp, #8]
    20ba:	19ab      	adds	r3, r5, r6
    20bc:	9303      	str	r3, [sp, #12]
					error_code = nvm_write_buffer(APP_START_ADDRESS + (blk * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE)
    20be:	4f23      	ldr	r7, [pc, #140]	; (214c <STACK_SIZE+0x14c>)
    20c0:	2240      	movs	r2, #64	; 0x40
    20c2:	9903      	ldr	r1, [sp, #12]
    20c4:	9802      	ldr	r0, [sp, #8]
    20c6:	47b8      	blx	r7
				} while (error_code == STATUS_BUSY);
    20c8:	2805      	cmp	r0, #5
    20ca:	d0f9      	beq.n	20c0 <STACK_SIZE+0xc0>
    20cc:	3640      	adds	r6, #64	; 0x40
			for(nvm_pages = 0; nvm_pages < (AT25DFX_BUFFER_SIZE / NVMCTRL_PAGE_SIZE); nvm_pages++){
    20ce:	455e      	cmp	r6, fp
    20d0:	d1f0      	bne.n	20b4 <STACK_SIZE+0xb4>
		for(blk = 0; blk < flash_pages; blk++){
    20d2:	3401      	adds	r4, #1
    20d4:	e7a9      	b.n	202a <STACK_SIZE+0x2a>
				printf("AT25DX read failed at page 0x%lx\r\n", img_base + (blk * AT25DFX_BUFFER_SIZE));
    20d6:	9901      	ldr	r1, [sp, #4]
    20d8:	481d      	ldr	r0, [pc, #116]	; (2150 <STACK_SIZE+0x150>)
    20da:	4b13      	ldr	r3, [pc, #76]	; (2128 <STACK_SIZE+0x128>)
    20dc:	4798      	blx	r3
    20de:	e7fe      	b.n	20de <STACK_SIZE+0xde>
    20e0:	4654      	mov	r4, sl
			if(flash_extra_bytes % NVMCTRL_PAGE_SIZE){
    20e2:	06ab      	lsls	r3, r5, #26
    20e4:	d00f      	beq.n	2106 <STACK_SIZE+0x106>
					+ (nvm_pages * NVMCTRL_PAGE_SIZE), &read_buffer[nvm_pages * NVMCTRL_PAGE_SIZE], flash_extra_bytes % NVMCTRL_PAGE_SIZE);
    20e6:	1934      	adds	r4, r6, r4
    20e8:	01a4      	lsls	r4, r4, #6
    20ea:	01b6      	lsls	r6, r6, #6
    20ec:	4b14      	ldr	r3, [pc, #80]	; (2140 <STACK_SIZE+0x140>)
    20ee:	199e      	adds	r6, r3, r6
					error_code = nvm_write_buffer(APP_START_ADDRESS + (blk * NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE)
    20f0:	253f      	movs	r5, #63	; 0x3f
    20f2:	464b      	mov	r3, r9
    20f4:	402b      	ands	r3, r5
    20f6:	001d      	movs	r5, r3
    20f8:	4f14      	ldr	r7, [pc, #80]	; (214c <STACK_SIZE+0x14c>)
    20fa:	002a      	movs	r2, r5
    20fc:	0031      	movs	r1, r6
    20fe:	0020      	movs	r0, r4
    2100:	47b8      	blx	r7
				} while (error_code == STATUS_BUSY);
    2102:	2805      	cmp	r0, #5
    2104:	d0f9      	beq.n	20fa <STACK_SIZE+0xfa>
		printf("Done nvm write\r\n");
    2106:	4813      	ldr	r0, [pc, #76]	; (2154 <STACK_SIZE+0x154>)
    2108:	4b0c      	ldr	r3, [pc, #48]	; (213c <STACK_SIZE+0x13c>)
    210a:	4798      	blx	r3
}
    210c:	b005      	add	sp, #20
    210e:	bc3c      	pop	{r2, r3, r4, r5}
    2110:	4690      	mov	r8, r2
    2112:	4699      	mov	r9, r3
    2114:	46a2      	mov	sl, r4
    2116:	46ab      	mov	fp, r5
    2118:	bdf0      	pop	{r4, r5, r6, r7, pc}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	00003c58 	.word	0x00003c58
    2120:	00003c60 	.word	0x00003c60
    2124:	00003c68 	.word	0x00003c68
    2128:	00002819 	.word	0x00002819
    212c:	2000022c 	.word	0x2000022c
    2130:	000007a5 	.word	0x000007a5
    2134:	20000264 	.word	0x20000264
    2138:	00003c8c 	.word	0x00003c8c
    213c:	0000290d 	.word	0x0000290d
    2140:	20000100 	.word	0x20000100
    2144:	20000238 	.word	0x20000238
    2148:	0000023d 	.word	0x0000023d
    214c:	00000691 	.word	0x00000691
    2150:	00003c9c 	.word	0x00003c9c
    2154:	00003cc0 	.word	0x00003cc0

00002158 <write_nvm_status>:
static void write_nvm_status(void){
    2158:	b570      	push	{r4, r5, r6, lr}
		error_code = nvm_erase_row(NVM_STATUS_ADDRESS);
    215a:	25fc      	movs	r5, #252	; 0xfc
    215c:	01ad      	lsls	r5, r5, #6
    215e:	4c08      	ldr	r4, [pc, #32]	; (2180 <write_nvm_status+0x28>)
    2160:	0028      	movs	r0, r5
    2162:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
    2164:	2805      	cmp	r0, #5
    2166:	d0fb      	beq.n	2160 <write_nvm_status+0x8>
		error_code = nvm_write_buffer(NVM_STATUS_ADDRESS, (uint8_t *)&nvm_status, sizeof(nvm_status));
    2168:	4e06      	ldr	r6, [pc, #24]	; (2184 <write_nvm_status+0x2c>)
    216a:	25fc      	movs	r5, #252	; 0xfc
    216c:	01ad      	lsls	r5, r5, #6
    216e:	2402      	movs	r4, #2
    2170:	0022      	movs	r2, r4
    2172:	0031      	movs	r1, r6
    2174:	0028      	movs	r0, r5
    2176:	4b04      	ldr	r3, [pc, #16]	; (2188 <write_nvm_status+0x30>)
    2178:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    217a:	2805      	cmp	r0, #5
    217c:	d0f8      	beq.n	2170 <write_nvm_status+0x18>
}
    217e:	bd70      	pop	{r4, r5, r6, pc}
    2180:	000007a5 	.word	0x000007a5
    2184:	20000234 	.word	0x20000234
    2188:	00000691 	.word	0x00000691

0000218c <verify_checksum>:
static uint8_t verify_checksum(image_t image){
    218c:	b5f0      	push	{r4, r5, r6, r7, lr}
    218e:	46ce      	mov	lr, r9
    2190:	4647      	mov	r7, r8
    2192:	b580      	push	{r7, lr}
    2194:	b083      	sub	sp, #12
    2196:	4680      	mov	r8, r0
	int pages = ((image == IMAGE1) ? image1_metadata.size : image2_metadata.size) / NVMCTRL_PAGE_SIZE;
    2198:	2800      	cmp	r0, #0
    219a:	d11d      	bne.n	21d8 <verify_checksum+0x4c>
    219c:	4b28      	ldr	r3, [pc, #160]	; (2240 <verify_checksum+0xb4>)
    219e:	885d      	ldrh	r5, [r3, #2]
    21a0:	09ae      	lsrs	r6, r5, #6
	int extra_bytes = ((image == IMAGE1) ? image1_metadata.size : image2_metadata.size) % NVMCTRL_PAGE_SIZE;
    21a2:	233f      	movs	r3, #63	; 0x3f
    21a4:	401d      	ands	r5, r3
	uint32_t checksum = 0;
    21a6:	2400      	movs	r4, #0
    21a8:	9401      	str	r4, [sp, #4]
	for(blk = 0; blk < pages; blk++){
    21aa:	42b4      	cmp	r4, r6
    21ac:	d020      	beq.n	21f0 <verify_checksum+0x64>
    21ae:	1c67      	adds	r7, r4, #1
    21b0:	37ff      	adds	r7, #255	; 0xff
    21b2:	01bf      	lsls	r7, r7, #6
			error_code = nvm_read_buffer(APP_START_ADDRESS + (blk * NVMCTRL_PAGE_SIZE), read_buffer, NVMCTRL_PAGE_SIZE);
    21b4:	2240      	movs	r2, #64	; 0x40
    21b6:	4923      	ldr	r1, [pc, #140]	; (2244 <verify_checksum+0xb8>)
    21b8:	0038      	movs	r0, r7
    21ba:	4b23      	ldr	r3, [pc, #140]	; (2248 <verify_checksum+0xbc>)
    21bc:	4798      	blx	r3
		} while (error_code == STATUS_BUSY);
    21be:	2805      	cmp	r0, #5
    21c0:	d0f8      	beq.n	21b4 <verify_checksum+0x28>
		if(!blk)
    21c2:	2c00      	cmp	r4, #0
    21c4:	d10e      	bne.n	21e4 <verify_checksum+0x58>
 * \ref crc32_recalculate() for the following blocks.
 */
static inline enum status_code crc32_calculate(const void *data, size_t length,
		crc32_t *crc)
{
	*crc = 0;
    21c6:	2300      	movs	r3, #0
    21c8:	9301      	str	r3, [sp, #4]

	return crc32_recalculate(data, length, crc);
    21ca:	aa01      	add	r2, sp, #4
    21cc:	2140      	movs	r1, #64	; 0x40
    21ce:	481d      	ldr	r0, [pc, #116]	; (2244 <verify_checksum+0xb8>)
    21d0:	4b1e      	ldr	r3, [pc, #120]	; (224c <verify_checksum+0xc0>)
    21d2:	4798      	blx	r3
	for(blk = 0; blk < pages; blk++){
    21d4:	3401      	adds	r4, #1
    21d6:	e7e8      	b.n	21aa <verify_checksum+0x1e>
	int pages = ((image == IMAGE1) ? image1_metadata.size : image2_metadata.size) / NVMCTRL_PAGE_SIZE;
    21d8:	4b1d      	ldr	r3, [pc, #116]	; (2250 <verify_checksum+0xc4>)
    21da:	885d      	ldrh	r5, [r3, #2]
    21dc:	09ae      	lsrs	r6, r5, #6
	int extra_bytes = ((image == IMAGE1) ? image1_metadata.size : image2_metadata.size) % NVMCTRL_PAGE_SIZE;
    21de:	233f      	movs	r3, #63	; 0x3f
    21e0:	401d      	ands	r5, r3
    21e2:	e7e0      	b.n	21a6 <verify_checksum+0x1a>
		crc32_recalculate(read_buffer, NVMCTRL_PAGE_SIZE, &checksum);
    21e4:	aa01      	add	r2, sp, #4
    21e6:	2140      	movs	r1, #64	; 0x40
    21e8:	4816      	ldr	r0, [pc, #88]	; (2244 <verify_checksum+0xb8>)
    21ea:	4b18      	ldr	r3, [pc, #96]	; (224c <verify_checksum+0xc0>)
    21ec:	4798      	blx	r3
    21ee:	e7f1      	b.n	21d4 <verify_checksum+0x48>
		error_code = nvm_read_buffer(APP_START_ADDRESS + (blk * NVMCTRL_PAGE_SIZE), read_buffer, extra_bytes);
    21f0:	3401      	adds	r4, #1
    21f2:	34ff      	adds	r4, #255	; 0xff
    21f4:	01a4      	lsls	r4, r4, #6
    21f6:	b2ab      	uxth	r3, r5
    21f8:	4699      	mov	r9, r3
    21fa:	4f12      	ldr	r7, [pc, #72]	; (2244 <verify_checksum+0xb8>)
    21fc:	4e12      	ldr	r6, [pc, #72]	; (2248 <verify_checksum+0xbc>)
    21fe:	464a      	mov	r2, r9
    2200:	0039      	movs	r1, r7
    2202:	0020      	movs	r0, r4
    2204:	47b0      	blx	r6
	} while (error_code == STATUS_BUSY);
    2206:	2805      	cmp	r0, #5
    2208:	d0f9      	beq.n	21fe <verify_checksum+0x72>
	crc32_recalculate(read_buffer, extra_bytes, &checksum);
    220a:	aa01      	add	r2, sp, #4
    220c:	0029      	movs	r1, r5
    220e:	480d      	ldr	r0, [pc, #52]	; (2244 <verify_checksum+0xb8>)
    2210:	4b0e      	ldr	r3, [pc, #56]	; (224c <verify_checksum+0xc0>)
    2212:	4798      	blx	r3
	printf("New image Checksum: %lx\r\n", checksum);
    2214:	9901      	ldr	r1, [sp, #4]
    2216:	480f      	ldr	r0, [pc, #60]	; (2254 <verify_checksum+0xc8>)
    2218:	4b0f      	ldr	r3, [pc, #60]	; (2258 <verify_checksum+0xcc>)
    221a:	4798      	blx	r3
	if(((image == IMAGE1) ? image1_metadata.checksum : image2_metadata.checksum) == checksum)
    221c:	4643      	mov	r3, r8
    221e:	2b00      	cmp	r3, #0
    2220:	d10b      	bne.n	223a <verify_checksum+0xae>
    2222:	4b07      	ldr	r3, [pc, #28]	; (2240 <verify_checksum+0xb4>)
    2224:	6858      	ldr	r0, [r3, #4]
    2226:	9b01      	ldr	r3, [sp, #4]
    2228:	1a18      	subs	r0, r3, r0
    222a:	4243      	negs	r3, r0
    222c:	4158      	adcs	r0, r3
		return 1;
    222e:	b2c0      	uxtb	r0, r0
}
    2230:	b003      	add	sp, #12
    2232:	bc0c      	pop	{r2, r3}
    2234:	4690      	mov	r8, r2
    2236:	4699      	mov	r9, r3
    2238:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((image == IMAGE1) ? image1_metadata.checksum : image2_metadata.checksum) == checksum)
    223a:	4b05      	ldr	r3, [pc, #20]	; (2250 <verify_checksum+0xc4>)
    223c:	6858      	ldr	r0, [r3, #4]
    223e:	e7f2      	b.n	2226 <verify_checksum+0x9a>
    2240:	2000022c 	.word	0x2000022c
    2244:	20000100 	.word	0x20000100
    2248:	00000739 	.word	0x00000739
    224c:	00000491 	.word	0x00000491
    2250:	20000264 	.word	0x20000264
    2254:	00003c3c 	.word	0x00003c3c
    2258:	00002819 	.word	0x00002819

0000225c <main>:

int main (void)
{
    225c:	b5f0      	push	{r4, r5, r6, r7, lr}
    225e:	46c6      	mov	lr, r8
    2260:	b500      	push	{lr}
    2262:	b092      	sub	sp, #72	; 0x48
	system_init();
    2264:	4bc1      	ldr	r3, [pc, #772]	; (256c <main+0x310>)
    2266:	4798      	blx	r3
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    2268:	a801      	add	r0, sp, #4
    226a:	2400      	movs	r4, #0
    226c:	7004      	strb	r4, [r0, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    226e:	4bc0      	ldr	r3, [pc, #768]	; (2570 <main+0x314>)
    2270:	685b      	ldr	r3, [r3, #4]
    2272:	06db      	lsls	r3, r3, #27
    2274:	0f1b      	lsrs	r3, r3, #28
    2276:	7083      	strb	r3, [r0, #2]
	config->disable_cache     = false;
    2278:	70c4      	strb	r4, [r0, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    227a:	7104      	strb	r4, [r0, #4]
	config_nvm.manual_page_write = false;
    227c:	7044      	strb	r4, [r0, #1]
	nvm_set_config(&config_nvm);
    227e:	4bbd      	ldr	r3, [pc, #756]	; (2574 <main+0x318>)
    2280:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    2282:	a911      	add	r1, sp, #68	; 0x44
    2284:	2301      	movs	r3, #1
    2286:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    2288:	708c      	strb	r4, [r1, #2]
	configure_nvm();
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    228a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(PIN_PA05, &pin_conf);
    228c:	2005      	movs	r0, #5
    228e:	4bba      	ldr	r3, [pc, #744]	; (2578 <main+0x31c>)
    2290:	4798      	blx	r3
		error_code = nvm_read_buffer(NVM_STATUS_ADDRESS, (uint8_t *)&nvm_status, sizeof(nvm_status));
    2292:	4eba      	ldr	r6, [pc, #744]	; (257c <main+0x320>)
    2294:	25fc      	movs	r5, #252	; 0xfc
    2296:	01ad      	lsls	r5, r5, #6
    2298:	4cb9      	ldr	r4, [pc, #740]	; (2580 <main+0x324>)
    229a:	2202      	movs	r2, #2
    229c:	0031      	movs	r1, r6
    229e:	0028      	movs	r0, r5
    22a0:	47a0      	blx	r4
	} while (error_code == STATUS_BUSY);
    22a2:	2805      	cmp	r0, #5
    22a4:	d0f9      	beq.n	229a <main+0x3e>
	update_nvm_status();
	if (nvm_status.bootloader || !nvm_status.nvm_valid) {
    22a6:	4bb5      	ldr	r3, [pc, #724]	; (257c <main+0x320>)
    22a8:	781b      	ldrb	r3, [r3, #0]
    22aa:	2b00      	cmp	r3, #0
    22ac:	d104      	bne.n	22b8 <main+0x5c>
    22ae:	4bb3      	ldr	r3, [pc, #716]	; (257c <main+0x320>)
    22b0:	785b      	ldrb	r3, [r3, #1]
    22b2:	2b00      	cmp	r3, #0
    22b4:	d000      	beq.n	22b8 <main+0x5c>
    22b6:	e156      	b.n	2566 <main+0x30a>
		port_base->OUTSET.reg = pin_mask;
    22b8:	2220      	movs	r2, #32
    22ba:	4bb2      	ldr	r3, [pc, #712]	; (2584 <main+0x328>)
    22bc:	619a      	str	r2, [r3, #24]
	config->gclk_generator = GCLK_GENERATOR_0;
    22be:	aa01      	add	r2, sp, #4
    22c0:	2400      	movs	r4, #0
    22c2:	7114      	strb	r4, [r2, #4]
	config->run_in_standby = false;
    22c4:	7154      	strb	r4, [r2, #5]
	config->transfer_mode = SPI_TRANSFER_MODE_0;
    22c6:	60d4      	str	r4, [r2, #12]
	config->data_order = SPI_DATA_ORDER_MSB;
    22c8:	6114      	str	r4, [r2, #16]
	at25dfx_spi_config.baudrate = 12000000;
    22ca:	4baf      	ldr	r3, [pc, #700]	; (2588 <main+0x32c>)
    22cc:	9301      	str	r3, [sp, #4]
	at25dfx_spi_config.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
    22ce:	2380      	movs	r3, #128	; 0x80
    22d0:	025b      	lsls	r3, r3, #9
    22d2:	6093      	str	r3, [r2, #8]
	at25dfx_spi_config.pinmux_pad0 = PINMUX_PA16C_SERCOM1_PAD0;
    22d4:	4bad      	ldr	r3, [pc, #692]	; (258c <main+0x330>)
    22d6:	6153      	str	r3, [r2, #20]
	at25dfx_spi_config.pinmux_pad1 = PINMUX_UNUSED;
    22d8:	2301      	movs	r3, #1
    22da:	425b      	negs	r3, r3
    22dc:	6193      	str	r3, [r2, #24]
	at25dfx_spi_config.pinmux_pad2 = PINMUX_PA18C_SERCOM1_PAD2;
    22de:	4bac      	ldr	r3, [pc, #688]	; (2590 <main+0x334>)
    22e0:	61d3      	str	r3, [r2, #28]
	at25dfx_spi_config.pinmux_pad3 = PINMUX_PA19C_SERCOM1_PAD3;
    22e2:	4bac      	ldr	r3, [pc, #688]	; (2594 <main+0x338>)
    22e4:	6213      	str	r3, [r2, #32]
	spi_master_vec_init(&at25dfx_spi, SERCOM1, &at25dfx_spi_config);
    22e6:	4eac      	ldr	r6, [pc, #688]	; (2598 <main+0x33c>)
    22e8:	49ac      	ldr	r1, [pc, #688]	; (259c <main+0x340>)
    22ea:	0030      	movs	r0, r6
    22ec:	4bac      	ldr	r3, [pc, #688]	; (25a0 <main+0x344>)
    22ee:	4798      	blx	r3
	spi_master_vec_enable(&at25dfx_spi);
    22f0:	0030      	movs	r0, r6
    22f2:	4bac      	ldr	r3, [pc, #688]	; (25a4 <main+0x348>)
    22f4:	4798      	blx	r3
		at25dfx_spi_module_t *const spi_module,
		const struct at25dfx_chip_config *const config)
{
	struct port_config port_config;

	module->type = config->type;
    22f6:	4dac      	ldr	r5, [pc, #688]	; (25a8 <main+0x34c>)
    22f8:	2304      	movs	r3, #4
    22fa:	712b      	strb	r3, [r5, #4]
	module->cs_pin = config->cs_pin;
    22fc:	3303      	adds	r3, #3
    22fe:	716b      	strb	r3, [r5, #5]
	module->spi = spi_module;
    2300:	602e      	str	r6, [r5, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2302:	3b06      	subs	r3, #6
    2304:	466a      	mov	r2, sp
    2306:	7053      	strb	r3, [r2, #1]
	config->powersave  = false;
    2308:	7094      	strb	r4, [r2, #2]

	// Configure CS pin as output, high
	port_get_config_defaults(&port_config);
	port_config.direction = PORT_PIN_DIR_OUTPUT;
    230a:	7013      	strb	r3, [r2, #0]
	port_pin_set_config(module->cs_pin, &port_config);
    230c:	4669      	mov	r1, sp
    230e:	2007      	movs	r0, #7
    2310:	4b99      	ldr	r3, [pc, #612]	; (2578 <main+0x31c>)
    2312:	4798      	blx	r3
	port_pin_set_output_level(module->cs_pin, true);
    2314:	796a      	ldrb	r2, [r5, #5]
	if (port_index < PORT_INST_NUM) {
    2316:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2318:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    231a:	2900      	cmp	r1, #0
    231c:	d104      	bne.n	2328 <main+0xcc>
		return &(ports[port_index]->Group[group_index]);
    231e:	0953      	lsrs	r3, r2, #5
    2320:	01db      	lsls	r3, r3, #7
    2322:	4998      	ldr	r1, [pc, #608]	; (2584 <main+0x328>)
    2324:	468c      	mov	ip, r1
    2326:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2328:	261f      	movs	r6, #31
    232a:	4032      	ands	r2, r6
    232c:	2401      	movs	r4, #1
    232e:	0021      	movs	r1, r4
    2330:	4091      	lsls	r1, r2
		port_base->OUTSET.reg = pin_mask;
    2332:	6199      	str	r1, [r3, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    2334:	aa01      	add	r2, sp, #4
    2336:	2380      	movs	r3, #128	; 0x80
    2338:	05db      	lsls	r3, r3, #23
    233a:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    233c:	2300      	movs	r3, #0
    233e:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    2340:	21ff      	movs	r1, #255	; 0xff
    2342:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    2344:	2100      	movs	r1, #0
    2346:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    2348:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    234a:	2024      	movs	r0, #36	; 0x24
    234c:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    234e:	3001      	adds	r0, #1
    2350:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    2352:	3001      	adds	r0, #1
    2354:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    2356:	3001      	adds	r0, #1
    2358:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    235a:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    235c:	3005      	adds	r0, #5
    235e:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    2360:	3001      	adds	r0, #1
    2362:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    2364:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    2366:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    2368:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    236a:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    236c:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    236e:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    2370:	2313      	movs	r3, #19
    2372:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    2374:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    2376:	23c4      	movs	r3, #196	; 0xc4
    2378:	039b      	lsls	r3, r3, #14
    237a:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    237c:	2301      	movs	r3, #1
    237e:	425b      	negs	r3, r3
    2380:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2382:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2384:	4b89      	ldr	r3, [pc, #548]	; (25ac <main+0x350>)
    2386:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    2388:	4b89      	ldr	r3, [pc, #548]	; (25b0 <main+0x354>)
    238a:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    238c:	23e1      	movs	r3, #225	; 0xe1
    238e:	025b      	lsls	r3, r3, #9
    2390:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2392:	4d88      	ldr	r5, [pc, #544]	; (25b4 <main+0x358>)
    2394:	4b88      	ldr	r3, [pc, #544]	; (25b8 <main+0x35c>)
    2396:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2398:	4988      	ldr	r1, [pc, #544]	; (25bc <main+0x360>)
    239a:	4b89      	ldr	r3, [pc, #548]	; (25c0 <main+0x364>)
    239c:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    239e:	4989      	ldr	r1, [pc, #548]	; (25c4 <main+0x368>)
    23a0:	4b89      	ldr	r3, [pc, #548]	; (25c8 <main+0x36c>)
    23a2:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    23a4:	4989      	ldr	r1, [pc, #548]	; (25cc <main+0x370>)
    23a6:	0028      	movs	r0, r5
    23a8:	4b89      	ldr	r3, [pc, #548]	; (25d0 <main+0x374>)
    23aa:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    23ac:	4b89      	ldr	r3, [pc, #548]	; (25d4 <main+0x378>)
    23ae:	4698      	mov	r8, r3
    23b0:	681b      	ldr	r3, [r3, #0]
    23b2:	6898      	ldr	r0, [r3, #8]
    23b4:	2100      	movs	r1, #0
    23b6:	4f88      	ldr	r7, [pc, #544]	; (25d8 <main+0x37c>)
    23b8:	47b8      	blx	r7
	setbuf(stdin, NULL);
    23ba:	4643      	mov	r3, r8
    23bc:	681b      	ldr	r3, [r3, #0]
    23be:	6858      	ldr	r0, [r3, #4]
    23c0:	2100      	movs	r1, #0
    23c2:	47b8      	blx	r7
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    23c4:	682f      	ldr	r7, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    23c6:	0038      	movs	r0, r7
    23c8:	4b84      	ldr	r3, [pc, #528]	; (25dc <main+0x380>)
    23ca:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    23cc:	4006      	ands	r6, r0
    23ce:	40b4      	lsls	r4, r6
    23d0:	4b83      	ldr	r3, [pc, #524]	; (25e0 <main+0x384>)
    23d2:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    23d4:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    23d6:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    23d8:	2a00      	cmp	r2, #0
    23da:	d1fc      	bne.n	23d6 <main+0x17a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    23dc:	683b      	ldr	r3, [r7, #0]
    23de:	3202      	adds	r2, #2
    23e0:	4313      	orrs	r3, r2
    23e2:	603b      	str	r3, [r7, #0]
		port_pin_set_output_level(PIN_PA05, true);
		at25dfx_init();
		init_uart();
		printf("Entered Bootloader mode\n\r");
    23e4:	487f      	ldr	r0, [pc, #508]	; (25e4 <main+0x388>)
    23e6:	4b80      	ldr	r3, [pc, #512]	; (25e8 <main+0x38c>)
    23e8:	4798      	blx	r3
		if(at25dfx_chip_wake(&at25dfx_chip) != STATUS_OK){
    23ea:	486f      	ldr	r0, [pc, #444]	; (25a8 <main+0x34c>)
    23ec:	4b7f      	ldr	r3, [pc, #508]	; (25ec <main+0x390>)
    23ee:	4798      	blx	r3
    23f0:	2800      	cmp	r0, #0
    23f2:	d000      	beq.n	23f6 <main+0x19a>
    23f4:	e7fe      	b.n	23f4 <main+0x198>
			while(1);
		}
		if (at25dfx_chip_check_presence(&at25dfx_chip) != STATUS_OK) {
    23f6:	486c      	ldr	r0, [pc, #432]	; (25a8 <main+0x34c>)
    23f8:	4b7d      	ldr	r3, [pc, #500]	; (25f0 <main+0x394>)
    23fa:	4798      	blx	r3
    23fc:	2800      	cmp	r0, #0
    23fe:	d003      	beq.n	2408 <main+0x1ac>
			printf("Flash Chip not found\n\r");
    2400:	487c      	ldr	r0, [pc, #496]	; (25f4 <main+0x398>)
    2402:	4b79      	ldr	r3, [pc, #484]	; (25e8 <main+0x38c>)
    2404:	4798      	blx	r3
    2406:	e7fe      	b.n	2406 <main+0x1aa>
	if(at25dfx_chip_read_buffer(&at25dfx_chip, AT25DFX_STATUS_ADDR, &flash_status, sizeof(flash_status)) != STATUS_OK){
    2408:	2302      	movs	r3, #2
    240a:	4a7b      	ldr	r2, [pc, #492]	; (25f8 <main+0x39c>)
    240c:	2100      	movs	r1, #0
    240e:	4866      	ldr	r0, [pc, #408]	; (25a8 <main+0x34c>)
    2410:	4c7a      	ldr	r4, [pc, #488]	; (25fc <main+0x3a0>)
    2412:	47a0      	blx	r4
    2414:	2800      	cmp	r0, #0
    2416:	d004      	beq.n	2422 <main+0x1c6>
		printf("AT25DX read failed at page 0x%x\r\n", AT25DFX_STATUS_ADDR);
    2418:	2100      	movs	r1, #0
    241a:	4879      	ldr	r0, [pc, #484]	; (2600 <main+0x3a4>)
    241c:	4b72      	ldr	r3, [pc, #456]	; (25e8 <main+0x38c>)
    241e:	4798      	blx	r3
    2420:	e7fe      	b.n	2420 <main+0x1c4>
	printf("Flash status: Image1: %s, Image2: %s\r\n", flash_status.image1_valid ? "valid" : "invalid", flash_status.image2_valid ? "valid" : "invalid");
    2422:	4b75      	ldr	r3, [pc, #468]	; (25f8 <main+0x39c>)
    2424:	781b      	ldrb	r3, [r3, #0]
    2426:	4977      	ldr	r1, [pc, #476]	; (2604 <main+0x3a8>)
    2428:	2b00      	cmp	r3, #0
    242a:	d100      	bne.n	242e <main+0x1d2>
    242c:	4976      	ldr	r1, [pc, #472]	; (2608 <main+0x3ac>)
    242e:	4b72      	ldr	r3, [pc, #456]	; (25f8 <main+0x39c>)
    2430:	785b      	ldrb	r3, [r3, #1]
    2432:	4a74      	ldr	r2, [pc, #464]	; (2604 <main+0x3a8>)
    2434:	2b00      	cmp	r3, #0
    2436:	d100      	bne.n	243a <main+0x1de>
    2438:	4a73      	ldr	r2, [pc, #460]	; (2608 <main+0x3ac>)
    243a:	4874      	ldr	r0, [pc, #464]	; (260c <main+0x3b0>)
    243c:	4b6a      	ldr	r3, [pc, #424]	; (25e8 <main+0x38c>)
    243e:	4798      	blx	r3
	if(at25dfx_chip_read_buffer(&at25dfx_chip, AT25DFX_IMAGE1_HEADER, &image1_metadata, sizeof(image1_meta_t)) != STATUS_OK){
    2440:	2308      	movs	r3, #8
    2442:	4a73      	ldr	r2, [pc, #460]	; (2610 <main+0x3b4>)
    2444:	2180      	movs	r1, #128	; 0x80
    2446:	0149      	lsls	r1, r1, #5
    2448:	4857      	ldr	r0, [pc, #348]	; (25a8 <main+0x34c>)
    244a:	4c6c      	ldr	r4, [pc, #432]	; (25fc <main+0x3a0>)
    244c:	47a0      	blx	r4
    244e:	2800      	cmp	r0, #0
    2450:	d005      	beq.n	245e <main+0x202>
		printf("AT25DX read failed at page 0x%x\r\n", AT25DFX_IMAGE1_HEADER);
    2452:	2180      	movs	r1, #128	; 0x80
    2454:	0149      	lsls	r1, r1, #5
    2456:	486a      	ldr	r0, [pc, #424]	; (2600 <main+0x3a4>)
    2458:	4b63      	ldr	r3, [pc, #396]	; (25e8 <main+0x38c>)
    245a:	4798      	blx	r3
    245c:	e7fe      	b.n	245c <main+0x200>
	printf("Image1 Version: %d, Size: %d, Checksum: %lx\r\n", image1_metadata.version, image1_metadata.size, image1_metadata.checksum);
    245e:	4b6c      	ldr	r3, [pc, #432]	; (2610 <main+0x3b4>)
    2460:	885a      	ldrh	r2, [r3, #2]
    2462:	8819      	ldrh	r1, [r3, #0]
    2464:	685b      	ldr	r3, [r3, #4]
    2466:	486b      	ldr	r0, [pc, #428]	; (2614 <main+0x3b8>)
    2468:	4c5f      	ldr	r4, [pc, #380]	; (25e8 <main+0x38c>)
    246a:	47a0      	blx	r4
	if(at25dfx_chip_read_buffer(&at25dfx_chip, AT25DFX_IMAGE2_HEADER, &image2_metadata, sizeof(image2_meta_t)) != STATUS_OK){
    246c:	2308      	movs	r3, #8
    246e:	4a6a      	ldr	r2, [pc, #424]	; (2618 <main+0x3bc>)
    2470:	2180      	movs	r1, #128	; 0x80
    2472:	0189      	lsls	r1, r1, #6
    2474:	484c      	ldr	r0, [pc, #304]	; (25a8 <main+0x34c>)
    2476:	4c61      	ldr	r4, [pc, #388]	; (25fc <main+0x3a0>)
    2478:	47a0      	blx	r4
    247a:	2800      	cmp	r0, #0
    247c:	d005      	beq.n	248a <main+0x22e>
		printf("AT25DX read failed at page 0x%x\r\n", AT25DFX_IMAGE2_HEADER);
    247e:	2180      	movs	r1, #128	; 0x80
    2480:	0189      	lsls	r1, r1, #6
    2482:	485f      	ldr	r0, [pc, #380]	; (2600 <main+0x3a4>)
    2484:	4b58      	ldr	r3, [pc, #352]	; (25e8 <main+0x38c>)
    2486:	4798      	blx	r3
    2488:	e7fe      	b.n	2488 <main+0x22c>
	printf("Image2 Version: %d, Size: %d, Checksum: %lx\r\n", image2_metadata.version, image2_metadata.size, image2_metadata.checksum);
    248a:	4b63      	ldr	r3, [pc, #396]	; (2618 <main+0x3bc>)
    248c:	885a      	ldrh	r2, [r3, #2]
    248e:	8819      	ldrh	r1, [r3, #0]
    2490:	685b      	ldr	r3, [r3, #4]
    2492:	4862      	ldr	r0, [pc, #392]	; (261c <main+0x3c0>)
    2494:	4c54      	ldr	r4, [pc, #336]	; (25e8 <main+0x38c>)
    2496:	47a0      	blx	r4
			while(1);
		}
		update_image_status();
		update_metadata();
		if(flash_status.image1_valid){
    2498:	4b57      	ldr	r3, [pc, #348]	; (25f8 <main+0x39c>)
    249a:	781b      	ldrb	r3, [r3, #0]
    249c:	2b00      	cmp	r3, #0
    249e:	d01c      	beq.n	24da <main+0x27e>
			nvm_status.bootloader = 0;
    24a0:	4b36      	ldr	r3, [pc, #216]	; (257c <main+0x320>)
    24a2:	2400      	movs	r4, #0
    24a4:	701c      	strb	r4, [r3, #0]
			nvm_status.nvm_valid = 0;
    24a6:	705c      	strb	r4, [r3, #1]
			write_nvm_status();
    24a8:	4b5d      	ldr	r3, [pc, #372]	; (2620 <main+0x3c4>)
    24aa:	4798      	blx	r3
			printf("Marked NVM image invalid\r\n");
    24ac:	485d      	ldr	r0, [pc, #372]	; (2624 <main+0x3c8>)
    24ae:	4b5e      	ldr	r3, [pc, #376]	; (2628 <main+0x3cc>)
    24b0:	4798      	blx	r3
			write_nvm(IMAGE1);
    24b2:	0020      	movs	r0, r4
    24b4:	4b5d      	ldr	r3, [pc, #372]	; (262c <main+0x3d0>)
    24b6:	4798      	blx	r3
			if(verify_checksum(IMAGE1)){
    24b8:	0020      	movs	r0, r4
    24ba:	4b5d      	ldr	r3, [pc, #372]	; (2630 <main+0x3d4>)
    24bc:	4798      	blx	r3
    24be:	42a0      	cmp	r0, r4
    24c0:	d017      	beq.n	24f2 <main+0x296>
				printf("Checksum verified\r\n");
    24c2:	485c      	ldr	r0, [pc, #368]	; (2634 <main+0x3d8>)
    24c4:	4c58      	ldr	r4, [pc, #352]	; (2628 <main+0x3cc>)
    24c6:	47a0      	blx	r4
				nvm_status.bootloader = 0;
    24c8:	4b2c      	ldr	r3, [pc, #176]	; (257c <main+0x320>)
    24ca:	2200      	movs	r2, #0
    24cc:	701a      	strb	r2, [r3, #0]
				nvm_status.nvm_valid = 1;
    24ce:	3201      	adds	r2, #1
    24d0:	705a      	strb	r2, [r3, #1]
				write_nvm_status();
    24d2:	4b53      	ldr	r3, [pc, #332]	; (2620 <main+0x3c4>)
    24d4:	4798      	blx	r3
				printf("Marked NVM image valid\r\n");
    24d6:	4858      	ldr	r0, [pc, #352]	; (2638 <main+0x3dc>)
    24d8:	47a0      	blx	r4
				}
			}
		}
		
		
		printf("Exiting Bootloader mode\n\r");
    24da:	4858      	ldr	r0, [pc, #352]	; (263c <main+0x3e0>)
    24dc:	4b42      	ldr	r3, [pc, #264]	; (25e8 <main+0x38c>)
    24de:	4798      	blx	r3
		
		if(at25dfx_chip_sleep(&at25dfx_chip) != STATUS_OK){
    24e0:	4831      	ldr	r0, [pc, #196]	; (25a8 <main+0x34c>)
    24e2:	4b57      	ldr	r3, [pc, #348]	; (2640 <main+0x3e4>)
    24e4:	4798      	blx	r3
    24e6:	2800      	cmp	r0, #0
    24e8:	d023      	beq.n	2532 <main+0x2d6>
			printf("AT25DX sleep failed\r\n");
    24ea:	4856      	ldr	r0, [pc, #344]	; (2644 <main+0x3e8>)
    24ec:	4b4e      	ldr	r3, [pc, #312]	; (2628 <main+0x3cc>)
    24ee:	4798      	blx	r3
    24f0:	e7fe      	b.n	24f0 <main+0x294>
				printf("Checksum verify failed. Trying Image2\r\n");
    24f2:	4855      	ldr	r0, [pc, #340]	; (2648 <main+0x3ec>)
    24f4:	4b4c      	ldr	r3, [pc, #304]	; (2628 <main+0x3cc>)
    24f6:	4798      	blx	r3
				if(flash_status.image2_valid){
    24f8:	4b3f      	ldr	r3, [pc, #252]	; (25f8 <main+0x39c>)
    24fa:	785b      	ldrb	r3, [r3, #1]
    24fc:	2b00      	cmp	r3, #0
    24fe:	d0ec      	beq.n	24da <main+0x27e>
					write_nvm(IMAGE2);
    2500:	2001      	movs	r0, #1
    2502:	4b4a      	ldr	r3, [pc, #296]	; (262c <main+0x3d0>)
    2504:	4798      	blx	r3
					if(verify_checksum(IMAGE2)){
    2506:	2001      	movs	r0, #1
    2508:	4b49      	ldr	r3, [pc, #292]	; (2630 <main+0x3d4>)
    250a:	4798      	blx	r3
    250c:	2800      	cmp	r0, #0
    250e:	d00c      	beq.n	252a <main+0x2ce>
						printf("Checksum verified\r\n");
    2510:	4848      	ldr	r0, [pc, #288]	; (2634 <main+0x3d8>)
    2512:	4c45      	ldr	r4, [pc, #276]	; (2628 <main+0x3cc>)
    2514:	47a0      	blx	r4
						nvm_status.bootloader = 0;
    2516:	4b19      	ldr	r3, [pc, #100]	; (257c <main+0x320>)
    2518:	2200      	movs	r2, #0
    251a:	701a      	strb	r2, [r3, #0]
						nvm_status.nvm_valid = 1;
    251c:	3201      	adds	r2, #1
    251e:	705a      	strb	r2, [r3, #1]
						write_nvm_status();
    2520:	4b3f      	ldr	r3, [pc, #252]	; (2620 <main+0x3c4>)
    2522:	4798      	blx	r3
						printf("Marked NVM image valid\r\n");
    2524:	4844      	ldr	r0, [pc, #272]	; (2638 <main+0x3dc>)
    2526:	47a0      	blx	r4
    2528:	e7d7      	b.n	24da <main+0x27e>
						printf("Checksum verify failed.\r\n");
    252a:	4848      	ldr	r0, [pc, #288]	; (264c <main+0x3f0>)
    252c:	4b3e      	ldr	r3, [pc, #248]	; (2628 <main+0x3cc>)
    252e:	4798      	blx	r3
    2530:	e7d3      	b.n	24da <main+0x27e>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2532:	4d20      	ldr	r5, [pc, #128]	; (25b4 <main+0x358>)
    2534:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2536:	0020      	movs	r0, r4
    2538:	4b28      	ldr	r3, [pc, #160]	; (25dc <main+0x380>)
    253a:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    253c:	231f      	movs	r3, #31
    253e:	4018      	ands	r0, r3
    2540:	3b1e      	subs	r3, #30
    2542:	4083      	lsls	r3, r0
    2544:	2280      	movs	r2, #128	; 0x80
    2546:	4926      	ldr	r1, [pc, #152]	; (25e0 <main+0x384>)
    2548:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    254a:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    254c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    254e:	2a00      	cmp	r2, #0
    2550:	d1fc      	bne.n	254c <main+0x2f0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2552:	6823      	ldr	r3, [r4, #0]
    2554:	3202      	adds	r2, #2
    2556:	4393      	bics	r3, r2
    2558:	6023      	str	r3, [r4, #0]
		port_base->OUTCLR.reg = pin_mask;
    255a:	321e      	adds	r2, #30
    255c:	4b09      	ldr	r3, [pc, #36]	; (2584 <main+0x328>)
    255e:	615a      	str	r2, [r3, #20]
		usart_disable(&cdc_uart_module);
		port_pin_set_output_level(PIN_PA05, false);
			
		//while(1);
		// Jump to firmware
		jump_to_firmware();
    2560:	4b3b      	ldr	r3, [pc, #236]	; (2650 <main+0x3f4>)
    2562:	4798      	blx	r3
    2564:	e7fe      	b.n	2564 <main+0x308>
	}
	else{
		// Jump to firmware
		jump_to_firmware();
    2566:	4b3a      	ldr	r3, [pc, #232]	; (2650 <main+0x3f4>)
    2568:	4798      	blx	r3
    256a:	e7fb      	b.n	2564 <main+0x308>
    256c:	00001d6d 	.word	0x00001d6d
    2570:	41004000 	.word	0x41004000
    2574:	00000569 	.word	0x00000569
    2578:	00001065 	.word	0x00001065
    257c:	20000234 	.word	0x20000234
    2580:	00000739 	.word	0x00000739
    2584:	41004400 	.word	0x41004400
    2588:	00b71b00 	.word	0x00b71b00
    258c:	00100002 	.word	0x00100002
    2590:	00120002 	.word	0x00120002
    2594:	00130002 	.word	0x00130002
    2598:	20000244 	.word	0x20000244
    259c:	42000c00 	.word	0x42000c00
    25a0:	00000c81 	.word	0x00000c81
    25a4:	00000e2d 	.word	0x00000e2d
    25a8:	20000238 	.word	0x20000238
    25ac:	002a0003 	.word	0x002a0003
    25b0:	002b0003 	.word	0x002b0003
    25b4:	200000cc 	.word	0x200000cc
    25b8:	20000228 	.word	0x20000228
    25bc:	00001fa1 	.word	0x00001fa1
    25c0:	20000224 	.word	0x20000224
    25c4:	00001f75 	.word	0x00001f75
    25c8:	20000220 	.word	0x20000220
    25cc:	42001800 	.word	0x42001800
    25d0:	00001089 	.word	0x00001089
    25d4:	20000004 	.word	0x20000004
    25d8:	00002921 	.word	0x00002921
    25dc:	00000f2d 	.word	0x00000f2d
    25e0:	e000e100 	.word	0xe000e100
    25e4:	00003a9c 	.word	0x00003a9c
    25e8:	00002819 	.word	0x00002819
    25ec:	000003f1 	.word	0x000003f1
    25f0:	00000115 	.word	0x00000115
    25f4:	00003ab8 	.word	0x00003ab8
    25f8:	20000240 	.word	0x20000240
    25fc:	0000023d 	.word	0x0000023d
    2600:	00003ad0 	.word	0x00003ad0
    2604:	00003a8c 	.word	0x00003a8c
    2608:	00003a94 	.word	0x00003a94
    260c:	00003af4 	.word	0x00003af4
    2610:	2000022c 	.word	0x2000022c
    2614:	00003b1c 	.word	0x00003b1c
    2618:	20000264 	.word	0x20000264
    261c:	00003b4c 	.word	0x00003b4c
    2620:	00002159 	.word	0x00002159
    2624:	00003b7c 	.word	0x00003b7c
    2628:	0000290d 	.word	0x0000290d
    262c:	00001fb9 	.word	0x00001fb9
    2630:	0000218d 	.word	0x0000218d
    2634:	00003b98 	.word	0x00003b98
    2638:	00003bac 	.word	0x00003bac
    263c:	00003c08 	.word	0x00003c08
    2640:	00000351 	.word	0x00000351
    2644:	00003c24 	.word	0x00003c24
    2648:	00003bc4 	.word	0x00003bc4
    264c:	00003bec 	.word	0x00003bec
    2650:	00001f51 	.word	0x00001f51

00002654 <__udivsi3>:
    2654:	2200      	movs	r2, #0
    2656:	0843      	lsrs	r3, r0, #1
    2658:	428b      	cmp	r3, r1
    265a:	d374      	bcc.n	2746 <__udivsi3+0xf2>
    265c:	0903      	lsrs	r3, r0, #4
    265e:	428b      	cmp	r3, r1
    2660:	d35f      	bcc.n	2722 <__udivsi3+0xce>
    2662:	0a03      	lsrs	r3, r0, #8
    2664:	428b      	cmp	r3, r1
    2666:	d344      	bcc.n	26f2 <__udivsi3+0x9e>
    2668:	0b03      	lsrs	r3, r0, #12
    266a:	428b      	cmp	r3, r1
    266c:	d328      	bcc.n	26c0 <__udivsi3+0x6c>
    266e:	0c03      	lsrs	r3, r0, #16
    2670:	428b      	cmp	r3, r1
    2672:	d30d      	bcc.n	2690 <__udivsi3+0x3c>
    2674:	22ff      	movs	r2, #255	; 0xff
    2676:	0209      	lsls	r1, r1, #8
    2678:	ba12      	rev	r2, r2
    267a:	0c03      	lsrs	r3, r0, #16
    267c:	428b      	cmp	r3, r1
    267e:	d302      	bcc.n	2686 <__udivsi3+0x32>
    2680:	1212      	asrs	r2, r2, #8
    2682:	0209      	lsls	r1, r1, #8
    2684:	d065      	beq.n	2752 <__udivsi3+0xfe>
    2686:	0b03      	lsrs	r3, r0, #12
    2688:	428b      	cmp	r3, r1
    268a:	d319      	bcc.n	26c0 <__udivsi3+0x6c>
    268c:	e000      	b.n	2690 <__udivsi3+0x3c>
    268e:	0a09      	lsrs	r1, r1, #8
    2690:	0bc3      	lsrs	r3, r0, #15
    2692:	428b      	cmp	r3, r1
    2694:	d301      	bcc.n	269a <__udivsi3+0x46>
    2696:	03cb      	lsls	r3, r1, #15
    2698:	1ac0      	subs	r0, r0, r3
    269a:	4152      	adcs	r2, r2
    269c:	0b83      	lsrs	r3, r0, #14
    269e:	428b      	cmp	r3, r1
    26a0:	d301      	bcc.n	26a6 <__udivsi3+0x52>
    26a2:	038b      	lsls	r3, r1, #14
    26a4:	1ac0      	subs	r0, r0, r3
    26a6:	4152      	adcs	r2, r2
    26a8:	0b43      	lsrs	r3, r0, #13
    26aa:	428b      	cmp	r3, r1
    26ac:	d301      	bcc.n	26b2 <__udivsi3+0x5e>
    26ae:	034b      	lsls	r3, r1, #13
    26b0:	1ac0      	subs	r0, r0, r3
    26b2:	4152      	adcs	r2, r2
    26b4:	0b03      	lsrs	r3, r0, #12
    26b6:	428b      	cmp	r3, r1
    26b8:	d301      	bcc.n	26be <__udivsi3+0x6a>
    26ba:	030b      	lsls	r3, r1, #12
    26bc:	1ac0      	subs	r0, r0, r3
    26be:	4152      	adcs	r2, r2
    26c0:	0ac3      	lsrs	r3, r0, #11
    26c2:	428b      	cmp	r3, r1
    26c4:	d301      	bcc.n	26ca <__udivsi3+0x76>
    26c6:	02cb      	lsls	r3, r1, #11
    26c8:	1ac0      	subs	r0, r0, r3
    26ca:	4152      	adcs	r2, r2
    26cc:	0a83      	lsrs	r3, r0, #10
    26ce:	428b      	cmp	r3, r1
    26d0:	d301      	bcc.n	26d6 <__udivsi3+0x82>
    26d2:	028b      	lsls	r3, r1, #10
    26d4:	1ac0      	subs	r0, r0, r3
    26d6:	4152      	adcs	r2, r2
    26d8:	0a43      	lsrs	r3, r0, #9
    26da:	428b      	cmp	r3, r1
    26dc:	d301      	bcc.n	26e2 <__udivsi3+0x8e>
    26de:	024b      	lsls	r3, r1, #9
    26e0:	1ac0      	subs	r0, r0, r3
    26e2:	4152      	adcs	r2, r2
    26e4:	0a03      	lsrs	r3, r0, #8
    26e6:	428b      	cmp	r3, r1
    26e8:	d301      	bcc.n	26ee <__udivsi3+0x9a>
    26ea:	020b      	lsls	r3, r1, #8
    26ec:	1ac0      	subs	r0, r0, r3
    26ee:	4152      	adcs	r2, r2
    26f0:	d2cd      	bcs.n	268e <__udivsi3+0x3a>
    26f2:	09c3      	lsrs	r3, r0, #7
    26f4:	428b      	cmp	r3, r1
    26f6:	d301      	bcc.n	26fc <__udivsi3+0xa8>
    26f8:	01cb      	lsls	r3, r1, #7
    26fa:	1ac0      	subs	r0, r0, r3
    26fc:	4152      	adcs	r2, r2
    26fe:	0983      	lsrs	r3, r0, #6
    2700:	428b      	cmp	r3, r1
    2702:	d301      	bcc.n	2708 <__udivsi3+0xb4>
    2704:	018b      	lsls	r3, r1, #6
    2706:	1ac0      	subs	r0, r0, r3
    2708:	4152      	adcs	r2, r2
    270a:	0943      	lsrs	r3, r0, #5
    270c:	428b      	cmp	r3, r1
    270e:	d301      	bcc.n	2714 <__udivsi3+0xc0>
    2710:	014b      	lsls	r3, r1, #5
    2712:	1ac0      	subs	r0, r0, r3
    2714:	4152      	adcs	r2, r2
    2716:	0903      	lsrs	r3, r0, #4
    2718:	428b      	cmp	r3, r1
    271a:	d301      	bcc.n	2720 <__udivsi3+0xcc>
    271c:	010b      	lsls	r3, r1, #4
    271e:	1ac0      	subs	r0, r0, r3
    2720:	4152      	adcs	r2, r2
    2722:	08c3      	lsrs	r3, r0, #3
    2724:	428b      	cmp	r3, r1
    2726:	d301      	bcc.n	272c <__udivsi3+0xd8>
    2728:	00cb      	lsls	r3, r1, #3
    272a:	1ac0      	subs	r0, r0, r3
    272c:	4152      	adcs	r2, r2
    272e:	0883      	lsrs	r3, r0, #2
    2730:	428b      	cmp	r3, r1
    2732:	d301      	bcc.n	2738 <__udivsi3+0xe4>
    2734:	008b      	lsls	r3, r1, #2
    2736:	1ac0      	subs	r0, r0, r3
    2738:	4152      	adcs	r2, r2
    273a:	0843      	lsrs	r3, r0, #1
    273c:	428b      	cmp	r3, r1
    273e:	d301      	bcc.n	2744 <__udivsi3+0xf0>
    2740:	004b      	lsls	r3, r1, #1
    2742:	1ac0      	subs	r0, r0, r3
    2744:	4152      	adcs	r2, r2
    2746:	1a41      	subs	r1, r0, r1
    2748:	d200      	bcs.n	274c <__udivsi3+0xf8>
    274a:	4601      	mov	r1, r0
    274c:	4152      	adcs	r2, r2
    274e:	4610      	mov	r0, r2
    2750:	4770      	bx	lr
    2752:	e7ff      	b.n	2754 <__udivsi3+0x100>
    2754:	b501      	push	{r0, lr}
    2756:	2000      	movs	r0, #0
    2758:	f000 f806 	bl	2768 <__aeabi_idiv0>
    275c:	bd02      	pop	{r1, pc}
    275e:	46c0      	nop			; (mov r8, r8)

00002760 <__aeabi_uidivmod>:
    2760:	2900      	cmp	r1, #0
    2762:	d0f7      	beq.n	2754 <__udivsi3+0x100>
    2764:	e776      	b.n	2654 <__udivsi3>
    2766:	4770      	bx	lr

00002768 <__aeabi_idiv0>:
    2768:	4770      	bx	lr
    276a:	46c0      	nop			; (mov r8, r8)

0000276c <__aeabi_lmul>:
    276c:	b5f0      	push	{r4, r5, r6, r7, lr}
    276e:	46ce      	mov	lr, r9
    2770:	4647      	mov	r7, r8
    2772:	0415      	lsls	r5, r2, #16
    2774:	0c2d      	lsrs	r5, r5, #16
    2776:	002e      	movs	r6, r5
    2778:	b580      	push	{r7, lr}
    277a:	0407      	lsls	r7, r0, #16
    277c:	0c14      	lsrs	r4, r2, #16
    277e:	0c3f      	lsrs	r7, r7, #16
    2780:	4699      	mov	r9, r3
    2782:	0c03      	lsrs	r3, r0, #16
    2784:	437e      	muls	r6, r7
    2786:	435d      	muls	r5, r3
    2788:	4367      	muls	r7, r4
    278a:	4363      	muls	r3, r4
    278c:	197f      	adds	r7, r7, r5
    278e:	0c34      	lsrs	r4, r6, #16
    2790:	19e4      	adds	r4, r4, r7
    2792:	469c      	mov	ip, r3
    2794:	42a5      	cmp	r5, r4
    2796:	d903      	bls.n	27a0 <__aeabi_lmul+0x34>
    2798:	2380      	movs	r3, #128	; 0x80
    279a:	025b      	lsls	r3, r3, #9
    279c:	4698      	mov	r8, r3
    279e:	44c4      	add	ip, r8
    27a0:	464b      	mov	r3, r9
    27a2:	4351      	muls	r1, r2
    27a4:	4343      	muls	r3, r0
    27a6:	0436      	lsls	r6, r6, #16
    27a8:	0c36      	lsrs	r6, r6, #16
    27aa:	0c25      	lsrs	r5, r4, #16
    27ac:	0424      	lsls	r4, r4, #16
    27ae:	4465      	add	r5, ip
    27b0:	19a4      	adds	r4, r4, r6
    27b2:	1859      	adds	r1, r3, r1
    27b4:	1949      	adds	r1, r1, r5
    27b6:	0020      	movs	r0, r4
    27b8:	bc0c      	pop	{r2, r3}
    27ba:	4690      	mov	r8, r2
    27bc:	4699      	mov	r9, r3
    27be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000027c0 <__libc_init_array>:
    27c0:	b570      	push	{r4, r5, r6, lr}
    27c2:	2600      	movs	r6, #0
    27c4:	4d0c      	ldr	r5, [pc, #48]	; (27f8 <__libc_init_array+0x38>)
    27c6:	4c0d      	ldr	r4, [pc, #52]	; (27fc <__libc_init_array+0x3c>)
    27c8:	1b64      	subs	r4, r4, r5
    27ca:	10a4      	asrs	r4, r4, #2
    27cc:	42a6      	cmp	r6, r4
    27ce:	d109      	bne.n	27e4 <__libc_init_array+0x24>
    27d0:	2600      	movs	r6, #0
    27d2:	f001 fac9 	bl	3d68 <_init>
    27d6:	4d0a      	ldr	r5, [pc, #40]	; (2800 <__libc_init_array+0x40>)
    27d8:	4c0a      	ldr	r4, [pc, #40]	; (2804 <__libc_init_array+0x44>)
    27da:	1b64      	subs	r4, r4, r5
    27dc:	10a4      	asrs	r4, r4, #2
    27de:	42a6      	cmp	r6, r4
    27e0:	d105      	bne.n	27ee <__libc_init_array+0x2e>
    27e2:	bd70      	pop	{r4, r5, r6, pc}
    27e4:	00b3      	lsls	r3, r6, #2
    27e6:	58eb      	ldr	r3, [r5, r3]
    27e8:	4798      	blx	r3
    27ea:	3601      	adds	r6, #1
    27ec:	e7ee      	b.n	27cc <__libc_init_array+0xc>
    27ee:	00b3      	lsls	r3, r6, #2
    27f0:	58eb      	ldr	r3, [r5, r3]
    27f2:	4798      	blx	r3
    27f4:	3601      	adds	r6, #1
    27f6:	e7f2      	b.n	27de <__libc_init_array+0x1e>
    27f8:	00003d74 	.word	0x00003d74
    27fc:	00003d74 	.word	0x00003d74
    2800:	00003d74 	.word	0x00003d74
    2804:	00003d78 	.word	0x00003d78

00002808 <memset>:
    2808:	0003      	movs	r3, r0
    280a:	1882      	adds	r2, r0, r2
    280c:	4293      	cmp	r3, r2
    280e:	d100      	bne.n	2812 <memset+0xa>
    2810:	4770      	bx	lr
    2812:	7019      	strb	r1, [r3, #0]
    2814:	3301      	adds	r3, #1
    2816:	e7f9      	b.n	280c <memset+0x4>

00002818 <iprintf>:
    2818:	b40f      	push	{r0, r1, r2, r3}
    281a:	4b0b      	ldr	r3, [pc, #44]	; (2848 <iprintf+0x30>)
    281c:	b513      	push	{r0, r1, r4, lr}
    281e:	681c      	ldr	r4, [r3, #0]
    2820:	2c00      	cmp	r4, #0
    2822:	d005      	beq.n	2830 <iprintf+0x18>
    2824:	69a3      	ldr	r3, [r4, #24]
    2826:	2b00      	cmp	r3, #0
    2828:	d102      	bne.n	2830 <iprintf+0x18>
    282a:	0020      	movs	r0, r4
    282c:	f000 faf2 	bl	2e14 <__sinit>
    2830:	ab05      	add	r3, sp, #20
    2832:	9a04      	ldr	r2, [sp, #16]
    2834:	68a1      	ldr	r1, [r4, #8]
    2836:	0020      	movs	r0, r4
    2838:	9301      	str	r3, [sp, #4]
    283a:	f000 fcc1 	bl	31c0 <_vfiprintf_r>
    283e:	bc16      	pop	{r1, r2, r4}
    2840:	bc08      	pop	{r3}
    2842:	b004      	add	sp, #16
    2844:	4718      	bx	r3
    2846:	46c0      	nop			; (mov r8, r8)
    2848:	20000004 	.word	0x20000004

0000284c <_puts_r>:
    284c:	b570      	push	{r4, r5, r6, lr}
    284e:	0005      	movs	r5, r0
    2850:	000e      	movs	r6, r1
    2852:	2800      	cmp	r0, #0
    2854:	d004      	beq.n	2860 <_puts_r+0x14>
    2856:	6983      	ldr	r3, [r0, #24]
    2858:	2b00      	cmp	r3, #0
    285a:	d101      	bne.n	2860 <_puts_r+0x14>
    285c:	f000 fada 	bl	2e14 <__sinit>
    2860:	69ab      	ldr	r3, [r5, #24]
    2862:	68ac      	ldr	r4, [r5, #8]
    2864:	2b00      	cmp	r3, #0
    2866:	d102      	bne.n	286e <_puts_r+0x22>
    2868:	0028      	movs	r0, r5
    286a:	f000 fad3 	bl	2e14 <__sinit>
    286e:	4b24      	ldr	r3, [pc, #144]	; (2900 <_puts_r+0xb4>)
    2870:	429c      	cmp	r4, r3
    2872:	d10f      	bne.n	2894 <_puts_r+0x48>
    2874:	686c      	ldr	r4, [r5, #4]
    2876:	89a3      	ldrh	r3, [r4, #12]
    2878:	071b      	lsls	r3, r3, #28
    287a:	d502      	bpl.n	2882 <_puts_r+0x36>
    287c:	6923      	ldr	r3, [r4, #16]
    287e:	2b00      	cmp	r3, #0
    2880:	d120      	bne.n	28c4 <_puts_r+0x78>
    2882:	0021      	movs	r1, r4
    2884:	0028      	movs	r0, r5
    2886:	f000 f957 	bl	2b38 <__swsetup_r>
    288a:	2800      	cmp	r0, #0
    288c:	d01a      	beq.n	28c4 <_puts_r+0x78>
    288e:	2001      	movs	r0, #1
    2890:	4240      	negs	r0, r0
    2892:	bd70      	pop	{r4, r5, r6, pc}
    2894:	4b1b      	ldr	r3, [pc, #108]	; (2904 <_puts_r+0xb8>)
    2896:	429c      	cmp	r4, r3
    2898:	d101      	bne.n	289e <_puts_r+0x52>
    289a:	68ac      	ldr	r4, [r5, #8]
    289c:	e7eb      	b.n	2876 <_puts_r+0x2a>
    289e:	4b1a      	ldr	r3, [pc, #104]	; (2908 <_puts_r+0xbc>)
    28a0:	429c      	cmp	r4, r3
    28a2:	d1e8      	bne.n	2876 <_puts_r+0x2a>
    28a4:	68ec      	ldr	r4, [r5, #12]
    28a6:	e7e6      	b.n	2876 <_puts_r+0x2a>
    28a8:	3b01      	subs	r3, #1
    28aa:	3601      	adds	r6, #1
    28ac:	60a3      	str	r3, [r4, #8]
    28ae:	2b00      	cmp	r3, #0
    28b0:	da04      	bge.n	28bc <_puts_r+0x70>
    28b2:	69a2      	ldr	r2, [r4, #24]
    28b4:	4293      	cmp	r3, r2
    28b6:	db16      	blt.n	28e6 <_puts_r+0x9a>
    28b8:	290a      	cmp	r1, #10
    28ba:	d014      	beq.n	28e6 <_puts_r+0x9a>
    28bc:	6823      	ldr	r3, [r4, #0]
    28be:	1c5a      	adds	r2, r3, #1
    28c0:	6022      	str	r2, [r4, #0]
    28c2:	7019      	strb	r1, [r3, #0]
    28c4:	7831      	ldrb	r1, [r6, #0]
    28c6:	68a3      	ldr	r3, [r4, #8]
    28c8:	2900      	cmp	r1, #0
    28ca:	d1ed      	bne.n	28a8 <_puts_r+0x5c>
    28cc:	3b01      	subs	r3, #1
    28ce:	60a3      	str	r3, [r4, #8]
    28d0:	2b00      	cmp	r3, #0
    28d2:	da0f      	bge.n	28f4 <_puts_r+0xa8>
    28d4:	0022      	movs	r2, r4
    28d6:	310a      	adds	r1, #10
    28d8:	0028      	movs	r0, r5
    28da:	f000 f8d7 	bl	2a8c <__swbuf_r>
    28de:	1c43      	adds	r3, r0, #1
    28e0:	d0d5      	beq.n	288e <_puts_r+0x42>
    28e2:	200a      	movs	r0, #10
    28e4:	e7d5      	b.n	2892 <_puts_r+0x46>
    28e6:	0022      	movs	r2, r4
    28e8:	0028      	movs	r0, r5
    28ea:	f000 f8cf 	bl	2a8c <__swbuf_r>
    28ee:	1c43      	adds	r3, r0, #1
    28f0:	d1e8      	bne.n	28c4 <_puts_r+0x78>
    28f2:	e7cc      	b.n	288e <_puts_r+0x42>
    28f4:	200a      	movs	r0, #10
    28f6:	6823      	ldr	r3, [r4, #0]
    28f8:	1c5a      	adds	r2, r3, #1
    28fa:	6022      	str	r2, [r4, #0]
    28fc:	7018      	strb	r0, [r3, #0]
    28fe:	e7c8      	b.n	2892 <_puts_r+0x46>
    2900:	00003cf4 	.word	0x00003cf4
    2904:	00003d14 	.word	0x00003d14
    2908:	00003cd4 	.word	0x00003cd4

0000290c <puts>:
    290c:	b510      	push	{r4, lr}
    290e:	4b03      	ldr	r3, [pc, #12]	; (291c <puts+0x10>)
    2910:	0001      	movs	r1, r0
    2912:	6818      	ldr	r0, [r3, #0]
    2914:	f7ff ff9a 	bl	284c <_puts_r>
    2918:	bd10      	pop	{r4, pc}
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	20000004 	.word	0x20000004

00002920 <setbuf>:
    2920:	424a      	negs	r2, r1
    2922:	414a      	adcs	r2, r1
    2924:	2380      	movs	r3, #128	; 0x80
    2926:	b510      	push	{r4, lr}
    2928:	0052      	lsls	r2, r2, #1
    292a:	00db      	lsls	r3, r3, #3
    292c:	f000 f802 	bl	2934 <setvbuf>
    2930:	bd10      	pop	{r4, pc}
	...

00002934 <setvbuf>:
    2934:	b5f0      	push	{r4, r5, r6, r7, lr}
    2936:	001d      	movs	r5, r3
    2938:	4b4f      	ldr	r3, [pc, #316]	; (2a78 <setvbuf+0x144>)
    293a:	b085      	sub	sp, #20
    293c:	681e      	ldr	r6, [r3, #0]
    293e:	0004      	movs	r4, r0
    2940:	000f      	movs	r7, r1
    2942:	9200      	str	r2, [sp, #0]
    2944:	2e00      	cmp	r6, #0
    2946:	d005      	beq.n	2954 <setvbuf+0x20>
    2948:	69b3      	ldr	r3, [r6, #24]
    294a:	2b00      	cmp	r3, #0
    294c:	d102      	bne.n	2954 <setvbuf+0x20>
    294e:	0030      	movs	r0, r6
    2950:	f000 fa60 	bl	2e14 <__sinit>
    2954:	4b49      	ldr	r3, [pc, #292]	; (2a7c <setvbuf+0x148>)
    2956:	429c      	cmp	r4, r3
    2958:	d150      	bne.n	29fc <setvbuf+0xc8>
    295a:	6874      	ldr	r4, [r6, #4]
    295c:	9b00      	ldr	r3, [sp, #0]
    295e:	2b02      	cmp	r3, #2
    2960:	d005      	beq.n	296e <setvbuf+0x3a>
    2962:	2b01      	cmp	r3, #1
    2964:	d900      	bls.n	2968 <setvbuf+0x34>
    2966:	e084      	b.n	2a72 <setvbuf+0x13e>
    2968:	2d00      	cmp	r5, #0
    296a:	da00      	bge.n	296e <setvbuf+0x3a>
    296c:	e081      	b.n	2a72 <setvbuf+0x13e>
    296e:	0021      	movs	r1, r4
    2970:	0030      	movs	r0, r6
    2972:	f000 f9e1 	bl	2d38 <_fflush_r>
    2976:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2978:	2900      	cmp	r1, #0
    297a:	d008      	beq.n	298e <setvbuf+0x5a>
    297c:	0023      	movs	r3, r4
    297e:	3344      	adds	r3, #68	; 0x44
    2980:	4299      	cmp	r1, r3
    2982:	d002      	beq.n	298a <setvbuf+0x56>
    2984:	0030      	movs	r0, r6
    2986:	f000 fb4b 	bl	3020 <_free_r>
    298a:	2300      	movs	r3, #0
    298c:	6363      	str	r3, [r4, #52]	; 0x34
    298e:	2300      	movs	r3, #0
    2990:	61a3      	str	r3, [r4, #24]
    2992:	6063      	str	r3, [r4, #4]
    2994:	89a3      	ldrh	r3, [r4, #12]
    2996:	061b      	lsls	r3, r3, #24
    2998:	d503      	bpl.n	29a2 <setvbuf+0x6e>
    299a:	6921      	ldr	r1, [r4, #16]
    299c:	0030      	movs	r0, r6
    299e:	f000 fb3f 	bl	3020 <_free_r>
    29a2:	89a3      	ldrh	r3, [r4, #12]
    29a4:	4a36      	ldr	r2, [pc, #216]	; (2a80 <setvbuf+0x14c>)
    29a6:	4013      	ands	r3, r2
    29a8:	81a3      	strh	r3, [r4, #12]
    29aa:	9b00      	ldr	r3, [sp, #0]
    29ac:	2b02      	cmp	r3, #2
    29ae:	d05a      	beq.n	2a66 <setvbuf+0x132>
    29b0:	ab03      	add	r3, sp, #12
    29b2:	aa02      	add	r2, sp, #8
    29b4:	0021      	movs	r1, r4
    29b6:	0030      	movs	r0, r6
    29b8:	f000 fac2 	bl	2f40 <__swhatbuf_r>
    29bc:	89a3      	ldrh	r3, [r4, #12]
    29be:	4318      	orrs	r0, r3
    29c0:	81a0      	strh	r0, [r4, #12]
    29c2:	2d00      	cmp	r5, #0
    29c4:	d124      	bne.n	2a10 <setvbuf+0xdc>
    29c6:	9d02      	ldr	r5, [sp, #8]
    29c8:	0028      	movs	r0, r5
    29ca:	f000 fb1f 	bl	300c <malloc>
    29ce:	9501      	str	r5, [sp, #4]
    29d0:	1e07      	subs	r7, r0, #0
    29d2:	d142      	bne.n	2a5a <setvbuf+0x126>
    29d4:	9b02      	ldr	r3, [sp, #8]
    29d6:	9301      	str	r3, [sp, #4]
    29d8:	42ab      	cmp	r3, r5
    29da:	d139      	bne.n	2a50 <setvbuf+0x11c>
    29dc:	2001      	movs	r0, #1
    29de:	4240      	negs	r0, r0
    29e0:	2302      	movs	r3, #2
    29e2:	89a2      	ldrh	r2, [r4, #12]
    29e4:	4313      	orrs	r3, r2
    29e6:	81a3      	strh	r3, [r4, #12]
    29e8:	2300      	movs	r3, #0
    29ea:	60a3      	str	r3, [r4, #8]
    29ec:	0023      	movs	r3, r4
    29ee:	3347      	adds	r3, #71	; 0x47
    29f0:	6023      	str	r3, [r4, #0]
    29f2:	6123      	str	r3, [r4, #16]
    29f4:	2301      	movs	r3, #1
    29f6:	6163      	str	r3, [r4, #20]
    29f8:	b005      	add	sp, #20
    29fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29fc:	4b21      	ldr	r3, [pc, #132]	; (2a84 <setvbuf+0x150>)
    29fe:	429c      	cmp	r4, r3
    2a00:	d101      	bne.n	2a06 <setvbuf+0xd2>
    2a02:	68b4      	ldr	r4, [r6, #8]
    2a04:	e7aa      	b.n	295c <setvbuf+0x28>
    2a06:	4b20      	ldr	r3, [pc, #128]	; (2a88 <setvbuf+0x154>)
    2a08:	429c      	cmp	r4, r3
    2a0a:	d1a7      	bne.n	295c <setvbuf+0x28>
    2a0c:	68f4      	ldr	r4, [r6, #12]
    2a0e:	e7a5      	b.n	295c <setvbuf+0x28>
    2a10:	2f00      	cmp	r7, #0
    2a12:	d0d9      	beq.n	29c8 <setvbuf+0x94>
    2a14:	69b3      	ldr	r3, [r6, #24]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d102      	bne.n	2a20 <setvbuf+0xec>
    2a1a:	0030      	movs	r0, r6
    2a1c:	f000 f9fa 	bl	2e14 <__sinit>
    2a20:	9b00      	ldr	r3, [sp, #0]
    2a22:	2b01      	cmp	r3, #1
    2a24:	d103      	bne.n	2a2e <setvbuf+0xfa>
    2a26:	89a3      	ldrh	r3, [r4, #12]
    2a28:	9a00      	ldr	r2, [sp, #0]
    2a2a:	431a      	orrs	r2, r3
    2a2c:	81a2      	strh	r2, [r4, #12]
    2a2e:	2008      	movs	r0, #8
    2a30:	89a3      	ldrh	r3, [r4, #12]
    2a32:	6027      	str	r7, [r4, #0]
    2a34:	6127      	str	r7, [r4, #16]
    2a36:	6165      	str	r5, [r4, #20]
    2a38:	4018      	ands	r0, r3
    2a3a:	d018      	beq.n	2a6e <setvbuf+0x13a>
    2a3c:	2001      	movs	r0, #1
    2a3e:	4018      	ands	r0, r3
    2a40:	2300      	movs	r3, #0
    2a42:	4298      	cmp	r0, r3
    2a44:	d011      	beq.n	2a6a <setvbuf+0x136>
    2a46:	426d      	negs	r5, r5
    2a48:	60a3      	str	r3, [r4, #8]
    2a4a:	61a5      	str	r5, [r4, #24]
    2a4c:	0018      	movs	r0, r3
    2a4e:	e7d3      	b.n	29f8 <setvbuf+0xc4>
    2a50:	9801      	ldr	r0, [sp, #4]
    2a52:	f000 fadb 	bl	300c <malloc>
    2a56:	1e07      	subs	r7, r0, #0
    2a58:	d0c0      	beq.n	29dc <setvbuf+0xa8>
    2a5a:	2380      	movs	r3, #128	; 0x80
    2a5c:	89a2      	ldrh	r2, [r4, #12]
    2a5e:	9d01      	ldr	r5, [sp, #4]
    2a60:	4313      	orrs	r3, r2
    2a62:	81a3      	strh	r3, [r4, #12]
    2a64:	e7d6      	b.n	2a14 <setvbuf+0xe0>
    2a66:	2000      	movs	r0, #0
    2a68:	e7ba      	b.n	29e0 <setvbuf+0xac>
    2a6a:	60a5      	str	r5, [r4, #8]
    2a6c:	e7c4      	b.n	29f8 <setvbuf+0xc4>
    2a6e:	60a0      	str	r0, [r4, #8]
    2a70:	e7c2      	b.n	29f8 <setvbuf+0xc4>
    2a72:	2001      	movs	r0, #1
    2a74:	4240      	negs	r0, r0
    2a76:	e7bf      	b.n	29f8 <setvbuf+0xc4>
    2a78:	20000004 	.word	0x20000004
    2a7c:	00003cf4 	.word	0x00003cf4
    2a80:	fffff35c 	.word	0xfffff35c
    2a84:	00003d14 	.word	0x00003d14
    2a88:	00003cd4 	.word	0x00003cd4

00002a8c <__swbuf_r>:
    2a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a8e:	0005      	movs	r5, r0
    2a90:	000e      	movs	r6, r1
    2a92:	0014      	movs	r4, r2
    2a94:	2800      	cmp	r0, #0
    2a96:	d004      	beq.n	2aa2 <__swbuf_r+0x16>
    2a98:	6983      	ldr	r3, [r0, #24]
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d101      	bne.n	2aa2 <__swbuf_r+0x16>
    2a9e:	f000 f9b9 	bl	2e14 <__sinit>
    2aa2:	4b22      	ldr	r3, [pc, #136]	; (2b2c <__swbuf_r+0xa0>)
    2aa4:	429c      	cmp	r4, r3
    2aa6:	d12d      	bne.n	2b04 <__swbuf_r+0x78>
    2aa8:	686c      	ldr	r4, [r5, #4]
    2aaa:	69a3      	ldr	r3, [r4, #24]
    2aac:	60a3      	str	r3, [r4, #8]
    2aae:	89a3      	ldrh	r3, [r4, #12]
    2ab0:	071b      	lsls	r3, r3, #28
    2ab2:	d531      	bpl.n	2b18 <__swbuf_r+0x8c>
    2ab4:	6923      	ldr	r3, [r4, #16]
    2ab6:	2b00      	cmp	r3, #0
    2ab8:	d02e      	beq.n	2b18 <__swbuf_r+0x8c>
    2aba:	6823      	ldr	r3, [r4, #0]
    2abc:	6922      	ldr	r2, [r4, #16]
    2abe:	b2f7      	uxtb	r7, r6
    2ac0:	1a98      	subs	r0, r3, r2
    2ac2:	6963      	ldr	r3, [r4, #20]
    2ac4:	b2f6      	uxtb	r6, r6
    2ac6:	4298      	cmp	r0, r3
    2ac8:	db05      	blt.n	2ad6 <__swbuf_r+0x4a>
    2aca:	0021      	movs	r1, r4
    2acc:	0028      	movs	r0, r5
    2ace:	f000 f933 	bl	2d38 <_fflush_r>
    2ad2:	2800      	cmp	r0, #0
    2ad4:	d126      	bne.n	2b24 <__swbuf_r+0x98>
    2ad6:	68a3      	ldr	r3, [r4, #8]
    2ad8:	3001      	adds	r0, #1
    2ada:	3b01      	subs	r3, #1
    2adc:	60a3      	str	r3, [r4, #8]
    2ade:	6823      	ldr	r3, [r4, #0]
    2ae0:	1c5a      	adds	r2, r3, #1
    2ae2:	6022      	str	r2, [r4, #0]
    2ae4:	701f      	strb	r7, [r3, #0]
    2ae6:	6963      	ldr	r3, [r4, #20]
    2ae8:	4298      	cmp	r0, r3
    2aea:	d004      	beq.n	2af6 <__swbuf_r+0x6a>
    2aec:	89a3      	ldrh	r3, [r4, #12]
    2aee:	07db      	lsls	r3, r3, #31
    2af0:	d51a      	bpl.n	2b28 <__swbuf_r+0x9c>
    2af2:	2e0a      	cmp	r6, #10
    2af4:	d118      	bne.n	2b28 <__swbuf_r+0x9c>
    2af6:	0021      	movs	r1, r4
    2af8:	0028      	movs	r0, r5
    2afa:	f000 f91d 	bl	2d38 <_fflush_r>
    2afe:	2800      	cmp	r0, #0
    2b00:	d012      	beq.n	2b28 <__swbuf_r+0x9c>
    2b02:	e00f      	b.n	2b24 <__swbuf_r+0x98>
    2b04:	4b0a      	ldr	r3, [pc, #40]	; (2b30 <__swbuf_r+0xa4>)
    2b06:	429c      	cmp	r4, r3
    2b08:	d101      	bne.n	2b0e <__swbuf_r+0x82>
    2b0a:	68ac      	ldr	r4, [r5, #8]
    2b0c:	e7cd      	b.n	2aaa <__swbuf_r+0x1e>
    2b0e:	4b09      	ldr	r3, [pc, #36]	; (2b34 <__swbuf_r+0xa8>)
    2b10:	429c      	cmp	r4, r3
    2b12:	d1ca      	bne.n	2aaa <__swbuf_r+0x1e>
    2b14:	68ec      	ldr	r4, [r5, #12]
    2b16:	e7c8      	b.n	2aaa <__swbuf_r+0x1e>
    2b18:	0021      	movs	r1, r4
    2b1a:	0028      	movs	r0, r5
    2b1c:	f000 f80c 	bl	2b38 <__swsetup_r>
    2b20:	2800      	cmp	r0, #0
    2b22:	d0ca      	beq.n	2aba <__swbuf_r+0x2e>
    2b24:	2601      	movs	r6, #1
    2b26:	4276      	negs	r6, r6
    2b28:	0030      	movs	r0, r6
    2b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b2c:	00003cf4 	.word	0x00003cf4
    2b30:	00003d14 	.word	0x00003d14
    2b34:	00003cd4 	.word	0x00003cd4

00002b38 <__swsetup_r>:
    2b38:	4b36      	ldr	r3, [pc, #216]	; (2c14 <__swsetup_r+0xdc>)
    2b3a:	b570      	push	{r4, r5, r6, lr}
    2b3c:	681d      	ldr	r5, [r3, #0]
    2b3e:	0006      	movs	r6, r0
    2b40:	000c      	movs	r4, r1
    2b42:	2d00      	cmp	r5, #0
    2b44:	d005      	beq.n	2b52 <__swsetup_r+0x1a>
    2b46:	69ab      	ldr	r3, [r5, #24]
    2b48:	2b00      	cmp	r3, #0
    2b4a:	d102      	bne.n	2b52 <__swsetup_r+0x1a>
    2b4c:	0028      	movs	r0, r5
    2b4e:	f000 f961 	bl	2e14 <__sinit>
    2b52:	4b31      	ldr	r3, [pc, #196]	; (2c18 <__swsetup_r+0xe0>)
    2b54:	429c      	cmp	r4, r3
    2b56:	d10f      	bne.n	2b78 <__swsetup_r+0x40>
    2b58:	686c      	ldr	r4, [r5, #4]
    2b5a:	230c      	movs	r3, #12
    2b5c:	5ee2      	ldrsh	r2, [r4, r3]
    2b5e:	b293      	uxth	r3, r2
    2b60:	0719      	lsls	r1, r3, #28
    2b62:	d42d      	bmi.n	2bc0 <__swsetup_r+0x88>
    2b64:	06d9      	lsls	r1, r3, #27
    2b66:	d411      	bmi.n	2b8c <__swsetup_r+0x54>
    2b68:	2309      	movs	r3, #9
    2b6a:	2001      	movs	r0, #1
    2b6c:	6033      	str	r3, [r6, #0]
    2b6e:	3337      	adds	r3, #55	; 0x37
    2b70:	4313      	orrs	r3, r2
    2b72:	81a3      	strh	r3, [r4, #12]
    2b74:	4240      	negs	r0, r0
    2b76:	bd70      	pop	{r4, r5, r6, pc}
    2b78:	4b28      	ldr	r3, [pc, #160]	; (2c1c <__swsetup_r+0xe4>)
    2b7a:	429c      	cmp	r4, r3
    2b7c:	d101      	bne.n	2b82 <__swsetup_r+0x4a>
    2b7e:	68ac      	ldr	r4, [r5, #8]
    2b80:	e7eb      	b.n	2b5a <__swsetup_r+0x22>
    2b82:	4b27      	ldr	r3, [pc, #156]	; (2c20 <__swsetup_r+0xe8>)
    2b84:	429c      	cmp	r4, r3
    2b86:	d1e8      	bne.n	2b5a <__swsetup_r+0x22>
    2b88:	68ec      	ldr	r4, [r5, #12]
    2b8a:	e7e6      	b.n	2b5a <__swsetup_r+0x22>
    2b8c:	075b      	lsls	r3, r3, #29
    2b8e:	d513      	bpl.n	2bb8 <__swsetup_r+0x80>
    2b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2b92:	2900      	cmp	r1, #0
    2b94:	d008      	beq.n	2ba8 <__swsetup_r+0x70>
    2b96:	0023      	movs	r3, r4
    2b98:	3344      	adds	r3, #68	; 0x44
    2b9a:	4299      	cmp	r1, r3
    2b9c:	d002      	beq.n	2ba4 <__swsetup_r+0x6c>
    2b9e:	0030      	movs	r0, r6
    2ba0:	f000 fa3e 	bl	3020 <_free_r>
    2ba4:	2300      	movs	r3, #0
    2ba6:	6363      	str	r3, [r4, #52]	; 0x34
    2ba8:	2224      	movs	r2, #36	; 0x24
    2baa:	89a3      	ldrh	r3, [r4, #12]
    2bac:	4393      	bics	r3, r2
    2bae:	81a3      	strh	r3, [r4, #12]
    2bb0:	2300      	movs	r3, #0
    2bb2:	6063      	str	r3, [r4, #4]
    2bb4:	6923      	ldr	r3, [r4, #16]
    2bb6:	6023      	str	r3, [r4, #0]
    2bb8:	2308      	movs	r3, #8
    2bba:	89a2      	ldrh	r2, [r4, #12]
    2bbc:	4313      	orrs	r3, r2
    2bbe:	81a3      	strh	r3, [r4, #12]
    2bc0:	6923      	ldr	r3, [r4, #16]
    2bc2:	2b00      	cmp	r3, #0
    2bc4:	d10b      	bne.n	2bde <__swsetup_r+0xa6>
    2bc6:	21a0      	movs	r1, #160	; 0xa0
    2bc8:	2280      	movs	r2, #128	; 0x80
    2bca:	89a3      	ldrh	r3, [r4, #12]
    2bcc:	0089      	lsls	r1, r1, #2
    2bce:	0092      	lsls	r2, r2, #2
    2bd0:	400b      	ands	r3, r1
    2bd2:	4293      	cmp	r3, r2
    2bd4:	d003      	beq.n	2bde <__swsetup_r+0xa6>
    2bd6:	0021      	movs	r1, r4
    2bd8:	0030      	movs	r0, r6
    2bda:	f000 f9d9 	bl	2f90 <__smakebuf_r>
    2bde:	2301      	movs	r3, #1
    2be0:	89a2      	ldrh	r2, [r4, #12]
    2be2:	4013      	ands	r3, r2
    2be4:	d011      	beq.n	2c0a <__swsetup_r+0xd2>
    2be6:	2300      	movs	r3, #0
    2be8:	60a3      	str	r3, [r4, #8]
    2bea:	6963      	ldr	r3, [r4, #20]
    2bec:	425b      	negs	r3, r3
    2bee:	61a3      	str	r3, [r4, #24]
    2bf0:	2000      	movs	r0, #0
    2bf2:	6923      	ldr	r3, [r4, #16]
    2bf4:	4283      	cmp	r3, r0
    2bf6:	d1be      	bne.n	2b76 <__swsetup_r+0x3e>
    2bf8:	230c      	movs	r3, #12
    2bfa:	5ee2      	ldrsh	r2, [r4, r3]
    2bfc:	0613      	lsls	r3, r2, #24
    2bfe:	d5ba      	bpl.n	2b76 <__swsetup_r+0x3e>
    2c00:	2340      	movs	r3, #64	; 0x40
    2c02:	4313      	orrs	r3, r2
    2c04:	81a3      	strh	r3, [r4, #12]
    2c06:	3801      	subs	r0, #1
    2c08:	e7b5      	b.n	2b76 <__swsetup_r+0x3e>
    2c0a:	0792      	lsls	r2, r2, #30
    2c0c:	d400      	bmi.n	2c10 <__swsetup_r+0xd8>
    2c0e:	6963      	ldr	r3, [r4, #20]
    2c10:	60a3      	str	r3, [r4, #8]
    2c12:	e7ed      	b.n	2bf0 <__swsetup_r+0xb8>
    2c14:	20000004 	.word	0x20000004
    2c18:	00003cf4 	.word	0x00003cf4
    2c1c:	00003d14 	.word	0x00003d14
    2c20:	00003cd4 	.word	0x00003cd4

00002c24 <__sflush_r>:
    2c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c26:	898a      	ldrh	r2, [r1, #12]
    2c28:	0005      	movs	r5, r0
    2c2a:	000c      	movs	r4, r1
    2c2c:	0713      	lsls	r3, r2, #28
    2c2e:	d460      	bmi.n	2cf2 <__sflush_r+0xce>
    2c30:	684b      	ldr	r3, [r1, #4]
    2c32:	2b00      	cmp	r3, #0
    2c34:	dc04      	bgt.n	2c40 <__sflush_r+0x1c>
    2c36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2c38:	2b00      	cmp	r3, #0
    2c3a:	dc01      	bgt.n	2c40 <__sflush_r+0x1c>
    2c3c:	2000      	movs	r0, #0
    2c3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2c40:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2c42:	2f00      	cmp	r7, #0
    2c44:	d0fa      	beq.n	2c3c <__sflush_r+0x18>
    2c46:	2300      	movs	r3, #0
    2c48:	682e      	ldr	r6, [r5, #0]
    2c4a:	602b      	str	r3, [r5, #0]
    2c4c:	2380      	movs	r3, #128	; 0x80
    2c4e:	015b      	lsls	r3, r3, #5
    2c50:	401a      	ands	r2, r3
    2c52:	d034      	beq.n	2cbe <__sflush_r+0x9a>
    2c54:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2c56:	89a3      	ldrh	r3, [r4, #12]
    2c58:	075b      	lsls	r3, r3, #29
    2c5a:	d506      	bpl.n	2c6a <__sflush_r+0x46>
    2c5c:	6863      	ldr	r3, [r4, #4]
    2c5e:	1ac0      	subs	r0, r0, r3
    2c60:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2c62:	2b00      	cmp	r3, #0
    2c64:	d001      	beq.n	2c6a <__sflush_r+0x46>
    2c66:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2c68:	1ac0      	subs	r0, r0, r3
    2c6a:	0002      	movs	r2, r0
    2c6c:	6a21      	ldr	r1, [r4, #32]
    2c6e:	2300      	movs	r3, #0
    2c70:	0028      	movs	r0, r5
    2c72:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2c74:	47b8      	blx	r7
    2c76:	89a1      	ldrh	r1, [r4, #12]
    2c78:	1c43      	adds	r3, r0, #1
    2c7a:	d106      	bne.n	2c8a <__sflush_r+0x66>
    2c7c:	682b      	ldr	r3, [r5, #0]
    2c7e:	2b1d      	cmp	r3, #29
    2c80:	d831      	bhi.n	2ce6 <__sflush_r+0xc2>
    2c82:	4a2c      	ldr	r2, [pc, #176]	; (2d34 <__sflush_r+0x110>)
    2c84:	40da      	lsrs	r2, r3
    2c86:	07d3      	lsls	r3, r2, #31
    2c88:	d52d      	bpl.n	2ce6 <__sflush_r+0xc2>
    2c8a:	2300      	movs	r3, #0
    2c8c:	6063      	str	r3, [r4, #4]
    2c8e:	6923      	ldr	r3, [r4, #16]
    2c90:	6023      	str	r3, [r4, #0]
    2c92:	04cb      	lsls	r3, r1, #19
    2c94:	d505      	bpl.n	2ca2 <__sflush_r+0x7e>
    2c96:	1c43      	adds	r3, r0, #1
    2c98:	d102      	bne.n	2ca0 <__sflush_r+0x7c>
    2c9a:	682b      	ldr	r3, [r5, #0]
    2c9c:	2b00      	cmp	r3, #0
    2c9e:	d100      	bne.n	2ca2 <__sflush_r+0x7e>
    2ca0:	6560      	str	r0, [r4, #84]	; 0x54
    2ca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2ca4:	602e      	str	r6, [r5, #0]
    2ca6:	2900      	cmp	r1, #0
    2ca8:	d0c8      	beq.n	2c3c <__sflush_r+0x18>
    2caa:	0023      	movs	r3, r4
    2cac:	3344      	adds	r3, #68	; 0x44
    2cae:	4299      	cmp	r1, r3
    2cb0:	d002      	beq.n	2cb8 <__sflush_r+0x94>
    2cb2:	0028      	movs	r0, r5
    2cb4:	f000 f9b4 	bl	3020 <_free_r>
    2cb8:	2000      	movs	r0, #0
    2cba:	6360      	str	r0, [r4, #52]	; 0x34
    2cbc:	e7bf      	b.n	2c3e <__sflush_r+0x1a>
    2cbe:	2301      	movs	r3, #1
    2cc0:	6a21      	ldr	r1, [r4, #32]
    2cc2:	0028      	movs	r0, r5
    2cc4:	47b8      	blx	r7
    2cc6:	1c43      	adds	r3, r0, #1
    2cc8:	d1c5      	bne.n	2c56 <__sflush_r+0x32>
    2cca:	682b      	ldr	r3, [r5, #0]
    2ccc:	2b00      	cmp	r3, #0
    2cce:	d0c2      	beq.n	2c56 <__sflush_r+0x32>
    2cd0:	2b1d      	cmp	r3, #29
    2cd2:	d001      	beq.n	2cd8 <__sflush_r+0xb4>
    2cd4:	2b16      	cmp	r3, #22
    2cd6:	d101      	bne.n	2cdc <__sflush_r+0xb8>
    2cd8:	602e      	str	r6, [r5, #0]
    2cda:	e7af      	b.n	2c3c <__sflush_r+0x18>
    2cdc:	2340      	movs	r3, #64	; 0x40
    2cde:	89a2      	ldrh	r2, [r4, #12]
    2ce0:	4313      	orrs	r3, r2
    2ce2:	81a3      	strh	r3, [r4, #12]
    2ce4:	e7ab      	b.n	2c3e <__sflush_r+0x1a>
    2ce6:	2340      	movs	r3, #64	; 0x40
    2ce8:	430b      	orrs	r3, r1
    2cea:	2001      	movs	r0, #1
    2cec:	81a3      	strh	r3, [r4, #12]
    2cee:	4240      	negs	r0, r0
    2cf0:	e7a5      	b.n	2c3e <__sflush_r+0x1a>
    2cf2:	690f      	ldr	r7, [r1, #16]
    2cf4:	2f00      	cmp	r7, #0
    2cf6:	d0a1      	beq.n	2c3c <__sflush_r+0x18>
    2cf8:	680b      	ldr	r3, [r1, #0]
    2cfa:	600f      	str	r7, [r1, #0]
    2cfc:	1bdb      	subs	r3, r3, r7
    2cfe:	9301      	str	r3, [sp, #4]
    2d00:	2300      	movs	r3, #0
    2d02:	0792      	lsls	r2, r2, #30
    2d04:	d100      	bne.n	2d08 <__sflush_r+0xe4>
    2d06:	694b      	ldr	r3, [r1, #20]
    2d08:	60a3      	str	r3, [r4, #8]
    2d0a:	9b01      	ldr	r3, [sp, #4]
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	dc00      	bgt.n	2d12 <__sflush_r+0xee>
    2d10:	e794      	b.n	2c3c <__sflush_r+0x18>
    2d12:	9b01      	ldr	r3, [sp, #4]
    2d14:	003a      	movs	r2, r7
    2d16:	6a21      	ldr	r1, [r4, #32]
    2d18:	0028      	movs	r0, r5
    2d1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2d1c:	47b0      	blx	r6
    2d1e:	2800      	cmp	r0, #0
    2d20:	dc03      	bgt.n	2d2a <__sflush_r+0x106>
    2d22:	2340      	movs	r3, #64	; 0x40
    2d24:	89a2      	ldrh	r2, [r4, #12]
    2d26:	4313      	orrs	r3, r2
    2d28:	e7df      	b.n	2cea <__sflush_r+0xc6>
    2d2a:	9b01      	ldr	r3, [sp, #4]
    2d2c:	183f      	adds	r7, r7, r0
    2d2e:	1a1b      	subs	r3, r3, r0
    2d30:	9301      	str	r3, [sp, #4]
    2d32:	e7ea      	b.n	2d0a <__sflush_r+0xe6>
    2d34:	20400001 	.word	0x20400001

00002d38 <_fflush_r>:
    2d38:	690b      	ldr	r3, [r1, #16]
    2d3a:	b570      	push	{r4, r5, r6, lr}
    2d3c:	0005      	movs	r5, r0
    2d3e:	000c      	movs	r4, r1
    2d40:	2b00      	cmp	r3, #0
    2d42:	d101      	bne.n	2d48 <_fflush_r+0x10>
    2d44:	2000      	movs	r0, #0
    2d46:	bd70      	pop	{r4, r5, r6, pc}
    2d48:	2800      	cmp	r0, #0
    2d4a:	d004      	beq.n	2d56 <_fflush_r+0x1e>
    2d4c:	6983      	ldr	r3, [r0, #24]
    2d4e:	2b00      	cmp	r3, #0
    2d50:	d101      	bne.n	2d56 <_fflush_r+0x1e>
    2d52:	f000 f85f 	bl	2e14 <__sinit>
    2d56:	4b0b      	ldr	r3, [pc, #44]	; (2d84 <_fflush_r+0x4c>)
    2d58:	429c      	cmp	r4, r3
    2d5a:	d109      	bne.n	2d70 <_fflush_r+0x38>
    2d5c:	686c      	ldr	r4, [r5, #4]
    2d5e:	220c      	movs	r2, #12
    2d60:	5ea3      	ldrsh	r3, [r4, r2]
    2d62:	2b00      	cmp	r3, #0
    2d64:	d0ee      	beq.n	2d44 <_fflush_r+0xc>
    2d66:	0021      	movs	r1, r4
    2d68:	0028      	movs	r0, r5
    2d6a:	f7ff ff5b 	bl	2c24 <__sflush_r>
    2d6e:	e7ea      	b.n	2d46 <_fflush_r+0xe>
    2d70:	4b05      	ldr	r3, [pc, #20]	; (2d88 <_fflush_r+0x50>)
    2d72:	429c      	cmp	r4, r3
    2d74:	d101      	bne.n	2d7a <_fflush_r+0x42>
    2d76:	68ac      	ldr	r4, [r5, #8]
    2d78:	e7f1      	b.n	2d5e <_fflush_r+0x26>
    2d7a:	4b04      	ldr	r3, [pc, #16]	; (2d8c <_fflush_r+0x54>)
    2d7c:	429c      	cmp	r4, r3
    2d7e:	d1ee      	bne.n	2d5e <_fflush_r+0x26>
    2d80:	68ec      	ldr	r4, [r5, #12]
    2d82:	e7ec      	b.n	2d5e <_fflush_r+0x26>
    2d84:	00003cf4 	.word	0x00003cf4
    2d88:	00003d14 	.word	0x00003d14
    2d8c:	00003cd4 	.word	0x00003cd4

00002d90 <_cleanup_r>:
    2d90:	b510      	push	{r4, lr}
    2d92:	4902      	ldr	r1, [pc, #8]	; (2d9c <_cleanup_r+0xc>)
    2d94:	f000 f8b2 	bl	2efc <_fwalk_reent>
    2d98:	bd10      	pop	{r4, pc}
    2d9a:	46c0      	nop			; (mov r8, r8)
    2d9c:	00002d39 	.word	0x00002d39

00002da0 <std.isra.0>:
    2da0:	2300      	movs	r3, #0
    2da2:	b510      	push	{r4, lr}
    2da4:	0004      	movs	r4, r0
    2da6:	6003      	str	r3, [r0, #0]
    2da8:	6043      	str	r3, [r0, #4]
    2daa:	6083      	str	r3, [r0, #8]
    2dac:	8181      	strh	r1, [r0, #12]
    2dae:	6643      	str	r3, [r0, #100]	; 0x64
    2db0:	81c2      	strh	r2, [r0, #14]
    2db2:	6103      	str	r3, [r0, #16]
    2db4:	6143      	str	r3, [r0, #20]
    2db6:	6183      	str	r3, [r0, #24]
    2db8:	0019      	movs	r1, r3
    2dba:	2208      	movs	r2, #8
    2dbc:	305c      	adds	r0, #92	; 0x5c
    2dbe:	f7ff fd23 	bl	2808 <memset>
    2dc2:	4b05      	ldr	r3, [pc, #20]	; (2dd8 <std.isra.0+0x38>)
    2dc4:	6224      	str	r4, [r4, #32]
    2dc6:	6263      	str	r3, [r4, #36]	; 0x24
    2dc8:	4b04      	ldr	r3, [pc, #16]	; (2ddc <std.isra.0+0x3c>)
    2dca:	62a3      	str	r3, [r4, #40]	; 0x28
    2dcc:	4b04      	ldr	r3, [pc, #16]	; (2de0 <std.isra.0+0x40>)
    2dce:	62e3      	str	r3, [r4, #44]	; 0x2c
    2dd0:	4b04      	ldr	r3, [pc, #16]	; (2de4 <std.isra.0+0x44>)
    2dd2:	6323      	str	r3, [r4, #48]	; 0x30
    2dd4:	bd10      	pop	{r4, pc}
    2dd6:	46c0      	nop			; (mov r8, r8)
    2dd8:	0000372d 	.word	0x0000372d
    2ddc:	00003755 	.word	0x00003755
    2de0:	0000378d 	.word	0x0000378d
    2de4:	000037b9 	.word	0x000037b9

00002de8 <__sfmoreglue>:
    2de8:	b570      	push	{r4, r5, r6, lr}
    2dea:	2568      	movs	r5, #104	; 0x68
    2dec:	1e4a      	subs	r2, r1, #1
    2dee:	4355      	muls	r5, r2
    2df0:	000e      	movs	r6, r1
    2df2:	0029      	movs	r1, r5
    2df4:	3174      	adds	r1, #116	; 0x74
    2df6:	f000 f95d 	bl	30b4 <_malloc_r>
    2dfa:	1e04      	subs	r4, r0, #0
    2dfc:	d008      	beq.n	2e10 <__sfmoreglue+0x28>
    2dfe:	2100      	movs	r1, #0
    2e00:	002a      	movs	r2, r5
    2e02:	6001      	str	r1, [r0, #0]
    2e04:	6046      	str	r6, [r0, #4]
    2e06:	300c      	adds	r0, #12
    2e08:	60a0      	str	r0, [r4, #8]
    2e0a:	3268      	adds	r2, #104	; 0x68
    2e0c:	f7ff fcfc 	bl	2808 <memset>
    2e10:	0020      	movs	r0, r4
    2e12:	bd70      	pop	{r4, r5, r6, pc}

00002e14 <__sinit>:
    2e14:	6983      	ldr	r3, [r0, #24]
    2e16:	b513      	push	{r0, r1, r4, lr}
    2e18:	0004      	movs	r4, r0
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	d128      	bne.n	2e70 <__sinit+0x5c>
    2e1e:	6483      	str	r3, [r0, #72]	; 0x48
    2e20:	64c3      	str	r3, [r0, #76]	; 0x4c
    2e22:	6503      	str	r3, [r0, #80]	; 0x50
    2e24:	4b13      	ldr	r3, [pc, #76]	; (2e74 <__sinit+0x60>)
    2e26:	4a14      	ldr	r2, [pc, #80]	; (2e78 <__sinit+0x64>)
    2e28:	681b      	ldr	r3, [r3, #0]
    2e2a:	6282      	str	r2, [r0, #40]	; 0x28
    2e2c:	9301      	str	r3, [sp, #4]
    2e2e:	4298      	cmp	r0, r3
    2e30:	d101      	bne.n	2e36 <__sinit+0x22>
    2e32:	2301      	movs	r3, #1
    2e34:	6183      	str	r3, [r0, #24]
    2e36:	0020      	movs	r0, r4
    2e38:	f000 f820 	bl	2e7c <__sfp>
    2e3c:	6060      	str	r0, [r4, #4]
    2e3e:	0020      	movs	r0, r4
    2e40:	f000 f81c 	bl	2e7c <__sfp>
    2e44:	60a0      	str	r0, [r4, #8]
    2e46:	0020      	movs	r0, r4
    2e48:	f000 f818 	bl	2e7c <__sfp>
    2e4c:	2200      	movs	r2, #0
    2e4e:	60e0      	str	r0, [r4, #12]
    2e50:	2104      	movs	r1, #4
    2e52:	6860      	ldr	r0, [r4, #4]
    2e54:	f7ff ffa4 	bl	2da0 <std.isra.0>
    2e58:	2201      	movs	r2, #1
    2e5a:	2109      	movs	r1, #9
    2e5c:	68a0      	ldr	r0, [r4, #8]
    2e5e:	f7ff ff9f 	bl	2da0 <std.isra.0>
    2e62:	2202      	movs	r2, #2
    2e64:	2112      	movs	r1, #18
    2e66:	68e0      	ldr	r0, [r4, #12]
    2e68:	f7ff ff9a 	bl	2da0 <std.isra.0>
    2e6c:	2301      	movs	r3, #1
    2e6e:	61a3      	str	r3, [r4, #24]
    2e70:	bd13      	pop	{r0, r1, r4, pc}
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	00003cd0 	.word	0x00003cd0
    2e78:	00002d91 	.word	0x00002d91

00002e7c <__sfp>:
    2e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e7e:	4b1e      	ldr	r3, [pc, #120]	; (2ef8 <__sfp+0x7c>)
    2e80:	0007      	movs	r7, r0
    2e82:	681e      	ldr	r6, [r3, #0]
    2e84:	69b3      	ldr	r3, [r6, #24]
    2e86:	2b00      	cmp	r3, #0
    2e88:	d102      	bne.n	2e90 <__sfp+0x14>
    2e8a:	0030      	movs	r0, r6
    2e8c:	f7ff ffc2 	bl	2e14 <__sinit>
    2e90:	3648      	adds	r6, #72	; 0x48
    2e92:	68b4      	ldr	r4, [r6, #8]
    2e94:	6873      	ldr	r3, [r6, #4]
    2e96:	3b01      	subs	r3, #1
    2e98:	d504      	bpl.n	2ea4 <__sfp+0x28>
    2e9a:	6833      	ldr	r3, [r6, #0]
    2e9c:	2b00      	cmp	r3, #0
    2e9e:	d007      	beq.n	2eb0 <__sfp+0x34>
    2ea0:	6836      	ldr	r6, [r6, #0]
    2ea2:	e7f6      	b.n	2e92 <__sfp+0x16>
    2ea4:	220c      	movs	r2, #12
    2ea6:	5ea5      	ldrsh	r5, [r4, r2]
    2ea8:	2d00      	cmp	r5, #0
    2eaa:	d00d      	beq.n	2ec8 <__sfp+0x4c>
    2eac:	3468      	adds	r4, #104	; 0x68
    2eae:	e7f2      	b.n	2e96 <__sfp+0x1a>
    2eb0:	2104      	movs	r1, #4
    2eb2:	0038      	movs	r0, r7
    2eb4:	f7ff ff98 	bl	2de8 <__sfmoreglue>
    2eb8:	6030      	str	r0, [r6, #0]
    2eba:	2800      	cmp	r0, #0
    2ebc:	d1f0      	bne.n	2ea0 <__sfp+0x24>
    2ebe:	230c      	movs	r3, #12
    2ec0:	0004      	movs	r4, r0
    2ec2:	603b      	str	r3, [r7, #0]
    2ec4:	0020      	movs	r0, r4
    2ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ec8:	2301      	movs	r3, #1
    2eca:	0020      	movs	r0, r4
    2ecc:	425b      	negs	r3, r3
    2ece:	81e3      	strh	r3, [r4, #14]
    2ed0:	3302      	adds	r3, #2
    2ed2:	81a3      	strh	r3, [r4, #12]
    2ed4:	6665      	str	r5, [r4, #100]	; 0x64
    2ed6:	6025      	str	r5, [r4, #0]
    2ed8:	60a5      	str	r5, [r4, #8]
    2eda:	6065      	str	r5, [r4, #4]
    2edc:	6125      	str	r5, [r4, #16]
    2ede:	6165      	str	r5, [r4, #20]
    2ee0:	61a5      	str	r5, [r4, #24]
    2ee2:	2208      	movs	r2, #8
    2ee4:	0029      	movs	r1, r5
    2ee6:	305c      	adds	r0, #92	; 0x5c
    2ee8:	f7ff fc8e 	bl	2808 <memset>
    2eec:	6365      	str	r5, [r4, #52]	; 0x34
    2eee:	63a5      	str	r5, [r4, #56]	; 0x38
    2ef0:	64a5      	str	r5, [r4, #72]	; 0x48
    2ef2:	64e5      	str	r5, [r4, #76]	; 0x4c
    2ef4:	e7e6      	b.n	2ec4 <__sfp+0x48>
    2ef6:	46c0      	nop			; (mov r8, r8)
    2ef8:	00003cd0 	.word	0x00003cd0

00002efc <_fwalk_reent>:
    2efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2efe:	0004      	movs	r4, r0
    2f00:	0007      	movs	r7, r0
    2f02:	2600      	movs	r6, #0
    2f04:	9101      	str	r1, [sp, #4]
    2f06:	3448      	adds	r4, #72	; 0x48
    2f08:	2c00      	cmp	r4, #0
    2f0a:	d101      	bne.n	2f10 <_fwalk_reent+0x14>
    2f0c:	0030      	movs	r0, r6
    2f0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2f10:	6863      	ldr	r3, [r4, #4]
    2f12:	68a5      	ldr	r5, [r4, #8]
    2f14:	9300      	str	r3, [sp, #0]
    2f16:	9b00      	ldr	r3, [sp, #0]
    2f18:	3b01      	subs	r3, #1
    2f1a:	9300      	str	r3, [sp, #0]
    2f1c:	d501      	bpl.n	2f22 <_fwalk_reent+0x26>
    2f1e:	6824      	ldr	r4, [r4, #0]
    2f20:	e7f2      	b.n	2f08 <_fwalk_reent+0xc>
    2f22:	89ab      	ldrh	r3, [r5, #12]
    2f24:	2b01      	cmp	r3, #1
    2f26:	d908      	bls.n	2f3a <_fwalk_reent+0x3e>
    2f28:	220e      	movs	r2, #14
    2f2a:	5eab      	ldrsh	r3, [r5, r2]
    2f2c:	3301      	adds	r3, #1
    2f2e:	d004      	beq.n	2f3a <_fwalk_reent+0x3e>
    2f30:	0029      	movs	r1, r5
    2f32:	0038      	movs	r0, r7
    2f34:	9b01      	ldr	r3, [sp, #4]
    2f36:	4798      	blx	r3
    2f38:	4306      	orrs	r6, r0
    2f3a:	3568      	adds	r5, #104	; 0x68
    2f3c:	e7eb      	b.n	2f16 <_fwalk_reent+0x1a>
	...

00002f40 <__swhatbuf_r>:
    2f40:	b570      	push	{r4, r5, r6, lr}
    2f42:	000e      	movs	r6, r1
    2f44:	001d      	movs	r5, r3
    2f46:	230e      	movs	r3, #14
    2f48:	5ec9      	ldrsh	r1, [r1, r3]
    2f4a:	b090      	sub	sp, #64	; 0x40
    2f4c:	0014      	movs	r4, r2
    2f4e:	2900      	cmp	r1, #0
    2f50:	da07      	bge.n	2f62 <__swhatbuf_r+0x22>
    2f52:	2300      	movs	r3, #0
    2f54:	602b      	str	r3, [r5, #0]
    2f56:	89b3      	ldrh	r3, [r6, #12]
    2f58:	061b      	lsls	r3, r3, #24
    2f5a:	d411      	bmi.n	2f80 <__swhatbuf_r+0x40>
    2f5c:	2380      	movs	r3, #128	; 0x80
    2f5e:	00db      	lsls	r3, r3, #3
    2f60:	e00f      	b.n	2f82 <__swhatbuf_r+0x42>
    2f62:	aa01      	add	r2, sp, #4
    2f64:	f000 fc54 	bl	3810 <_fstat_r>
    2f68:	2800      	cmp	r0, #0
    2f6a:	dbf2      	blt.n	2f52 <__swhatbuf_r+0x12>
    2f6c:	22f0      	movs	r2, #240	; 0xf0
    2f6e:	9b02      	ldr	r3, [sp, #8]
    2f70:	0212      	lsls	r2, r2, #8
    2f72:	4013      	ands	r3, r2
    2f74:	4a05      	ldr	r2, [pc, #20]	; (2f8c <__swhatbuf_r+0x4c>)
    2f76:	189b      	adds	r3, r3, r2
    2f78:	425a      	negs	r2, r3
    2f7a:	4153      	adcs	r3, r2
    2f7c:	602b      	str	r3, [r5, #0]
    2f7e:	e7ed      	b.n	2f5c <__swhatbuf_r+0x1c>
    2f80:	2340      	movs	r3, #64	; 0x40
    2f82:	2000      	movs	r0, #0
    2f84:	6023      	str	r3, [r4, #0]
    2f86:	b010      	add	sp, #64	; 0x40
    2f88:	bd70      	pop	{r4, r5, r6, pc}
    2f8a:	46c0      	nop			; (mov r8, r8)
    2f8c:	ffffe000 	.word	0xffffe000

00002f90 <__smakebuf_r>:
    2f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f92:	2602      	movs	r6, #2
    2f94:	898b      	ldrh	r3, [r1, #12]
    2f96:	0005      	movs	r5, r0
    2f98:	000c      	movs	r4, r1
    2f9a:	4233      	tst	r3, r6
    2f9c:	d006      	beq.n	2fac <__smakebuf_r+0x1c>
    2f9e:	0023      	movs	r3, r4
    2fa0:	3347      	adds	r3, #71	; 0x47
    2fa2:	6023      	str	r3, [r4, #0]
    2fa4:	6123      	str	r3, [r4, #16]
    2fa6:	2301      	movs	r3, #1
    2fa8:	6163      	str	r3, [r4, #20]
    2faa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2fac:	ab01      	add	r3, sp, #4
    2fae:	466a      	mov	r2, sp
    2fb0:	f7ff ffc6 	bl	2f40 <__swhatbuf_r>
    2fb4:	9900      	ldr	r1, [sp, #0]
    2fb6:	0007      	movs	r7, r0
    2fb8:	0028      	movs	r0, r5
    2fba:	f000 f87b 	bl	30b4 <_malloc_r>
    2fbe:	2800      	cmp	r0, #0
    2fc0:	d106      	bne.n	2fd0 <__smakebuf_r+0x40>
    2fc2:	220c      	movs	r2, #12
    2fc4:	5ea3      	ldrsh	r3, [r4, r2]
    2fc6:	059a      	lsls	r2, r3, #22
    2fc8:	d4ef      	bmi.n	2faa <__smakebuf_r+0x1a>
    2fca:	431e      	orrs	r6, r3
    2fcc:	81a6      	strh	r6, [r4, #12]
    2fce:	e7e6      	b.n	2f9e <__smakebuf_r+0xe>
    2fd0:	4b0d      	ldr	r3, [pc, #52]	; (3008 <__smakebuf_r+0x78>)
    2fd2:	62ab      	str	r3, [r5, #40]	; 0x28
    2fd4:	2380      	movs	r3, #128	; 0x80
    2fd6:	89a2      	ldrh	r2, [r4, #12]
    2fd8:	6020      	str	r0, [r4, #0]
    2fda:	4313      	orrs	r3, r2
    2fdc:	81a3      	strh	r3, [r4, #12]
    2fde:	9b00      	ldr	r3, [sp, #0]
    2fe0:	6120      	str	r0, [r4, #16]
    2fe2:	6163      	str	r3, [r4, #20]
    2fe4:	9b01      	ldr	r3, [sp, #4]
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d00a      	beq.n	3000 <__smakebuf_r+0x70>
    2fea:	230e      	movs	r3, #14
    2fec:	5ee1      	ldrsh	r1, [r4, r3]
    2fee:	0028      	movs	r0, r5
    2ff0:	f000 fc20 	bl	3834 <_isatty_r>
    2ff4:	2800      	cmp	r0, #0
    2ff6:	d003      	beq.n	3000 <__smakebuf_r+0x70>
    2ff8:	2301      	movs	r3, #1
    2ffa:	89a2      	ldrh	r2, [r4, #12]
    2ffc:	4313      	orrs	r3, r2
    2ffe:	81a3      	strh	r3, [r4, #12]
    3000:	89a0      	ldrh	r0, [r4, #12]
    3002:	4338      	orrs	r0, r7
    3004:	81a0      	strh	r0, [r4, #12]
    3006:	e7d0      	b.n	2faa <__smakebuf_r+0x1a>
    3008:	00002d91 	.word	0x00002d91

0000300c <malloc>:
    300c:	b510      	push	{r4, lr}
    300e:	4b03      	ldr	r3, [pc, #12]	; (301c <malloc+0x10>)
    3010:	0001      	movs	r1, r0
    3012:	6818      	ldr	r0, [r3, #0]
    3014:	f000 f84e 	bl	30b4 <_malloc_r>
    3018:	bd10      	pop	{r4, pc}
    301a:	46c0      	nop			; (mov r8, r8)
    301c:	20000004 	.word	0x20000004

00003020 <_free_r>:
    3020:	b570      	push	{r4, r5, r6, lr}
    3022:	0005      	movs	r5, r0
    3024:	2900      	cmp	r1, #0
    3026:	d010      	beq.n	304a <_free_r+0x2a>
    3028:	1f0c      	subs	r4, r1, #4
    302a:	6823      	ldr	r3, [r4, #0]
    302c:	2b00      	cmp	r3, #0
    302e:	da00      	bge.n	3032 <_free_r+0x12>
    3030:	18e4      	adds	r4, r4, r3
    3032:	0028      	movs	r0, r5
    3034:	f000 fc2f 	bl	3896 <__malloc_lock>
    3038:	4a1d      	ldr	r2, [pc, #116]	; (30b0 <_free_r+0x90>)
    303a:	6813      	ldr	r3, [r2, #0]
    303c:	2b00      	cmp	r3, #0
    303e:	d105      	bne.n	304c <_free_r+0x2c>
    3040:	6063      	str	r3, [r4, #4]
    3042:	6014      	str	r4, [r2, #0]
    3044:	0028      	movs	r0, r5
    3046:	f000 fc27 	bl	3898 <__malloc_unlock>
    304a:	bd70      	pop	{r4, r5, r6, pc}
    304c:	42a3      	cmp	r3, r4
    304e:	d909      	bls.n	3064 <_free_r+0x44>
    3050:	6821      	ldr	r1, [r4, #0]
    3052:	1860      	adds	r0, r4, r1
    3054:	4283      	cmp	r3, r0
    3056:	d1f3      	bne.n	3040 <_free_r+0x20>
    3058:	6818      	ldr	r0, [r3, #0]
    305a:	685b      	ldr	r3, [r3, #4]
    305c:	1841      	adds	r1, r0, r1
    305e:	6021      	str	r1, [r4, #0]
    3060:	e7ee      	b.n	3040 <_free_r+0x20>
    3062:	0013      	movs	r3, r2
    3064:	685a      	ldr	r2, [r3, #4]
    3066:	2a00      	cmp	r2, #0
    3068:	d001      	beq.n	306e <_free_r+0x4e>
    306a:	42a2      	cmp	r2, r4
    306c:	d9f9      	bls.n	3062 <_free_r+0x42>
    306e:	6819      	ldr	r1, [r3, #0]
    3070:	1858      	adds	r0, r3, r1
    3072:	42a0      	cmp	r0, r4
    3074:	d10b      	bne.n	308e <_free_r+0x6e>
    3076:	6820      	ldr	r0, [r4, #0]
    3078:	1809      	adds	r1, r1, r0
    307a:	1858      	adds	r0, r3, r1
    307c:	6019      	str	r1, [r3, #0]
    307e:	4282      	cmp	r2, r0
    3080:	d1e0      	bne.n	3044 <_free_r+0x24>
    3082:	6810      	ldr	r0, [r2, #0]
    3084:	6852      	ldr	r2, [r2, #4]
    3086:	1841      	adds	r1, r0, r1
    3088:	6019      	str	r1, [r3, #0]
    308a:	605a      	str	r2, [r3, #4]
    308c:	e7da      	b.n	3044 <_free_r+0x24>
    308e:	42a0      	cmp	r0, r4
    3090:	d902      	bls.n	3098 <_free_r+0x78>
    3092:	230c      	movs	r3, #12
    3094:	602b      	str	r3, [r5, #0]
    3096:	e7d5      	b.n	3044 <_free_r+0x24>
    3098:	6821      	ldr	r1, [r4, #0]
    309a:	1860      	adds	r0, r4, r1
    309c:	4282      	cmp	r2, r0
    309e:	d103      	bne.n	30a8 <_free_r+0x88>
    30a0:	6810      	ldr	r0, [r2, #0]
    30a2:	6852      	ldr	r2, [r2, #4]
    30a4:	1841      	adds	r1, r0, r1
    30a6:	6021      	str	r1, [r4, #0]
    30a8:	6062      	str	r2, [r4, #4]
    30aa:	605c      	str	r4, [r3, #4]
    30ac:	e7ca      	b.n	3044 <_free_r+0x24>
    30ae:	46c0      	nop			; (mov r8, r8)
    30b0:	20000200 	.word	0x20000200

000030b4 <_malloc_r>:
    30b4:	2303      	movs	r3, #3
    30b6:	b570      	push	{r4, r5, r6, lr}
    30b8:	1ccd      	adds	r5, r1, #3
    30ba:	439d      	bics	r5, r3
    30bc:	3508      	adds	r5, #8
    30be:	0006      	movs	r6, r0
    30c0:	2d0c      	cmp	r5, #12
    30c2:	d21e      	bcs.n	3102 <_malloc_r+0x4e>
    30c4:	250c      	movs	r5, #12
    30c6:	42a9      	cmp	r1, r5
    30c8:	d81d      	bhi.n	3106 <_malloc_r+0x52>
    30ca:	0030      	movs	r0, r6
    30cc:	f000 fbe3 	bl	3896 <__malloc_lock>
    30d0:	4a25      	ldr	r2, [pc, #148]	; (3168 <_malloc_r+0xb4>)
    30d2:	6814      	ldr	r4, [r2, #0]
    30d4:	0021      	movs	r1, r4
    30d6:	2900      	cmp	r1, #0
    30d8:	d119      	bne.n	310e <_malloc_r+0x5a>
    30da:	4c24      	ldr	r4, [pc, #144]	; (316c <_malloc_r+0xb8>)
    30dc:	6823      	ldr	r3, [r4, #0]
    30de:	2b00      	cmp	r3, #0
    30e0:	d103      	bne.n	30ea <_malloc_r+0x36>
    30e2:	0030      	movs	r0, r6
    30e4:	f000 fb10 	bl	3708 <_sbrk_r>
    30e8:	6020      	str	r0, [r4, #0]
    30ea:	0029      	movs	r1, r5
    30ec:	0030      	movs	r0, r6
    30ee:	f000 fb0b 	bl	3708 <_sbrk_r>
    30f2:	1c43      	adds	r3, r0, #1
    30f4:	d12c      	bne.n	3150 <_malloc_r+0x9c>
    30f6:	230c      	movs	r3, #12
    30f8:	0030      	movs	r0, r6
    30fa:	6033      	str	r3, [r6, #0]
    30fc:	f000 fbcc 	bl	3898 <__malloc_unlock>
    3100:	e003      	b.n	310a <_malloc_r+0x56>
    3102:	2d00      	cmp	r5, #0
    3104:	dadf      	bge.n	30c6 <_malloc_r+0x12>
    3106:	230c      	movs	r3, #12
    3108:	6033      	str	r3, [r6, #0]
    310a:	2000      	movs	r0, #0
    310c:	bd70      	pop	{r4, r5, r6, pc}
    310e:	680b      	ldr	r3, [r1, #0]
    3110:	1b5b      	subs	r3, r3, r5
    3112:	d41a      	bmi.n	314a <_malloc_r+0x96>
    3114:	2b0b      	cmp	r3, #11
    3116:	d903      	bls.n	3120 <_malloc_r+0x6c>
    3118:	600b      	str	r3, [r1, #0]
    311a:	18cc      	adds	r4, r1, r3
    311c:	6025      	str	r5, [r4, #0]
    311e:	e003      	b.n	3128 <_malloc_r+0x74>
    3120:	428c      	cmp	r4, r1
    3122:	d10e      	bne.n	3142 <_malloc_r+0x8e>
    3124:	6863      	ldr	r3, [r4, #4]
    3126:	6013      	str	r3, [r2, #0]
    3128:	0030      	movs	r0, r6
    312a:	f000 fbb5 	bl	3898 <__malloc_unlock>
    312e:	0020      	movs	r0, r4
    3130:	2207      	movs	r2, #7
    3132:	300b      	adds	r0, #11
    3134:	1d23      	adds	r3, r4, #4
    3136:	4390      	bics	r0, r2
    3138:	1ac3      	subs	r3, r0, r3
    313a:	d0e7      	beq.n	310c <_malloc_r+0x58>
    313c:	425a      	negs	r2, r3
    313e:	50e2      	str	r2, [r4, r3]
    3140:	e7e4      	b.n	310c <_malloc_r+0x58>
    3142:	684b      	ldr	r3, [r1, #4]
    3144:	6063      	str	r3, [r4, #4]
    3146:	000c      	movs	r4, r1
    3148:	e7ee      	b.n	3128 <_malloc_r+0x74>
    314a:	000c      	movs	r4, r1
    314c:	6849      	ldr	r1, [r1, #4]
    314e:	e7c2      	b.n	30d6 <_malloc_r+0x22>
    3150:	2303      	movs	r3, #3
    3152:	1cc4      	adds	r4, r0, #3
    3154:	439c      	bics	r4, r3
    3156:	42a0      	cmp	r0, r4
    3158:	d0e0      	beq.n	311c <_malloc_r+0x68>
    315a:	1a21      	subs	r1, r4, r0
    315c:	0030      	movs	r0, r6
    315e:	f000 fad3 	bl	3708 <_sbrk_r>
    3162:	1c43      	adds	r3, r0, #1
    3164:	d1da      	bne.n	311c <_malloc_r+0x68>
    3166:	e7c6      	b.n	30f6 <_malloc_r+0x42>
    3168:	20000200 	.word	0x20000200
    316c:	20000204 	.word	0x20000204

00003170 <__sfputc_r>:
    3170:	6893      	ldr	r3, [r2, #8]
    3172:	b510      	push	{r4, lr}
    3174:	3b01      	subs	r3, #1
    3176:	6093      	str	r3, [r2, #8]
    3178:	2b00      	cmp	r3, #0
    317a:	da05      	bge.n	3188 <__sfputc_r+0x18>
    317c:	6994      	ldr	r4, [r2, #24]
    317e:	42a3      	cmp	r3, r4
    3180:	db08      	blt.n	3194 <__sfputc_r+0x24>
    3182:	b2cb      	uxtb	r3, r1
    3184:	2b0a      	cmp	r3, #10
    3186:	d005      	beq.n	3194 <__sfputc_r+0x24>
    3188:	6813      	ldr	r3, [r2, #0]
    318a:	1c58      	adds	r0, r3, #1
    318c:	6010      	str	r0, [r2, #0]
    318e:	7019      	strb	r1, [r3, #0]
    3190:	b2c8      	uxtb	r0, r1
    3192:	bd10      	pop	{r4, pc}
    3194:	f7ff fc7a 	bl	2a8c <__swbuf_r>
    3198:	e7fb      	b.n	3192 <__sfputc_r+0x22>

0000319a <__sfputs_r>:
    319a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    319c:	0006      	movs	r6, r0
    319e:	000f      	movs	r7, r1
    31a0:	0014      	movs	r4, r2
    31a2:	18d5      	adds	r5, r2, r3
    31a4:	42ac      	cmp	r4, r5
    31a6:	d101      	bne.n	31ac <__sfputs_r+0x12>
    31a8:	2000      	movs	r0, #0
    31aa:	e007      	b.n	31bc <__sfputs_r+0x22>
    31ac:	7821      	ldrb	r1, [r4, #0]
    31ae:	003a      	movs	r2, r7
    31b0:	0030      	movs	r0, r6
    31b2:	f7ff ffdd 	bl	3170 <__sfputc_r>
    31b6:	3401      	adds	r4, #1
    31b8:	1c43      	adds	r3, r0, #1
    31ba:	d1f3      	bne.n	31a4 <__sfputs_r+0xa>
    31bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000031c0 <_vfiprintf_r>:
    31c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31c2:	b09f      	sub	sp, #124	; 0x7c
    31c4:	0006      	movs	r6, r0
    31c6:	000f      	movs	r7, r1
    31c8:	0014      	movs	r4, r2
    31ca:	9305      	str	r3, [sp, #20]
    31cc:	2800      	cmp	r0, #0
    31ce:	d004      	beq.n	31da <_vfiprintf_r+0x1a>
    31d0:	6983      	ldr	r3, [r0, #24]
    31d2:	2b00      	cmp	r3, #0
    31d4:	d101      	bne.n	31da <_vfiprintf_r+0x1a>
    31d6:	f7ff fe1d 	bl	2e14 <__sinit>
    31da:	4b7f      	ldr	r3, [pc, #508]	; (33d8 <_vfiprintf_r+0x218>)
    31dc:	429f      	cmp	r7, r3
    31de:	d15c      	bne.n	329a <_vfiprintf_r+0xda>
    31e0:	6877      	ldr	r7, [r6, #4]
    31e2:	89bb      	ldrh	r3, [r7, #12]
    31e4:	071b      	lsls	r3, r3, #28
    31e6:	d562      	bpl.n	32ae <_vfiprintf_r+0xee>
    31e8:	693b      	ldr	r3, [r7, #16]
    31ea:	2b00      	cmp	r3, #0
    31ec:	d05f      	beq.n	32ae <_vfiprintf_r+0xee>
    31ee:	2300      	movs	r3, #0
    31f0:	ad06      	add	r5, sp, #24
    31f2:	616b      	str	r3, [r5, #20]
    31f4:	3320      	adds	r3, #32
    31f6:	766b      	strb	r3, [r5, #25]
    31f8:	3310      	adds	r3, #16
    31fa:	76ab      	strb	r3, [r5, #26]
    31fc:	9402      	str	r4, [sp, #8]
    31fe:	9c02      	ldr	r4, [sp, #8]
    3200:	7823      	ldrb	r3, [r4, #0]
    3202:	2b00      	cmp	r3, #0
    3204:	d15d      	bne.n	32c2 <_vfiprintf_r+0x102>
    3206:	9b02      	ldr	r3, [sp, #8]
    3208:	1ae3      	subs	r3, r4, r3
    320a:	9304      	str	r3, [sp, #16]
    320c:	d00d      	beq.n	322a <_vfiprintf_r+0x6a>
    320e:	9b04      	ldr	r3, [sp, #16]
    3210:	9a02      	ldr	r2, [sp, #8]
    3212:	0039      	movs	r1, r7
    3214:	0030      	movs	r0, r6
    3216:	f7ff ffc0 	bl	319a <__sfputs_r>
    321a:	1c43      	adds	r3, r0, #1
    321c:	d100      	bne.n	3220 <_vfiprintf_r+0x60>
    321e:	e0cc      	b.n	33ba <_vfiprintf_r+0x1fa>
    3220:	696a      	ldr	r2, [r5, #20]
    3222:	9b04      	ldr	r3, [sp, #16]
    3224:	4694      	mov	ip, r2
    3226:	4463      	add	r3, ip
    3228:	616b      	str	r3, [r5, #20]
    322a:	7823      	ldrb	r3, [r4, #0]
    322c:	2b00      	cmp	r3, #0
    322e:	d100      	bne.n	3232 <_vfiprintf_r+0x72>
    3230:	e0c3      	b.n	33ba <_vfiprintf_r+0x1fa>
    3232:	2201      	movs	r2, #1
    3234:	2300      	movs	r3, #0
    3236:	4252      	negs	r2, r2
    3238:	606a      	str	r2, [r5, #4]
    323a:	a902      	add	r1, sp, #8
    323c:	3254      	adds	r2, #84	; 0x54
    323e:	1852      	adds	r2, r2, r1
    3240:	3401      	adds	r4, #1
    3242:	602b      	str	r3, [r5, #0]
    3244:	60eb      	str	r3, [r5, #12]
    3246:	60ab      	str	r3, [r5, #8]
    3248:	7013      	strb	r3, [r2, #0]
    324a:	65ab      	str	r3, [r5, #88]	; 0x58
    324c:	7821      	ldrb	r1, [r4, #0]
    324e:	2205      	movs	r2, #5
    3250:	4862      	ldr	r0, [pc, #392]	; (33dc <_vfiprintf_r+0x21c>)
    3252:	f000 fb15 	bl	3880 <memchr>
    3256:	1c63      	adds	r3, r4, #1
    3258:	469c      	mov	ip, r3
    325a:	2800      	cmp	r0, #0
    325c:	d135      	bne.n	32ca <_vfiprintf_r+0x10a>
    325e:	6829      	ldr	r1, [r5, #0]
    3260:	06cb      	lsls	r3, r1, #27
    3262:	d504      	bpl.n	326e <_vfiprintf_r+0xae>
    3264:	2353      	movs	r3, #83	; 0x53
    3266:	aa02      	add	r2, sp, #8
    3268:	3020      	adds	r0, #32
    326a:	189b      	adds	r3, r3, r2
    326c:	7018      	strb	r0, [r3, #0]
    326e:	070b      	lsls	r3, r1, #28
    3270:	d504      	bpl.n	327c <_vfiprintf_r+0xbc>
    3272:	2353      	movs	r3, #83	; 0x53
    3274:	202b      	movs	r0, #43	; 0x2b
    3276:	aa02      	add	r2, sp, #8
    3278:	189b      	adds	r3, r3, r2
    327a:	7018      	strb	r0, [r3, #0]
    327c:	7823      	ldrb	r3, [r4, #0]
    327e:	2b2a      	cmp	r3, #42	; 0x2a
    3280:	d02c      	beq.n	32dc <_vfiprintf_r+0x11c>
    3282:	2000      	movs	r0, #0
    3284:	210a      	movs	r1, #10
    3286:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3288:	7822      	ldrb	r2, [r4, #0]
    328a:	3a30      	subs	r2, #48	; 0x30
    328c:	2a09      	cmp	r2, #9
    328e:	d800      	bhi.n	3292 <_vfiprintf_r+0xd2>
    3290:	e06b      	b.n	336a <_vfiprintf_r+0x1aa>
    3292:	2800      	cmp	r0, #0
    3294:	d02a      	beq.n	32ec <_vfiprintf_r+0x12c>
    3296:	9309      	str	r3, [sp, #36]	; 0x24
    3298:	e028      	b.n	32ec <_vfiprintf_r+0x12c>
    329a:	4b51      	ldr	r3, [pc, #324]	; (33e0 <_vfiprintf_r+0x220>)
    329c:	429f      	cmp	r7, r3
    329e:	d101      	bne.n	32a4 <_vfiprintf_r+0xe4>
    32a0:	68b7      	ldr	r7, [r6, #8]
    32a2:	e79e      	b.n	31e2 <_vfiprintf_r+0x22>
    32a4:	4b4f      	ldr	r3, [pc, #316]	; (33e4 <_vfiprintf_r+0x224>)
    32a6:	429f      	cmp	r7, r3
    32a8:	d19b      	bne.n	31e2 <_vfiprintf_r+0x22>
    32aa:	68f7      	ldr	r7, [r6, #12]
    32ac:	e799      	b.n	31e2 <_vfiprintf_r+0x22>
    32ae:	0039      	movs	r1, r7
    32b0:	0030      	movs	r0, r6
    32b2:	f7ff fc41 	bl	2b38 <__swsetup_r>
    32b6:	2800      	cmp	r0, #0
    32b8:	d099      	beq.n	31ee <_vfiprintf_r+0x2e>
    32ba:	2001      	movs	r0, #1
    32bc:	4240      	negs	r0, r0
    32be:	b01f      	add	sp, #124	; 0x7c
    32c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32c2:	2b25      	cmp	r3, #37	; 0x25
    32c4:	d09f      	beq.n	3206 <_vfiprintf_r+0x46>
    32c6:	3401      	adds	r4, #1
    32c8:	e79a      	b.n	3200 <_vfiprintf_r+0x40>
    32ca:	4b44      	ldr	r3, [pc, #272]	; (33dc <_vfiprintf_r+0x21c>)
    32cc:	6829      	ldr	r1, [r5, #0]
    32ce:	1ac0      	subs	r0, r0, r3
    32d0:	2301      	movs	r3, #1
    32d2:	4083      	lsls	r3, r0
    32d4:	430b      	orrs	r3, r1
    32d6:	602b      	str	r3, [r5, #0]
    32d8:	4664      	mov	r4, ip
    32da:	e7b7      	b.n	324c <_vfiprintf_r+0x8c>
    32dc:	9b05      	ldr	r3, [sp, #20]
    32de:	1d18      	adds	r0, r3, #4
    32e0:	681b      	ldr	r3, [r3, #0]
    32e2:	9005      	str	r0, [sp, #20]
    32e4:	2b00      	cmp	r3, #0
    32e6:	db3a      	blt.n	335e <_vfiprintf_r+0x19e>
    32e8:	9309      	str	r3, [sp, #36]	; 0x24
    32ea:	4664      	mov	r4, ip
    32ec:	7823      	ldrb	r3, [r4, #0]
    32ee:	2b2e      	cmp	r3, #46	; 0x2e
    32f0:	d10b      	bne.n	330a <_vfiprintf_r+0x14a>
    32f2:	7863      	ldrb	r3, [r4, #1]
    32f4:	1c62      	adds	r2, r4, #1
    32f6:	2b2a      	cmp	r3, #42	; 0x2a
    32f8:	d13f      	bne.n	337a <_vfiprintf_r+0x1ba>
    32fa:	9b05      	ldr	r3, [sp, #20]
    32fc:	3402      	adds	r4, #2
    32fe:	1d1a      	adds	r2, r3, #4
    3300:	681b      	ldr	r3, [r3, #0]
    3302:	9205      	str	r2, [sp, #20]
    3304:	2b00      	cmp	r3, #0
    3306:	db35      	blt.n	3374 <_vfiprintf_r+0x1b4>
    3308:	9307      	str	r3, [sp, #28]
    330a:	7821      	ldrb	r1, [r4, #0]
    330c:	2203      	movs	r2, #3
    330e:	4836      	ldr	r0, [pc, #216]	; (33e8 <_vfiprintf_r+0x228>)
    3310:	f000 fab6 	bl	3880 <memchr>
    3314:	2800      	cmp	r0, #0
    3316:	d007      	beq.n	3328 <_vfiprintf_r+0x168>
    3318:	4b33      	ldr	r3, [pc, #204]	; (33e8 <_vfiprintf_r+0x228>)
    331a:	682a      	ldr	r2, [r5, #0]
    331c:	1ac0      	subs	r0, r0, r3
    331e:	2340      	movs	r3, #64	; 0x40
    3320:	4083      	lsls	r3, r0
    3322:	4313      	orrs	r3, r2
    3324:	602b      	str	r3, [r5, #0]
    3326:	3401      	adds	r4, #1
    3328:	7821      	ldrb	r1, [r4, #0]
    332a:	1c63      	adds	r3, r4, #1
    332c:	2206      	movs	r2, #6
    332e:	482f      	ldr	r0, [pc, #188]	; (33ec <_vfiprintf_r+0x22c>)
    3330:	9302      	str	r3, [sp, #8]
    3332:	7629      	strb	r1, [r5, #24]
    3334:	f000 faa4 	bl	3880 <memchr>
    3338:	2800      	cmp	r0, #0
    333a:	d044      	beq.n	33c6 <_vfiprintf_r+0x206>
    333c:	4b2c      	ldr	r3, [pc, #176]	; (33f0 <_vfiprintf_r+0x230>)
    333e:	2b00      	cmp	r3, #0
    3340:	d12f      	bne.n	33a2 <_vfiprintf_r+0x1e2>
    3342:	6829      	ldr	r1, [r5, #0]
    3344:	9b05      	ldr	r3, [sp, #20]
    3346:	2207      	movs	r2, #7
    3348:	05c9      	lsls	r1, r1, #23
    334a:	d528      	bpl.n	339e <_vfiprintf_r+0x1de>
    334c:	189b      	adds	r3, r3, r2
    334e:	4393      	bics	r3, r2
    3350:	3308      	adds	r3, #8
    3352:	9305      	str	r3, [sp, #20]
    3354:	696b      	ldr	r3, [r5, #20]
    3356:	9a03      	ldr	r2, [sp, #12]
    3358:	189b      	adds	r3, r3, r2
    335a:	616b      	str	r3, [r5, #20]
    335c:	e74f      	b.n	31fe <_vfiprintf_r+0x3e>
    335e:	425b      	negs	r3, r3
    3360:	60eb      	str	r3, [r5, #12]
    3362:	2302      	movs	r3, #2
    3364:	430b      	orrs	r3, r1
    3366:	602b      	str	r3, [r5, #0]
    3368:	e7bf      	b.n	32ea <_vfiprintf_r+0x12a>
    336a:	434b      	muls	r3, r1
    336c:	3401      	adds	r4, #1
    336e:	189b      	adds	r3, r3, r2
    3370:	2001      	movs	r0, #1
    3372:	e789      	b.n	3288 <_vfiprintf_r+0xc8>
    3374:	2301      	movs	r3, #1
    3376:	425b      	negs	r3, r3
    3378:	e7c6      	b.n	3308 <_vfiprintf_r+0x148>
    337a:	2300      	movs	r3, #0
    337c:	0014      	movs	r4, r2
    337e:	200a      	movs	r0, #10
    3380:	001a      	movs	r2, r3
    3382:	606b      	str	r3, [r5, #4]
    3384:	7821      	ldrb	r1, [r4, #0]
    3386:	3930      	subs	r1, #48	; 0x30
    3388:	2909      	cmp	r1, #9
    338a:	d903      	bls.n	3394 <_vfiprintf_r+0x1d4>
    338c:	2b00      	cmp	r3, #0
    338e:	d0bc      	beq.n	330a <_vfiprintf_r+0x14a>
    3390:	9207      	str	r2, [sp, #28]
    3392:	e7ba      	b.n	330a <_vfiprintf_r+0x14a>
    3394:	4342      	muls	r2, r0
    3396:	3401      	adds	r4, #1
    3398:	1852      	adds	r2, r2, r1
    339a:	2301      	movs	r3, #1
    339c:	e7f2      	b.n	3384 <_vfiprintf_r+0x1c4>
    339e:	3307      	adds	r3, #7
    33a0:	e7d5      	b.n	334e <_vfiprintf_r+0x18e>
    33a2:	ab05      	add	r3, sp, #20
    33a4:	9300      	str	r3, [sp, #0]
    33a6:	003a      	movs	r2, r7
    33a8:	4b12      	ldr	r3, [pc, #72]	; (33f4 <_vfiprintf_r+0x234>)
    33aa:	0029      	movs	r1, r5
    33ac:	0030      	movs	r0, r6
    33ae:	e000      	b.n	33b2 <_vfiprintf_r+0x1f2>
    33b0:	bf00      	nop
    33b2:	9003      	str	r0, [sp, #12]
    33b4:	9b03      	ldr	r3, [sp, #12]
    33b6:	3301      	adds	r3, #1
    33b8:	d1cc      	bne.n	3354 <_vfiprintf_r+0x194>
    33ba:	89bb      	ldrh	r3, [r7, #12]
    33bc:	065b      	lsls	r3, r3, #25
    33be:	d500      	bpl.n	33c2 <_vfiprintf_r+0x202>
    33c0:	e77b      	b.n	32ba <_vfiprintf_r+0xfa>
    33c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    33c4:	e77b      	b.n	32be <_vfiprintf_r+0xfe>
    33c6:	ab05      	add	r3, sp, #20
    33c8:	9300      	str	r3, [sp, #0]
    33ca:	003a      	movs	r2, r7
    33cc:	4b09      	ldr	r3, [pc, #36]	; (33f4 <_vfiprintf_r+0x234>)
    33ce:	0029      	movs	r1, r5
    33d0:	0030      	movs	r0, r6
    33d2:	f000 f87f 	bl	34d4 <_printf_i>
    33d6:	e7ec      	b.n	33b2 <_vfiprintf_r+0x1f2>
    33d8:	00003cf4 	.word	0x00003cf4
    33dc:	00003d34 	.word	0x00003d34
    33e0:	00003d14 	.word	0x00003d14
    33e4:	00003cd4 	.word	0x00003cd4
    33e8:	00003d3a 	.word	0x00003d3a
    33ec:	00003d3e 	.word	0x00003d3e
    33f0:	00000000 	.word	0x00000000
    33f4:	0000319b 	.word	0x0000319b

000033f8 <_printf_common>:
    33f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    33fa:	0015      	movs	r5, r2
    33fc:	9301      	str	r3, [sp, #4]
    33fe:	688a      	ldr	r2, [r1, #8]
    3400:	690b      	ldr	r3, [r1, #16]
    3402:	9000      	str	r0, [sp, #0]
    3404:	000c      	movs	r4, r1
    3406:	4293      	cmp	r3, r2
    3408:	da00      	bge.n	340c <_printf_common+0x14>
    340a:	0013      	movs	r3, r2
    340c:	0022      	movs	r2, r4
    340e:	602b      	str	r3, [r5, #0]
    3410:	3243      	adds	r2, #67	; 0x43
    3412:	7812      	ldrb	r2, [r2, #0]
    3414:	2a00      	cmp	r2, #0
    3416:	d001      	beq.n	341c <_printf_common+0x24>
    3418:	3301      	adds	r3, #1
    341a:	602b      	str	r3, [r5, #0]
    341c:	6823      	ldr	r3, [r4, #0]
    341e:	069b      	lsls	r3, r3, #26
    3420:	d502      	bpl.n	3428 <_printf_common+0x30>
    3422:	682b      	ldr	r3, [r5, #0]
    3424:	3302      	adds	r3, #2
    3426:	602b      	str	r3, [r5, #0]
    3428:	2706      	movs	r7, #6
    342a:	6823      	ldr	r3, [r4, #0]
    342c:	401f      	ands	r7, r3
    342e:	d027      	beq.n	3480 <_printf_common+0x88>
    3430:	0023      	movs	r3, r4
    3432:	3343      	adds	r3, #67	; 0x43
    3434:	781b      	ldrb	r3, [r3, #0]
    3436:	1e5a      	subs	r2, r3, #1
    3438:	4193      	sbcs	r3, r2
    343a:	6822      	ldr	r2, [r4, #0]
    343c:	0692      	lsls	r2, r2, #26
    343e:	d430      	bmi.n	34a2 <_printf_common+0xaa>
    3440:	0022      	movs	r2, r4
    3442:	9901      	ldr	r1, [sp, #4]
    3444:	3243      	adds	r2, #67	; 0x43
    3446:	9800      	ldr	r0, [sp, #0]
    3448:	9e08      	ldr	r6, [sp, #32]
    344a:	47b0      	blx	r6
    344c:	1c43      	adds	r3, r0, #1
    344e:	d025      	beq.n	349c <_printf_common+0xa4>
    3450:	2306      	movs	r3, #6
    3452:	6820      	ldr	r0, [r4, #0]
    3454:	682a      	ldr	r2, [r5, #0]
    3456:	68e1      	ldr	r1, [r4, #12]
    3458:	4003      	ands	r3, r0
    345a:	2500      	movs	r5, #0
    345c:	2b04      	cmp	r3, #4
    345e:	d103      	bne.n	3468 <_printf_common+0x70>
    3460:	1a8d      	subs	r5, r1, r2
    3462:	43eb      	mvns	r3, r5
    3464:	17db      	asrs	r3, r3, #31
    3466:	401d      	ands	r5, r3
    3468:	68a3      	ldr	r3, [r4, #8]
    346a:	6922      	ldr	r2, [r4, #16]
    346c:	4293      	cmp	r3, r2
    346e:	dd01      	ble.n	3474 <_printf_common+0x7c>
    3470:	1a9b      	subs	r3, r3, r2
    3472:	18ed      	adds	r5, r5, r3
    3474:	2700      	movs	r7, #0
    3476:	42bd      	cmp	r5, r7
    3478:	d120      	bne.n	34bc <_printf_common+0xc4>
    347a:	2000      	movs	r0, #0
    347c:	e010      	b.n	34a0 <_printf_common+0xa8>
    347e:	3701      	adds	r7, #1
    3480:	68e3      	ldr	r3, [r4, #12]
    3482:	682a      	ldr	r2, [r5, #0]
    3484:	1a9b      	subs	r3, r3, r2
    3486:	429f      	cmp	r7, r3
    3488:	dad2      	bge.n	3430 <_printf_common+0x38>
    348a:	0022      	movs	r2, r4
    348c:	2301      	movs	r3, #1
    348e:	3219      	adds	r2, #25
    3490:	9901      	ldr	r1, [sp, #4]
    3492:	9800      	ldr	r0, [sp, #0]
    3494:	9e08      	ldr	r6, [sp, #32]
    3496:	47b0      	blx	r6
    3498:	1c43      	adds	r3, r0, #1
    349a:	d1f0      	bne.n	347e <_printf_common+0x86>
    349c:	2001      	movs	r0, #1
    349e:	4240      	negs	r0, r0
    34a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    34a2:	2030      	movs	r0, #48	; 0x30
    34a4:	18e1      	adds	r1, r4, r3
    34a6:	3143      	adds	r1, #67	; 0x43
    34a8:	7008      	strb	r0, [r1, #0]
    34aa:	0021      	movs	r1, r4
    34ac:	1c5a      	adds	r2, r3, #1
    34ae:	3145      	adds	r1, #69	; 0x45
    34b0:	7809      	ldrb	r1, [r1, #0]
    34b2:	18a2      	adds	r2, r4, r2
    34b4:	3243      	adds	r2, #67	; 0x43
    34b6:	3302      	adds	r3, #2
    34b8:	7011      	strb	r1, [r2, #0]
    34ba:	e7c1      	b.n	3440 <_printf_common+0x48>
    34bc:	0022      	movs	r2, r4
    34be:	2301      	movs	r3, #1
    34c0:	321a      	adds	r2, #26
    34c2:	9901      	ldr	r1, [sp, #4]
    34c4:	9800      	ldr	r0, [sp, #0]
    34c6:	9e08      	ldr	r6, [sp, #32]
    34c8:	47b0      	blx	r6
    34ca:	1c43      	adds	r3, r0, #1
    34cc:	d0e6      	beq.n	349c <_printf_common+0xa4>
    34ce:	3701      	adds	r7, #1
    34d0:	e7d1      	b.n	3476 <_printf_common+0x7e>
	...

000034d4 <_printf_i>:
    34d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34d6:	b08b      	sub	sp, #44	; 0x2c
    34d8:	9206      	str	r2, [sp, #24]
    34da:	000a      	movs	r2, r1
    34dc:	3243      	adds	r2, #67	; 0x43
    34de:	9307      	str	r3, [sp, #28]
    34e0:	9005      	str	r0, [sp, #20]
    34e2:	9204      	str	r2, [sp, #16]
    34e4:	7e0a      	ldrb	r2, [r1, #24]
    34e6:	000c      	movs	r4, r1
    34e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    34ea:	2a6e      	cmp	r2, #110	; 0x6e
    34ec:	d100      	bne.n	34f0 <_printf_i+0x1c>
    34ee:	e08f      	b.n	3610 <_printf_i+0x13c>
    34f0:	d817      	bhi.n	3522 <_printf_i+0x4e>
    34f2:	2a63      	cmp	r2, #99	; 0x63
    34f4:	d02c      	beq.n	3550 <_printf_i+0x7c>
    34f6:	d808      	bhi.n	350a <_printf_i+0x36>
    34f8:	2a00      	cmp	r2, #0
    34fa:	d100      	bne.n	34fe <_printf_i+0x2a>
    34fc:	e099      	b.n	3632 <_printf_i+0x15e>
    34fe:	2a58      	cmp	r2, #88	; 0x58
    3500:	d054      	beq.n	35ac <_printf_i+0xd8>
    3502:	0026      	movs	r6, r4
    3504:	3642      	adds	r6, #66	; 0x42
    3506:	7032      	strb	r2, [r6, #0]
    3508:	e029      	b.n	355e <_printf_i+0x8a>
    350a:	2a64      	cmp	r2, #100	; 0x64
    350c:	d001      	beq.n	3512 <_printf_i+0x3e>
    350e:	2a69      	cmp	r2, #105	; 0x69
    3510:	d1f7      	bne.n	3502 <_printf_i+0x2e>
    3512:	6821      	ldr	r1, [r4, #0]
    3514:	681a      	ldr	r2, [r3, #0]
    3516:	0608      	lsls	r0, r1, #24
    3518:	d523      	bpl.n	3562 <_printf_i+0x8e>
    351a:	1d11      	adds	r1, r2, #4
    351c:	6019      	str	r1, [r3, #0]
    351e:	6815      	ldr	r5, [r2, #0]
    3520:	e025      	b.n	356e <_printf_i+0x9a>
    3522:	2a73      	cmp	r2, #115	; 0x73
    3524:	d100      	bne.n	3528 <_printf_i+0x54>
    3526:	e088      	b.n	363a <_printf_i+0x166>
    3528:	d808      	bhi.n	353c <_printf_i+0x68>
    352a:	2a6f      	cmp	r2, #111	; 0x6f
    352c:	d029      	beq.n	3582 <_printf_i+0xae>
    352e:	2a70      	cmp	r2, #112	; 0x70
    3530:	d1e7      	bne.n	3502 <_printf_i+0x2e>
    3532:	2220      	movs	r2, #32
    3534:	6809      	ldr	r1, [r1, #0]
    3536:	430a      	orrs	r2, r1
    3538:	6022      	str	r2, [r4, #0]
    353a:	e003      	b.n	3544 <_printf_i+0x70>
    353c:	2a75      	cmp	r2, #117	; 0x75
    353e:	d020      	beq.n	3582 <_printf_i+0xae>
    3540:	2a78      	cmp	r2, #120	; 0x78
    3542:	d1de      	bne.n	3502 <_printf_i+0x2e>
    3544:	0022      	movs	r2, r4
    3546:	2178      	movs	r1, #120	; 0x78
    3548:	3245      	adds	r2, #69	; 0x45
    354a:	7011      	strb	r1, [r2, #0]
    354c:	4a6c      	ldr	r2, [pc, #432]	; (3700 <_printf_i+0x22c>)
    354e:	e030      	b.n	35b2 <_printf_i+0xde>
    3550:	000e      	movs	r6, r1
    3552:	681a      	ldr	r2, [r3, #0]
    3554:	3642      	adds	r6, #66	; 0x42
    3556:	1d11      	adds	r1, r2, #4
    3558:	6019      	str	r1, [r3, #0]
    355a:	6813      	ldr	r3, [r2, #0]
    355c:	7033      	strb	r3, [r6, #0]
    355e:	2301      	movs	r3, #1
    3560:	e079      	b.n	3656 <_printf_i+0x182>
    3562:	0649      	lsls	r1, r1, #25
    3564:	d5d9      	bpl.n	351a <_printf_i+0x46>
    3566:	1d11      	adds	r1, r2, #4
    3568:	6019      	str	r1, [r3, #0]
    356a:	2300      	movs	r3, #0
    356c:	5ed5      	ldrsh	r5, [r2, r3]
    356e:	2d00      	cmp	r5, #0
    3570:	da03      	bge.n	357a <_printf_i+0xa6>
    3572:	232d      	movs	r3, #45	; 0x2d
    3574:	9a04      	ldr	r2, [sp, #16]
    3576:	426d      	negs	r5, r5
    3578:	7013      	strb	r3, [r2, #0]
    357a:	4b62      	ldr	r3, [pc, #392]	; (3704 <_printf_i+0x230>)
    357c:	270a      	movs	r7, #10
    357e:	9303      	str	r3, [sp, #12]
    3580:	e02f      	b.n	35e2 <_printf_i+0x10e>
    3582:	6820      	ldr	r0, [r4, #0]
    3584:	6819      	ldr	r1, [r3, #0]
    3586:	0605      	lsls	r5, r0, #24
    3588:	d503      	bpl.n	3592 <_printf_i+0xbe>
    358a:	1d08      	adds	r0, r1, #4
    358c:	6018      	str	r0, [r3, #0]
    358e:	680d      	ldr	r5, [r1, #0]
    3590:	e005      	b.n	359e <_printf_i+0xca>
    3592:	0640      	lsls	r0, r0, #25
    3594:	d5f9      	bpl.n	358a <_printf_i+0xb6>
    3596:	680d      	ldr	r5, [r1, #0]
    3598:	1d08      	adds	r0, r1, #4
    359a:	6018      	str	r0, [r3, #0]
    359c:	b2ad      	uxth	r5, r5
    359e:	4b59      	ldr	r3, [pc, #356]	; (3704 <_printf_i+0x230>)
    35a0:	2708      	movs	r7, #8
    35a2:	9303      	str	r3, [sp, #12]
    35a4:	2a6f      	cmp	r2, #111	; 0x6f
    35a6:	d018      	beq.n	35da <_printf_i+0x106>
    35a8:	270a      	movs	r7, #10
    35aa:	e016      	b.n	35da <_printf_i+0x106>
    35ac:	3145      	adds	r1, #69	; 0x45
    35ae:	700a      	strb	r2, [r1, #0]
    35b0:	4a54      	ldr	r2, [pc, #336]	; (3704 <_printf_i+0x230>)
    35b2:	9203      	str	r2, [sp, #12]
    35b4:	681a      	ldr	r2, [r3, #0]
    35b6:	6821      	ldr	r1, [r4, #0]
    35b8:	1d10      	adds	r0, r2, #4
    35ba:	6018      	str	r0, [r3, #0]
    35bc:	6815      	ldr	r5, [r2, #0]
    35be:	0608      	lsls	r0, r1, #24
    35c0:	d522      	bpl.n	3608 <_printf_i+0x134>
    35c2:	07cb      	lsls	r3, r1, #31
    35c4:	d502      	bpl.n	35cc <_printf_i+0xf8>
    35c6:	2320      	movs	r3, #32
    35c8:	4319      	orrs	r1, r3
    35ca:	6021      	str	r1, [r4, #0]
    35cc:	2710      	movs	r7, #16
    35ce:	2d00      	cmp	r5, #0
    35d0:	d103      	bne.n	35da <_printf_i+0x106>
    35d2:	2320      	movs	r3, #32
    35d4:	6822      	ldr	r2, [r4, #0]
    35d6:	439a      	bics	r2, r3
    35d8:	6022      	str	r2, [r4, #0]
    35da:	0023      	movs	r3, r4
    35dc:	2200      	movs	r2, #0
    35de:	3343      	adds	r3, #67	; 0x43
    35e0:	701a      	strb	r2, [r3, #0]
    35e2:	6863      	ldr	r3, [r4, #4]
    35e4:	60a3      	str	r3, [r4, #8]
    35e6:	2b00      	cmp	r3, #0
    35e8:	db5c      	blt.n	36a4 <_printf_i+0x1d0>
    35ea:	2204      	movs	r2, #4
    35ec:	6821      	ldr	r1, [r4, #0]
    35ee:	4391      	bics	r1, r2
    35f0:	6021      	str	r1, [r4, #0]
    35f2:	2d00      	cmp	r5, #0
    35f4:	d158      	bne.n	36a8 <_printf_i+0x1d4>
    35f6:	9e04      	ldr	r6, [sp, #16]
    35f8:	2b00      	cmp	r3, #0
    35fa:	d064      	beq.n	36c6 <_printf_i+0x1f2>
    35fc:	0026      	movs	r6, r4
    35fe:	9b03      	ldr	r3, [sp, #12]
    3600:	3642      	adds	r6, #66	; 0x42
    3602:	781b      	ldrb	r3, [r3, #0]
    3604:	7033      	strb	r3, [r6, #0]
    3606:	e05e      	b.n	36c6 <_printf_i+0x1f2>
    3608:	0648      	lsls	r0, r1, #25
    360a:	d5da      	bpl.n	35c2 <_printf_i+0xee>
    360c:	b2ad      	uxth	r5, r5
    360e:	e7d8      	b.n	35c2 <_printf_i+0xee>
    3610:	6809      	ldr	r1, [r1, #0]
    3612:	681a      	ldr	r2, [r3, #0]
    3614:	0608      	lsls	r0, r1, #24
    3616:	d505      	bpl.n	3624 <_printf_i+0x150>
    3618:	1d11      	adds	r1, r2, #4
    361a:	6019      	str	r1, [r3, #0]
    361c:	6813      	ldr	r3, [r2, #0]
    361e:	6962      	ldr	r2, [r4, #20]
    3620:	601a      	str	r2, [r3, #0]
    3622:	e006      	b.n	3632 <_printf_i+0x15e>
    3624:	0649      	lsls	r1, r1, #25
    3626:	d5f7      	bpl.n	3618 <_printf_i+0x144>
    3628:	1d11      	adds	r1, r2, #4
    362a:	6019      	str	r1, [r3, #0]
    362c:	6813      	ldr	r3, [r2, #0]
    362e:	8aa2      	ldrh	r2, [r4, #20]
    3630:	801a      	strh	r2, [r3, #0]
    3632:	2300      	movs	r3, #0
    3634:	9e04      	ldr	r6, [sp, #16]
    3636:	6123      	str	r3, [r4, #16]
    3638:	e054      	b.n	36e4 <_printf_i+0x210>
    363a:	681a      	ldr	r2, [r3, #0]
    363c:	1d11      	adds	r1, r2, #4
    363e:	6019      	str	r1, [r3, #0]
    3640:	6816      	ldr	r6, [r2, #0]
    3642:	2100      	movs	r1, #0
    3644:	6862      	ldr	r2, [r4, #4]
    3646:	0030      	movs	r0, r6
    3648:	f000 f91a 	bl	3880 <memchr>
    364c:	2800      	cmp	r0, #0
    364e:	d001      	beq.n	3654 <_printf_i+0x180>
    3650:	1b80      	subs	r0, r0, r6
    3652:	6060      	str	r0, [r4, #4]
    3654:	6863      	ldr	r3, [r4, #4]
    3656:	6123      	str	r3, [r4, #16]
    3658:	2300      	movs	r3, #0
    365a:	9a04      	ldr	r2, [sp, #16]
    365c:	7013      	strb	r3, [r2, #0]
    365e:	e041      	b.n	36e4 <_printf_i+0x210>
    3660:	6923      	ldr	r3, [r4, #16]
    3662:	0032      	movs	r2, r6
    3664:	9906      	ldr	r1, [sp, #24]
    3666:	9805      	ldr	r0, [sp, #20]
    3668:	9d07      	ldr	r5, [sp, #28]
    366a:	47a8      	blx	r5
    366c:	1c43      	adds	r3, r0, #1
    366e:	d043      	beq.n	36f8 <_printf_i+0x224>
    3670:	6823      	ldr	r3, [r4, #0]
    3672:	2500      	movs	r5, #0
    3674:	079b      	lsls	r3, r3, #30
    3676:	d40f      	bmi.n	3698 <_printf_i+0x1c4>
    3678:	9b09      	ldr	r3, [sp, #36]	; 0x24
    367a:	68e0      	ldr	r0, [r4, #12]
    367c:	4298      	cmp	r0, r3
    367e:	da3d      	bge.n	36fc <_printf_i+0x228>
    3680:	0018      	movs	r0, r3
    3682:	e03b      	b.n	36fc <_printf_i+0x228>
    3684:	0022      	movs	r2, r4
    3686:	2301      	movs	r3, #1
    3688:	3219      	adds	r2, #25
    368a:	9906      	ldr	r1, [sp, #24]
    368c:	9805      	ldr	r0, [sp, #20]
    368e:	9e07      	ldr	r6, [sp, #28]
    3690:	47b0      	blx	r6
    3692:	1c43      	adds	r3, r0, #1
    3694:	d030      	beq.n	36f8 <_printf_i+0x224>
    3696:	3501      	adds	r5, #1
    3698:	68e3      	ldr	r3, [r4, #12]
    369a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    369c:	1a9b      	subs	r3, r3, r2
    369e:	429d      	cmp	r5, r3
    36a0:	dbf0      	blt.n	3684 <_printf_i+0x1b0>
    36a2:	e7e9      	b.n	3678 <_printf_i+0x1a4>
    36a4:	2d00      	cmp	r5, #0
    36a6:	d0a9      	beq.n	35fc <_printf_i+0x128>
    36a8:	9e04      	ldr	r6, [sp, #16]
    36aa:	0028      	movs	r0, r5
    36ac:	0039      	movs	r1, r7
    36ae:	f7ff f857 	bl	2760 <__aeabi_uidivmod>
    36b2:	9b03      	ldr	r3, [sp, #12]
    36b4:	3e01      	subs	r6, #1
    36b6:	5c5b      	ldrb	r3, [r3, r1]
    36b8:	0028      	movs	r0, r5
    36ba:	7033      	strb	r3, [r6, #0]
    36bc:	0039      	movs	r1, r7
    36be:	f7fe ffc9 	bl	2654 <__udivsi3>
    36c2:	1e05      	subs	r5, r0, #0
    36c4:	d1f1      	bne.n	36aa <_printf_i+0x1d6>
    36c6:	2f08      	cmp	r7, #8
    36c8:	d109      	bne.n	36de <_printf_i+0x20a>
    36ca:	6823      	ldr	r3, [r4, #0]
    36cc:	07db      	lsls	r3, r3, #31
    36ce:	d506      	bpl.n	36de <_printf_i+0x20a>
    36d0:	6863      	ldr	r3, [r4, #4]
    36d2:	6922      	ldr	r2, [r4, #16]
    36d4:	4293      	cmp	r3, r2
    36d6:	dc02      	bgt.n	36de <_printf_i+0x20a>
    36d8:	2330      	movs	r3, #48	; 0x30
    36da:	3e01      	subs	r6, #1
    36dc:	7033      	strb	r3, [r6, #0]
    36de:	9b04      	ldr	r3, [sp, #16]
    36e0:	1b9b      	subs	r3, r3, r6
    36e2:	6123      	str	r3, [r4, #16]
    36e4:	9b07      	ldr	r3, [sp, #28]
    36e6:	aa09      	add	r2, sp, #36	; 0x24
    36e8:	9300      	str	r3, [sp, #0]
    36ea:	0021      	movs	r1, r4
    36ec:	9b06      	ldr	r3, [sp, #24]
    36ee:	9805      	ldr	r0, [sp, #20]
    36f0:	f7ff fe82 	bl	33f8 <_printf_common>
    36f4:	1c43      	adds	r3, r0, #1
    36f6:	d1b3      	bne.n	3660 <_printf_i+0x18c>
    36f8:	2001      	movs	r0, #1
    36fa:	4240      	negs	r0, r0
    36fc:	b00b      	add	sp, #44	; 0x2c
    36fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3700:	00003d56 	.word	0x00003d56
    3704:	00003d45 	.word	0x00003d45

00003708 <_sbrk_r>:
    3708:	2300      	movs	r3, #0
    370a:	b570      	push	{r4, r5, r6, lr}
    370c:	4c06      	ldr	r4, [pc, #24]	; (3728 <_sbrk_r+0x20>)
    370e:	0005      	movs	r5, r0
    3710:	0008      	movs	r0, r1
    3712:	6023      	str	r3, [r4, #0]
    3714:	f7fe fbfe 	bl	1f14 <_sbrk>
    3718:	1c43      	adds	r3, r0, #1
    371a:	d103      	bne.n	3724 <_sbrk_r+0x1c>
    371c:	6823      	ldr	r3, [r4, #0]
    371e:	2b00      	cmp	r3, #0
    3720:	d000      	beq.n	3724 <_sbrk_r+0x1c>
    3722:	602b      	str	r3, [r5, #0]
    3724:	bd70      	pop	{r4, r5, r6, pc}
    3726:	46c0      	nop			; (mov r8, r8)
    3728:	2000026c 	.word	0x2000026c

0000372c <__sread>:
    372c:	b570      	push	{r4, r5, r6, lr}
    372e:	000c      	movs	r4, r1
    3730:	250e      	movs	r5, #14
    3732:	5f49      	ldrsh	r1, [r1, r5]
    3734:	f000 f8b2 	bl	389c <_read_r>
    3738:	2800      	cmp	r0, #0
    373a:	db03      	blt.n	3744 <__sread+0x18>
    373c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    373e:	181b      	adds	r3, r3, r0
    3740:	6563      	str	r3, [r4, #84]	; 0x54
    3742:	bd70      	pop	{r4, r5, r6, pc}
    3744:	89a3      	ldrh	r3, [r4, #12]
    3746:	4a02      	ldr	r2, [pc, #8]	; (3750 <__sread+0x24>)
    3748:	4013      	ands	r3, r2
    374a:	81a3      	strh	r3, [r4, #12]
    374c:	e7f9      	b.n	3742 <__sread+0x16>
    374e:	46c0      	nop			; (mov r8, r8)
    3750:	ffffefff 	.word	0xffffefff

00003754 <__swrite>:
    3754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3756:	001f      	movs	r7, r3
    3758:	898b      	ldrh	r3, [r1, #12]
    375a:	0005      	movs	r5, r0
    375c:	000c      	movs	r4, r1
    375e:	0016      	movs	r6, r2
    3760:	05db      	lsls	r3, r3, #23
    3762:	d505      	bpl.n	3770 <__swrite+0x1c>
    3764:	230e      	movs	r3, #14
    3766:	5ec9      	ldrsh	r1, [r1, r3]
    3768:	2200      	movs	r2, #0
    376a:	2302      	movs	r3, #2
    376c:	f000 f874 	bl	3858 <_lseek_r>
    3770:	89a3      	ldrh	r3, [r4, #12]
    3772:	4a05      	ldr	r2, [pc, #20]	; (3788 <__swrite+0x34>)
    3774:	0028      	movs	r0, r5
    3776:	4013      	ands	r3, r2
    3778:	81a3      	strh	r3, [r4, #12]
    377a:	0032      	movs	r2, r6
    377c:	230e      	movs	r3, #14
    377e:	5ee1      	ldrsh	r1, [r4, r3]
    3780:	003b      	movs	r3, r7
    3782:	f000 f81f 	bl	37c4 <_write_r>
    3786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3788:	ffffefff 	.word	0xffffefff

0000378c <__sseek>:
    378c:	b570      	push	{r4, r5, r6, lr}
    378e:	000c      	movs	r4, r1
    3790:	250e      	movs	r5, #14
    3792:	5f49      	ldrsh	r1, [r1, r5]
    3794:	f000 f860 	bl	3858 <_lseek_r>
    3798:	89a3      	ldrh	r3, [r4, #12]
    379a:	1c42      	adds	r2, r0, #1
    379c:	d103      	bne.n	37a6 <__sseek+0x1a>
    379e:	4a05      	ldr	r2, [pc, #20]	; (37b4 <__sseek+0x28>)
    37a0:	4013      	ands	r3, r2
    37a2:	81a3      	strh	r3, [r4, #12]
    37a4:	bd70      	pop	{r4, r5, r6, pc}
    37a6:	2280      	movs	r2, #128	; 0x80
    37a8:	0152      	lsls	r2, r2, #5
    37aa:	4313      	orrs	r3, r2
    37ac:	81a3      	strh	r3, [r4, #12]
    37ae:	6560      	str	r0, [r4, #84]	; 0x54
    37b0:	e7f8      	b.n	37a4 <__sseek+0x18>
    37b2:	46c0      	nop			; (mov r8, r8)
    37b4:	ffffefff 	.word	0xffffefff

000037b8 <__sclose>:
    37b8:	b510      	push	{r4, lr}
    37ba:	230e      	movs	r3, #14
    37bc:	5ec9      	ldrsh	r1, [r1, r3]
    37be:	f000 f815 	bl	37ec <_close_r>
    37c2:	bd10      	pop	{r4, pc}

000037c4 <_write_r>:
    37c4:	b570      	push	{r4, r5, r6, lr}
    37c6:	0005      	movs	r5, r0
    37c8:	0008      	movs	r0, r1
    37ca:	0011      	movs	r1, r2
    37cc:	2200      	movs	r2, #0
    37ce:	4c06      	ldr	r4, [pc, #24]	; (37e8 <_write_r+0x24>)
    37d0:	6022      	str	r2, [r4, #0]
    37d2:	001a      	movs	r2, r3
    37d4:	f7fe fb76 	bl	1ec4 <_write>
    37d8:	1c43      	adds	r3, r0, #1
    37da:	d103      	bne.n	37e4 <_write_r+0x20>
    37dc:	6823      	ldr	r3, [r4, #0]
    37de:	2b00      	cmp	r3, #0
    37e0:	d000      	beq.n	37e4 <_write_r+0x20>
    37e2:	602b      	str	r3, [r5, #0]
    37e4:	bd70      	pop	{r4, r5, r6, pc}
    37e6:	46c0      	nop			; (mov r8, r8)
    37e8:	2000026c 	.word	0x2000026c

000037ec <_close_r>:
    37ec:	2300      	movs	r3, #0
    37ee:	b570      	push	{r4, r5, r6, lr}
    37f0:	4c06      	ldr	r4, [pc, #24]	; (380c <_close_r+0x20>)
    37f2:	0005      	movs	r5, r0
    37f4:	0008      	movs	r0, r1
    37f6:	6023      	str	r3, [r4, #0]
    37f8:	f7fe fb9e 	bl	1f38 <_close>
    37fc:	1c43      	adds	r3, r0, #1
    37fe:	d103      	bne.n	3808 <_close_r+0x1c>
    3800:	6823      	ldr	r3, [r4, #0]
    3802:	2b00      	cmp	r3, #0
    3804:	d000      	beq.n	3808 <_close_r+0x1c>
    3806:	602b      	str	r3, [r5, #0]
    3808:	bd70      	pop	{r4, r5, r6, pc}
    380a:	46c0      	nop			; (mov r8, r8)
    380c:	2000026c 	.word	0x2000026c

00003810 <_fstat_r>:
    3810:	2300      	movs	r3, #0
    3812:	b570      	push	{r4, r5, r6, lr}
    3814:	4c06      	ldr	r4, [pc, #24]	; (3830 <_fstat_r+0x20>)
    3816:	0005      	movs	r5, r0
    3818:	0008      	movs	r0, r1
    381a:	0011      	movs	r1, r2
    381c:	6023      	str	r3, [r4, #0]
    381e:	f7fe fb8e 	bl	1f3e <_fstat>
    3822:	1c43      	adds	r3, r0, #1
    3824:	d103      	bne.n	382e <_fstat_r+0x1e>
    3826:	6823      	ldr	r3, [r4, #0]
    3828:	2b00      	cmp	r3, #0
    382a:	d000      	beq.n	382e <_fstat_r+0x1e>
    382c:	602b      	str	r3, [r5, #0]
    382e:	bd70      	pop	{r4, r5, r6, pc}
    3830:	2000026c 	.word	0x2000026c

00003834 <_isatty_r>:
    3834:	2300      	movs	r3, #0
    3836:	b570      	push	{r4, r5, r6, lr}
    3838:	4c06      	ldr	r4, [pc, #24]	; (3854 <_isatty_r+0x20>)
    383a:	0005      	movs	r5, r0
    383c:	0008      	movs	r0, r1
    383e:	6023      	str	r3, [r4, #0]
    3840:	f7fe fb82 	bl	1f48 <_isatty>
    3844:	1c43      	adds	r3, r0, #1
    3846:	d103      	bne.n	3850 <_isatty_r+0x1c>
    3848:	6823      	ldr	r3, [r4, #0]
    384a:	2b00      	cmp	r3, #0
    384c:	d000      	beq.n	3850 <_isatty_r+0x1c>
    384e:	602b      	str	r3, [r5, #0]
    3850:	bd70      	pop	{r4, r5, r6, pc}
    3852:	46c0      	nop			; (mov r8, r8)
    3854:	2000026c 	.word	0x2000026c

00003858 <_lseek_r>:
    3858:	b570      	push	{r4, r5, r6, lr}
    385a:	0005      	movs	r5, r0
    385c:	0008      	movs	r0, r1
    385e:	0011      	movs	r1, r2
    3860:	2200      	movs	r2, #0
    3862:	4c06      	ldr	r4, [pc, #24]	; (387c <_lseek_r+0x24>)
    3864:	6022      	str	r2, [r4, #0]
    3866:	001a      	movs	r2, r3
    3868:	f7fe fb70 	bl	1f4c <_lseek>
    386c:	1c43      	adds	r3, r0, #1
    386e:	d103      	bne.n	3878 <_lseek_r+0x20>
    3870:	6823      	ldr	r3, [r4, #0]
    3872:	2b00      	cmp	r3, #0
    3874:	d000      	beq.n	3878 <_lseek_r+0x20>
    3876:	602b      	str	r3, [r5, #0]
    3878:	bd70      	pop	{r4, r5, r6, pc}
    387a:	46c0      	nop			; (mov r8, r8)
    387c:	2000026c 	.word	0x2000026c

00003880 <memchr>:
    3880:	b2c9      	uxtb	r1, r1
    3882:	1882      	adds	r2, r0, r2
    3884:	4290      	cmp	r0, r2
    3886:	d101      	bne.n	388c <memchr+0xc>
    3888:	2000      	movs	r0, #0
    388a:	4770      	bx	lr
    388c:	7803      	ldrb	r3, [r0, #0]
    388e:	428b      	cmp	r3, r1
    3890:	d0fb      	beq.n	388a <memchr+0xa>
    3892:	3001      	adds	r0, #1
    3894:	e7f6      	b.n	3884 <memchr+0x4>

00003896 <__malloc_lock>:
    3896:	4770      	bx	lr

00003898 <__malloc_unlock>:
    3898:	4770      	bx	lr
	...

0000389c <_read_r>:
    389c:	b570      	push	{r4, r5, r6, lr}
    389e:	0005      	movs	r5, r0
    38a0:	0008      	movs	r0, r1
    38a2:	0011      	movs	r1, r2
    38a4:	2200      	movs	r2, #0
    38a6:	4c06      	ldr	r4, [pc, #24]	; (38c0 <_read_r+0x24>)
    38a8:	6022      	str	r2, [r4, #0]
    38aa:	001a      	movs	r2, r3
    38ac:	f7fe fae8 	bl	1e80 <_read>
    38b0:	1c43      	adds	r3, r0, #1
    38b2:	d103      	bne.n	38bc <_read_r+0x20>
    38b4:	6823      	ldr	r3, [r4, #0]
    38b6:	2b00      	cmp	r3, #0
    38b8:	d000      	beq.n	38bc <_read_r+0x20>
    38ba:	602b      	str	r3, [r5, #0]
    38bc:	bd70      	pop	{r4, r5, r6, pc}
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	2000026c 	.word	0x2000026c
    38c4:	000001e6 	.word	0x000001e6
    38c8:	000001be 	.word	0x000001be
    38cc:	000001c2 	.word	0x000001c2
    38d0:	000001c6 	.word	0x000001c6
    38d4:	000001ca 	.word	0x000001ca
    38d8:	000001ce 	.word	0x000001ce
    38dc:	000001d2 	.word	0x000001d2
    38e0:	000001d6 	.word	0x000001d6
    38e4:	000001da 	.word	0x000001da
    38e8:	000001de 	.word	0x000001de
    38ec:	00000280 	.word	0x00000280
    38f0:	00000258 	.word	0x00000258
    38f4:	0000025e 	.word	0x0000025e
    38f8:	00000264 	.word	0x00000264
    38fc:	00000264 	.word	0x00000264
    3900:	0000026a 	.word	0x0000026a
    3904:	0000026a 	.word	0x0000026a
    3908:	0000026a 	.word	0x0000026a
    390c:	00000270 	.word	0x00000270
    3910:	00000276 	.word	0x00000276
    3914:	00000678 	.word	0x00000678
    3918:	00000678 	.word	0x00000678
    391c:	00000654 	.word	0x00000654
    3920:	00000678 	.word	0x00000678
    3924:	00000654 	.word	0x00000654
    3928:	0000063a 	.word	0x0000063a
    392c:	0000063a 	.word	0x0000063a
    3930:	00000678 	.word	0x00000678
    3934:	00000678 	.word	0x00000678
    3938:	00000678 	.word	0x00000678
    393c:	00000678 	.word	0x00000678
    3940:	00000678 	.word	0x00000678
    3944:	00000678 	.word	0x00000678
    3948:	00000678 	.word	0x00000678
    394c:	00000678 	.word	0x00000678
    3950:	00000678 	.word	0x00000678
    3954:	00000678 	.word	0x00000678
    3958:	00000678 	.word	0x00000678
    395c:	00000678 	.word	0x00000678
    3960:	00000678 	.word	0x00000678
    3964:	00000678 	.word	0x00000678
    3968:	00000678 	.word	0x00000678
    396c:	00000678 	.word	0x00000678
    3970:	00000678 	.word	0x00000678
    3974:	00000678 	.word	0x00000678
    3978:	00000678 	.word	0x00000678
    397c:	00000678 	.word	0x00000678
    3980:	00000678 	.word	0x00000678
    3984:	00000678 	.word	0x00000678
    3988:	00000678 	.word	0x00000678
    398c:	00000678 	.word	0x00000678
    3990:	00000678 	.word	0x00000678
    3994:	00000678 	.word	0x00000678
    3998:	00000678 	.word	0x00000678
    399c:	00000678 	.word	0x00000678
    39a0:	00000678 	.word	0x00000678
    39a4:	00000678 	.word	0x00000678
    39a8:	00000678 	.word	0x00000678
    39ac:	00000678 	.word	0x00000678
    39b0:	00000678 	.word	0x00000678
    39b4:	00000678 	.word	0x00000678
    39b8:	00000678 	.word	0x00000678
    39bc:	00000678 	.word	0x00000678
    39c0:	00000678 	.word	0x00000678
    39c4:	00000678 	.word	0x00000678
    39c8:	00000678 	.word	0x00000678
    39cc:	00000678 	.word	0x00000678
    39d0:	00000678 	.word	0x00000678
    39d4:	00000678 	.word	0x00000678
    39d8:	00000678 	.word	0x00000678
    39dc:	00000678 	.word	0x00000678
    39e0:	00000678 	.word	0x00000678
    39e4:	00000678 	.word	0x00000678
    39e8:	00000678 	.word	0x00000678
    39ec:	00000678 	.word	0x00000678
    39f0:	00000678 	.word	0x00000678
    39f4:	00000678 	.word	0x00000678
    39f8:	00000678 	.word	0x00000678
    39fc:	00000678 	.word	0x00000678
    3a00:	00000678 	.word	0x00000678
    3a04:	00000678 	.word	0x00000678
    3a08:	00000678 	.word	0x00000678
    3a0c:	00000678 	.word	0x00000678
    3a10:	00000678 	.word	0x00000678
    3a14:	00000654 	.word	0x00000654
    3a18:	00000654 	.word	0x00000654
    3a1c:	0000065c 	.word	0x0000065c
    3a20:	0000065c 	.word	0x0000065c
    3a24:	0000065c 	.word	0x0000065c
    3a28:	0000065c 	.word	0x0000065c
    3a2c:	42000800 	.word	0x42000800
    3a30:	42000c00 	.word	0x42000c00
    3a34:	42001000 	.word	0x42001000
    3a38:	42001400 	.word	0x42001400
    3a3c:	42001800 	.word	0x42001800
    3a40:	42001c00 	.word	0x42001c00
    3a44:	0000160e 	.word	0x0000160e
    3a48:	0000160a 	.word	0x0000160a
    3a4c:	0000160a 	.word	0x0000160a
    3a50:	0000166c 	.word	0x0000166c
    3a54:	0000166c 	.word	0x0000166c
    3a58:	00001622 	.word	0x00001622
    3a5c:	00001614 	.word	0x00001614
    3a60:	00001628 	.word	0x00001628
    3a64:	0000165a 	.word	0x0000165a
    3a68:	0000182c 	.word	0x0000182c
    3a6c:	0000180c 	.word	0x0000180c
    3a70:	0000180c 	.word	0x0000180c
    3a74:	00001898 	.word	0x00001898
    3a78:	0000181e 	.word	0x0000181e
    3a7c:	0000183a 	.word	0x0000183a
    3a80:	00001810 	.word	0x00001810
    3a84:	00001848 	.word	0x00001848
    3a88:	00001888 	.word	0x00001888
    3a8c:	696c6176 	.word	0x696c6176
    3a90:	00000064 	.word	0x00000064
    3a94:	61766e69 	.word	0x61766e69
    3a98:	0064696c 	.word	0x0064696c
    3a9c:	65746e45 	.word	0x65746e45
    3aa0:	20646572 	.word	0x20646572
    3aa4:	746f6f42 	.word	0x746f6f42
    3aa8:	64616f6c 	.word	0x64616f6c
    3aac:	6d207265 	.word	0x6d207265
    3ab0:	0a65646f 	.word	0x0a65646f
    3ab4:	0000000d 	.word	0x0000000d
    3ab8:	73616c46 	.word	0x73616c46
    3abc:	68432068 	.word	0x68432068
    3ac0:	6e207069 	.word	0x6e207069
    3ac4:	6620746f 	.word	0x6620746f
    3ac8:	646e756f 	.word	0x646e756f
    3acc:	00000d0a 	.word	0x00000d0a
    3ad0:	35325441 	.word	0x35325441
    3ad4:	72205844 	.word	0x72205844
    3ad8:	20646165 	.word	0x20646165
    3adc:	6c696166 	.word	0x6c696166
    3ae0:	61206465 	.word	0x61206465
    3ae4:	61702074 	.word	0x61702074
    3ae8:	30206567 	.word	0x30206567
    3aec:	0d782578 	.word	0x0d782578
    3af0:	0000000a 	.word	0x0000000a
    3af4:	73616c46 	.word	0x73616c46
    3af8:	74732068 	.word	0x74732068
    3afc:	73757461 	.word	0x73757461
    3b00:	6d49203a 	.word	0x6d49203a
    3b04:	31656761 	.word	0x31656761
    3b08:	7325203a 	.word	0x7325203a
    3b0c:	6d49202c 	.word	0x6d49202c
    3b10:	32656761 	.word	0x32656761
    3b14:	7325203a 	.word	0x7325203a
    3b18:	00000a0d 	.word	0x00000a0d
    3b1c:	67616d49 	.word	0x67616d49
    3b20:	56203165 	.word	0x56203165
    3b24:	69737265 	.word	0x69737265
    3b28:	203a6e6f 	.word	0x203a6e6f
    3b2c:	202c6425 	.word	0x202c6425
    3b30:	657a6953 	.word	0x657a6953
    3b34:	6425203a 	.word	0x6425203a
    3b38:	6843202c 	.word	0x6843202c
    3b3c:	736b6365 	.word	0x736b6365
    3b40:	203a6d75 	.word	0x203a6d75
    3b44:	0d786c25 	.word	0x0d786c25
    3b48:	0000000a 	.word	0x0000000a
    3b4c:	67616d49 	.word	0x67616d49
    3b50:	56203265 	.word	0x56203265
    3b54:	69737265 	.word	0x69737265
    3b58:	203a6e6f 	.word	0x203a6e6f
    3b5c:	202c6425 	.word	0x202c6425
    3b60:	657a6953 	.word	0x657a6953
    3b64:	6425203a 	.word	0x6425203a
    3b68:	6843202c 	.word	0x6843202c
    3b6c:	736b6365 	.word	0x736b6365
    3b70:	203a6d75 	.word	0x203a6d75
    3b74:	0d786c25 	.word	0x0d786c25
    3b78:	0000000a 	.word	0x0000000a
    3b7c:	6b72614d 	.word	0x6b72614d
    3b80:	4e206465 	.word	0x4e206465
    3b84:	69204d56 	.word	0x69204d56
    3b88:	6567616d 	.word	0x6567616d
    3b8c:	766e6920 	.word	0x766e6920
    3b90:	64696c61 	.word	0x64696c61
    3b94:	0000000d 	.word	0x0000000d
    3b98:	63656843 	.word	0x63656843
    3b9c:	6d75736b 	.word	0x6d75736b
    3ba0:	72657620 	.word	0x72657620
    3ba4:	65696669 	.word	0x65696669
    3ba8:	00000d64 	.word	0x00000d64
    3bac:	6b72614d 	.word	0x6b72614d
    3bb0:	4e206465 	.word	0x4e206465
    3bb4:	69204d56 	.word	0x69204d56
    3bb8:	6567616d 	.word	0x6567616d
    3bbc:	6c617620 	.word	0x6c617620
    3bc0:	000d6469 	.word	0x000d6469
    3bc4:	63656843 	.word	0x63656843
    3bc8:	6d75736b 	.word	0x6d75736b
    3bcc:	72657620 	.word	0x72657620
    3bd0:	20796669 	.word	0x20796669
    3bd4:	6c696166 	.word	0x6c696166
    3bd8:	202e6465 	.word	0x202e6465
    3bdc:	69797254 	.word	0x69797254
    3be0:	4920676e 	.word	0x4920676e
    3be4:	6567616d 	.word	0x6567616d
    3be8:	00000d32 	.word	0x00000d32
    3bec:	63656843 	.word	0x63656843
    3bf0:	6d75736b 	.word	0x6d75736b
    3bf4:	72657620 	.word	0x72657620
    3bf8:	20796669 	.word	0x20796669
    3bfc:	6c696166 	.word	0x6c696166
    3c00:	0d2e6465 	.word	0x0d2e6465
    3c04:	00000000 	.word	0x00000000
    3c08:	74697845 	.word	0x74697845
    3c0c:	20676e69 	.word	0x20676e69
    3c10:	746f6f42 	.word	0x746f6f42
    3c14:	64616f6c 	.word	0x64616f6c
    3c18:	6d207265 	.word	0x6d207265
    3c1c:	0a65646f 	.word	0x0a65646f
    3c20:	0000000d 	.word	0x0000000d
    3c24:	35325441 	.word	0x35325441
    3c28:	73205844 	.word	0x73205844
    3c2c:	7065656c 	.word	0x7065656c
    3c30:	69616620 	.word	0x69616620
    3c34:	0d64656c 	.word	0x0d64656c
    3c38:	00000000 	.word	0x00000000
    3c3c:	2077654e 	.word	0x2077654e
    3c40:	67616d69 	.word	0x67616d69
    3c44:	68432065 	.word	0x68432065
    3c48:	736b6365 	.word	0x736b6365
    3c4c:	203a6d75 	.word	0x203a6d75
    3c50:	0d786c25 	.word	0x0d786c25
    3c54:	0000000a 	.word	0x0000000a
    3c58:	67616d49 	.word	0x67616d49
    3c5c:	00003165 	.word	0x00003165
    3c60:	67616d49 	.word	0x67616d49
    3c64:	00003265 	.word	0x00003265
    3c68:	70657250 	.word	0x70657250
    3c6c:	6e697261 	.word	0x6e697261
    3c70:	73252067 	.word	0x73252067
    3c74:	616c4620 	.word	0x616c4620
    3c78:	74206873 	.word	0x74206873
    3c7c:	564e206f 	.word	0x564e206f
    3c80:	7277204d 	.word	0x7277204d
    3c84:	0d657469 	.word	0x0d657469
    3c88:	0000000a 	.word	0x0000000a
    3c8c:	656e6f44 	.word	0x656e6f44
    3c90:	6d766e20 	.word	0x6d766e20
    3c94:	61726520 	.word	0x61726520
    3c98:	000d6573 	.word	0x000d6573
    3c9c:	35325441 	.word	0x35325441
    3ca0:	72205844 	.word	0x72205844
    3ca4:	20646165 	.word	0x20646165
    3ca8:	6c696166 	.word	0x6c696166
    3cac:	61206465 	.word	0x61206465
    3cb0:	61702074 	.word	0x61702074
    3cb4:	30206567 	.word	0x30206567
    3cb8:	786c2578 	.word	0x786c2578
    3cbc:	00000a0d 	.word	0x00000a0d
    3cc0:	656e6f44 	.word	0x656e6f44
    3cc4:	6d766e20 	.word	0x6d766e20
    3cc8:	69727720 	.word	0x69727720
    3ccc:	000d6574 	.word	0x000d6574

00003cd0 <_global_impure_ptr>:
    3cd0:	20000008                                ... 

00003cd4 <__sf_fake_stderr>:
	...

00003cf4 <__sf_fake_stdin>:
	...

00003d14 <__sf_fake_stdout>:
	...
    3d34:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3d44:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3d54:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3d64:	00006665                                ef..

00003d68 <_init>:
    3d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d6a:	46c0      	nop			; (mov r8, r8)
    3d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d6e:	bc08      	pop	{r3}
    3d70:	469e      	mov	lr, r3
    3d72:	4770      	bx	lr

00003d74 <__init_array_start>:
    3d74:	000000dd 	.word	0x000000dd

00003d78 <_fini>:
    3d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d7a:	46c0      	nop			; (mov r8, r8)
    3d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d7e:	bc08      	pop	{r3}
    3d80:	469e      	mov	lr, r3
    3d82:	4770      	bx	lr

00003d84 <__fini_array_start>:
    3d84:	000000b5 	.word	0x000000b5
